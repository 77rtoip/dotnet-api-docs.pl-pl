<Type Name="DirectoryEntry" FullName="System.DirectoryServices.DirectoryEntry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68633a7107600f33cd86951e0b7abae38448384c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30452691" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DirectoryEntry : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DirectoryEntry extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.DirectoryEntry" />
  <TypeSignature Language="VB.NET" Value="Public Class DirectoryEntry&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class DirectoryEntry : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.DirectoryServices.Design.DirectoryEntryConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.DirectoryServices.DSDescription("DirectoryEntryDesc")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.DirectoryServices.DirectoryEntry" /> Klasa hermetyzuje węzeł lub obiekt w hierarchii usługi Active Directory.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa używana do powiązanie do obiektów, lub odczytywanie i aktualizowanie atrybutów. <xref:System.DirectoryServices.DirectoryEntry>, wraz z klasy pomocy zapewnia obsługę cyklu życia zarządzania i nawigacja metody. Obejmują one tworzenie, usuwanie, zmiana nazwy, przeniesienie węzła podrzędnego i wyliczania elementów podrzędnych. Po zmodyfikowaniu węzła musi zatwierdzić zmiany w kolejności ich do zapisania do drzewa. Aby uzyskać więcej informacji, zobacz <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> właściwości.  
  
 <xref:System.DirectoryServices.DirectoryEntry> Umożliwia dostęp do wpisów regularnych i niektórych, ale nie wszystkich informacji z wpisów schematu.  
  
 Hierarchia usług domenowych w usłudze Active Directory zawiera do kilku tysięcy węzłów. Każdy węzeł reprezentuje obiekt, np. z drukarką sieciową lub użytkownika w domenie. Sieci firmowe stale zmienić nowi pracownicy są dzierżawione i obiekty, takie jak drukarek sieciowych i komputery są dodawane. Technologia Active Directory interfejsy ADSI (Service) udostępnia sposobów programowego dodawania tych obiektów do drzewa katalogów.  
  
 Aby utworzyć wpis katalogu w hierarchii, należy użyć <xref:System.DirectoryServices.DirectoryEntry.Children%2A> właściwości. <xref:System.DirectoryServices.DirectoryEntry.Children%2A> Właściwość jest kolekcja, która zapewnia <xref:System.DirectoryServices.DirectoryEntries.Add%2A> — metoda, za pomocą którego Dodaj węzeł do kolekcji bezpośrednio poniżej węzła nadrzędnego, które obecnie są powiązane. Podczas dodawania węzła do kolekcji, należy określić nazwę dla nowego węzła i nazwy szablonu schematu, który ma być skojarzony z węzłem. Na przykład można użyć schematu zatytułowany "Komputer" Aby dodać nowe komputery w hierarchii.  
  
 Ta klasa zawiera także buforowania atrybutów, które mogą być przydatne w przypadku optymalizacji ruchu sieciowego. Aby użyć atrybutu buforowania, zobacz <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> właściwości.  
  
 Klasy związane z <xref:System.DirectoryServices.DirectoryEntry> składnika mogą być używane z każdego z dostawców usługi Active Directory Domain Services. Niektóre z bieżącego dostawcy są Internet Information Services (IIS), dostęp protokołu LDAP (Lightweight Directory), Novell katalogu usługi (usługi NDS systemu NetWare) i Windows NT.  
  
> [!NOTE]
>  Zakłada się, że posiadanie ogólnej wiedzy z usług domenowych w usłudze Active Directory przed użyciem tej klasy. Aby uzyskać więcej informacji, zobacz <xref:System.DirectoryServices?displayProperty=nameWithType> Omówienie przestrzeni nazw.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
      <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />
    </permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DirectoryServices.DirectoryEntry" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DirectoryServices.DirectoryEntry" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (object adsObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object adsObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (adsObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::Object ^ adsObject);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adsObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="adsObject">Nazwa natywnej do powiązania obiektu usług domenowych w usłudze Active Directory.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DirectoryServices.DirectoryEntry" /> klasy, która jest powiązana z natywnego określony obiekt usług domenowych w usłudze Active Directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor umożliwia programowi na używanie metod i właściwości <xref:System.DirectoryServices.DirectoryEntry> klasy natywnego obiektu usług domenowych w usłudze Active Directory, który implementuje interfejs IAD za pośrednictwem natywnego interfejsu API. Aby uzyskać więcej informacji na temat interfejsu IAD, zobacz temat [IAD](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) w bibliotece MSDN pod [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka, w którym można powiązać <see cref="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String)" /> do katalogu. <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> Właściwość jest inicjowana na tę wartość.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DirectoryServices.DirectoryEntry" /> klasy, która wiąże to wystąpienie węzła w usługach domenowych w usłudze Active Directory znajduje się w określonej ścieżce.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład wiąże <xref:System.DirectoryServices.DirectoryEntry> do wpisu w katalogu w określonej ścieżce, a następnie wyświetla obiektu <xref:System.DirectoryServices.DirectoryEntry.Path%2A> właściwości każdego wpisu podrzędny określonego węzła <xref:System.DirectoryServices.DirectoryEntry.Children%2A> właściwości.  
  
```vb  
Public Class PrintChildren  
  
    'Entry point which delegates to C-style main Private Function.  
    Public Overloads Shared Sub Main()  
        Main(System.Environment.GetCommandLineArgs())  
    End Sub  
  
    Overloads Public Shared Sub Main(args() As String)  
        Dim objDE As DirectoryEntry  
        Dim strPath As String = "LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com"  
        If args.Length > 0 Then  
            strPath = args(1)  
        End If   
        ' Create a new DirectoryEntry with the given path.  
        objDE = New DirectoryEntry(strPath)  
  
        Dim objChildDE As DirectoryEntry  
        For Each objChildDE In  objDE.Children  
            Console.WriteLine(objChildDE.Path)  
        Next objChildDE  
    End Sub 'Main  
End Class 'PrintChildren  
  
```  
  
```csharp  
public class PrintChildren{  
   public static void Main(String[] args)  
   {  
      DirectoryEntry objDE;  
      String strPath="LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com";  
      if(args.Length>0)strPath=args[1];  
  
      // Create a new DirectoryEntry with the given path.  
      objDE=new DirectoryEntry(strPath);  
  
      foreach(DirectoryEntry objChildDE in objDE.Children)  
        Console.WriteLine(objChildDE.Path);  
   }  
 }  
  
```  
  
```cpp#  
int main()  
{  
    String^ args[] = Environment::GetCommandLineArgs();  
    DirectoryEntry^ objDE;  
    String^ strPath = "LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com";  
    if(args->Length>1)  
    {  
        strPath=args[1];  
    }  
  
    // Create a new DirectoryEntry with the given path.  
    objDE = gcnew DirectoryEntry(strPath);  
  
    System::Collections::IEnumerator^ enum0 = objDE->Children->GetEnumerator();  
    while (enum0->MoveNext())  
    {  
        DirectoryEntry^ objChildDE = safe_cast<DirectoryEntry^>(enum0->Current);  
        Console::WriteLine(objChildDE->Path);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (string path, string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, username As String, password As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::String ^ path, System::String ^ username, System::String ^ password);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka tego <see cref="T:System.DirectoryServices.DirectoryEntry" />. <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> Właściwość jest inicjowana na tę wartość.</param>
        <param name="username">Nazwa użytkownika używana podczas uwierzytelniania klienta. <see cref="P:System.DirectoryServices.DirectoryEntry.Username" /> Właściwość jest inicjowana na tę wartość.</param>
        <param name="password">Hasło do użycia podczas uwierzytelniania klienta. <see cref="P:System.DirectoryServices.DirectoryEntry.Password" /> Właściwość jest inicjowana na tę wartość.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DirectoryServices.DirectoryEntry" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (string path, string username, string password, System.DirectoryServices.AuthenticationTypes authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string username, string password, valuetype System.DirectoryServices.AuthenticationTypes authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, username As String, password As String, authenticationType As AuthenticationTypes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::String ^ path, System::String ^ username, System::String ^ password, System::DirectoryServices::AuthenticationTypes authenticationType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="authenticationType" Type="System.DirectoryServices.AuthenticationTypes" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka tego <see cref="T:System.DirectoryServices.DirectoryEntry" />. <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> Właściwość jest inicjowana na tę wartość.</param>
        <param name="username">Nazwa użytkownika używana podczas uwierzytelniania klienta. <see cref="P:System.DirectoryServices.DirectoryEntry.Username" /> Właściwość jest inicjowana na tę wartość.</param>
        <param name="password">Hasło do użycia podczas uwierzytelniania klienta. <see cref="P:System.DirectoryServices.DirectoryEntry.Password" /> Właściwość jest inicjowana na tę wartość.</param>
        <param name="authenticationType">Jeden z <see cref="T:System.DirectoryServices.AuthenticationTypes" /> wartości. <see cref="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" /> Właściwość jest inicjowana na tę wartość.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DirectoryServices.DirectoryEntry" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Path" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Username" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Password" />
        <altmember cref="T:System.DirectoryServices.AuthenticationTypes" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationType">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.AuthenticationTypes AuthenticationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DirectoryServices.AuthenticationTypes AuthenticationType" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationType As AuthenticationTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::AuthenticationTypes AuthenticationType { System::DirectoryServices::AuthenticationTypes get(); void set(System::DirectoryServices::AuthenticationTypes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSAuthenticationType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.AuthenticationTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ uwierzytelniania do użycia.</summary>
        <value>Jeden z <see cref="T:System.DirectoryServices.AuthenticationTypes" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], wartością domyślną jest <xref:System.DirectoryServices.AuthenticationTypes.None>. Począwszy od [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], wartością domyślną jest <xref:System.DirectoryServices.AuthenticationTypes.Secure>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AuthenticationTypes" />
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntries Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntries Children" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As DirectoryEntries" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntries ^ Children { System::DirectoryServices::DirectoryEntries ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSChildren")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntries</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt podrzędny wpisy ten węzeł w hierarchii usługi Active Directory.</summary>
        <value>A <see cref="T:System.DirectoryServices.DirectoryEntries" /> obiekt zawierający wpisy podrzędne tego węzła w hierarchii usługi Active Directory.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wpisy podrzędne są tylko bezpośrednie elementy podrzędne tego węzła.  
  
 Ta właściwość służy do znajdowania, pobrać lub utworzyć wpis katalogu w hierarchii. Ta właściwość jest zestawem oraz funkcje iteracji zwykle zapewnia <xref:System.DirectoryServices.DirectoryEntries.Add%2A> — metoda, za pomocą którego Dodaj węzeł do kolekcji bezpośrednio poniżej węzła nadrzędnego, które obecnie są powiązane. Podczas dodawania węzła do kolekcji, należy określić nazwę dla nowego węzła i nazwy szablonu schematu, który ma być skojarzony z węzłem. Na przykład można użyć schematu zatytułowany "Komputer" Aby dodać nowe komputery w hierarchii.  
  
> [!NOTE]
>  Domyślnie zmian lokalnie do pamięci podręcznej. Po zmodyfikowaniu lub Dodaj węzeł, należy wywołać <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> metodę, aby zatwierdzić zmiany w kolejności ich do zapisania do drzewa. Jeśli należy wywołać <xref:System.DirectoryServices.DirectoryEntry.RefreshCache> przed wywołaniem <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, wszystkie Niewprowadzone zmiany pamięci podręcznej właściwości zostaną utracone. Aby uzyskać więcej informacji, zobacz <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> i <xref:System.DirectoryServices.DirectoryEntry.RefreshCache> metod i <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby pobrać Wpisy podrzędne.</permission>
        <altmember cref="T:System.DirectoryServices.DirectoryEntries" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu i zwalnia wszystkie zasoby systemu, które są skojarzone z danym składnikiem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę w celu zwolnienia zasobów systemowych niezarządzane, bez oczekiwania na wyrzucanie elementów bezużytecznych.  
  
 Po wywołaniu <xref:System.DirectoryServices.DirectoryEntry.Close%2A>, jakichkolwiek działań na <xref:System.DirectoryServices.DirectoryEntry> może zgłaszać wyjątków.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitChanges">
      <MemberSignature Language="C#" Value="public void CommitChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CommitChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje zmiany wprowadzone do wpisu w katalogu w magazynie katalogu źródłowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie właściwości zmiany lokalnie do pamięci podręcznej, a wartości właściwości do odczytu są buforowane, po pierwszym odczytu. Aby uzyskać więcej informacji, zobacz <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>.  
  
 Zmiany wprowadzone w pamięci podręcznej zawierają zmiany właściwości, a także wywołania <xref:System.DirectoryServices.DirectoryEntries.Add%2A> (Jeśli to jest nowo utworzony wpis).  
  
> [!CAUTION]
>  Jeśli należy wywołać <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> przed wywołaniem <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, wszystkie Niewprowadzone zmiany pamięci podręcznej właściwości zostaną utracone.  
  
## <a name="security"></a>Zabezpieczenia  
  
-   Użyj <xref:System.DirectoryServices.DirectoryServicesPermission> klasy do odczytu, zapisu, usuwanie, zmiana i dodawanie w hierarchii usługi Active Directory. Wyliczenie skojarzone: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess>.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby zatwierdzić zmiany.</permission>
        <altmember cref="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy kopię tego wpisu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry CopyTo(class System.DirectoryServices.DirectoryEntry newParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (newParent As DirectoryEntry) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ CopyTo(System::DirectoryServices::DirectoryEntry ^ newParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
      </Parameters>
      <Docs>
        <param name="newParent">Nazwa wyróżniająca <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu, który ma być nadrzędną dla kopii, która jest tworzona.</param>
        <summary>Tworzy kopię tego wpisu jako element podrzędny określonego elementu nadrzędnego.</summary>
        <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiekt, który reprezentuje kopię tego wpisu jako element podrzędny z nowym rekordem nadrzędnym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> jest `true`, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> dla nowego obiektu, aby wykonać kopię trwałych.  
  
 Dostawca dostępu protokołu LDAP (Lightweight Directory) nie obsługuje obecnie <xref:System.DirectoryServices.DirectoryEntry.CopyTo%28System.DirectoryServices.DirectoryEntry%29> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Określony <see cref="T:System.DirectoryServices.DirectoryEntry" /> nie jest kontenerem.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby utworzyć kopię określonego <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry CopyTo(class System.DirectoryServices.DirectoryEntry newParent, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (newParent As DirectoryEntry, newName As String) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ CopyTo(System::DirectoryServices::DirectoryEntry ^ newParent, System::String ^ newName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newParent">Nazwa Wyróżniająca z <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu, który ma być nadrzędną dla kopii, która jest tworzona.</param>
        <param name="newName">Nazwa kopii tego wpisu.</param>
        <summary>Tworzy kopię tego <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu jako element podrzędny określonego elementu nadrzędnego <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu o określonej nazwie nowe.</summary>
        <returns>Zmieniono nazwę kopię tego wpisu jako element podrzędny określonego elementu nadrzędnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawca dostępu protokołu LDAP (Lightweight Directory) nie obsługuje obecnie tej metody.  
  
 Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> jest `true`, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> dla nowego obiektu, aby wykonać kopię trwałych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Określony <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu nie jest kontenerem.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby sporządzić kopię zapisu.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="DeleteTree">
      <MemberSignature Language="C#" Value="public void DeleteTree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteTree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.DeleteTree" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteTree ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteTree();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa ten wpis i jego całą poddrzewo z hierarchii usług domenowych w usłudze Active Directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawców dostarczanych przez system interfejsy usługi Active Directory (ADSI) tylko dostępu protokołu LDAP (Lightweight Directory) obsługuje obecnie tej operacji.  
  
> [!CAUTION]
>  Zapis i jego całą poddrzewo są usuwane z hierarchii usług domenowych w usłudze Active Directory.  
  
## <a name="security"></a>Zabezpieczenia  
  
-   Użyj <xref:System.DirectoryServices.DirectoryServicesPermission> usuwania wpisów z hierarchii usług domenowych w usłudze Active Directory. Wyliczenie skojarzone: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Określony <see cref="T:System.DirectoryServices.DirectoryEntry" /> nie jest kontenerem.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby usunąć wpis i jego elementów podrzędnych.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Usuwa zasoby (inne niż pamięci), które są używane przez <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną <xref:System.ComponentModel.Component.Dispose%2A> — metoda i <xref:System.Object.Finalize%2A> metody. <xref:System.ComponentModel.Component.Dispose%2A> wywołuje chronioną metodę <xref:System.DirectoryServices.DirectoryEntry.Dispose%2A> metody z `disposing` ustawiono parametr `true`. <xref:System.Object.Finalize%2A> wywołuje <xref:System.ComponentModel.Component.Dispose%2A> z `disposing` ustawioną `false`.  
  
 Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby, które są przechowywane przez wszelkie obiekty zarządzane przez to <xref:System.DirectoryServices.DirectoryEntry> obiektu odwołania. Ta metoda wywołuje <xref:System.ComponentModel.Component.Dispose%2A> metody każdego odwołuje się do obiektu.  
  
 Aby uzyskać więcej informacji na temat <xref:System.ComponentModel.Component.Dispose%2A> i <xref:System.Object.Finalize%2A> metod, zobacz [przesłaniania metody Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.ComponentModel.Component.Dispose" /> można wywoływać wielokrotnie przez inne obiekty. W przypadku przesłaniania <see cref="M:System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)" />, nie odwołują się obiekty, które zostały wcześniej zlikwidowane w wywołaniu wcześniejszych <see cref="M:System.ComponentModel.Component.Dispose" />. Aby uzyskać więcej informacji na temat sposobu wdrażania <see cref="M:System.ComponentModel.Component.Dispose" />, zobacz [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</para>
        </block>
        <altmember cref="M:System.ComponentModel.Component.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka zapisu, aby sprawdzić.</param>
        <summary>Określa, czy określona ścieżka reprezentuje rzeczywisty wpis w usłudze katalogowej.</summary>
        <returns>
          <see langword="true" /> Jeśli określona ścieżka reprezentuje prawidłowy wpis w usłudze katalogowej; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie przyjmuje jeden argument i określa, czy ścieżka odnosi się do prawidłowej <xref:System.DirectoryServices.DirectoryEntry>.  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
' Determine whether the given path is correct for the DirectoryEntry.  
If DirectoryEntry.Exists(myADSPath) Then  
   Console.WriteLine("The path {0} is valid",myADSPath)  
Else  
   Console.WriteLine("The path {0} is invalid",myADSPath)  
End If  
  
```  
  
```csharp  
string myADSPath ="LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Determine whether the given path is correct for the DirectoryEntry.  
if (DirectoryEntry.Exists(myADSPath))  
{  
    Console.WriteLine("The path {0} is valid",myADSPath);  
}  
    else  
{  
    Console.WriteLine("The path {0} is invalid",myADSPath);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
// Determine whether the given path is correct for the DirectoryEntry.  
if (DirectoryEntry::Exists(myADSPath))   
{  
    Console::WriteLine("The path {0} is valid", myADSPath);  
}   
else   
{  
    Console::WriteLine("The path {0} is invalid", myADSPath);  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guid">
      <MemberSignature Language="C#" Value="public Guid Guid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Guid" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Guid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guid As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Guid { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSGuid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator GUID <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>A <see cref="T:System.Guid" /> strukturę, która reprezentuje identyfikator GUID <see cref="T:System.DirectoryServices.DirectoryEntry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wiązania z obiektu w usługach domenowych w usłudze Active Directory, użyj <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> i <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> właściwości <xref:System.DirectoryServices.DirectoryEntry> klasy. W tym przykładzie pobiera określonym przez użytkownika <xref:System.DirectoryServices.DirectoryEntry> i wyświetla jego <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> i <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> właściwości.  
  
```vb  
Dim myADSPath As [String] = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
  
' Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:" + myDirectoryEntry.Guid.ToString)  
Console.WriteLine("The Native GUID of the ADS" + "object:" + myDirectoryEntry.NativeGuid)  
  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:"+  
                  myDirectoryEntry.Guid);  
Console.WriteLine("The Native GUID of the ADS"+  
                  "object:"+myDirectoryEntry.NativeGuid);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console::WriteLine("The GUID of the ADS object: {0}", myDirectoryEntry->Guid);  
Console::WriteLine("The Native GUID of the ADS object: {0}",  
                   myDirectoryEntry->NativeGuid);  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (string methodName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(string methodName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (methodName As String, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::String ^ methodName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodName">Nazwa metody do wywołania.</param>
        <param name="args">Tablica typu <see cref="T:System.Object" /> obiektów, które zawiera argumenty metody do wywołania.</param>
        <summary>Wywołuje metodę dla obiekt natywny usług domenowych w usłudze Active Directory.</summary>
        <returns>Wartość zwracana wywoływanej metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość zwracaną metody natywnej implementuje interfejs IAD, odpowiadający jej <xref:System.DirectoryServices.DirectoryEntry> jest zwracany. Aby uzyskać więcej informacji na temat interfejsu IAD, zobacz temat [IAD](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) w bibliotece MSDN pod [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.DirectoryServicesCOMException">Wykonanie metody macierzystej zwrócił <see cref="T:System.Runtime.InteropServices.COMException" /> wyjątku.</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">Wykonanie metody macierzystej zwrócił <see cref="T:System.Reflection.TargetInvocationException" /> wyjątku. <see cref="P:System.Exception.InnerException" /> Zawiera właściwość <see cref="T:System.Runtime.InteropServices.COMException" /> wyjątek, który zawiera informacje o wystąpieniu tego błędu.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby wywołać metodę.</permission>
      </Docs>
    </Member>
    <Member MemberName="InvokeGet">
      <MemberSignature Language="C#" Value="public object InvokeGet (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeGet(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeGet (propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeGet(System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości do pobrania.</param>
        <summary>Pobiera właściwości z natywnego obiektu usług domenowych w usłudze Active Directory.</summary>
        <returns>Obiekt, który reprezentuje wymaganej właściwości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można używać tej metody. <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> Właściwości powinny być używane do dostępu właściwości <xref:System.DirectoryServices.DirectoryEntry> obiektu.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby pobrać właściwości z obiektu macierzystego.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Properties" />
      </Docs>
    </Member>
    <Member MemberName="InvokeSet">
      <MemberSignature Language="C#" Value="public void InvokeSet (string propertyName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeSet(string propertyName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeSet (propertyName As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeSet(System::String ^ propertyName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości do ustawienia.</param>
        <param name="args">Obiekt usług domenowych w usłudze Active Directory można ustawić.</param>
        <summary>Ustawia właściwość natywnego obiektu usług domenowych w usłudze Active Directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można używać tej metody. <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> Właściwości powinny być używane do dostępu właściwości <xref:System.DirectoryServices.DirectoryEntry> obiektu.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby ustawić właściwości dla obiekt natywny.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Properties" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi to <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.DirectoryServices.DirectoryEntry newParent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(class System.DirectoryServices.DirectoryEntry newParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (newParent As DirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::DirectoryServices::DirectoryEntry ^ newParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
      </Parameters>
      <Docs>
        <param name="newParent">Element nadrzędny, do którego chcesz przenieść ten wpis.</param>
        <summary>Przenosi to <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiekt do określonego elementu nadrzędnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> jest `true`, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> metody dla nowego obiektu utrwalenie przeniesienie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Określony <see cref="T:System.DirectoryServices.DirectoryEntry" /> nie jest kontenerem.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Przenoszenie wpisu.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.DirectoryServices.DirectoryEntry newParent, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(class System.DirectoryServices.DirectoryEntry newParent, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (newParent As DirectoryEntry, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::DirectoryServices::DirectoryEntry ^ newParent, System::String ^ newName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newParent">Element nadrzędny, do którego chcesz przenieść ten wpis.</param>
        <param name="newName">Nowa nazwa tego wpisu.</param>
        <summary>Przenosi to <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiekt do określonego elementu nadrzędnego i zmienia jego nazwę na określoną wartość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> jest `true`, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> dla nowego obiektu utrwalenie przeniesienie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Określony <see cref="T:System.DirectoryServices.DirectoryEntry" /> nie jest kontenerem.</exception>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę obiektu jako o nazwie podstawowej usługi katalogowej.</summary>
        <value>Nazwa obiektu o nazwie podstawowej usługi katalogowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To nazwa, wraz z <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>, odróżni ten wpis z jego elementów równorzędnych i musi być unikatowa wśród jego elementów równorzędnych w poszczególnych kontenerach.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.DirectoryServices.DirectoryEntry> węzła w usługach domenowych w usłudze Active Directory. Następnie wyświetla <xref:System.DirectoryServices.DirectoryEntry.Name%2A> i <xref:System.DirectoryServices.DirectoryEntry.Path%2A> właściwości węzły podrzędne.  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,  
           _DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
  
Console.WriteLine("DirectoryEntry Name :" + myDirectoryEntry.Name)  
Console.WriteLine(ControlChars.NewLine _  
        + "The child entries for this node in the Active Directory Domain Services hierarchy")  
  
Dim myDirectoryEntryChild As DirectoryEntry  
For Each myDirectoryEntryChild In  myDirectoryEntry.Children  
   Console.WriteLine(myDirectoryEntryChild.Path)  
Next myDirectoryEntryChild  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,  
             DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  
  
Console.WriteLine("DirectoryEntry Name :"+ myDirectoryEntry.Name);  
Console.WriteLine("\nThe child entries for this node "+  
   "in the Active Directory Domain Services hierarchy");  
  
foreach(DirectoryEntry myDirectoryEntryChild in  
   myDirectoryEntry.Children)  
{  
   Console.WriteLine(myDirectoryEntryChild.Path);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
  
Console::WriteLine("DirectoryEntry Name : {0}", myDirectoryEntry->Name);  
Console::WriteLine("\nThe child entries for this node in the Active Directory Domain Services hierarchy");  
  
Collections::IEnumerator^ myEnumerator = myDirectoryEntry->Children->GetEnumerator();  
while (myEnumerator->MoveNext())   
{  
    DirectoryEntry^ myDirectoryEntryChild = safe_cast<DirectoryEntry^>(myEnumerator->Current);  
    Console::WriteLine(myDirectoryEntryChild->Path);  
}  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby uzyskać nazwę.</permission>
      </Docs>
    </Member>
    <Member MemberName="NativeGuid">
      <MemberSignature Language="C#" Value="public string NativeGuid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeGuid" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.NativeGuid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeGuid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NativeGuid { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSNativeGuid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator GUID <see cref="T:System.DirectoryServices.DirectoryEntry" />, ponieważ zwrócony od dostawcy.</summary>
        <value>A <see cref="T:System.Guid" /> strukturę, która reprezentuje identyfikator GUID <see cref="T:System.DirectoryServices.DirectoryEntry" />, ponieważ zwrócony od dostawcy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> właściwości podczas wiązania obiektu w usługach domenowych w usłudze Active Directory.  
  
> [!NOTE]
>  Dostawca dostępu protokołu LDAP (Lightweight Directory) zwraca globalnie unikatowy identyfikator <xref:System.DirectoryServices.DirectoryEntry> w innym formacie niż Internet Information Services (IIS), Novell Directory Server (usługi NDS systemu NetWare) i dostawców Windows NT.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> i <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> właściwości <xref:System.DirectoryServices.DirectoryEntry> klasy. W tym przykładzie pobiera określonym przez użytkownika <xref:System.DirectoryServices.DirectoryEntry> i wyświetla jego <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> i <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> właściwości.  
  
```vb  
Dim myADSPath As [String] = "LDAP://onecity/CN=Users,  
             DC=onecity,DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
  
' Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:" + myDirectoryEntry.Guid.ToString)  
Console.WriteLine("The Native GUID of the ADS" + "object:" +   
             myDirectoryEntry.NativeGuid)  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,  
             DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:"+  
                  myDirectoryEntry.Guid);  
Console.WriteLine("The Native GUID of the ADS"+  
                  "object:"+myDirectoryEntry.NativeGuid);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console::WriteLine("The GUID of the ADS object: {0}", myDirectoryEntry->Guid));  
Console::WriteLine("The Native GUID of the ADS object: {0}",  
                   myDirectoryEntry->NativeGuid);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="NativeObject">
      <MemberSignature Language="C#" Value="public object NativeObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NativeObject" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.NativeObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NativeObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSNativeObject")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt natywny interfejsy usługi Active Directory (ADSI).</summary>
        <value>Macierzysty obiekt ADSI.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do rzutowania natywnego obiektu usług domenowych w usłudze Active Directory, który implementuje interfejs IAD, jeśli chcesz użyć interfejsu COM. Aby uzyskać więcej informacji na temat interfejsu IAD, zobacz temat [IAD](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) w bibliotece MSDN pod [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp).  
  
 Ten obiekt jest przeznaczony dla zaawansowanych scenariuszy, które nie mogą być realizowane za pomocą <xref:System.DirectoryServices?displayProperty=nameWithType> samej klasy. Aby go użyć, musisz zaimportować jednego z interfejsów modelu COM z rodziny IAD, a następnie rzutowania tę właściwość, aby ten interfejs.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectSecurity">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.ObjectSecurity" />
      <MemberSignature Language="VB.NET" Value="Public Property ObjectSecurity As ActiveDirectorySecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectorySecurity ^ ObjectSecurity { System::DirectoryServices::ActiveDirectorySecurity ^ get(); void set(System::DirectoryServices::ActiveDirectorySecurity ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSObjectSecurity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectorySecurity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia deskryptor zabezpieczeń dla tego wpisu.</summary>
        <value>
          <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> Obiekt, który reprezentuje deskryptora zabezpieczeń dla tego wpisu katalogu.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" /> jest wykonywane, gdy aplikacja ustawia <see cref="P:System.DirectoryServices.DirectoryEntry.ObjectSecurity" /> właściwości, jeśli <see cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" /> jest właściwość <see langword="false" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntryConfiguration Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntryConfiguration Options" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As DirectoryEntryConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntryConfiguration ^ Options { System::DirectoryServices::DirectoryEntryConfiguration ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSOptions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntryConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera opcje specyficznych dla dostawcy dla tego wpisu.</summary>
        <value>A <see cref="T:System.DirectoryServices.DirectoryEntryConfiguration" /> obiekt, który zawiera opcje specyficznych dla dostawcy dla tego wpisu.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby uzyskać odpowiednie opcje.</permission>
        <altmember cref="T:System.DirectoryServices.DirectoryEntryConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntry Parent" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntry ^ Parent { System::DirectoryServices::DirectoryEntry ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSParent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ten wpis nadrzędnej w hierarchii usługi Active Directory.</summary>
        <value>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiekt, który reprezentuje element nadrzędny tego wpisu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Następujące przykładowe wyszukiwania danego <xref:System.DirectoryServices.DirectoryEntry> i wyświetla <xref:System.DirectoryServices.DirectoryEntry.Name%2A> i <xref:System.DirectoryServices.DirectoryEntry.Parent%2A> wyniku.  
  
```vb  
Dim myADSPath As String = _   
          "LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  
  
Console.WriteLine("Parent is :" + myDirectoryEntry.Parent.Path)  
  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
Console.WriteLine("Parent is :"+myDirectoryEntry.Parent.Path);  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
Console::WriteLine("Parent is :{0}", myDirectoryEntry->Parent->Path);  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby uzyskać element nadrzędny.</permission>
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password {  void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSPassword")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia hasło do użycia podczas uwierzytelniania klienta.</summary>
        <value>Hasło do użycia podczas uwierzytelniania klienta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można ustawić <xref:System.DirectoryServices.DirectoryEntry.Username%2A> i <xref:System.DirectoryServices.DirectoryEntry.Password%2A> właściwości, aby określić alternatywne poświadczenia umożliwiające dostęp do informacji w usługach domenowych w usłudze Active Directory. Inne <xref:System.DirectoryServices.DirectoryEntry> obiekt pobrany z tego wystąpienia (na przykład za pomocą <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) są automatycznie tworzone przy użyciu tego samego poświadczeń alternatywnych.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.DirectoryServices.DirectoryEntry.Username%2A> i <xref:System.DirectoryServices.DirectoryEntry.Password%2A> właściwości <xref:System.DirectoryServices.DirectoryEntry> klasy. W tym przykładzie pobiera określonym przez użytkownika <xref:System.DirectoryServices.DirectoryEntry> i <xref:System.DirectoryServices.DirectoryEntry.Path%2A> wszystkich jego <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  
  
```vb  
Dim myADSPath As String = _  
      "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Create an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
myDirectoryEntry.Username = UserName  
myDirectoryEntry.Password = SecurelyStoredPassword  
  
' Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:")  
Dim myChildDirectoryEntry As DirectoryEntry  
For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
   Console.WriteLine(myChildDirectoryEntry.Path)  
Next myChildDirectoryEntry   
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,  
         DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  
myDirectoryEntry.Username = UserName;  
myDirectoryEntry.Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:");  
foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
   Console.WriteLine(myChildDirectoryEntry.Path);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
myDirectoryEntry->Username = UserName;  
myDirectoryEntry->Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console::WriteLine("The Child ADS objects are:");  
Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
while (myEnum->MoveNext())   
{  
    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>  
             (myEnum->Current);  
    Console::WriteLine(myChildDirectoryEntry->Path);  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Username" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSPath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę dla tego <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>Ścieżka tego <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DirectoryServices.DirectoryEntry.Path%2A> Właściwość unikatowo identyfikuje ten wpis w środowisku sieciowym. Ten wpis może zawsze pobierane za pomocą tej <xref:System.DirectoryServices.DirectoryEntry.Path%2A>.  
  
 Ustawienie <xref:System.DirectoryServices.DirectoryEntry.Path%2A> pobiera nowy wpis w katalogu magazynu; nie powoduje zmiany ścieżki obecnie powiązania wpisu.  
  
 Klasy związane z <xref:System.DirectoryServices.DirectoryEntry> składnika mogą być używane z każdego z dostawców usługi Active Directory Domain Services. Niektóre z bieżącego dostawcy są Internet Information Services (IIS), dostęp protokołu LDAP (Lightweight Directory), Novell katalogu usługi (usługi NDS systemu NetWare) i Windows NT.  
  
> [!NOTE]
>  W sekcji <xref:System.DirectoryServices.DirectoryEntry.Path%2A> dostawcy ("://" poprzedza), które identyfikują jest rozróżniana wielkość liter. Na przykład "LDAP: / /" lub "WinNT: / /".  
  
 Składnia <xref:System.DirectoryServices.DirectoryEntry.Path%2A> właściwość zależy od dostawcy. Niektóre typowe scenariusze są następujące:  
  
 WinNT  
  
-   Połączenie do grupy na komputerze. Na przykład "WinNT **://\<nazwa domeny > /\<nazwa komputera > /\<Nazwa grupy >**". Jeśli łączysz się z komputerem lokalnym "WinNT: / /**\<nazwa komputera > /\<Nazwa grupy >**".  
  
-   Podłącz do użytkownika na komputerze. Na przykład "WinNT: / /**\<nazwa domeny > /\<nazwa komputera > /\<nazwa użytkownika >**". Jeśli łączysz się z komputerem lokalnym "WinNT: / /**\<nazwa komputera > /\<nazwa użytkownika >**".  
  
-   Połączyć się z usługami na komputerze. Na przykład "WinNT: / /**\<nazwa domeny > /\<nazwa komputera > /\<nazwa usługi >**". Jeśli łączysz się z komputerem lokalnym "WinNT: / /**\<nazwa komputera > /\<nazwa usługi >**".  
  
-   Odnajdywanie wszystkich domen w sieci. Na przykład "WinNT:" domeny można znaleźć wyliczając elementy podrzędne tego wpisu.  
  
 LDAP  
  
-   Połączenie do grupy w domenie. Na przykład "LDAP://CN=\<Nazwa grupy >, CN =\<użytkownicy >, DC =\<składnik domeny >, DC =\<składnik domeny >,...".  
  
-   Połącz z kontem użytkownika w domenie. Na przykład "LDAP://CN=\<pełnej nazwy >, CN =\<użytkownicy >, DC =\<składnik domeny >, DC =\<składnik domeny >,...".  
  
-   Łączenia się z komputerami w domenie. Na przykład "LDAP://CN=\<nazwa komputera >, CN =\<komputerów >, DC =\<składnik domeny >, DC =\<składnik domeny >,...".  
  
 IIS  
  
-   Połącz do katalogu sieci Web. Na przykład "IIS://LocalHost/W3SVC/1/ROOT/\<nazwa katalogu sieci Web >".  
  
 Aby powiązać z bieżącej domeny przy użyciu protokołu LDAP, należy użyć ścieżki "LDAP://RootDSE", a następnie Pobierz domyślny kontekst nazewnictwa i ponownie powiązać wpis. Na przykład:  
  
```csharp  
String str = ent.Properties["defaultNamingContext"][0];  
DirectoryEntry domain = new DirectoryEntry("LDAP://" + str);  
```  
  
 Aby uzyskać więcej informacji, zobacz dokumentację dostawcy i temat [przy użyciu interfejsów usługi Active Directory](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/using_adsi.asp) w bibliotece MSDN pod [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.PropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.PropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::PropertyCollection ^ Properties { System::DirectoryServices::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSProperties")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera właściwości usług domenowych w usłudze Active Directory dla tej <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu.</summary>
        <value>A <see cref="T:System.DirectoryServices.PropertyCollection" /> obiekt, który zawiera właściwości, które są ustawione dla tego wpisu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie zainicjowano właściwości, <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> wywołania interfejsu ADSI [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) metody do pobierania wartości z pamięci podręcznej. Jeśli podstawowy pamięci podręcznej nie został załadowany, [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) niejawnie wywołuje [IADs::GetInfo](http://msdn2.microsoft.com/library/aa746349.aspx). Ta metoda ładuje wartości obsługiwanych właściwości, które nie zostały ustawione w pamięci podręcznej z odpowiedni magazyn katalogu. Kolejne wywołania <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> pobiera wartości właściwości w pamięci podręcznej tylko. Aby kontrolować ładowania pamięci podręcznej właściwości, należy wywołać <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>.  
  
 **Uwaga** <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> właściwości nie jest obsługiwana przez używany z rozszerzenia klienta usługi Active Directory (DSClient) dla [!INCLUDE[WinNt4Family](~/includes/winnt4family-md.md)].  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Można pobrać właściwości.</permission>
        <altmember cref="T:System.DirectoryServices.PropertyCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RefreshCache">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ładuje wartości właściwości dla tego <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu w pamięci podręcznej właściwości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RefreshCache">
      <MemberSignature Language="C#" Value="public void RefreshCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshCache() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
      <MemberSignature Language="VB.NET" Value="Public Sub RefreshCache ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RefreshCache();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ładuje wartości właściwości dla tego <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu w pamięci podręcznej właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Wszystkie Niewprowadzone zmiany pamięci podręcznej właściwości zostaną utracone. Użyj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> metodę, aby utrwalić zmiany do magazynu katalogu.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby odświeżyć pamięci podręcznej właściwości.</permission>
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="RefreshCache">
      <MemberSignature Language="C#" Value="public void RefreshCache (string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshCache(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub RefreshCache (propertyNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RefreshCache(cli::array &lt;System::String ^&gt; ^ propertyNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="propertyNames">Tablica określonych właściwości.</param>
        <summary>Ładuje wartości właściwości określonego do pamięci podręcznej właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Wszystkie Niewprowadzone zmiany pamięci podręcznej właściwości zostaną utracone. Użyj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> do utrwalania zmian w magazynie katalogu.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby odświeżyć pamięci podręcznej właściwości.</permission>
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public void Rename (string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rename(string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Rename(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rename(System::String ^ newName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newName">Nowa nazwa wejścia.</param>
        <summary>Zmienia nazwę to <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Wpłynie to również ścieżką, która jest używana do odwoływania się do tego wpisu.  
  
 Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> jest `true`, należy wywołać <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> metody dla nowego obiektu utrwalenie przeniesienie.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="SchemaClassName">
      <MemberSignature Language="C#" Value="public string SchemaClassName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemaClassName" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.SchemaClassName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaClassName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SchemaClassName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSSchemaClassName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę klasy schematu dla tego <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu.</summary>
        <value>Nazwa klasy schematu dla tego <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To jest taka sama jak <xref:System.DirectoryServices.DirectoryEntry.Name%2A> właściwość <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> właściwości.  
  
 A <xref:System.DirectoryServices.DirectoryEntry> definiuje schematu obiektu jego właściwości i metody.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> i <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> właściwości <xref:System.DirectoryServices.DirectoryEntry> klasy. W tym przykładzie pobiera określonym przez użytkownika <xref:System.DirectoryServices.DirectoryEntry> i pobiera wszystkie jego elementy podrzędne, jeśli <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> obiektu kontenera.  <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> Jest obiektem kontenera, jeśli <xref:System.DirectoryServices.DirectoryEntry.Name%2A> tego obiektu jest "kontener".  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Creates an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  
  
' Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:" + myDirectoryEntry.SchemaClassName)  
  
' Gets the SchemaEntry of the ADS object.  
Dim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  
  
If String.Compare(mySchemaEntry.Name, "container") = 0 Then  
   Dim myChildDirectoryEntry As DirectoryEntry  
   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
      Console.WriteLine(myChildDirectoryEntry.Path)  
   Next  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:" + myDirectoryEntry.SchemaClassName);  
  
// Gets the SchemaEntry of the ADS object.  
DirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  
  
if (string.Compare(mySchemaEntry.Name, "container") == 0)  
{  
   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
      Console.WriteLine(myChildDirectoryEntry.Path);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console::WriteLine("Schema class name:{0}", myDirectoryEntry->SchemaClassName);  
  
// Gets the SchemaEntry of the ADS Object.  
DirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  
  
if (!String::Compare(mySchemaEntry->Name, "container"))   
{  
    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
    while (myEnum->MoveNext())   
    {  
        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  
        Console::WriteLine(myChildDirectoryEntry->Path);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby uzyskać nazwę schematu.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.SchemaEntry" />
      </Docs>
    </Member>
    <Member MemberName="SchemaEntry">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry SchemaEntry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntry SchemaEntry" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.SchemaEntry" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaEntry As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntry ^ SchemaEntry { System::DirectoryServices::DirectoryEntry ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSSchemaEntry")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt schematu dla tego wpisu.</summary>
        <value>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiekt, który reprezentuje klasę schematu dla tego wpisu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schemat wpisu Określa listę nazw właściwości obowiązkowe i opcjonalne.  
  
 Ta właściwość służy do dowiedzieć się, jakie właściwości i metody są dostępne na skojarzonego obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> i <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> właściwości <xref:System.DirectoryServices.DirectoryEntry> klasy. W tym przykładzie pobiera określonym przez użytkownika <xref:System.DirectoryServices.DirectoryEntry> obiektu i wszystkich jego elementów podrzędnych pobiera, jeśli <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> obiekt jest obiektem kontenera.  <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> Jest obiektem kontenera, jeśli <xref:System.DirectoryServices.DirectoryEntry.Name%2A> tego obiektu jest "kontener".  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Creates an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  
  
' Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:" + myDirectoryEntry.SchemaClassName)  
  
' Gets the SchemaEntry of the ADS object.  
Dim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  
  
If String.Compare(mySchemaEntry.Name, "container") = 0 Then  
   Dim myChildDirectoryEntry As DirectoryEntry  
   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
      Console.WriteLine(myChildDirectoryEntry.Path)  
   Next  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:"+myDirectoryEntry.SchemaClassName);  
  
// Gets the SchemaEntry of the ADS object.  
DirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  
  
if (string.Compare(mySchemaEntry.Name,"container") == 0)  
{  
   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
      Console.WriteLine(myChildDirectoryEntry.Path);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console::WriteLine("Schema class name:{0}", myDirectoryEntry->SchemaClassName);  
  
// Gets the SchemaEntry of the ADS Object*.  
DirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  
  
if (!String::Compare(mySchemaEntry->Name, S"container"))   
{  
    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
    while (myEnum->MoveNext())   
    {  
        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  
        Console::WriteLine(myChildDirectoryEntry->Path);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Aby uzyskać obiekt schematu.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.SchemaClassName" />
      </Docs>
    </Member>
    <Member MemberName="UsePropertyCache">
      <MemberSignature Language="C#" Value="public bool UsePropertyCache { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsePropertyCache" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      <MemberSignature Language="VB.NET" Value="Public Property UsePropertyCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UsePropertyCache { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSUsePropertyCache")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy po zakończeniu każdej operacji powinno być zadeklarowanej pamięci podręcznej.</summary>
        <value>
          <see langword="true" /> Jeśli pamięć podręczna nie należy zatwierdzić po zakończeniu każdej operacji; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie właściwości zmiany lokalnie do pamięci podręcznej, a wartości właściwości do odczytu są buforowane, po pierwszym odczytu. Gdy <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> właściwość jest `true`, dostęp do <xref:System.DirectoryServices.DirectoryEntry> właściwości obiektu jest szybsze. To ustawienie `false` spowoduje, że pamięć podręczna można przesłać po zakończeniu każdej operacji.  
  
 Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> właściwość jest `true` i chcesz zatwierdzić buforowane zmiany, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> metody. Aby zaktualizować wartości w pamięci podręcznej, po dokonaniu zmian w katalogu, należy wywołać <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> metody.  
  
> [!CAUTION]
>  Jeśli należy wywołać <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> przed wywołaniem <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, wszystkie Niewprowadzone zmiany pamięci podręcznej właściwości zostaną utracone.  
  
> [!NOTE]
>  Dostawca usług Internet Information Services (IIS) nie obsługuje zatwierdzania pamięci podręcznej po zakończeniu każdej operacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSUsername")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę użytkownika używane podczas uwierzytelniania klienta.</summary>
        <value>Nazwa użytkownika używana podczas uwierzytelniania klienta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można ustawić <xref:System.DirectoryServices.DirectoryEntry.Username%2A> i <xref:System.DirectoryServices.DirectoryEntry.Password%2A> Aby określić alternatywne poświadczenia umożliwiające dostęp do informacji w usługach domenowych w usłudze Active Directory. Inne <xref:System.DirectoryServices.DirectoryEntry> obiekt pobrany z tego wystąpienia (na przykład za pomocą <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) są automatycznie tworzone przy użyciu tego samego poświadczeń alternatywnych.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.DirectoryServices.DirectoryEntry.Username%2A> i <xref:System.DirectoryServices.DirectoryEntry.Password%2A> właściwości <xref:System.DirectoryServices.DirectoryEntry> klasy. W tym przykładzie pobiera określonym przez użytkownika <xref:System.DirectoryServices.DirectoryEntry> i <xref:System.DirectoryServices.DirectoryEntry.Path%2A> wszystkich jego <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  
  
```vb  
Dim myADSPath As String = _  
      "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Create an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
myDirectoryEntry.Username = UserName  
myDirectoryEntry.Password = SecurelyStoredPassword  
  
' Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:")  
Dim myChildDirectoryEntry As DirectoryEntry  
For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
   Console.WriteLine(myChildDirectoryEntry.Path)  
Next myChildDirectoryEntry  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  
myDirectoryEntry.Username = UserName;  
myDirectoryEntry.Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:");  
foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
   Console.WriteLine(myChildDirectoryEntry.Path);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = new DirectoryEntry(myADSPath);  
myDirectoryEntry->Username = UserName;  
myDirectoryEntry->Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console::WriteLine("The Child ADS objects are:");  
Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
while (myEnum->MoveNext())   
{  
    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  
    Console::WriteLine(myChildDirectoryEntry->Path);  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Password" />
      </Docs>
    </Member>
  </Members>
</Type>