<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="79299cc2f8fd9772fbb8c8961ba6f8b4705dbc5a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579487" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Instaluje plik wykonywalny zawierający klasy, które rozszerzają <see cref="T:System.ServiceProcess.ServiceBase" />. Ta klasa jest wywoływana przez instalacji narzędzi, takich jak InstallUtil.exe, podczas instalowania aplikacji usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller> Działa wspólne dla wszystkich usług w pliku wykonywalnego. Jest on używany przez narzędzie instalacji można zapisać wartości rejestru, skojarzone z usług, które chcesz zainstalować.  
  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu dziedziczący z <xref:System.Configuration.Install.Installer>i ustaw <xref:System.ComponentModel.RunInstallerAttribute> klasy do `true`. W ramach projektu, wystąpienia jednego <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpień dla poszczególnych aplikacji usługi, a drugi <xref:System.ServiceProcess.ServiceInstaller> wystąpienia dla każdej usługi w aplikacji. Na koniec należy dodać <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia i <xref:System.ServiceProcess.ServiceInstaller> wystąpień klasy projektu Instalatora.  
  
 Po uruchomieniu InstallUtil.exe narzędzie szuka klasy w zestawie usługi z <xref:System.ComponentModel.RunInstallerAttribute> ustawioną `true`. Dodawanie klas do zestawu usługi przez dodanie ich do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcję skojarzoną z Instalatorem projektu. Jeśli <xref:System.ComponentModel.RunInstallerAttribute> jest `false`, narzędzie instalacji ignoruje Instalator projektu.  
  
 Dla wystąpienia <xref:System.ServiceProcess.ServiceProcessInstaller>, można zmodyfikować właściwości obejmują określanie, czy aplikacja usługi działać w kontekście konta innego niż zalogowanego użytkownika. Możesz określić danego <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pary, w którym należy uruchomić usługę, lub można użyć <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> do określenia, czy usługa jest uruchomiona w obszarze konta systemu komputera, lokalna lub konto usługi sieciowej lub konto użytkownika.  
  
> [!NOTE]
>  Konto systemu tego komputera nie jest taka sama jak konto administratora.  
  
 Zwykle nie należy wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; zwykle nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> i <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> metody w ramach procesu instalacji. Go utworzyć kopię zapasową limit niepowodzeń, jeśli to konieczne, przez wywołanie metody <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (lub <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) na wszystkich wcześniej zainstalowanych składników.  
  
 Procedury instalacji aplikacji przechowuje informacje automatycznie składniki już zainstalowane, za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Informacje o stanie jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia i każdego <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne dla swój kod, aby jawnie modyfikować tych informacji o stanie.  
  
 Tworzenie wystąpień <xref:System.ServiceProcess.ServiceProcessInstaller> powoduje, że Konstruktor klasy podstawowej <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, aby wywołać.  
  
   
  
## Examples  
 Poniższy przykład tworzy Instalator projektu o nazwie MyProjectInstaller, która dziedziczy od <xref:System.Configuration.Install.Installer>. Zakłada się, istnieje plik wykonywalny usługi, który zawiera dwie usługi, "Hello World usługi 1" i "Hello World usługi 2". W Konstruktorze MyProjectInstaller (która będzie wywoływana przez narzędzie instalacji) <xref:System.ServiceProcess.ServiceInstaller> obiekty są tworzone dla każdej usługi, a <xref:System.ServiceProcess.ServiceProcessInstaller> jest tworzona dla pliku wykonywalnego. Narzędzie instalacji rozpoznał MyProjectInstaller jako prawidłowy Instalatora <xref:System.ComponentModel.RunInstallerAttribute> atrybut ma ustawioną `true`.  
  
 Opcjonalne właściwości są ustawione na Instalator procesu i pliki instalacyjne usługi przed pliki instalacyjne są dodawane do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji. Gdy narzędzie instalacji uzyskuje dostęp do MyProjectInstaller, obiekty dodane do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji poprzez wywołanie <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> zostanie zainstalowany z kolei. W trakcie Instalator przechowuje informacje o stanie wskazujące obiekty, które zostały zainstalowane, więc każdy obiekt można utworzyć kopię to z kolei w przypadku niepowodzenia instalacji.  
  
 Zazwyczaj można będzie tworzy wystąpienia klasy Instalator projektu jawnie. Czy ją utworzyć i dodać <xref:System.ComponentModel.RunInstallerAttribute>, ale narzędzie instalacji wywołuje i w związku z tym tworzy, klasa.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ konta w ramach którego ma zostać uruchomiony w tej aplikacji usługi.</summary>
        <value>A <see cref="T:System.ServiceProcess.ServiceAccount" /> definiuje typ konta, na którym ta usługa działa system. Wartość domyślna to <see langword="User" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> właściwość jest `User`, <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> właściwości są używane do definiowania konto, na którym działa aplikacja usługi.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pary umożliwia usłudze działać w kontekście konta niż konto system. Można na przykład dzięki temu usługi do automatycznego uruchamiania na ponowne uruchomienie komputera, gdy użytkownik nie jest zalogowany. Jeśli opuścisz albo <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> lub <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pusty i ustaw <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> do `User`, pojawi się monit dla prawidłowej nazwy użytkownika i hasła podczas instalacji.  
  
 Można również określić, że usługa działała na koncie systemu lokalnego lub jako lokalny lub Usługa sieciowa. Zobacz <xref:System.ServiceProcess.ServiceAccount> wyliczenie szczegółowe informacje na temat typów kont.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">
          <see cref="T:System.ComponentModel.IComponent" /> Reprezentujący procesu usługi.</param>
        <summary>Implementuje klasę podstawową <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> metody bez <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> zachowanie specyficzne dla klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie powinna być wywoływana w kodzie. Metody klasy podstawowej dla <xref:System.Configuration.Install.ComponentInstaller> jest `abstract`, dlatego jest tutaj zaimplementowana w klasie pochodnej. Jednak ma nie <xref:System.ServiceProcess.ServiceProcessInstaller> klasy specyficzne dla przetwarzania w implementacji metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tekst pomocy wyświetlany dla opcji instalacji usługi.</summary>
        <value>Tekst, który zawiera opis kroków do ustawiania nazwy użytkownika i hasła, aby uruchomić usługę przy użyciu określonego konta pomocy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten tekst pomocy można, gdy usługa jest uruchamiana ręcznie. Wskazuje on użytkownikowi wprowadzanie informacji o nazwę i hasło użytkownika.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" /> Zawierający informacje o kontekście związane z instalacją.</param>
        <summary>Zapisuje informacje o aplikacji usługi do rejestru. Ta metoda jest przeznaczona do użycia przez narzędzia instalacji, które wymagają odpowiednich metod automatycznie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle nie należy wywoływać metody na <xref:System.ServiceProcess.ServiceProcessInstaller> w kodzie; zwykle nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> metody w ramach procesu instalacji. Go utworzyć kopię zapasową limit niepowodzeń, jeśli to konieczne, przez wywołanie metody <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> na wszystkie wcześniej zainstalowanych składników. Ta metoda przekazuje instalacji do klasy podstawowej <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType> metody.  
  
 Zwykle nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; zwykle nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> i <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> metody w ramach procesu instalacji. Go utworzyć kopię zapasową limit niepowodzeń, jeśli to konieczne, przez wywołanie metody <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (lub <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) na wszystkich wcześniej zainstalowanych składników  
  
 Procedury instalacji aplikacji przechowuje informacje automatycznie składniki już zainstalowane, za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Przekazany tych informacji o stanie <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> jako `stateSaver` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia i każdego <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne dla swój kod, aby jawnie modyfikować tych informacji o stanie.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> przekazuje do wywoływania metody wszelkie wyjątki zgłaszane przez metody klasy podstawowej lub <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> procedury obsługi zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stateSaver" /> Jest <see langword="null" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia hasło skojarzone z kontem użytkownika w ramach którego działa aplikacja usługi.</summary>
        <value>Hasło skojarzone z kontem, którego powinien uruchamiana usługa. Wartością domyślną jest ciąg pusty (""). Właściwość nie jest publiczna i nigdy nie jest serializowany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> pary umożliwia usłudze działać w kontekście konta niż konto system. Można na przykład dzięki temu usługi do automatycznego uruchamiania na ponowne uruchomienie komputera, gdy użytkownik nie jest zalogowany.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> są obsługiwane w bezpieczny sposób, że nigdy nie są serializowane lub zapisany stan instalacji (Instalator projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) lub innej lokalizacji z dostępem public.  
  
 Ustawienie <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> umożliwia konta do skojarzenia automatycznie z usługą w czasie instalacji. Jeśli opuścisz albo <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> lub <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pusty i ustaw <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> do `User`, pojawi się monit dla prawidłowej nazwy użytkownika i hasła podczas instalacji.  
  
 Inną opcją w przypadku usługi w ramach oddzielnego konta jest konto systemu komputera. Tego konta, które różni się od konta administratora, wymaga bez hasła. Uprawnień konta systemu mogą wykraczać poza obecnie zalogowanego użytkownika. Wymaga usługi działającej na koncie systemu, zamiast konta użytkownika pozwala uniknąć problemów spowodowanych brak uprawnienia użytkownika  
  
 Jeśli <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> jest wartością innego niż `User`, służy konto określono (lokalnej lub Usługa sieciowa lub konta system lokalny), nawet jeśli <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> właściwości są wypełniane.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> Zawierający informacje o kontekście związane z instalacją.</param>
        <summary>Przywraca zapisywane przez procedurę instalacji w rejestrze informacji o aplikacji usługi. Ta metoda jest przeznaczona do użycia przez narzędzia instalacji, automatycznie przetwarzające odpowiednie metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle nie należy wywoływać metody na <xref:System.ServiceProcess.ServiceProcessInstaller> w kodzie; zwykle nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> metody w ramach procesu instalacji. Go utworzyć kopię zapasową limit niepowodzeń, jeśli to konieczne, przez wywołanie metody <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> dla obiektu, który wygenerował wyjątek.  
  
 Procedury instalacji aplikacji przechowuje informacje automatycznie składniki już zainstalowane, za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Przekazany tych informacji o stanie <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> jako `savedState` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia i każdego <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne dla swój kod, aby jawnie modyfikować tych informacji o stanie.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> przekazuje do wywoływania metody wszelkie wyjątki zgłaszane przez metody klasy podstawowej lub <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> procedury obsługi zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" /> Jest <see langword="null" />.  
  
 —lub—  
  
 <paramref name="savedState" /> Jest uszkodzony lub nie istnieje.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia konto użytkownika używane do uruchamiania aplikacji usługi.</summary>
        <value>Konto, pod którym usługa powinno być ono uruchomione. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pary umożliwia usłudze działać w kontekście konta niż konto system. Można na przykład dzięki temu usługi do automatycznego uruchamiania na ponowne uruchomienie komputera, gdy użytkownik nie jest zalogowany.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> są obsługiwane w bezpieczny sposób, że nigdy nie są serializowane lub zapisany stan instalacji (Instalator projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) lub innej lokalizacji z dostępem public.  
  
 Ustawienie <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> umożliwia konta do skojarzenia automatycznie z usługą w czasie instalacji. Jeśli opuścisz albo <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> lub <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> pusty i ustaw <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> do `User`, pojawi się monit dla prawidłowej nazwy użytkownika i hasła podczas instalacji.  
  
 Inną opcją w przypadku usługi w ramach oddzielnego konta jest konto systemu komputera. Tego konta, które różni się od konta administratora, wymaga bez hasła. Uprawnień konta systemu mogą wykraczać poza obecnie zalogowanego użytkownika. Wymaga usługi działającej na koncie systemu, zamiast konta użytkownika pozwala uniknąć problemów spowodowanych brak uprawnienia użytkownika  
  
 Jeśli <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> jest wartością innego niż `User`, określone konto (lokalnej lub Usługa sieciowa lub konta system lokalny) jest używany, nawet jeśli <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> i <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> właściwości są wypełniane.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>