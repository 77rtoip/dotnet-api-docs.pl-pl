<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="510856e4bfac307e9beefb64cddf58d2b00f8770" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39855644" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Instaluje klasę, która rozszerza <see cref="T:System.ServiceProcess.ServiceBase" /> implementacji usługi. Klasa ta zostanie wywołana przez narzędzie instalacji podczas instalowania aplikacji usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller> Działa specyficzne dla usługi, z którą jest skojarzony. Używane przez narzędzie instalacji można zapisać wartości rejestru, skojarzone z usługą do podklucza w kluczu rejestru HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services. Usługa jest identyfikowane przez jego ServiceName w ramach tego podklucza. Podklucza który zawiera również nazwę wykonywalny lub biblioteka DLL, do której należy serwer.  
  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu, który dziedziczy z <xref:System.Configuration.Install.Installer> klasy, a następnie ustaw <xref:System.ComponentModel.RunInstallerAttribute> atrybutu klasy, która ma `true`. W ramach projektu, należy utworzyć jedną <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia dla aplikacji usługi i jeden <xref:System.ServiceProcess.ServiceInstaller> wystąpienia dla każdej usługi w aplikacji. W ramach projektu Instalatora konstruktora klasy, należy ustawić właściwości instalacji dla usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller> i <xref:System.ServiceProcess.ServiceInstaller> wystąpień, a następnie dodaj wystąpień <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji.  
  
> [!NOTE]
>  Zaleca się używać konstruktora dodawania wystąpienia Instalatora; Jednak jeśli chcesz dodać do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metody, należy wykonać ten sam dodatki do kolekcji w <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody.  
  
 Dla wszystkich klas pochodzących z <xref:System.Configuration.Install.Installer> klasy stan <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji musi być taka sama w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody. Jednak można uniknąć obsługi kolekcji między <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody w przypadku dodania wystąpienia Instalatora, aby <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w konstruktorze klasy Twojego niestandardowego Instalatora. Po wywołaniu narzędzie instalacji szuka <xref:System.ComponentModel.RunInstallerAttribute> atrybutu. Jeśli atrybut `true`, narzędzie instaluje wszystkie usługi, które zostały dodane do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji, które zostały skojarzone z Instalatorem projektu. Jeśli <xref:System.ComponentModel.RunInstallerAttribute> jest `false` lub istnieje, narzędzie instalacji ignoruje Instalatora projektu.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller> Skojarzone z Twojego projektu instalacji instaluje informacji o klasie wspólne dla wszystkich <xref:System.ServiceProcess.ServiceInstaller> wystąpień w projekcie. Jeśli ta usługa ma wszystko, która oddziela go od innych usług w projekcie instalacji, te informacje specyficzne dla usługi zostanie zainstalowany przez tę metodę.  
  
> [!NOTE]
>  Niezwykle ważne jest, <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> być taka sama jak <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> klasy pochodzące z <xref:System.ServiceProcess.ServiceBase>. Zazwyczaj wartość <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> właściwość usługi jest ustawiona w funkcji Main() pliku wykonywalnego aplikacji usługi. Korzysta z Menedżera sterowania usługami <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> właściwość, aby zlokalizować usługi w ramach tego pliku wykonywalnego.  
  
 Inne właściwości można modyfikować na <xref:System.ServiceProcess.ServiceInstaller> przed lub po dodaniu go do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji projektu Instalatora. Na przykład usługi <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> może być ustawiony na uruchomienie usługi automatycznie przy ponownym uruchomieniu lub zdecydować, że użytkownik uruchomić usługę ręcznie.  
  
 Zazwyczaj nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; ogólnie nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> i <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> metody podczas procesu instalacji. Tworzy kopię się błędy, jeśli to konieczne, wywołując <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (lub <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) do wszystkich uprzednio zainstalowanych składników.  
  
 Wywołuje narzędzie instalacji <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> usuwania obiektu.  
  
 Procedury instalacji aplikacji utrzymuje automatycznie o składnikach, w przypadku już zainstalowane, aby za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Informacje o stanie jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia, a każdy <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne w kodzie zmodyfikować informacje o stanie jawnie.  
  
 Podczas instalacji automatycznie tworzy <xref:System.Diagnostics.EventLogInstaller> zainstalować źródło dziennika zdarzeń skojarzonych z <xref:System.ServiceProcess.ServiceBase> klasy pochodnej. <xref:System.Diagnostics.EventLog.Log%2A> Właściwość dla tego źródła jest ustawiana przez <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> konstruktora w dzienniku aplikacji na komputerze. Po ustawieniu <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> z <xref:System.ServiceProcess.ServiceInstaller> (powinna być taka sama jak <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> usługi), <xref:System.Diagnostics.EventLog.Source%2A> jest automatycznie ustawiana na taką samą wartość. Wystąpił błąd instalacji źródła instalacji jest wycofana wstecz wraz z wcześniej zainstalowanych usług.  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Metoda próbuje zatrzymać usługę, jeśli jest uruchomiony. Czy to zakończy się pomyślnie lub nie, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> spowoduje cofnięcie zmian wprowadzonych przez <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. W przypadku nowego źródła został utworzony dla rejestrowania zdarzeń, źródła zostaną usunięte.  
  
   
  
## Examples  
 Poniższy przykład obejmuje tworzenie projektu Instalatora o nazwie `MyProjectInstaller`, który dziedziczy z <xref:System.Configuration.Install.Installer>. Zakłada się, jest plik wykonywalny usługi, która zawiera dwie usługi, "1. Usługa Hello World" i "Witaj, świecie usługi 2". W Konstruktorze `MyProjectInstaller` (która może być wywoływana przez narzędzie instalacji), <xref:System.ServiceProcess.ServiceInstaller> obiekty są tworzone dla każdej z tych usług, a <xref:System.ServiceProcess.ServiceProcessInstaller> jest tworzona dla pliku wykonywalnego. Narzędzia instalacji, rozpoznawał `MyProjectInstaller` jako prawidłowy Instalatora <xref:System.ComponentModel.RunInstallerAttribute> ma ustawioną wartość atrybutu `true`.  
  
 Opcjonalne właściwości są ustawione na Instalator procesu i pliki instalacyjne usługi, zanim pliki instalacyjne są dodawane do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji. Gdy narzędzie instalacji uzyskuje dostęp do `MyProjectInstaller`, obiekty dodane do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji za pomocą wywołania <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> zostanie zainstalowany z osobna. W trakcie Instalator przechowuje informacje o stanie wskazujący obiekty, które zostały zainstalowane, dzięki czemu każdy kopie mogą być wykonywane z kolei w przypadku niepowodzenia instalacji.  
  
 Zazwyczaj należy nie utworzyć wystąpienie klasy Instalatora projektu jawne. Czy ją utworzyć i dodać <xref:System.ComponentModel.RunInstallerAttribute> atrybutu składni, ale jest to narzędzie instalacji, który wywołuje i w związku z tym tworzy jego wystąpienie, klasa.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceProcess.ServiceInstaller" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu, który dziedziczy z <xref:System.Configuration.Install.Installer> klasy, a następnie ustaw <xref:System.ComponentModel.RunInstallerAttribute> atrybutu klasy, która ma `true`. W ramach projektu, należy utworzyć jedną <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia dla aplikacji usługi i jeden <xref:System.ServiceProcess.ServiceInstaller> wystąpienia dla każdej usługi w aplikacji. W ramach projektu Instalatora konstruktora klasy, należy ustawić właściwości instalacji dla usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller> i <xref:System.ServiceProcess.ServiceInstaller> wystąpień, a następnie dodaj wystąpień <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji.  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Konstruktor automatycznie generuje dziennik zdarzeń źródła, którego <xref:System.Diagnostics.EventLog.Log%2A> właściwość jest ustawiona w dzienniku aplikacji na komputerze i <xref:System.Diagnostics.EventLogInstaller>. Po ustawieniu <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> z <xref:System.ServiceProcess.ServiceInstaller>, powinny być identyczne z <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> usługi <xref:System.Diagnostics.EventLog.Source%2A> właściwość w dzienniku zdarzeń automatycznie jest ustawiona na tę samą wartość. Źródło jest automatycznie usuwany w przypadku niepowodzenia instalacji.  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Zestawy Konstruktor <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> właściwości `ServiceStartMode.Manual` do określenia, czy użytkownika uruchomić usługę. Możesz zresetować właściwość `ServiceStartMode.Automatic` do określenia, czy usługa uruchomiona przy ponownym uruchomieniu komputera.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">
          <see cref="T:System.ComponentModel.IComponent" /> Do skopiowania.</param>
        <summary>Kopiuje właściwości z wystąpienia <see cref="T:System.ServiceProcess.ServiceBase" /> do tego Instalatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rzadko można wywołać tej metody w kodzie. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> zwykle jest wywoływana tylko przez projektantów.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> zapisuje nazwę usługi `component` parametr <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> z <xref:System.ServiceProcess.ServiceInstaller> wystąpienia. (Ponieważ parametr musi być wystąpieniem klasy, która jest pochodną <xref:System.ServiceProcess.ServiceBase>, `component` może mieć <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> właściwości.)  
  
> [!NOTE]
>  Jeśli używasz projektanta programu Visual Studio, ta metoda jest wywoływana w czasie projektowania, gdy użytkownik kliknie `Add Installer` składnika, które określone tej klasy jako jego Instalatora. Instalator ma wszystkie informacje, można od składnika na żywo i zapisuje go do użycia w czasie instalacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ten składnik zostanie skojarzony z tym Instalatorem nie dziedziczy <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy usługa powinno zostać opóźnione uruchomienie do czasu, inne automatycznie uruchomione usługi są uruchomione.</summary>
        <value>
          <see langword="true" /> Aby opóźnienia automatycznego Uruchom usługi; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> Właściwości można zastosować do dowolnej usługi, ale jest on ignorowany, chyba że jest tryb uruchamiania usługi <xref:System.ServiceProcess.ServiceStartMode.Automatic>. Ustawienie zostanie uwzględnione po następnym ponownym uruchomieniu systemu. Menedżer sterowania usługami nie gwarantuje określonym czasem rozpoczęcia dla usługi.  
  
 Opóźnione automatyczne uruchamianie usługi nie może być członkiem grupy porządkujące, ale może zależeć od innej usługi, automatyczne uruchamianie. Aplikacja wywołuje opóźnione automatyczne uruchamianie usługi przed ich załadowaniem, połączenie nie powiedzie się.  
  
 W systemach operacyjnych, które nie obsługują opóźnione automatyczne uruchamianie ustawienie tej właściwości nie ma znaczenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opis usługi.</summary>
        <value>Opis usługi. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceProcess.ServiceInstaller.Description%2A> właściwość opisywać cel zainstalowanej usługi dla użytkownika. Użytkownik może przeglądać opis usługi w aplikacjach, które są wyświetlane szczegóły dla zainstalowanych usług.  
  
 Na przykład w systemie Windows XP można wyświetlić opisu usługi za pomocą narzędzia wiersza polecenia sterowania usługami (Sc.exe) lub można wyświetlić opisu usługi w ramach **usług** węzła **Zarządzanie komputerem ** konsoli.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości instalacji dla nowej aplikacji usługi Windows. W przykładzie nazwę usługi oraz nazwę wyświetlaną i opis. Po przypisaniu właściwości instalacji dla usługi, w przykładzie dodano <xref:System.ServiceProcess.ServiceInstaller> obiekt <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa przyjazną nazwę, która identyfikuje usługi dla użytkownika.</summary>
        <value>Nazwa skojarzonego z usługą, często używany dla interaktywnych narzędzi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> Jest używany, na przykład w Menedżerze kontroli usług zapewnienie czytelny dla użytkownika nazwę opisową dla usługi. <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> Jest wartość rejestru, ale nigdy nie jest używany jako klucz rejestru. W związku z tym, ograniczenia dotyczące <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> wartość właściwości nie mają zastosowania. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> jest używany jako klucz rejestru HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services, więc jest ograniczony.  
  
 Nazwa wyświetlana nigdy nie jest używany przez narzędzie instalacji do identyfikowania usługi, dzięki czemu nie ma ograniczeń na wybór nazwy, ponieważ ma dla <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" /> Zawierający informacje o kontekście związane z instalacją.</param>
        <summary>Instaluje usługę przez zapisywanie informacji o aplikacji usługi do rejestru. Ta metoda jest przeznaczona do użycia przez narzędzia instalacji, które automatycznie przetwarzać właściwe metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; ogólnie nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metody podczas instalacji. Tworzy kopię się błędy, jeśli to konieczne, wywołując <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> w obiekcie, który wygenerował wyjątek.  
  
 Procedury instalacji aplikacji przechowuje informacje automatycznie o składnikach, które zostały już zainstalowane, za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Informacje o stanie, są przekazywane do <xref:System.ServiceProcess.ServiceInstaller.Install%2A> jako `stateSaver` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia, a każdy <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne w kodzie zmodyfikować informacje o stanie jawnie.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller> Skojarzone z Twojego projektu instalacji instaluje informacji o klasie wspólne dla wszystkich <xref:System.ServiceProcess.ServiceInstaller> wystąpień w projekcie. Jeśli ta usługa ma wszystko, która oddziela go od innych usług w projekcie instalacji, te informacje specyficzne dla usługi zostanie zainstalowany przez tę metodę.  
  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu, który dziedziczy z <xref:System.Configuration.Install.Installer> klasy, a następnie ustaw <xref:System.ComponentModel.RunInstallerAttribute> atrybutu klasy, która ma `true`. W ramach projektu, należy utworzyć jedną <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia dla aplikacji usługi i jeden <xref:System.ServiceProcess.ServiceInstaller> wystąpienia dla każdej usługi w aplikacji. W ramach projektu Instalatora konstruktora klasy, należy ustawić właściwości instalacji dla usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller> i <xref:System.ServiceProcess.ServiceInstaller> wystąpień, a następnie dodaj wystąpień <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji.  
  
> [!NOTE]
>  Zaleca się używać konstruktora dodawania wystąpienia Instalatora; Jednak jeśli chcesz dodać do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metody, należy wykonać ten sam dodatki do kolekcji w <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody.  
  
 Dla wszystkich klas pochodzących z <xref:System.Configuration.Install.Installer> klasy stan <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji musi być taka sama w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody. Jednak można uniknąć obsługi kolekcji między <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody w przypadku dodania wystąpienia Instalatora, aby <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w konstruktorze klasy Twojego niestandardowego Instalatora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Instalacja nie zawiera <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> dla pliku wykonywalnego.  Nazwa pliku zestawu jest - lub - <see langword="null" /> ani być pustym ciągiem.  - lub - nazwa usługi jest nieprawidłowa.  - lub - nie można otworzyć Menedżera kontroli usług.</exception>
        <exception cref="T:System.ArgumentException">Nazwa wyświetlana usługi jest dłuższa niż 255 znaków długości.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">System nie może wygenerować dojście do usługi.  - lub - usługa o tej nazwie jest już zainstalowana.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> do której są porównywanie bieżącej Instalatora.</param>
        <summary>Wskazuje, czy dwa pliki instalacyjne zainstalować tę samą usługę.</summary>
        <returns>
          <see langword="true" /> Jeśli wywołanie <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> na oba te pliki instalacyjne spowoduje zainstalowanie takie same usługi; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> Wskazuje, na przykład, czy dwa pliki instalacyjne zostaną zainstalowane w tej samej usługi w ramach tego samego konta użytkownika.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> Zawierający informacje o kontekście związane z instalacją.</param>
        <summary>Wycofanie zapisywane przez procedurę instalacji w rejestrze informacji o aplikacji usługi. Ta metoda jest przeznaczona do użycia przez narzędzia instalacji, które automatycznie przetwarzać właściwe metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; ogólnie nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metody podczas procesu instalacji. Tworzy kopię się błędy, jeśli to konieczne, wywołując <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> w obiekcie, który wygenerował wyjątek.  
  
 Procedury instalacji aplikacji utrzymuje automatycznie o składnikach, w przypadku już zainstalowane, aby za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Informacje o stanie, są przekazywane do <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> jako `savedState` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia, a każdy <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne w kodzie zmodyfikować informacje o stanie jawnie.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje nazwę używaną przez system do identyfikowania tej usługi. Ta właściwość musi być taka sama jak <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> usługi, którą chcesz zainstalować.</summary>
        <value>Nazwa usługi do zainstalowania. Ta wartość musi zostać ustawiona przed prób narzędzie instalacji, aby zainstalować usługę.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niezwykle ważne jest, <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> być taka sama jak <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> klasy pochodzące z <xref:System.ServiceProcess.ServiceBase>. Zazwyczaj wartość <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> właściwość usługi jest ustawiona w funkcji Main() pliku wykonywalnego aplikacji usługi. Korzysta z Menedżera sterowania usługami <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> właściwość, aby zlokalizować usługi w ramach tego pliku wykonywalnego.  
  
 Po ustawieniu <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Instalatora usługi <xref:System.Diagnostics.EventLog.Source%2A> skojarzone dziennika zdarzeń jest ustawiona na tę samą wartość. Dzięki temu usługi do automatycznego logowania usługa wywołania poleceń (takich jak uruchamianie i zatrzymywanie) w dzienniku aplikacji na komputerze.  
  
> [!NOTE]
>  Jeśli źródłem tej samej nazwie już istnieje na komputerze, ale w dzienniku niż w dzienniku aplikacji, zostanie zgłoszony wyjątek. Jeśli źródło istnieje i jest skojarzona z dziennika aplikacji, to źródło jest używana do zgłaszania polecenia wywołań do usługi i jest zgłaszany żaden wyjątek.  
  
 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Nie może być `null` lub ma zerową długość. Maksymalny rozmiar to 256 znaków. Także nie może zawierać do przodu lub do tyłu ukośniki, '/' lub '\\', ani zestaw o wartości mniejszej niż wartość dziesiętną 32 znaki ASCII.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> Właściwość jest nieprawidłowa.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, które musi być uruchomiona ta usługa do uruchamiania usługi.</summary>
        <value>Tablica usług, które muszą być uruchomione, zanim będzie można uruchomić usługi skojarzony z tym Instalatorem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usługa może wymagać innych usług, aby działać, zanim będzie można ją uruchamiać. Informacje zawarte w tej właściwości są zapisywane w kluczu rejestru. Po użytkownik (lub systemu, w przypadku automatycznego uruchamiania) próbuje uruchomić usługę, Menedżer sterowania usługami (SCM) sprawdza, czy każda z usług w tablicy jest już uruchomiony.  
  
 Jeśli dowolnej usługi w tablicy nie jest uruchomiona następnie, Menedżer sterowania usługami próbował je uruchomić. Dotyczy to również usług za pomocą `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.  
  
 Jeśli każda usługa, od których zależy usługa ta nie powiedzie się, ta usługa nie zostanie uruchomiona. Wyjątek nie jest generowany, jeśli system nie jest uruchomiona, ponieważ nie istnieje żaden wyjątek, obsługa na poziomie systemu, aby wykryć tę działalność. Wybieranie sposobu obsługi błędów uruchamiania usługi i implementacji w kodzie. Zazwyczaj do użytkownika podczas uruchamiania pojawia się okno dialogowe, jeśli nie można uruchomić usługi.  
  
 Jeśli usługa nie zostanie uruchomiona, jest wpis w dzienniku zdarzeń aplikacji.  
  
 Usługi, od których zależy ta usługa nie trzeba w tym samym pliku wykonywalnym.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, jak i kiedy ta usługa jest uruchomiona.</summary>
        <value>A <see cref="T:System.ServiceProcess.ServiceStartMode" /> reprezentujący sposób usługa jest uruchomiona. Wartość domyślna to <see langword="Manual" />, która określa, że usługa nie zostanie automatycznie uruchomiona po ponownym uruchomieniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> do określenia, czy usługa jest uruchomiona automatycznie po ponownym uruchomieniu lub użytkownika należy ręcznie uruchomić usługę. Usługi można także wyłączyć, określając, że go nie można uruchomić, ręcznie lub programowo, dopóki nie jest włączone.  
  
 Nie można zmienić <xref:System.ServiceProcess.ServiceInstaller> wartości właściwości po zakończeniu instalacji. Aby zmienić <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, albo musisz odinstalować i ponownie zainstaluj usługę lub ręcznie zmienić ustawienie przy użyciu Menedżera kontroli usług.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Tryb uruchamiania, który nie jest wartością <see cref="T:System.ServiceProcess.ServiceStartMode" /> wyliczenia.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> Zawierający informacje o kontekście związane z instalacją.</param>
        <summary>Odinstalowuje usługi, usuwając informacje o nim z rejestru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Odinstaluj pierwszej próby zatrzymania usługi przed jego odinstalowaniem. Jeśli usługa nie może zostać zatrzymana, żaden wyjątek zostaje przechwycony i metody będzie kontynuowane przy użyciu usunięcie usługi.  
  
 Zazwyczaj nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; ogólnie nazywane są tylko przez narzędzie instalacji. InstallUtil służy do odinstalowania usług, a także zainstalować je; Odinstalowywanie ma przełącznik w wywołaniu wiersza polecenia.  
  
 Aplikacja odinstalowania procedury przechowuje informacje automatycznie o składnikach odinstalowywane przy użyciu Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Informacje o stanie, są przekazywane do <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> jako `savedState` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia, a każdy <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne w kodzie zmodyfikować informacje o stanie jawnie.  
  
 Dla wszystkich klas pochodzących z <xref:System.Configuration.Install.Installer> klasy stan <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji musi być taka sama w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody. Jednak można uniknąć obsługi kolekcji między <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody w przypadku dodania wystąpienia Instalatora, aby <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w konstruktorze klasy Twojego niestandardowego Instalatora.  
  
 Nie ma wycofywania mechanizmu odinstalowywania, dzięki czemu jednej usługi nie powiedzie się odinstalować, to nie wpływa na inne usługi (zwykle w tym samym projekcie instalacji) odinstalowywane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Nie można otworzyć Menedżera kontroli usług.  - lub - systemu nie można uzyskać dojścia do usługi.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>