<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b38ce9c25d631c2dde01d2084bafbb98967c9b5" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36410113" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Instaluje klasę, która rozszerza <see cref="T:System.ServiceProcess.ServiceBase" /> implementacji usługi. Ta klasa jest wywoływana przez narzędzie instalacji podczas instalowania aplikacji usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller> Działa specyficzne dla usługi, z którym jest skojarzona. Jest on używany przez narzędzie instalacji można zapisać wartości rejestru skojarzonych z usługą podklucz w kluczu rejestru HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services. Usługa jest identyfikowany przez jego ServiceName w ramach tego podklucza. Podklucz także nazwę pliku wykonywalnego lub dll, do której należy serwer.  
  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu dziedziczący z <xref:System.Configuration.Install.Installer> klasy, a następnie ustaw <xref:System.ComponentModel.RunInstallerAttribute> atrybutu dla klasy do `true`. W ramach projektu, utworzyć <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpień dla poszczególnych aplikacji usługi, a drugi <xref:System.ServiceProcess.ServiceInstaller> wystąpienia dla każdej usługi w aplikacji. W ramach Twojej konstruktora klasy projektu Instalatora należy ustawić właściwości instalacji dla usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller> i <xref:System.ServiceProcess.ServiceInstaller> wystąpienia, a następnie dodaj wystąpień <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji.  
  
> [!NOTE]
>  Zalecane jest używanie konstruktora dodawania Instalatora wystąpień; Jednak jeśli konieczne jest dodanie do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metody, należy wykonać dodatki z tej samej kolekcji w <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody.  
  
 Dla wszystkie klasy wywodzące się z <xref:System.Configuration.Install.Installer> klasy stan <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji muszą być takie same, w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody. Jednak można uniknąć obsługi kolekcji między <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody, jeśli dodasz wystąpienia Instalatora, aby <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w konstruktorze klasy użytkownika niestandardowego Instalatora. Po instalacji narzędzie szuka <xref:System.ComponentModel.RunInstallerAttribute> atrybutu. Jeśli atrybut `true`, wszystkich usług, które zostały dodane do instaluje narzędzie <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji, które zostały skojarzone z Instalatorem projektu. Jeśli <xref:System.ComponentModel.RunInstallerAttribute> jest `false` lub istnieje, narzędzie instalacji ignoruje Instalator projektu.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller> Skojarzone z instalacji klasy instaluje informacji o projekcie wspólne dla wszystkich <xref:System.ServiceProcess.ServiceInstaller> wystąpień w projekcie. Jeśli ta usługa ma niczego, która oddziela go od innych usług w projekcie instalacji, te informacje specyficzne dla usługi zostanie zainstalowany przez tę metodę.  
  
> [!NOTE]
>  Ważne jest, że <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> być taki sam jak <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> pochodzi od klasy <xref:System.ServiceProcess.ServiceBase>. Zwykle wartość <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> właściwość usługi jest ustawiona w funkcji Main() pliku wykonywalnego aplikacji usługi. Menedżer sterowania usługami używa <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> właściwości do lokalizowania usługi w ramach tego pliku wykonywalnego.  
  
 Inne właściwości można modyfikować na <xref:System.ServiceProcess.ServiceInstaller> przed lub po dodaniu go do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji Instalatorem projektu. Na przykład usługi <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> może być ustawiony na uruchomienie usługi automatycznie przy ponownym uruchomieniu lub wymaga od użytkownika uruchomić usługę ręcznie.  
  
 Zwykle nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; zwykle nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> i <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> metody w ramach procesu instalacji. Go utworzyć kopię zapasową limit niepowodzeń, jeśli to konieczne, przez wywołanie metody <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (lub <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) na wszystkich wcześniej zainstalowanych składników.  
  
 Wywołuje narzędzie instalacji <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> usuwania obiektu.  
  
 Procedury instalacji aplikacji przechowuje informacje automatycznie składniki już zainstalowane, za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Informacje o stanie jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienie, a każdy <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne dla swój kod, aby jawnie modyfikować informacje o stanie.  
  
 Podczas instalacji automatycznie tworzy <xref:System.Diagnostics.EventLogInstaller> zainstalować źródło dziennika zdarzeń skojarzonych z <xref:System.ServiceProcess.ServiceBase> klasy. <xref:System.Diagnostics.EventLog.Log%2A> Właściwość dla tego źródła jest ustawiana przez <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> konstruktora do dziennika aplikacji z komputera. Podczas ustawiania <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> z <xref:System.ServiceProcess.ServiceInstaller> (powinien być taki sam jak <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> usługi), <xref:System.Diagnostics.EventLog.Source%2A> jest automatycznie ustawiana na taką samą wartość. W przypadku niepowodzenia instalacji źródła instalacji jest wycofana wstecz wraz z wcześniej zainstalowanych usług.  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> — Metoda spróbuje zatrzymać usługę, jeśli została uruchomiona. Określa, czy to zakończy się powodzeniem lub nie, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> spowoduje cofnięcie zmian wprowadzonych przez <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. W przypadku nowego źródła został utworzony dla rejestrowanie zdarzeń, źródła zostaną usunięte.  
  
   
  
## Examples  
 Poniższy przykład tworzy Instalatora projektu o nazwie `MyProjectInstaller`, który dziedziczy z <xref:System.Configuration.Install.Installer>. Zakłada się, istnieje plik wykonywalny usługi, który zawiera dwie usługi, "Hello World usługi 1" i "Hello World usługi 2". W Konstruktorze `MyProjectInstaller` (które może być wywoływany przez narzędzie instalacji), <xref:System.ServiceProcess.ServiceInstaller> obiekty są tworzone dla każdej z tych usług, a <xref:System.ServiceProcess.ServiceProcessInstaller> jest tworzona dla pliku wykonywalnego. Instalacja narzędzia do rozpoznawania `MyProjectInstaller` jako prawidłowy Instalatora, <xref:System.ComponentModel.RunInstallerAttribute> atrybut ma ustawioną `true`.  
  
 Opcjonalne właściwości są ustawione na Instalator procesu i pliki instalacyjne usługi przed pliki instalacyjne są dodawane do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji. Gdy narzędzie instalacji uzyskuje dostęp do `MyProjectInstaller`, obiekty dodane do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji poprzez wywołanie <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> zostanie zainstalowany z kolei. W trakcie Instalator przechowuje informacje o stanie wskazujące obiekty, które zostały zainstalowane, więc każdy można utworzyć kopię z kolei w przypadku niepowodzenia instalacji.  
  
 Zazwyczaj należy nie utworzyć wystąpienia klasy Instalator projektu jawnie. Czy ją utworzyć i dodać <xref:System.ComponentModel.RunInstallerAttribute> atrybutu składni, ale jest narzędzie instalacji, które wywołuje i w związku z tym tworzy, klasa.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceProcess.ServiceInstaller" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu dziedziczący z <xref:System.Configuration.Install.Installer> klasy, a następnie ustaw <xref:System.ComponentModel.RunInstallerAttribute> atrybutu dla klasy do `true`. W ramach projektu, utworzyć <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpień dla poszczególnych aplikacji usługi, a drugi <xref:System.ServiceProcess.ServiceInstaller> wystąpienia dla każdej usługi w aplikacji. W ramach Twojej konstruktora klasy projektu Instalatora należy ustawić właściwości instalacji dla usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller> i <xref:System.ServiceProcess.ServiceInstaller> wystąpienia, a następnie dodaj wystąpień <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji.  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Konstruktor automatycznie generuje dziennik zdarzeń źródła, którego <xref:System.Diagnostics.EventLog.Log%2A> właściwość jest ustawiona na dziennika aplikacji komputera i <xref:System.Diagnostics.EventLogInstaller>. Podczas ustawiania <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> z <xref:System.ServiceProcess.ServiceInstaller>, powinny być identyczne z <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> usługi, <xref:System.Diagnostics.EventLog.Source%2A> właściwości dziennika zdarzeń jest automatycznie ustawiana taką samą wartość. Źródło jest usuwane automatycznie w przypadku niepowodzenia instalacji.  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Ustawia konstruktora <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> właściwości `ServiceStartMode.Manual` do określenia, czy użytkownik Uruchom usługę. Można zresetować właściwości `ServiceStartMode.Automatic` do określenia, czy usługa jest uruchomiona po ponownym uruchomieniu komputera.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">
          <see cref="T:System.ComponentModel.IComponent" /> Do skopiowania.</param>
        <summary>Kopiuje właściwości z wystąpienia <see cref="T:System.ServiceProcess.ServiceBase" /> do tego Instalatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zostanie wywołana rzadko w kodzie. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> Zazwyczaj jest wywoływana tylko przez projektantów.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> Nazwa usługi jest zapisywany `component` parametr <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> z <xref:System.ServiceProcess.ServiceInstaller> wystąpienia. (Ponieważ parametr musi być wystąpieniem klasy, która jest pochodną <xref:System.ServiceProcess.ServiceBase>, `component` może mieć <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> właściwości.)  
  
> [!NOTE]
>  Jeśli używasz programu Visual Studio projektanta, ta metoda jest wywoływana w czasie projektowania, gdy użytkownik kliknie `Add Installer` składnik to klasa określona jako jej Instalatora. Instalator ma wszystkie informacje może ze składnika na żywo i zapisze go w celu użycia w czasie instalacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Składnik zostanie skojarzony z tym Instalatora nie dziedziczy <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy usługa powinno zostać opóźnione uruchomienie, dopóki nie są uruchomione inne usługi automatycznie uruchomiony.</summary>
        <value>
          <see langword="true" /> opóźnienia automatycznego uruchomienia usługi; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> Właściwości można zastosować do dowolnej usługi, ale jest ignorowana, chyba że jest tryb uruchamiania usługi <xref:System.ServiceProcess.ServiceStartMode.Automatic>. Ustawienie zostanie uwzględnione po następnym ponownym uruchomieniu systemu. Menedżer sterowania usługami nie gwarantuje określony czas rozpoczęcia dla usługi.  
  
 Opóźnione automatyczne uruchamianie usługi nie może być członkiem grupy porządkujących, ale może zależeć od innej usługi, automatyczne uruchamianie. Jeśli aplikacja wymaga opóźnionego automatycznego uruchamiania usługi przed jego załadowaniem, wywołanie kończy się niepowodzeniem.  
  
 W systemach operacyjnych, które nie obsługują opóźnionego automatycznego uruchamiania ustawienie dla tej właściwości nie ma znaczenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opis usługi.</summary>
        <value>Opis usługi. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceProcess.ServiceInstaller.Description%2A> właściwości przeznaczenie zainstalowanej usługi dla użytkownika. Użytkownik może przeglądać opis usługi w aplikacjach, które są wyświetlane szczegóły dla zainstalowanych usług.  
  
 Na przykład w systemie Windows XP można wyświetlić opis usługi za pomocą narzędzia wiersza polecenia usługi Service Control (Sc.exe) lub można wyświetlić opis usługi w ramach **usług** węzła **Zarządzanie komputerem ** konsoli.  
  
   
  
## Examples  
 Poniższy przykład kodu określa właściwości instalacji dla nowej aplikacji usługi systemu Windows. Ustawia nazwę usługi, oraz nazwę wyświetlaną i opis. Po przypisaniu właściwości instalacji dla usługi, w przykładzie dodano <xref:System.ServiceProcess.ServiceInstaller> do obiektu <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje przyjazną nazwę identyfikującą usługi dla użytkownika.</summary>
        <value>Nazwa skojarzonego z usługą, często używane dla narzędzia interakcyjne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> Jest używany, na przykład w Menedżera sterowania usługami na wprowadź opisową nazwę użytkownika do odczytu dla usługi. <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> Jest wartość rejestru, ale nigdy nie jest używany jako klucz rejestru. W związku z tym ograniczenia dotyczące <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> wartość właściwości nie są stosowane. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> jest używany jako klucz rejestru HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services, więc jest ograniczone.  
  
 Nazwa wyświetlana nigdy nie jest używany przez narzędzie instalacji do identyfikowania usługi, więc nie ma żadnych ograniczeń na wybór nazwy, ponieważ istnieje dla <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" /> Zawierający informacje o kontekście związane z instalacją.</param>
        <summary>Instaluje usługę przez zapisywanie informacji o aplikacji usługi do rejestru. Ta metoda jest przeznaczona do użycia przez narzędzia instalacji, automatycznie przetwarzające odpowiednie metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; zwykle nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metody podczas instalacji. Go utworzyć kopię zapasową limit niepowodzeń, jeśli to konieczne, przez wywołanie metody <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> dla obiektu, który wygenerował wyjątek.  
  
 Procedury instalacji aplikacji przechowuje informacje automatycznie o składnikach, które zostały już zainstalowane, za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Przekazany tych informacji o stanie <xref:System.ServiceProcess.ServiceInstaller.Install%2A> jako `stateSaver` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia i każdego <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne dla swój kod, aby jawnie modyfikować tych informacji o stanie.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller> Skojarzone z instalacji klasy instaluje informacji o projekcie wspólne dla wszystkich <xref:System.ServiceProcess.ServiceInstaller> wystąpień w projekcie. Jeśli ta usługa ma niczego, która oddziela go od innych usług w projekcie instalacji, te informacje specyficzne dla usługi zostanie zainstalowany przez tę metodę.  
  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu dziedziczący z <xref:System.Configuration.Install.Installer> klasy, a następnie ustaw <xref:System.ComponentModel.RunInstallerAttribute> atrybutu dla klasy do `true`. W ramach projektu, utworzyć <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpień dla poszczególnych aplikacji usługi, a drugi <xref:System.ServiceProcess.ServiceInstaller> wystąpienia dla każdej usługi w aplikacji. W ramach Twojej konstruktora klasy projektu Instalatora należy ustawić właściwości instalacji dla usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller> i <xref:System.ServiceProcess.ServiceInstaller> wystąpienia, a następnie dodaj wystąpień <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji.  
  
> [!NOTE]
>  Zalecane jest używanie konstruktora dodawania Instalatora wystąpień; Jednak jeśli konieczne jest dodanie do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metody, należy wykonać dodatki z tej samej kolekcji w <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody.  
  
 Dla wszystkie klasy wywodzące się z <xref:System.Configuration.Install.Installer> klasy stan <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji muszą być takie same, w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody. Jednak można uniknąć obsługi kolekcji między <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody, jeśli dodasz wystąpienia Instalatora, aby <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w konstruktorze klasy użytkownika niestandardowego Instalatora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Instalacja nie zawiera <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> pliku wykonywalnego.  - lub - nazwa pliku zestawu jest <see langword="null" /> lub ciąg pusty.  - lub - nazwa usługi jest nieprawidłowa.  - lub - nie można otworzyć Menedżera kontroli usług.</exception>
        <exception cref="T:System.ArgumentException">Nazwa wyświetlana usługi jest więcej niż 255 znaków długości.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">System nie może wygenerować uchwytu do usługi.  - lub - usługi o tej nazwie jest już zainstalowana.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> do której są porównanie bieżącego Instalatora.</param>
        <summary>Wskazuje, czy dwa instalatorów zainstalować tę samą usługę.</summary>
        <returns>
          <see langword="true" /> Jeśli wywołanie <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> w obu tych programów instalacyjnych spowodowałoby takie same Instalowanie usługi; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> Wskazuje, na przykład, czy dwa instalatorów zainstalować tę samą usługę dla tego samego konta użytkownika.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> Zawierający informacje o kontekście związane z instalacją.</param>
        <summary>Przywraca zapisywane przez procedurę instalacji w rejestrze informacji o aplikacji usługi. Ta metoda jest przeznaczona do użycia przez narzędzia instalacji, automatycznie przetwarzające odpowiednie metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; zwykle nazywane są tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metody w ramach procesu instalacji. Go utworzyć kopię zapasową limit niepowodzeń, jeśli to konieczne, przez wywołanie metody <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> dla obiektu, który wygenerował wyjątek.  
  
 Procedury instalacji aplikacji przechowuje informacje automatycznie składniki już zainstalowane, za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Przekazany tych informacji o stanie <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> jako `savedState` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia i każdego <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne dla swój kod, aby jawnie modyfikować tych informacji o stanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje nazwę używaną przez system do identyfikacji usługi. Ta właściwość musi być taki sam jak <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> usługi, które chcesz zainstalować.</summary>
        <value>Nazwa usługi do zainstalowania. Przed prób narzędzie instalacji, aby zainstalować usługę, należy ustawić tę wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ważne jest, że <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> być taki sam jak <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> pochodzi od klasy <xref:System.ServiceProcess.ServiceBase>. Zwykle wartość <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> właściwość usługi jest ustawiona w funkcji Main() pliku wykonywalnego aplikacji usługi. Menedżer sterowania usługami używa <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> właściwości do lokalizowania usługi w ramach tego pliku wykonywalnego.  
  
 Podczas ustawiania <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Instalatora usługi <xref:System.Diagnostics.EventLog.Source%2A> skojarzone dziennika zdarzeń jest ustawiona na tę samą wartość. Dzięki temu usługi do automatycznego logowania usługi wywołania polecenia (na przykład rozpoczęcie i zakończenie) w dzienniku aplikacji na komputerze.  
  
> [!NOTE]
>  Jeśli źródło o takiej samej nazwie już istnieje na komputerze, ale w dzienniku niż dziennika aplikacji, zostanie wygenerowany wyjątek. Jeśli źródło istnieje i jest skojarzona z dziennika aplikacji, to źródło jest używane do zgłaszania wywołania polecenia do usługi, a nie wyjątek.  
  
 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Nie może być `null` ani mieć zerowej długości. Maksymalny rozmiar to 256 znaków. Także nie może zawierać do przodu lub do tyłu ukośniki, '/' lub '\\', ani zestaw o wartości mniejszej niż wartość dziesiętna 32 znaki ASCII.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> Właściwość jest nieprawidłowa.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje usługi, które muszą być uruchomione na uruchamianie tej usługi.</summary>
        <value>Tablica usług, które muszą być uruchomione, zanim będzie można uruchomić usługi skojarzonej z tego Instalatora.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usługa może wymagać innych usług, należy uruchomić przed jego rozpoczęciem. Klucz w rejestrze są zapisywane informacje z tej właściwości. Gdy użytkownik (lub systemu, w przypadku automatycznego uruchamiania) próbuje uruchomić usługę, Menedżer sterowania usługami (SCM) sprawdza, czy każdy z usług w tablicy została już uruchomiona.  
  
 Jeśli usługi w tablicy nie jest następnie uruchomiony, SCM próbuje uruchomić je. Dotyczy to również usług z `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.  
  
 Jeśli każda usługa, od których zależy usługa ta nie powiedzie się, ta usługa nie zostanie uruchomiona. Nie jest zgłaszany wyjątek, jeśli system nie jest uruchomiona, ponieważ nie istnieje żaden wyjątek obsługi na poziomie systemu, aby wykryć. Wybieranie sposobu obsługi błędów uruchamiania usługi, należy wdrożyć w kodzie. Zazwyczaj do użytkownika podczas uruchamiania pojawia się okno dialogowe, gdy nie można uruchomić usługi.  
  
 Jeśli usługa nie zostanie uruchomiona, wpis w dzienniku zdarzeń aplikacji.  
  
 Usług, od których zależy usługa ta nie jest konieczne należeć do tego samego pliku wykonywalnego.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, jak i kiedy ta usługa jest uruchomiona.</summary>
        <value>A <see cref="T:System.ServiceProcess.ServiceStartMode" /> reprezentujący sposób usługa jest uruchomiona. Wartość domyślna to <see langword="Manual" />, który określa, że usługa nie zostanie automatycznie uruchomiona po ponownym rozruchu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> określa automatycznie uruchomienia usługi po ponownym rozruchu lub że użytkownik musi ręcznie uruchomić usługę. Usługi można także wyłączyć, określając, że nie można było go uruchomić, ręcznie lub programowo, dopóki nie jest włączona.  
  
 Nie można zmienić <xref:System.ServiceProcess.ServiceInstaller> wartości właściwości po zakończeniu instalacji. Aby zmienić <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, albo należy odinstalować i ponownie zainstaluj usługę lub ręcznie zmienić ustawienie przy użyciu Menedżera kontroli usług.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Tryb uruchamiania nie jest wartością <see cref="T:System.ServiceProcess.ServiceStartMode" /> wyliczenia.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> Zawierający informacje o kontekście związane z instalacją.</param>
        <summary>Odinstalowuje usługi przez usunięcie z rejestru informacji o nim.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Odinstaluj pierwszej próby zatrzymania usługi przed jego odinstalowaniem. Jeśli usługa nie może zostać zatrzymana, żaden wyjątek zostanie przechwycony i metody będzie kontynuowane przy użyciu usunięcie usługi.  
  
 Zwykle nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller> w kodzie; zwykle nazywane są tylko przez narzędzie instalacji. InstallUtil służy do odinstalowania usług, jak również zainstalować je; Odinstalowywanie ma przełącznik w wywołaniu wiersza polecenia.  
  
 Procedury odinstalowywania aplikacji przechowuje informacje automatycznie o składnikach odinstalowywane przy użyciu Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Przekazany tych informacji o stanie <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> jako `savedState` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienia i każdego <xref:System.ServiceProcess.ServiceInstaller> przez narzędzie jest zainstalowane wystąpienie. Nie jest konieczne dla swój kod, aby jawnie modyfikować tych informacji o stanie.  
  
 Dla wszystkie klasy wywodzące się z <xref:System.Configuration.Install.Installer> klasy stan <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji muszą być takie same, w <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody. Jednak można uniknąć obsługi kolekcji między <xref:System.ServiceProcess.ServiceInstaller.Install%2A> i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metody, jeśli dodasz wystąpienia Instalatora, aby <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji w konstruktorze klasy użytkownika niestandardowego Instalatora.  
  
 Nie ma mechanizmu wycofywania odinstalowywania, dlatego jedna usługa odinstalowanie zakończy się niepowodzeniem, to nie wpływa na inne usługi (zazwyczaj w tym samym projekcie instalacji) odinstalowywane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Nie można otworzyć Menedżera kontroli usług.  - lub - systemu nie można uzyskać dojścia do usługi.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>