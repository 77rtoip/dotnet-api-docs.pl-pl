<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6e6765d4baec8d048456f421424ebdc9a9b90ced" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69231755" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Instaluje klasę, która rozszerza <see cref="T:System.ServiceProcess.ServiceBase" /> się w celu zaimplementowania usługi. Ta klasa jest wywoływana przez narzędzie instalacji podczas instalowania aplikacji usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller> Działa prawidłowo z usługą, z którą jest skojarzona. Jest on używany przez narzędzie instalacji do zapisywania wartości rejestru skojarzonych z usługą do podklucza w kluczu rejestru HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services. Usługa jest identyfikowana przy użyciu jej ServiceName w tym podkluczu. Podklucz zawiera również nazwę pliku wykonywalnego lub dll, do którego należy usługa.  
  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu, która dziedziczy z <xref:System.Configuration.Install.Installer> klasy, i <xref:System.ComponentModel.RunInstallerAttribute> ustawić `true`atrybut klasy na. W projekcie Utwórz jedno <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienie na aplikację usługi i jedno <xref:System.ServiceProcess.ServiceInstaller> wystąpienie dla każdej usługi w aplikacji. W konstruktorze klasy Instalatora projektu ustaw właściwości instalacji usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpień i <xref:System.ServiceProcess.ServiceInstaller> i <xref:System.Configuration.Install.Installer.Installers%2A> Dodaj wystąpienia do kolekcji.  
  
> [!NOTE]
>  Zaleca się używanie konstruktora do dodawania wystąpień Instalatora; Jeśli jednak musisz dodać do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji <xref:System.ServiceProcess.ServiceInstaller.Install%2A> w metodzie, pamiętaj, aby wykonać te same operacje dodawania <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> do kolekcji w metodzie.  
  
 Dla wszystkich <xref:System.Configuration.Install.Installer> klas pochodnych z klasy stan <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji musi <xref:System.ServiceProcess.ServiceInstaller.Install%2A> być taki sam w metodzie i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> . Można jednak uniknąć konserwacji kolekcji <xref:System.ServiceProcess.ServiceInstaller.Install%2A> w metodach i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> , jeśli <xref:System.Configuration.Install.Installer.Installers%2A> dodasz wystąpienia Instalatora do kolekcji w konstruktorze klas niestandardowych Instalatora. Po wywołaniu narzędzia instalacji szuka <xref:System.ComponentModel.RunInstallerAttribute> atrybutu. Jeśli ten atrybut ma `true`wartość, narzędzie instaluje wszystkie usługi, które zostały dodane <xref:System.Configuration.Install.Installer.Installers%2A> do kolekcji, które zostały skojarzone z instalatorem projektu. Jeśli <xref:System.ComponentModel.RunInstallerAttribute> jest`false` lub nie istnieje, narzędzie instalacji ignoruje Instalatora projektu.  
  
 Skojarzona z klasą instalacji projektu służy do instalowania informacji wspólnych <xref:System.ServiceProcess.ServiceInstaller> dla wszystkich wystąpień w projekcie. <xref:System.ServiceProcess.ServiceProcessInstaller> Jeśli ta usługa ma wszystkie elementy oddzielające je od innych usług w projekcie instalacji, te informacje specyficzne dla usługi są instalowane przez tę metodę.  
  
> [!NOTE]
>  Jest to kluczowa wartość <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> , która jest identyczna <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> z klasą pochodną <xref:System.ServiceProcess.ServiceBase>. Zazwyczaj wartość <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> właściwości usługi jest ustawiana w ramach funkcji Main () pliku wykonywalnego aplikacji usługi. Menedżer sterowania usługami używa <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> właściwości do lokalizowania usługi w ramach tego pliku wykonywalnego.  
  
 Można modyfikować inne właściwości <xref:System.ServiceProcess.ServiceInstaller> przed lub po dodaniu go <xref:System.Configuration.Install.Installer.Installers%2A> do kolekcji Instalatora projektu. Na przykład usługa <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> może być ustawiona w celu automatycznego uruchamiania usługi przy ponownym uruchomieniu lub wymagać od użytkownika ręcznego uruchomienia usługi.  
  
 Zwykle nie wywołamy metod w <xref:System.ServiceProcess.ServiceInstaller> kodzie. są one zwykle wywoływane tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> metody i <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> w trakcie procesu instalacji. W razie potrzeby wykonuje kopię zapasową błędów, wywołując <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (lub <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) na wszystkich wcześniej zainstalowanych składnikach.  
  
 Narzędzie instalacji wywołuje <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> do usunięcia obiektu.  
  
 Procedura instalacji aplikacji zachowuje automatycznie informacje o składnikach, które są już zainstalowane, przy użyciu Instalatora <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>projektu. Informacje o stanie są stale aktualizowane jako <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienie, a każde <xref:System.ServiceProcess.ServiceInstaller> wystąpienie jest instalowane przez narzędzie. Zwykle nie jest konieczne, aby kod mógł jawnie zmodyfikować informacje o stanie.  
  
 Po przeprowadzeniu instalacji program automatycznie tworzy <xref:System.Diagnostics.EventLogInstaller> , aby zainstalować Źródło dziennika zdarzeń skojarzone <xref:System.ServiceProcess.ServiceBase> z klasą pochodną. Właściwość tego źródła jest ustawiana <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> przez konstruktora na dziennik aplikacji komputera. <xref:System.Diagnostics.EventLog.Log%2A> Po ustawieniu <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> dla (który powinien być taki sam jak w przypadku usługi) <xref:System.Diagnostics.EventLog.Source%2A> wartość jest automatycznie ustawiana na tę samą. <xref:System.ServiceProcess.ServiceInstaller> W przypadku niepowodzenia instalacji instalacja źródła jest wycofywana wraz z wcześniej zainstalowanymi usługami.  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Metoda próbuje zatrzymać usługę, jeśli jest uruchomiona. Czy to się powiedzie, czy <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> nie, spowoduje to, że <xref:System.ServiceProcess.ServiceInstaller.Install%2A>zmiany zostały wprowadzone przez. Jeśli nowe źródło zostało utworzone na potrzeby rejestrowania zdarzeń, źródło zostanie usunięte.  
  
   
  
## Examples  
 Poniższy przykład tworzy Instalatora projektu o nazwie `MyProjectInstaller`, który dziedziczy z. <xref:System.Configuration.Install.Installer> Przyjęto założenie, że jest to plik wykonywalny usługi, który zawiera dwie usługi "Hello-World Service 1" i "Hello-World Service 2". W konstruktorze dla `MyProjectInstaller` (który zostałby wywołany przez narzędzie instalacji), <xref:System.ServiceProcess.ServiceInstaller> obiekty są tworzone dla każdej z <xref:System.ServiceProcess.ServiceProcessInstaller> tych usług i zostanie utworzony dla pliku wykonywalnego. Aby narzędzie instalacji rozpoznawać `MyProjectInstaller` jako prawidłowy Instalator <xref:System.ComponentModel.RunInstallerAttribute> , atrybut jest ustawiany na `true`.  
  
 Przed dodaniem Instalatora do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji są ustawiane właściwości opcjonalne w instalatorze procesu i na instalacjach usługi. Podczas uzyskiwania dostępu `MyProjectInstaller`do narzędzia instalacyjnego obiekty dodane <xref:System.Configuration.Install.Installer.Installers%2A> do kolekcji za pomocą wywołania do <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> zostaną zainstalowane z kolei. W trakcie tego procesu Instalator przechowuje informacje o stanie wskazujące, które obiekty zostały zainstalowane, więc można wykonać kopię zapasową z kolei, jeśli wystąpi błąd instalacji.  
  
 Zwykle nie można jawnie utworzyć wystąpienia klasy Instalatora projektu. Należy go utworzyć i dodać <xref:System.ComponentModel.RunInstallerAttribute> atrybut do składni, ale jest to narzędzie instalacji, które faktycznie wywołuje, i w związku z tym tworzy wystąpienie klasy.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceProcess.ServiceInstaller" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu, która dziedziczy z <xref:System.Configuration.Install.Installer> klasy, i <xref:System.ComponentModel.RunInstallerAttribute> ustawić `true`atrybut klasy na. W projekcie Utwórz jedno <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienie na aplikację usługi i jedno <xref:System.ServiceProcess.ServiceInstaller> wystąpienie dla każdej usługi w aplikacji. W konstruktorze klasy Instalatora projektu ustaw właściwości instalacji usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpień i <xref:System.ServiceProcess.ServiceInstaller> i <xref:System.Configuration.Install.Installer.Installers%2A> Dodaj wystąpienia do kolekcji.  
  
 Konstruktor automatycznie generuje Źródło dziennika zdarzeń, którego <xref:System.Diagnostics.EventLog.Log%2A> właściwość jest ustawiona na dziennik <xref:System.Diagnostics.EventLogInstaller>aplikacji komputera i. <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Po ustawieniu <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> dla <xref:System.ServiceProcess.ServiceInstaller>elementu, który <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> powinien być taki sam jak w przypadku usługi, <xref:System.Diagnostics.EventLog.Source%2A> Właściwość dziennika zdarzeń jest automatycznie ustawiana na tę samą wartość. Źródło zostanie usunięte automatycznie w przypadku niepowodzenia instalacji.  
  
 Konstruktor ustawia właściwość na`ServiceStartMode.Manual` , aby określić, że użytkownik uruchamia usługę. <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Możesz zresetować właściwość do `ServiceStartMode.Automatic` , aby określić, że usługa zostanie uruchomiona po ponownym uruchomieniu komputera.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component"><see cref="T:System.ComponentModel.IComponent" /> Z którego ma zostać skopiowana.</param>
        <summary>Kopiuje właściwości z wystąpienia <see cref="T:System.ServiceProcess.ServiceBase" /> do tego Instalatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda będzie rzadko wywoływana w kodzie. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>jest zazwyczaj wywoływana tylko przez projektantów.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>zapisuje nazwę `component` usługi parametru <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> do <xref:System.ServiceProcess.ServiceInstaller> wystąpienia. (Ponieważ parametr musi być wystąpieniem klasy, która pochodzi od <xref:System.ServiceProcess.ServiceBase>, <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> jest gwarantowane, `component` że ma właściwość).  
  
> [!NOTE]
>  Jeśli używasz projektanta programu Visual Studio, ta metoda jest wywoływana w czasie projektowania, gdy użytkownik kliknie `Add Installer` składnik, który określił tę klasę jako Instalatora. Instalator pobiera wszystkie informacje z składnika na żywo i zapisuje je do użytku w czasie instalacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Składnik, który jest kojarzony z tym instalatorem, nie dziedziczy <see cref="T:System.ServiceProcess.ServiceBase" />po elemencie.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy usługa powinna być opóźniona od rozpoczęcia do momentu, w którym działają inne automatycznie uruchomione usługi.</summary>
        <value><see langword="true" />Aby opóźnić automatyczne uruchamianie usługi; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość można zastosować do dowolnej usługi, ale jest ona ignorowana, chyba że jest <xref:System.ServiceProcess.ServiceStartMode.Automatic>to tryb uruchamiania usługi. <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> Ustawienie zacznie obowiązywać przy następnym ponownym uruchomieniu systemu. Menedżer kontroli usług nie gwarantuje określonego czasu rozpoczęcia usługi.  
  
 Opóźniona usługa automatycznego uruchamiania nie może być członkiem grupy kolejności ładowania, ale może zależeć od innej usługi automatycznego uruchamiania. Jeśli aplikacja wywołuje opóźnioną usługę automatycznego uruchamiania przed załadowaniem, wywołanie zakończy się niepowodzeniem.  
  
 W systemach operacyjnych, które nie obsługują opóźnionego automatycznego uruchamiania, ustawienie tej właściwości nie ma żadnego wpływu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opis usługi.</summary>
        <value>Opis usługi. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.Description%2A> Użyj właściwości, aby opisać przeznaczenie zainstalowanej usługi dla użytkownika. Użytkownik może wyświetlić opis usługi w aplikacjach, które wyświetlają szczegóły zainstalowanych usług.  
  
 Na przykład przy użyciu systemu Windows XP można wyświetlić opis usługi za pomocą narzędzia wiersza polecenia kontroli usług (SC. exe) lub można wyświetlić opis usługi w węźle **usługi** konsoli **zarządzania komputerem** .  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości instalacji nowej aplikacji usługi systemu Windows. Przykład ustawia nazwę usługi wraz z nazwą wyświetlaną i opisem. Po przypisaniu właściwości instalacji dla usługi, przykład dodaje <xref:System.ServiceProcess.ServiceInstaller> obiekt <xref:System.Configuration.Install.Installer.Installers%2A> do kolekcji.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje przyjazną nazwę, która identyfikuje usługę dla użytkownika.</summary>
        <value>Nazwa skojarzona z usługą często używana w przypadku interaktywnych narzędzi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> Jest używany, na przykład w Menedżerze kontroli usług w celu zapewnienia czytelnej nazwy dla użytkownika dla usługi. <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> Jest to wartość rejestru, ale nie jest nigdy używana jako klucz rejestru. W związku z tym nie <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> mają zastosowania ograniczenia dotyczące wartości właściwości. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>jest używany jako klucz rejestru HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services, więc jest ograniczony.  
  
 Nazwa wyświetlana nigdy nie jest używana przez narzędzie instalacji do identyfikowania usługi, dlatego nie ma żadnych ograniczeń dotyczących wyboru nazwy, ponieważ istnieje <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> właściwość.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" /> Zawierający informacje kontekstowe skojarzone z instalacją.</param>
        <summary>Instaluje usługę przez zapisanie w rejestrze informacji o aplikacji usługi. Ta metoda jest przeznaczona do użycia przez narzędzia instalacyjne, które automatycznie przetwarzają odpowiednie metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle nie wywołamy metod w <xref:System.ServiceProcess.ServiceInstaller> kodzie. są one zwykle wywoływane tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metodę podczas instalacji. W razie potrzeby wykonuje kopię zapasową błędów, wywołując <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> na obiekt, który wygenerował wyjątek.  
  
 Procedura instalacji aplikacji automatycznie zachowuje informacje o składnikach, które zostały już zainstalowane, przy użyciu Instalatora <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>projektu. Informacje o stanie <xref:System.ServiceProcess.ServiceInstaller.Install%2A> , które <xref:System.ServiceProcess.ServiceProcessInstaller> są przesyłane do `stateSaver` programu jako parametr, są stale aktualizowane jako wystąpienie i <xref:System.ServiceProcess.ServiceInstaller> każde wystąpienie jest instalowane przez narzędzie. Zwykle nie jest konieczne, aby kod mógł jawnie modyfikować te informacje o stanie.  
  
 Skojarzona z klasą instalacji projektu służy do instalowania informacji wspólnych <xref:System.ServiceProcess.ServiceInstaller> dla wszystkich wystąpień w projekcie. <xref:System.ServiceProcess.ServiceProcessInstaller> Jeśli ta usługa ma wszystkie elementy oddzielające je od innych usług w projekcie instalacji, te informacje specyficzne dla usługi są instalowane przez tę metodę.  
  
 Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu, która dziedziczy z <xref:System.Configuration.Install.Installer> klasy, i <xref:System.ComponentModel.RunInstallerAttribute> ustawić `true`atrybut klasy na. W projekcie Utwórz jedno <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpienie na aplikację usługi i jedno <xref:System.ServiceProcess.ServiceInstaller> wystąpienie dla każdej usługi w aplikacji. W konstruktorze klasy Instalatora projektu ustaw właściwości instalacji usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller> wystąpień i <xref:System.ServiceProcess.ServiceInstaller> i <xref:System.Configuration.Install.Installer.Installers%2A> Dodaj wystąpienia do kolekcji.  
  
> [!NOTE]
>  Zaleca się używanie konstruktora do dodawania wystąpień Instalatora; Jeśli jednak musisz dodać do <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji <xref:System.ServiceProcess.ServiceInstaller.Install%2A> w metodzie, pamiętaj, aby wykonać te same operacje dodawania <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> do kolekcji w metodzie.  
  
 Dla wszystkich <xref:System.Configuration.Install.Installer> klas pochodnych z klasy stan <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji musi <xref:System.ServiceProcess.ServiceInstaller.Install%2A> być taki sam w metodzie i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> . Można jednak uniknąć konserwacji kolekcji <xref:System.ServiceProcess.ServiceInstaller.Install%2A> w metodach i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> , jeśli <xref:System.Configuration.Install.Installer.Installers%2A> dodasz wystąpienia Instalatora do kolekcji w konstruktorze klas niestandardowych Instalatora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Instalacja nie zawiera <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> pliku wykonywalnego.  
  
—lub— 
Nazwa pliku zestawu jest <see langword="null" /> lub ciągiem pustym.  
  
—lub— 
Nazwa usługi jest nieprawidłowa.  
  
—lub— 
Nie można otworzyć menedżera kontroli usług.</exception>
        <exception cref="T:System.ArgumentException">Nazwa wyświetlana usługi ma więcej niż 255 znaków.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">System nie może wygenerować dojścia do usługi.  
  
 —lub—  
  
 Usługa o tej nazwie jest już zainstalowana.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> do którego jest porównywany bieżący Instalator.</param>
        <summary>Wskazuje, czy dwóch instalatorów zainstaluje tę samą usługę.</summary>
        <returns><see langword="true" />Jeśli wywołanie <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> obu tych instalatorów spowoduje zainstalowanie tej samej usługi; w <see langword="false" />przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A>wskazuje, na przykład, czy dwóch instalatorów zainstaluje tę samą usługę w ramach tego samego konta użytkownika.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" /> Zawierający informacje kontekstowe skojarzone z instalacją.</param>
        <summary>Wycofuje informacje o aplikacji usługi zapisywane w rejestrze przez procedurę instalacji. Ta metoda jest przeznaczona do użycia przez narzędzia instalacyjne, które automatycznie przetwarzają odpowiednie metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle nie wywołamy metod w <xref:System.ServiceProcess.ServiceInstaller> kodzie. są one zwykle wywoływane tylko przez narzędzie instalacji. Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metodę podczas procesu instalacji. W razie potrzeby wykonuje kopię zapasową błędów, wywołując <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> na obiekt, który wygenerował wyjątek.  
  
 Procedura instalacji aplikacji zachowuje automatycznie informacje o składnikach, które są już zainstalowane, przy użyciu Instalatora <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>projektu. Informacje o stanie <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> , które <xref:System.ServiceProcess.ServiceProcessInstaller> są przesyłane do `savedState` programu jako parametr, są stale aktualizowane jako wystąpienie i <xref:System.ServiceProcess.ServiceInstaller> każde wystąpienie jest instalowane przez narzędzie. Zwykle nie jest konieczne, aby kod mógł jawnie modyfikować te informacje o stanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje nazwę używaną przez system do identyfikowania tej usługi. Ta właściwość musi być taka sama jak <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> w przypadku usługi, którą chcesz zainstalować.</summary>
        <value>Nazwa usługi, która ma zostać zainstalowana. Ta wartość musi być ustawiona przed próbą zainstalowania usługi przy użyciu narzędzia instalacyjnego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to kluczowa wartość <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> , która jest identyczna <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> z klasą pochodną <xref:System.ServiceProcess.ServiceBase>. Zazwyczaj wartość <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> właściwości usługi jest ustawiana w ramach funkcji Main () pliku wykonywalnego aplikacji usługi. Menedżer sterowania usługami używa <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> właściwości do lokalizowania usługi w ramach tego pliku wykonywalnego.  
  
 Po ustawieniu <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Instalatora usługi w <xref:System.Diagnostics.EventLog.Source%2A> skojarzonym dzienniku zdarzeń zostanie ustawiona taka sama wartość. Dzięki temu usługa może automatycznie rejestrować polecenia usługi (takie jak uruchamianie i zatrzymywanie) do dziennika aplikacji na komputerze.  
  
> [!NOTE]
>  Jeśli źródło o tej samej nazwie już istnieje na komputerze, ale w dzienniku innym niż dziennik aplikacji zostanie zgłoszony wyjątek. Jeśli źródło istnieje i jest skojarzone z dziennikiem aplikacji, to źródło służy do zgłaszania wywołań poleceń do usługi i nie jest zgłaszany żaden wyjątek.  
  
 Długość nie może wynosić `null`zero. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Maksymalny rozmiar to 256 znaków. Nie mogą również zawierać ukośników do przodu lub wstecz, znaku "/"\\ani "" ani znaków z zestawu znaków ASCII o wartości mniejszej niż wartość dziesiętna 32.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> Właściwość jest nieprawidłowa.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje usługi, które muszą być uruchomione, aby można było uruchomić tę usługę.</summary>
        <value>Tablica usług, które muszą być uruchomione, aby można było uruchomić usługę skojarzoną z tym instalatorem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było uruchomić usługę, można wymagać działania innych usług. Informacje z tej właściwości są zapisywane w kluczu rejestru. Gdy użytkownik (lub system, w przypadku automatycznego uruchamiania) próbuje uruchomić usługę, Menedżer kontroli usług (SCM) sprawdza, czy każda z usług w tablicy została już uruchomiona.  
  
 Jeśli jakakolwiek usługa w macierzy nie jest uruchomiona, menedżer SCM spróbuje je uruchomić. Obejmuje to usługi `Manual`. <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>  
  
 Ta usługa nie zostanie uruchomiona, jeśli nie zostanie uruchomiona jakakolwiek usługa, od której zależy ta usługa. Wyjątek nie jest zgłaszany, jeśli system nie został uruchomiony, ponieważ na poziomie systemu nie ma obsługi wyjątków w celu wykrycia tego wyjątku. Zdecyduj, jak obsługiwać błędy uruchomienia usługi i zaimplementować ją w kodzie. Zwykle okno dialogowe pojawia się podczas uruchamiania, jeśli nie można uruchomić usługi.  
  
 Jeśli usługa nie zostanie uruchomiona, wpis jest zapisywana w dzienniku zdarzeń aplikacji.  
  
 Usługi, od których zależy ta usługa, nie muszą znajdować się w tym samym pliku wykonywalnym.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, w jaki sposób i kiedy ta usługa jest uruchomiona.</summary>
        <value><see cref="T:System.ServiceProcess.ServiceStartMode" /> Reprezentujący sposób uruchomienia usługi. Wartość domyślna to <see langword="Manual" />, co oznacza, że usługa nie zostanie uruchomiona automatycznie po ponownym uruchomieniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw opcję, aby określić, że usługa zostanie uruchomiona automatycznie po ponownym uruchomieniu lub że użytkownik musi ręcznie uruchomić usługę. <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> Usługę można także wyłączyć, określając, że nie można jej uruchomić ręcznie lub programowo, dopóki nie zostanie włączona.  
  
 Nie można zmienić <xref:System.ServiceProcess.ServiceInstaller> wartości właściwości po instalacji. Aby zmienić <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, należy odinstalować i ponownie zainstalować usługę lub ręcznie zmienić ustawienie przy użyciu Menedżera kontroli usług.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Tryb uruchamiania nie jest wartością <see cref="T:System.ServiceProcess.ServiceStartMode" /> wyliczenia.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" /> Zawierający informacje kontekstowe skojarzone z instalacją.</param>
        <summary>Odinstalowuje usługę, usuwając informacje o niej z rejestru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Najpierw odinstaluj próby zatrzymania usługi przed jej odinstalowaniem. Jeśli nie można zatrzymać usługi, żaden wyjątek nie jest przechwytywany, a metoda kontynuuje usuwanie usługi.  
  
 Zwykle nie wywołamy metod w <xref:System.ServiceProcess.ServiceInstaller> kodzie. są one zwykle wywoływane tylko przez narzędzie instalacji. InstallUtil służy do odinstalowania usług, a także ich instalacji; Dezinstalacja przyjmuje przełącznik w wywołaniu wiersza polecenia.  
  
 Procedura odinstalowywania aplikacji zachowuje informacje automatycznie dotyczące odinstalowywanych składników przy użyciu Instalatora <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>projektu. Informacje o stanie <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> , które <xref:System.ServiceProcess.ServiceProcessInstaller> są przesyłane do `savedState` programu jako parametr, są stale aktualizowane jako wystąpienie i <xref:System.ServiceProcess.ServiceInstaller> każde wystąpienie jest instalowane przez narzędzie. Zwykle nie jest konieczne, aby kod mógł jawnie modyfikować te informacje o stanie.  
  
 Dla wszystkich <xref:System.Configuration.Install.Installer> klas pochodnych z klasy stan <xref:System.Configuration.Install.Installer.Installers%2A> kolekcji musi <xref:System.ServiceProcess.ServiceInstaller.Install%2A> być taki sam w metodzie i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> . Można jednak uniknąć konserwacji kolekcji <xref:System.ServiceProcess.ServiceInstaller.Install%2A> w metodach i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> , jeśli <xref:System.Configuration.Install.Installer.Installers%2A> dodasz wystąpienia Instalatora do kolekcji w konstruktorze klas niestandardowych Instalatora.  
  
 Nie istnieje mechanizm wycofywania do odinstalowania, więc jeśli jedna usługa nie zostanie odinstalowana, nie ma to wpływu na inne usługi (zwykle w tym samym projekcie instalacji).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Nie można otworzyć menedżera kontroli usług.  
  
 —lub—  
  
 System nie może pobrać dojścia do usługi.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>
