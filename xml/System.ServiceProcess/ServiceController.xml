<Type Name="ServiceController" FullName="System.ServiceProcess.ServiceController">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="10633b08e716e8a6605fe8a0d4296cd8a4110605" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36609627" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceController : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceController extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceController" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceController&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceController : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ServiceController = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceControllerDesc")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje usługi systemu Windows i pozwala połączyć się z usługą uruchamiania i zatrzymywana, zmian lub uzyskać informacje o nim.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.ServiceProcess.ServiceController> klasę, aby nawiązać połączenie i kontrolowania zachowania istniejących usług. Podczas tworzenia wystąpienia <xref:System.ServiceProcess.ServiceController> klasy, należy ustawić jej właściwości, interakcji z określonej usługi systemu Windows. Następnie można klasy uruchamianie, zatrzymywanie i manipulowania w przeciwnym razie usługa.  
  
 Prawdopodobnie użyje <xref:System.ServiceProcess.ServiceController> składnika w charakterze administracyjnych. Na przykład można utworzyć systemu Windows lub aplikacji sieci Web, która wysyła niestandardowych poleceń usługi za pośrednictwem <xref:System.ServiceProcess.ServiceController> wystąpienia. Będzie to przydatne, ponieważ przystawki Menedżer sterowania usługami (SCM) programu Microsoft Management Console nie obsługuje polecenia niestandardowych.  
  
 Po utworzeniu wystąpienia <xref:System.ServiceProcess.ServiceController>, dwie właściwości należy ustawić na nim do identyfikowania usługi, z którym współdziała: Nazwa komputera i nazwa usługi kontroli.  
  
> [!NOTE]
>  Domyślnie <xref:System.ServiceProcess.ServiceController.MachineName%2A> jest ustawiona na komputerze lokalnym, dzięki czemu nie trzeba go zmienić, chyba że chcesz ustawić wystąpienia wskaż inny komputer.  
  
 Ogólnie rzecz biorąc autora usługi zapisuje kod, który dostosowuje akcję skojarzoną z określonego polecenia. Na przykład usługa może zawierać kod, aby odpowiedzieć na <xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=nameWithType> polecenia. W takim przypadku niestandardowych przetwarzania dla <xref:System.ServiceProcess.ServiceController.Pause%2A> zadanie jest uruchamiane przed system wstrzymuje usługę.  
  
 Zestaw poleceń, które usługa może przetwarzać zależy od jego właściwości; na przykład można ustawić <xref:System.ServiceProcess.ServiceController.CanStop%2A> właściwości dla usługi w celu `false`. To ustawienie powoduje `Stop` polecenie niedostępne w tym określonej usługi; uniemożliwia zatrzymywanie usługi w SCM przez wyłączenie przycisku niezbędne. Próba zatrzymania usługi w kodzie system zgłasza błąd i wyświetla komunikat o błędzie "nie można zatrzymać `servicename`."  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.ServiceProcess.ServiceController> klasy do formantu `SimpleService` przykład usługi.  
  
 [!code-csharp[ServiceControllerClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#1)]
 [!code-vb[ServiceControllerClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.ServiceProcess.ServiceControllerStatus" />
    <altmember cref="T:System.ServiceProcess.ServiceType" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceProcess.ServiceController" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceController();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceProcess.ServiceController" /> klasy, która nie jest skojarzony z określoną usługą.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceController (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceController(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.ServiceProcess.ServiceController : string -&gt; System.ServiceProcess.ServiceController" Usage="new System.ServiceProcess.ServiceController name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa, która identyfikuje usługę w systemie. Może to być również nazwę wyświetlaną dla usługi.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceProcess.ServiceController" /> klasy, która jest skojarzona z istniejącą usługę na komputerze lokalnym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.ServiceProcess.ServiceController.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora w celu utworzenia <xref:System.ServiceProcess.ServiceController> obiekt, który służy do sterowania usługą próbki. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.ServiceProcess.ServiceController> klasy.  
  
 [!code-csharp[ServiceControllerClass#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> jest nieprawidłowy.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceController (string name, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceController(System::String ^ name, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="new System.ServiceProcess.ServiceController : string * string -&gt; System.ServiceProcess.ServiceController" Usage="new System.ServiceProcess.ServiceController (name, machineName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa, która identyfikuje usługę w systemie. Może to być również nazwę wyświetlaną dla usługi.</param>
        <param name="machineName">Komputer, na którym znajduje się usługa.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceProcess.ServiceController" /> klasy, która jest skojarzona z istniejącej usługi na określonym komputerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać `machineName` parametru, można użyć "." do reprezentowania na komputerze lokalnym.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> jest nieprawidłowy.  - lub - <paramref name="machineName" /> jest nieprawidłowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanPauseAndContinue : bool" Usage="System.ServiceProcess.ServiceController.CanPauseAndContinue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPCanPauseAndContinue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy usługa może wstrzymany i ponownie uruchomiony.</summary>
        <value>
          <see langword="true" /> Jeśli usługa może zostać wstrzymana; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.ServiceProcess.ServiceController.CanPauseAndContinue%2A> właściwości w celu określenia, czy usługa może Wstrzymaj i Kontynuuj. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.ServiceProcess.ServiceController> klasy.  
  
 [!code-csharp[ServiceControllerClass#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanShutdown : bool" Usage="System.ServiceProcess.ServiceController.CanShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPCanShutdown")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy Usługa powiadamiania, gdy system jest zamykany.</summary>
        <value>
          <see langword="true" /> Jeśli usługa powiadamiania, gdy system jest zamykany; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.ServiceProcess.ServiceController.CanShutdown%2A> właściwości w celu określenia, czy usługa zapewnia obsługi zdarzeń zamknięcia systemu. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.ServiceProcess.ServiceController> klasy.  
  
 [!code-csharp[ServiceControllerClass#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanStop : bool" Usage="System.ServiceProcess.ServiceController.CanStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPCanStop")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy usługa może być zatrzymana po jego uruchomieniu.</summary>
        <value>
          <see langword="true" /> Jeśli usługa może zostać zatrzymana i <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> metody o nazwie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.ServiceProcess.ServiceController.CanStop%2A> właściwości w celu określenia, czy usługa udostępnia program obsługi dla zdarzenia zatrzymania. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.ServiceProcess.ServiceController> klasy.  
  
 [!code-csharp[ServiceControllerClass#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="serviceController.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odłącza to <see cref="T:System.ServiceProcess.ServiceController" /> wystąpienie z usługi i zwalnia wszystkie zasoby, które wystąpienie przydzielone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.Close%2A> zwalnia wszystkie dojścia skojarzone z <xref:System.ServiceProcess.ServiceController> wystąpienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public void Continue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Continue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Continue" />
      <MemberSignature Language="VB.NET" Value="Public Sub Continue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Continue();" />
      <MemberSignature Language="F#" Value="member this.Continue : unit -&gt; unit" Usage="serviceController.Continue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kontynuuje usługę po została wstrzymana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania <xref:System.ServiceProcess.ServiceController.Continue%2A> dla usługi, jego stan jest zmieniany najpierw na `ContinuePending` , a następnie, w trakcie <xref:System.ServiceProcess.ServiceController.Continue%2A> metoda zwróci wartość, jest zmieniana na `Running`.  
  
 Nie można wywołać <xref:System.ServiceProcess.ServiceController.Continue%2A> dla usługi, dopóki stan kontrolera usługi `Paused`.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.ServiceProcess.ServiceController.Continue%2A> metodę, aby kontynuować wstrzymanej usługi. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.ServiceProcess.ServiceController> klasy.  
  
 [!code-csharp[ServiceControllerClass#5](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#5)]
 [!code-vb[ServiceControllerClass#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">kontroli usług na komputerze. Wyliczenie skojarzone: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać nieograniczony dostęp do informacji o usłudze. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.ServiceProcess.ServiceController.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceController.Pause" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="DependentServices">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceController[] DependentServices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceProcess.ServiceController[] DependentServices" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.DependentServices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependentServices As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ DependentServices { cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependentServices : System.ServiceProcess.ServiceController[]" Usage="System.ServiceProcess.ServiceController.DependentServices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPDependentServices")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera zbiór usług jest zależna od usługi skojarzone z tym <see cref="T:System.ServiceProcess.ServiceController" /> wystąpienia.</summary>
        <value>Tablica <see cref="T:System.ServiceProcess.ServiceController" /> wystąpienia, z których każdy jest skojarzony z usługą, która jest zależna od tej usługi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.DependentServices%2A> Tablicy reprezentuje usług, które system zatrzymuje aplikację <xref:System.ServiceProcess.ServiceController.Stop%2A> dla tej usługi.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasy, aby wyświetlić zestaw usług, które są zależne od usługi dziennika zdarzeń.  
  
 [!code-cpp[ServiceController#3](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#3)]
 [!code-csharp[ServiceController#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#3)]
 [!code-vb[ServiceController#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">Aby uzyskać połączenie istniejących usług na komputerze. Wyliczenie skojarzone: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceController.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia przyjazną nazwę dla usługi.</summary>
        <value>Przyjazna nazwa usługi, która może służyć do identyfikowania usługi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można ustawić <xref:System.ServiceProcess.ServiceController.DisplayName%2A> ciąg pusty (""), ale ustawienie właściwości `null` zgłasza wyjątek.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasy, aby wyświetlić zestaw usług, które są zależne od usługi dziennika zdarzeń.  
  
 [!code-cpp[ServiceController#3](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#3)]
 [!code-csharp[ServiceController#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#3)]
 [!code-vb[ServiceController#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.ServiceProcess.ServiceController.DisplayName" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="serviceController.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="serviceController.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.ServiceProcess.ServiceController" /> i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną `Dispose()` — metoda i <xref:System.Object.Finalize%2A> metody. `Dispose()` wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. <xref:System.Object.Finalize%2A> wywołuje `Dispose` z `disposing` ustawioną `false`.  
  
 Gdy `disposing` parametr ma wartość true, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.ServiceProcess.ServiceController> odwołania. Ta metoda wywołuje `Dispose()` metody każdego odwołuje się do obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> można wywoływać wielokrotnie przez inne obiekty. W przypadku przesłaniania <see langword="Dispose(Boolean)" /> należy uważać, aby nie odwołują się obiekty, które zostały wcześniej zlikwidowane w wywołaniu wcześniejszych <see langword="Dispose" />. Aby uzyskać więcej informacji na temat sposobu wdrażania <see langword="Dispose(Boolean)" />, zobacz [implementacja Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Aby uzyskać więcej informacji na temat <see langword="Dispose" /> i <see cref="M:System.Object.Finalize" />, zobacz [czyszczenia Resources](~/docs/standard/garbage-collection/unmanaged.md) niezarządzane i [zastąpienie metody Finalize] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCommand">
      <MemberSignature Language="C#" Value="public void ExecuteCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteCommand(int command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteCommand : int -&gt; unit" Usage="serviceController.ExecuteCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">Flaga polecenia zdefiniowanym przez aplikację, wskazującą niestandardowe polecenie do wykonania. Wartość musi należeć do zakresu od 128 i 256 włącznie.</param>
        <summary>Wykonuje polecenia niestandardowych w usłudze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>, nie zmienia stanu usługi. Jeśli usługa została uruchomiona, pozostaje w stanie `Running`. Jeśli usługa została zatrzymana, pozostaje w stanie `Stopped`i tak dalej. Do przetworzenia polecenia niestandardowych, usługa musi zastąpić <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> — metoda i zapewnienia obsługi polecenie identyfikowane przez `command` parametru.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.ServiceProcess.ServiceController.ExecuteCommand%28System.Int32%29?displayProperty=nameWithType> metodę można wykonać polecenia niestandardowych w `SimpleService` przykład usługi.  
  
 [!code-csharp[ServiceContoller_ExecuteCommand#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceContoller_ExecuteCommand/CS/program.cs#1)]
 [!code-vb[ServiceContoller_ExecuteCommand#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceContoller_ExecuteCommand/VB/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">kontroli usług na komputerze. Wyliczenie skojarzone: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać nieograniczony dostęp do informacji o usłudze. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDevices">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera usług sterowników urządzeń na komputerze.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDevices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetDevices ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetDevices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetDevices" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDevices () As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ GetDevices();" />
      <MemberSignature Language="F#" Value="static member GetDevices : unit -&gt; System.ServiceProcess.ServiceController[]" Usage="System.ServiceProcess.ServiceController.GetDevices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera usług sterowników urządzeń na komputerze lokalnym.</summary>
        <returns>Tablica typu <see cref="T:System.ServiceProcess.ServiceController" /> w każdym elemencie jest skojarzona z usługą sterownik urządzenia na komputerze lokalnym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.GetDevices%2A> Zwraca tylko urządzenie usług sterowników z komputera lokalnego. Aby pobrać sterownik urządzenia z systemem innym niż usługi lub usług, które nie są sterownikami, należy wywołać <xref:System.ServiceProcess.ServiceController.GetServices%2A> metody. Razem te dwie metody zapewniają dostęp do wszystkich usług na komputerze.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasy do wyświetlenia usług sterowników urządzeń na komputerze lokalnym.  
  
 [!code-cpp[ServiceController#5](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#5)]
 [!code-csharp[ServiceController#5](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#5)]
 [!code-vb[ServiceController#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetServices" />
      </Docs>
    </Member>
    <Member MemberName="GetDevices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetDevices (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetDevices(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetDevices(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDevices (machineName As String) As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ GetDevices(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetDevices : string -&gt; System.ServiceProcess.ServiceController[]" Usage="System.ServiceProcess.ServiceController.GetDevices machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">Komputer, z którego można pobrać usług sterowników urządzeń.</param>
        <summary>Pobiera usług sterownik urządzenia na określonym komputerze.</summary>
        <returns>Tablica typu <see cref="T:System.ServiceProcess.ServiceController" /> w każdym elemencie jest skojarzona z usługą sterownik urządzenia na określonym komputerze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.GetDevices%2A> Zwraca tylko urządzenie usług sterowników z określonego komputera. Aby pobrać sterownik urządzenia z systemem innym niż usługi lub usług, które nie są sterownikami, należy wywołać <xref:System.ServiceProcess.ServiceController.GetServices%2A> metody. Razem te dwie metody zapewniają dostęp do wszystkich usług na komputerze.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="machineName" /> Parametr ma nieprawidłową składnię.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetServices" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetServices">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera sterownik urządzenia z systemem innym niż usług na komputerze i tych, które nie są sterownikami.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetServices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetServices" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetServices () As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ GetServices();" />
      <MemberSignature Language="F#" Value="static member GetServices : unit -&gt; System.ServiceProcess.ServiceController[]" Usage="System.ServiceProcess.ServiceController.GetServices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wszystkie usługi na komputerze lokalnym, z wyjątkiem usług sterowników urządzeń.</summary>
        <returns>Tablica typu <see cref="T:System.ServiceProcess.ServiceController" /> w każdym elemencie jest skojarzony z usługą na komputerze lokalnym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.GetServices%2A> Zwraca tylko usługi sterownik urządzenia z systemem innym niż i usług, które nie są sterowniki z komputera lokalnego. Aby uzyskać dostęp do usług sterowników urządzeń, należy wywołać <xref:System.ServiceProcess.ServiceController.GetDevices%2A> metody. Razem te dwie metody zapewniają dostęp do wszystkich usług na komputerze.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasy do wyświetlenia usługi, które są uruchomione na komputerze lokalnym.  
  
 [!code-cpp[ServiceController#6](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#6)]
 [!code-csharp[ServiceController#6](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#6)]
 [!code-vb[ServiceController#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetDevices" />
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetServices (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetServices(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetServices(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetServices (machineName As String) As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ GetServices(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetServices : string -&gt; System.ServiceProcess.ServiceController[]" Usage="System.ServiceProcess.ServiceController.GetServices machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">Komputer, z którego można pobrać usługi.</param>
        <summary>Pobiera wszystkie usługi na określonym komputerze, z wyjątkiem usług sterowników urządzeń.</summary>
        <returns>Tablica typu <see cref="T:System.ServiceProcess.ServiceController" /> w każdym elemencie jest skojarzona z usługą na określonym komputerze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.GetServices%2A> Zwraca tylko usługi sterownik urządzenia z systemem innym niż i usług, które nie są sterowniki z określonego komputera. Aby uzyskać dostęp do usług sterowników urządzeń, należy wywołać <xref:System.ServiceProcess.ServiceController.GetDevices%2A> metody. Razem te dwie metody zapewniają dostęp do wszystkich usług na komputerze.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="machineName" /> Parametr ma nieprawidłową składnię.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetDevices" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.ServiceProcess.ServiceController.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(".")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPMachineName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę komputera, na którym znajduje się ta usługa.</summary>
        <value>Nazwa komputera, na którym jest uruchomiona usługa skojarzony z tym <see cref="T:System.ServiceProcess.ServiceController" /> wystąpienia. Wartość domyślna to komputer lokalny (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa komputera jest nazwą serwera, który jest uruchomiona ta usługa, bez kropką ukośnik odwrotny (\\\\).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.ServiceProcess.ServiceController.MachineName" /> Składnia jest nieprawidłowa.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="serviceController.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wstrzymuje wykonywanie operacji usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można wywołać <xref:System.ServiceProcess.ServiceController.Continue%2A> dla usługi, dopóki stan kontrolera usługi `Paused`.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.ServiceProcess.ServiceController.Pause%2A> metody, aby wstrzymać usługę. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.ServiceProcess.ServiceController> klasy.  
  
 [!code-csharp[ServiceControllerClass#4](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#4)]
 [!code-vb[ServiceControllerClass#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">kontroli usług na komputerze. Wyliczenie skojarzone: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać nieograniczony dostęp do informacji o usłudze. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.ServiceProcess.ServiceController.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceController.Continue" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberSignature Language="F#" Value="member this.Refresh : unit -&gt; unit" Usage="serviceController.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odświeża wartości właściwości poprzez zresetowanie bieżącej wartości właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.Refresh%2A> Metody powoduje, że <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>, <xref:System.ServiceProcess.ServiceController.DependentServices%2A>, i <xref:System.ServiceProcess.ServiceController.Status%2A> właściwości, aby przywrócić ich bieżącymi wartościami, gdy obok odwołują.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.ServiceProcess.ServiceController.Refresh%2A> metodę, aby uzyskać stan usługi. Kod powoduje, że usługa do wstrzymania, a następnie czeka na stan w celu odzwierciedlenia zmian. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.ServiceProcess.ServiceController> klasy.  
  
 [!code-csharp[ServiceControllerClass#4](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#4)]
 [!code-vb[ServiceControllerClass#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.SafeHandle ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.SafeHandle ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceHandle As SafeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::SafeHandle ^ ServiceHandle { System::Runtime::InteropServices::SafeHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceHandle : System.Runtime.InteropServices.SafeHandle" Usage="System.ServiceProcess.ServiceController.ServiceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.SafeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dojście dla usługi.</summary>
        <value>A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> zawiera dojście do usługi.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać dostęp do kodu niezarządzanego. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceController.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ServiceProcess.Design.ServiceNameConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę, która identyfikuje usługę, która odwołuje się do tego wystąpienia.</summary>
        <value>Nazwa, która identyfikuje usługę tego <see cref="T:System.ServiceProcess.ServiceController" /> odwołania do wystąpienia. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.ServiceName%2A> Identyfikuje usługę menedżera kontroli usług. Zmienianie tej właściwości spowoduje, że <xref:System.ServiceProcess.ServiceController> wystąpienia, aby powiązać z innej usługi, nie powoduje zmiany Wyświetla przystawki programu Microsoft Management Console jakie Menedżera sterowania usługami.  
  
 Podczas wdrażania usługi niestandardowej, wartość tej właściwości musi być taka sama jak nazwa zarejestrowane w usłudze <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> właściwości odpowiadającego <xref:System.ServiceProcess.ServiceInstaller> klasy. W kodzie <xref:System.ServiceProcess.ServiceController.ServiceName%2A> zazwyczaj znajduje się w `main()` funkcja pliku wykonywalnego.  
  
 Podczas resetowania <xref:System.ServiceProcess.ServiceController.ServiceName%2A> właściwości, metody, która ustawia właściwość ustawia tego wystąpienia <xref:System.ServiceProcess.ServiceController.DisplayName%2A> ciąg pusty ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.ServiceProcess.ServiceController.ServiceName" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Składnia <see cref="P:System.ServiceProcess.ServiceController.ServiceName" /> właściwość jest nieprawidłowa.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceController[] ServicesDependedOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceProcess.ServiceController[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServicesDependedOn As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ ServicesDependedOn { cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : System.ServiceProcess.ServiceController[]" Usage="System.ServiceProcess.ServiceController.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zestaw usług, które zależy od tej usługi.</summary>
        <value>Tablica <see cref="T:System.ServiceProcess.ServiceController" /> wystąpienia, z których każdy jest skojarzony z usługą, która musi być uruchomiona na uruchamianie tej usługi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli usługa żadnego w <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A> tablicy nie jest uruchomiona, nie można uruchomić tę usługę.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasy, aby wyświetlić zestaw usług, które usługa Posłaniec jest zależna od.  
  
 [!code-cpp[ServiceController#4](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#4)]
 [!code-csharp[ServiceController#4](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#4)]
 [!code-vb[ServiceController#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">Aby uzyskać połączenie istniejących usług na komputerze. Wyliczenie skojarzone: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceType ServiceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceType ServiceType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServiceType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceType As ServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceType ServiceType { System::ServiceProcess::ServiceType get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceType : System.ServiceProcess.ServiceType" Usage="System.ServiceProcess.ServiceController.ServiceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPServiceType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ usługi, która odwołuje się ten obiekt.</summary>
        <value>Jeden z <see cref="T:System.ServiceProcess.ServiceType" /> wartości używane do wskazania typ usługi sieciowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typ usługi wskazuje, jak usługa jest używana przez system. Wartość <xref:System.ServiceProcess.ServiceController.ServiceType%2A> właściwość reprezentuje zestaw flag łączyć przy użyciu bitowego operatora OR.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasy do wyświetlenia usług sterowników urządzeń na komputerze lokalnym.  
  
 [!code-cpp[ServiceController#5](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#5)]
 [!code-csharp[ServiceController#5](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#5)]
 [!code-vb[ServiceController#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Uruchamia usługę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="serviceController.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia usługę przekazywanie bez argumentów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można wywołać <xref:System.ServiceProcess.ServiceController.Stop%2A> dla usługi, dopóki stan kontrolera usługi `Running`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasy, aby sprawdzić, czy alert usługa zostanie zatrzymana. Jeśli usługa zostanie zatrzymana, w przykładzie uruchamia usługę i czeka, aż stan usługi jest ustawiony na <xref:System.ServiceProcess.ServiceControllerStatus.Running>.  
  
 [!code-cpp[ServiceController#1](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#1)]
 [!code-csharp[ServiceController#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#1)]
 [!code-vb[ServiceController#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">kontroli usług na komputerze. Wyliczenie skojarzone: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać nieograniczony dostęp do informacji o usłudze. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.ServiceProcess.ServiceController.Stop" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Start(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (args As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Start : string[] -&gt; unit" Usage="serviceController.Start args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Tablica argumenty do przekazania do usługi podczas jej uruchamiania.</param>
        <summary>Uruchamia usługę, przekazywanie do określonych argumentów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można wywołać <xref:System.ServiceProcess.ServiceController.Stop%2A> dla usługi, dopóki stan kontrolera usługi `Running`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można uruchomić usługi.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="args" /> jest <see langword="null" />.  element członkowski tablicy jest - lub - <see langword="null" />.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">kontroli usług na komputerze. Wyliczenie skojarzone: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać nieograniczony dostęp do informacji o usłudze. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.ServiceProcess.ServiceController.Stop" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.StartType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode" Usage="System.ServiceProcess.ServiceController.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która wskazuje, jak usługa reprezentowany przez <see cref="T:System.ServiceProcess.ServiceController" /> obiekt uruchamia.</summary>
        <value>Wartość, która wskazuje sposób uruchamiania usługi.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">Przeglądanie usług na komputerze. Wyliczenie skojarzone: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse" />.</permission>
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceControllerStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceControllerStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As ServiceControllerStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceControllerStatus Status { System::ServiceProcess::ServiceControllerStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.ServiceProcess.ServiceControllerStatus" Usage="System.ServiceProcess.ServiceController.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPStatus")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceControllerStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera stan usługi, do którego odwołuje się przez to wystąpienie.</summary>
        <value>Jeden z <see cref="T:System.ServiceProcess.ServiceControllerStatus" /> wartości, które wskazuje, czy usługa jest uruchomiona, zatrzymana lub wstrzymana, lub czy start, stop, wstrzymać lub kontynuować polecenia jest w stanie oczekiwania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stan wskazuje bieżący stan usługi. Zestaw możliwych wartości zawiera kilka, wskazujące, czy trwa oczekiwanie na zmianę stanu polecenia.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasę, aby sprawdzić bieżący stan usługi Telnet. Jeśli usługa zostanie zatrzymana, przykładzie uruchamia usługę. Jeśli usługa jest uruchomiona, przykładzie zatrzymuje usługę.  
  
 [!code-cpp[ServiceController#2](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#2)]
 [!code-csharp[ServiceController#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#2)]
 [!code-vb[ServiceController#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="serviceController.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje zatrzymanie tej usługi oraz wszystkie usługi, które są zależne od tej usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wszystkie usługi są zależne od tej usługi do ich działania, będzie można zatrzymać przed ta usługa zostanie zatrzymana. <xref:System.ServiceProcess.ServiceController.DependentServices%2A> Właściwość zawiera zestaw usług, które są zależne od tego.  
  
 Jeśli zatrzymasz to usługa, która zależy od tej usługi, należy wywołać <xref:System.ServiceProcess.ServiceController.Stop%2A> metody w tej usłudze w ciągu <xref:System.ServiceProcess.ServiceController.Stop%2A> metody usługi nadrzędnej. <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A> Właściwość zawiera usług, od których zależy od tej usługi.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasę, aby sprawdzić bieżący stan usługi Telnet. Jeśli usługa zostanie zatrzymana, przykładzie uruchamia usługę. Jeśli usługa jest uruchomiona, przykładzie zatrzymuje usługę.  
  
 [!code-cpp[ServiceController#2](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#2)]
 [!code-csharp[ServiceController#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#2)]
 [!code-vb[ServiceController#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Wystąpił błąd podczas uzyskiwania dostępu do interfejsu API systemu.</exception>
        <exception cref="T:System.InvalidOperationException">Nie można odnaleźć usługi.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">kontroli usług na komputerze. Wyliczenie skojarzone: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać nieograniczony dostęp do informacji o usłudze. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.ServiceProcess.ServiceController.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceController.Start" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForStatus">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Czeka na osiągnięcie określonego stanu usługi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForStatus">
      <MemberSignature Language="C#" Value="public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForStatus(valuetype System.ServiceProcess.ServiceControllerStatus desiredStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WaitForStatus (desiredStatus As ServiceControllerStatus)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WaitForStatus(System::ServiceProcess::ServiceControllerStatus desiredStatus);" />
      <MemberSignature Language="F#" Value="member this.WaitForStatus : System.ServiceProcess.ServiceControllerStatus -&gt; unit" Usage="serviceController.WaitForStatus desiredStatus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredStatus" Type="System.ServiceProcess.ServiceControllerStatus" />
      </Parameters>
      <Docs>
        <param name="desiredStatus">Stan oczekiwania.</param>
        <summary>Nieograniczonej czeka na osiągnięcie określonego stanu usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> wstrzymania aplikacji przetwarzania do momentu usługi ze stanem wymagane.  
  
> [!NOTE]
>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> Metoda oczekuje około 250 milisekund między każdym sprawdzenie stanu.  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> Nie można wykryć w przypadku usługi obserwowanych zmiana na `desiredStatus` , a następnie natychmiast na inny stan, w tym zakresie.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ServiceProcess.ServiceController> klasy, aby sprawdzić, czy alert usługa zostanie zatrzymana. Jeśli usługa zostanie zatrzymana, w przykładzie uruchamia usługę i czeka, aż stan usługi jest ustawiony na <xref:System.ServiceProcess.ServiceControllerStatus.Running>.  
  
 [!code-cpp[ServiceController#1](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#1)]
 [!code-csharp[ServiceController#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#1)]
 [!code-vb[ServiceController#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="desiredStatus" /> Parametr nie jest jedną z wartości zdefiniowanych w <see cref="T:System.ServiceProcess.ServiceControllerStatus" /> wyliczenia.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="WaitForStatus">
      <MemberSignature Language="C#" Value="public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForStatus(valuetype System.ServiceProcess.ServiceControllerStatus desiredStatus, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WaitForStatus (desiredStatus As ServiceControllerStatus, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WaitForStatus(System::ServiceProcess::ServiceControllerStatus desiredStatus, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitForStatus : System.ServiceProcess.ServiceControllerStatus * TimeSpan -&gt; unit" Usage="serviceController.WaitForStatus (desiredStatus, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredStatus" Type="System.ServiceProcess.ServiceControllerStatus" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="desiredStatus">Stan oczekiwania.</param>
        <param name="timeout">A <see cref="T:System.TimeSpan" /> obiekt określający czas oczekiwania na osiągnięcie określonego stanu usługi.</param>
        <summary>Oczekuje na osiągnięcie określonego stanu usługi lub określona wartość limitu czasu wygaśnięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> wstrzymania aplikacji przetwarzania do momentu usługi ze stanem wymagane.  
  
> [!NOTE]
>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> Metoda oczekuje około 250 milisekund między każdym sprawdzenie stanu.  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> Nie można wykryć w przypadku usługi obserwowanych zmiana na `desiredStatus` , a następnie natychmiast na inny stan, w tym zakresie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="desiredStatus" /> Parametr nie jest jedną z wartości zdefiniowanych w <see cref="T:System.ServiceProcess.ServiceControllerStatus" /> wyliczenia.</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">Wartość określona dla <paramref name="timeout" /> parametru wygaśnie.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
  </Members>
</Type>