<Type Name="ExpressionContext" FullName="System.ComponentModel.Design.Serialization.ExpressionContext">
  <TypeSignature Language="C#" Value="public sealed class ExpressionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExpressionContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.ExpressionContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExpressionContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionContext sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="34568-101">Umożliwia przekazywanie stan kontekstu wśród serializatorów.</span><span class="sxs-lookup"><span data-stu-id="34568-101">Provides a means of passing context state among serializers.</span></span> <span data-ttu-id="34568-102">Klasa ta nie może być dziedziczona.</span><span class="sxs-lookup"><span data-stu-id="34568-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34568-103"><xref:System.ComponentModel.Design.Serialization.ExpressionContext> Jest umieszczona w kontekście stosu i zawiera wyrażenie najistotniejsza podczas serializacji.</span><span class="sxs-lookup"><span data-stu-id="34568-103">An <xref:System.ComponentModel.Design.Serialization.ExpressionContext> is placed on the context stack and contains the most relevant expression during serialization.</span></span> <span data-ttu-id="34568-104">Poniższy kod C# przedstawia przypisania.</span><span class="sxs-lookup"><span data-stu-id="34568-104">The following C# code demonstrates an assignment.</span></span>  
  
```csharp  
button1.Text = "Hello";  
```  
  
 <span data-ttu-id="34568-105">Podczas serializacji kilka serializatorów są odpowiedzialne za tworzenie tego jednej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="34568-105">During serialization, several serializers are responsible for creating this single statement.</span></span> <span data-ttu-id="34568-106">Jedną z tych serializatorów jest odpowiedzialny za tworzenie "tekst Hello".</span><span class="sxs-lookup"><span data-stu-id="34568-106">One of those serializers is responsible for creating "Hello".</span></span> <span data-ttu-id="34568-107">Brak razy podczas serializator może być potrzebny kontekst, w której jest tworzona jej wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="34568-107">There are times when that serializer may need to know the context in which it is creating its expression.</span></span> <span data-ttu-id="34568-108">W poprzednim przykładzie tego kontekstu nie jest wymagana.</span><span class="sxs-lookup"><span data-stu-id="34568-108">In the previous example, this context is not needed.</span></span> <span data-ttu-id="34568-109">Poniższy kod C# przedstawia sytuacji, w którym wiedzy o kontekście jest to konieczne.</span><span class="sxs-lookup"><span data-stu-id="34568-109">The following C# code shows a situation in which knowledge of the context is necessary.</span></span>  
  
```csharp  
button1.Text = rm.GetString("button1_Text");  
```  
  
 <span data-ttu-id="34568-110">W takim przypadku serializator odpowiedzialną za tworzenie wyrażenie zasobu musi mieć świadomość, nazwy obiektów docelowych.</span><span class="sxs-lookup"><span data-stu-id="34568-110">In this case, the serializer responsible for creating the resource expression needs to be informed of the names of the target objects.</span></span> <span data-ttu-id="34568-111"><xref:System.ComponentModel.Design.Serialization.ExpressionContext> Klasa może być używana w tym.</span><span class="sxs-lookup"><span data-stu-id="34568-111">The <xref:System.ComponentModel.Design.Serialization.ExpressionContext> class can be used for this.</span></span> <span data-ttu-id="34568-112">Podczas każdego serializator tworzy wyrażenie i wywołuje serializatora do obsługi mniejszych część instrukcji jako całość, serializator wypycha kontekstu wyrażenia na stos kontekstu.</span><span class="sxs-lookup"><span data-stu-id="34568-112">As each serializer creates an expression and invokes a serializer to handle a smaller part of the statement as a whole, the serializer pushes an expression context on the context stack.</span></span> <span data-ttu-id="34568-113">Każdy kontekst wyrażenie ma właściwość nadrzędna, która lokalizuje dalej kontekstu wyrażenia na stosie.</span><span class="sxs-lookup"><span data-stu-id="34568-113">Each expression context has a parent property that locates the next expression context on the stack.</span></span> <span data-ttu-id="34568-114">Zapewnia to wygodny możliwość przechodzenia.</span><span class="sxs-lookup"><span data-stu-id="34568-114">This provides a convenient traversal capability.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.CodeDom.CodeExpression" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="34568-115">Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="34568-115">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="34568-116">Wyrażenie podanego kodu.</span><span class="sxs-lookup"><span data-stu-id="34568-116">The given code expression.</span></span></param>
        <param name="expressionType"><span data-ttu-id="34568-117">Typ wyrażenia podanego kodu.</span><span class="sxs-lookup"><span data-stu-id="34568-117">The given code expression type.</span></span></param>
        <param name="owner"><span data-ttu-id="34568-118">Właściciel podanego kodu wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="34568-118">The given code expression owner.</span></span></param>
        <summary><span data-ttu-id="34568-119">Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> z danego wyrażenia i właściciela.</span><span class="sxs-lookup"><span data-stu-id="34568-119">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> class with the given expression and owner.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34568-120"><paramref name="expression" />, <paramref name="expressionType" />, lub <paramref name="owner" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="34568-120"><paramref name="expression" />, <paramref name="expressionType" />, or <paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner, object presetValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object, presetValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner, System::Object ^ presetValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
        <Parameter Name="presetValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="34568-121">Wyrażenie podanego kodu.</span><span class="sxs-lookup"><span data-stu-id="34568-121">The given code expression.</span></span></param>
        <param name="expressionType"><span data-ttu-id="34568-122">Typ wyrażenia podanego kodu.</span><span class="sxs-lookup"><span data-stu-id="34568-122">The given code expression type.</span></span></param>
        <param name="owner"><span data-ttu-id="34568-123">Właściciel podanego kodu wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="34568-123">The given code expression owner.</span></span></param>
        <param name="presetValue"><span data-ttu-id="34568-124">Wyrażenie podanego kodu wstępnie wartość.</span><span class="sxs-lookup"><span data-stu-id="34568-124">The given code expression preset value.</span></span></param>
        <summary><span data-ttu-id="34568-125">Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> klasy z bieżącą wartość.</span><span class="sxs-lookup"><span data-stu-id="34568-125">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> class with a current value.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34568-126"><paramref name="expression" />, <paramref name="expressionType" />, lub <paramref name="owner" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="34568-126"><paramref name="expression" />, <paramref name="expressionType" />, or <paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Expression" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Expression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Expression { System::CodeDom::CodeExpression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34568-127">Pobiera wyrażenie, które reprezentuje w tym kontekście.</span><span class="sxs-lookup"><span data-stu-id="34568-127">Gets the expression this context represents.</span></span></summary>
        <value><span data-ttu-id="34568-128">Wyrażenie reprezentuje tego kontekstu.</span><span class="sxs-lookup"><span data-stu-id="34568-128">The expression this context represents.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionType">
      <MemberSignature Language="C#" Value="public Type ExpressionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ExpressionType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ExpressionType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34568-129">Pobiera <see cref="T:System.Type" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="34568-129">Gets the <see cref="T:System.Type" /> of the expression.</span></span></summary>
        <value><span data-ttu-id="34568-130"><see cref="T:System.Type" /> Wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="34568-130">The <see cref="T:System.Type" /> of the expression.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34568-131">Można użyć <xref:System.ComponentModel.Design.Serialization.ExpressionContext> do określenia, czy rzutowanie jest wymagana podczas przypisywania do wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="34568-131">You can use <xref:System.ComponentModel.Design.Serialization.ExpressionContext> to determine if a cast is needed when assigning to the expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public object Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Owner { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34568-132">Pobiera obiekt będący właścicielem tego wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="34568-132">Gets the object owning this expression.</span></span></summary>
        <value><span data-ttu-id="34568-133">Obiekt będący właścicielem tego wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="34568-133">The object owning this expression.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34568-134">Jeśli wyrażenie jest odwołanie do właściwości <xref:System.Windows.Forms.Control.Text%2A> właściwości wystąpienia <xref:System.Windows.Forms.Button> o nazwie `button1`, <xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A> zwraca `button1`.</span><span class="sxs-lookup"><span data-stu-id="34568-134">If the expression is a property reference to the <xref:System.Windows.Forms.Control.Text%2A> property of an instance of <xref:System.Windows.Forms.Button> called `button1`, <xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A> returns `button1`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="PresetValue">
      <MemberSignature Language="C#" Value="public object PresetValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PresetValue" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PresetValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PresetValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34568-135">Pobiera wstępnie zdefiniowane wartości wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="34568-135">Gets the preset value of an expression.</span></span></summary>
        <value><span data-ttu-id="34568-136">Wstępnie zdefiniowane wartości tego wyrażenia lub <see langword="null" /> Jeśli nie jest przypisany.</span><span class="sxs-lookup"><span data-stu-id="34568-136">The preset value of this expression, or <see langword="null" /> if not assigned.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34568-137">Zawiera wstępnie zdefiniowane wartości wyrażenia, powinien taka istnieje.</span><span class="sxs-lookup"><span data-stu-id="34568-137">Contains the preset value of an expression, should one exist.</span></span> <span data-ttu-id="34568-138">Na przykład, jeśli wyrażenie jest wyrażenie odwołania do właściwości, odnoszące się do <xref:System.Windows.Forms.Control.Controls%2A> właściwość <xref:System.Windows.Forms.Button>, <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> wystąpienie zawiera właściwość <xref:System.Windows.Forms.Control.Controls%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="34568-138">For example, if the expression is a property reference expression referring to the <xref:System.Windows.Forms.Control.Controls%2A> property of a <xref:System.Windows.Forms.Button>, the <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> property contains the instance of the <xref:System.Windows.Forms.Control.Controls%2A> property.</span></span> <span data-ttu-id="34568-139">Jest tak, ponieważ ta właściwość jest tylko do odczytu i wstępnie zdefiniowane przez obiekt zawierający wartości.</span><span class="sxs-lookup"><span data-stu-id="34568-139">This is because the property is read-only and preset by the object to contain a value.</span></span> <span data-ttu-id="34568-140">Z drugiej strony, właściwości, takie jak <xref:System.Windows.Forms.Control.Text%2A> lub <xref:System.Windows.Forms.Control.Visible%2A> nie ma wstępnie zdefiniowane wartości i dlatego <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> zwraca właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="34568-140">On the other hand, a property such as <xref:System.Windows.Forms.Control.Text%2A> or <xref:System.Windows.Forms.Control.Visible%2A> does not have a preset value and therefore the <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> property returns `null`.</span></span>  
  
 <span data-ttu-id="34568-141">Poniższy kod C# przedstawia, jak użyć tych informacji do przewodnika serializacji serializatorów.</span><span class="sxs-lookup"><span data-stu-id="34568-141">The following C# code shows how serializers can use this information to guide serialization.</span></span>  
  
```csharp  
Padding p = new Padding();  
p.Left = 5;  
button1.Padding = p;  
  
button1.Padding.Left = 5;  
```  
  
 <span data-ttu-id="34568-142">Serializator z <xref:System.Windows.Forms.Padding> struktury musi mieć świadomość, jeśli powinna generować formularz pierwszej lub drugiej.</span><span class="sxs-lookup"><span data-stu-id="34568-142">The serializer of the <xref:System.Windows.Forms.Padding> structure needs to be informed if it should generate the first or second form.</span></span> <span data-ttu-id="34568-143">Pierwszy formularz jest generowany przez domyślny.</span><span class="sxs-lookup"><span data-stu-id="34568-143">The first form is generated by default.</span></span> <span data-ttu-id="34568-144">Drugi formularz jest generowany tylko w przypadku braku <xref:System.ComponentModel.Design.Serialization.ExpressionContext> na stos kontekstu, która zawiera <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> równa wartości <xref:System.Windows.Forms.Padding> obecnie serializowanego.</span><span class="sxs-lookup"><span data-stu-id="34568-144">The second form is only generated if there is an <xref:System.ComponentModel.Design.Serialization.ExpressionContext> on the context stack that contains a <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> equal to the value of the <xref:System.Windows.Forms.Padding> currently being serialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>