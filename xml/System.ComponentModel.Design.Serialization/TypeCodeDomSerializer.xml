<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="65c87864b4321c7a14ca30be60b486679a4325c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30440283" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Serializuje obiekt do nowego typu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> Klasa wykonuje te same zadania jako <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, ale szeregowania obiektu za pomocą tej klasy definiuje nowego typu.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">Tego menedżera serializacji do użycia na potrzeby serializacji.</param>
        <param name="declaration">Deklaracji do użycia na potrzeby serializacji typu.</param>
        <summary>Deserializuje deklaracji danego typu.</summary>
        <returns>Główny obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> Metody deserializuje deklaracji typu kodu wcześniej serializacji. Poniższa tabela przedstawia wykonuje domyślną implementację zadania.  
  
|Zadanie|Opis|  
|----------|-----------------|  
|Kontroli wielkości liter|Implementacja wyszukuje <xref:System.CodeDom.Compiler.CodeDomProvider> usługi zdecydować, czy elementy Członkowskie powinny traktować jako wielkość liter lub bez uwzględniania wielkości liter.|  
|Sortowanie — instrukcja|Wszystkie zmienne Członkowskie i zmienne lokalne z metody init są przechowywane w tabeli. Każda instrukcja metody init jest dodawana do kolekcji instrukcji pogrupowane według jego po lewej stronie, aby wszystkie deklaracje Przypisywanie lub działających na konkretnej zmiennej są zgrupowane w tej zmiennej. Zmienne, które mają żadnych instrukcji zostaną odrzucone.|  
|Deserializacja|Kolekcje instrukcji dla każdej zmiennej są rozszeregować zgodnie ze zmienną.|  
  
 W poniższej tabeli przedstawiono usługi <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> wymaga metody.  
  
|Usługa|Opis|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|Podczas nie niezbędne, usługi, jeśli jest dostępna, służy do określenia, czy serializacji powinny być uwzględniana wielkość liter lub bez uwzględniania wielkości liter.|  
|<xref:System.ComponentModel.IContainer>|Jeśli obiekt nie istnieje w tabeli nazw podczas deserializacji, zapytanie dotyczące <xref:System.ComponentModel.IContainer> staje się. Jeśli ta kwerenda zakończy się powodzeniem, kontener jest sprawdzany pod kątem obiektu. Kontener jest również używane jako elementu zastępczego argumentu kontenera, wymagane przez składniki.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="manager" /> lub <paramref name="typeDecl" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager">Tego menedżera serializacji do użycia na potrzeby serializacji.</param>
        <param name="declaration">Deklaracja typu na potrzeby serializacji.</param>
        <param name="value">Wartość do użycia na potrzeby serializacji.</param>
        <summary>Zwraca metodę przechowywania instrukcje służący do serializowania elementu członkowskiego.</summary>
        <returns>Metoda używana do wysyłania cały kod inicjowania dla danego elementu członkowskiego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> Metoda zwraca metodę, aby emitować cały kod inicjowania dla danego elementu członkowskiego. Domyślna implementacja zwraca pustego konstruktora. Jeśli ta sama metoda jest zwracana dla wielu wartości, to samo wystąpienie metody ma zostać zwrócony. Można użyć <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> słownika do zapamiętania metod, które zostały utworzone. `typeDecl` Parametr można również dodać metod infrastruktury. Na przykład jeśli chcesz Emituj oddzielnych metodach dla każdego obiektu, należy pojedynczej metody, która wywołuje wszystkie te metody z kolei. Tej metody można dodać do deklaracji typu kodu, w razie potrzeby.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="manager" />, <paramref name="typeDecl" />, lub <paramref name="value" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">Tego menedżera serializacji do użycia na potrzeby serializacji.</param>
        <param name="declaration">Deklaracja typu na potrzeby serializacji.</param>
        <summary>Zwraca tablicę metod, które należy interpretować podczas deserializacji.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeMemberMethod" /> tablicy metod, które należy interpretować podczas deserializacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja zwraca tablicą jednego elementu z konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="manager" /> lub <paramref name="typeDecl" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager">Tego menedżera serializacji do użycia na potrzeby serializacji.</param>
        <param name="root">Obiekt do zserializowania.</param>
        <param name="members">Opcjonalne kolekcji elementów członkowskich. Może być <see langword="null" /> lub jest pusty.</param>
        <summary>Serializuje obiekt główny, tworząc nowe deklaracji typu, która definiuje katalogu głównego.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> definiuje obiekt główny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> Metoda wykonuje serializację obiektu danego głównego i opcjonalne kolekcję elementów, aby utworzyć nową definicję typu. Jeśli `members` kolekcja zawiera wartości, te wartości są serializowane. Same wartości może serializować jako zmienne Członkowskie lub zmiennych lokalnych. To jest realizowane przez wyszukiwanie właściwości rozszerzeń dla obiektu o nazwie `GenerateMember`. Jeśli `true`, generowany jest elementem członkowskim. W przeciwnym razie wartość zmiennej lokalnej jest generowany. Dla wygody `members` Kolekcja może zawierać obiektu głównego. W takim przypadku główny obiekt nie jest również dodać jako elementu członkowskiego lub zmiennej lokalnej.  
  
 Nazwa zwróconego typu jest pobierana z nazwy obiektu głównego, jeśli był nazwanego obiektu. Jeśli nie, nazwę jest wykonane z nazwy typu prostego klasy głównym.  
  
 W poniższej tabeli przedstawiono zadania wykonywane przez domyślną implementację elementu <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> metody.  
  
|Zadanie|Opis|  
|----------|-----------------|  
|Wstępne wypełnianie kontekstu|Kontekst serializacji jest inicjowany z tym dane <xref:System.ComponentModel.Design.Serialization.RootContext> i <xref:System.CodeDom.CodeTypeDeclaration>|  
|Serializacja elementu członkowskiego|Następnie <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> przeprowadzi wszystkie elementy członkowskie i wywołania <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>. Ponieważ serializacja jest wykonywana tylko wtedy w <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, daje to pewność, że serializacji nie jest wykonywane dwukrotnie.|  
|Serializacja głównego|Następnie serializowany jest obiekt główny i jego instrukcje są dodawane do kolekcji instrukcji.|  
|Integracja — instrukcja|Po wszystkie obiekty są serializowane, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> metody porządkuje instrukcje i dodaje je do zwrócony z metody <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>. Na koniec jest wykonane konstruktora wywołującą wszystkie zwrócony z metody <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.|  
  
-  
  
 W poniższej tabeli przedstawiono obiekty <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> metoda umieszcza na stos kontekstu.  
  
|Wystąpienie|Opis|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|Ten serializator. Wyprowadzanie klas może być przydatna w celu dodania właściwości publicznej do tej klasy.|  
|<xref:System.CodeDom.CodeTypeDeclaration>|Typ tworzony. Większość obiektów nie ma potrzeby bezpośredniego dostępu do tego.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="manager" /> lub <paramref name="root" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
  </Members>
</Type>