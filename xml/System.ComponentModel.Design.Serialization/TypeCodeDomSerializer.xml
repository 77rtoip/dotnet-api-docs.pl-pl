<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e5567d5597981a6b67661d3ffba3b77a424ae22e" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52613153" /></Metadata><TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <TypeSignature Language="F#" Value="type TypeCodeDomSerializer = class&#xA;    inherit CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Serializuje obiekt, do nowego typu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> Klasa wykonuje te same zadania co <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, ale serializacji obiektu za pomocą tej klasy definiuje nowy typ.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">Dynamiczne generowanie i kompilacja kodu źródłowego</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj&#xA;override this.Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj" Usage="typeCodeDomSerializer.Deserialize (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">Menedżer serializacji do użycia dla serializacji.</param>
        <param name="declaration">Deklaracji na potrzeby serializacji typu.</param>
        <summary>Deserializuje deklaracji danego typu.</summary>
        <returns>Główny obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> Metoda deserializuje deklaracji typu kodu wcześniej serializacji. W poniższej tabeli przedstawiono, że wykonuje domyślną implementację zadania.  
  
|Zadanie|Opis|  
|----------|-----------------|  
|Sprawdzanie rozróżnianie wielkości liter|Implementacja wyszukuje <xref:System.CodeDom.Compiler.CodeDomProvider> usługę, aby zdecydować, jeśli elementy Członkowskie powinny traktować jako wielkość liter lub bez uwzględniania wielkości liter.|  
|Sortowanie — instrukcja|Wszystkie zmienne Członkowskie i zmienne lokalne, metody init są przechowywane w tabeli. Następnie każdej instrukcji w metodzie init jest dodawany do kolekcji instrukcji, pogrupowane według po lewej stronie, dzięki czemu wszystkie instrukcje przypisywania lub działających na konkretnej zmiennej są zgrupowane w tej zmiennej. Zmienne, które mają żadnych oświadczeń są odrzucane.|  
|Deserializacja|Kolekcje instrukcji dla każdej zmiennej są deserializacji zgodnie ze zmienną.|  
  
 W poniższej tabeli przedstawiono usługi <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> wymaga metody.  
  
|Usługa|Opis|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|Nie niezbędne, usługi, jeśli jest dostępna, jest używane, aby określić, czy serializacji powinna być uwzględniana wielkość liter lub bez uwzględniania wielkości liter.|  
|<xref:System.ComponentModel.IContainer>|Jeśli obiekt nie istnieje w tabeli nazw podczas deserializacji, zapytanie dotyczące <xref:System.ComponentModel.IContainer> wykonano. Jeśli to zapytanie powiedzie się, kontener jest sprawdzane dla obiektu. Kontener jest również używane jako elementu zastępczego argumentu kontenera, wymagane przez składniki.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="manager" /> lub <paramref name="typeDecl" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">Dynamiczne generowanie i kompilacja kodu źródłowego</related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod&#xA;override this.GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod" Usage="typeCodeDomSerializer.GetInitializeMethod (manager, declaration, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager">Menedżer serializacji do użycia dla serializacji.</param>
        <param name="declaration">Deklaracja typu na potrzeby serializacji.</param>
        <param name="value">Wartość używana do serializacji.</param>
        <summary>Zwraca metodę, gdzie są przechowywane instrukcji służący do serializowania elementu członkowskiego.</summary>
        <returns>Metoda używany do emitowania całego kodu inicjowania dla danego elementu członkowskiego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> Metoda zwraca metodę, aby emitować całego kodu inicjowania dla danego elementu członkowskiego. Domyślna implementacja zwraca pustego konstruktora. W przypadku tej samej metody do zwrócenia dla wielu wartości, to samo wystąpienie elementu metody powinny być zwrócone. Możesz użyć <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> słownika do zapamiętania metod, które zostały utworzone. `typeDecl` Parametru można również dodać metod infrastruktury. Na przykład jeśli chcesz emitować metodę osobne dla każdego obiektu, należy pojedynczą metodę, która wywołuje wszystkie z tych metod z osobna. Tej metody można dodać do deklaracji typu kodu, zgodnie z potrzebami.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="manager" />, <paramref name="typeDecl" />, lub <paramref name="value" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">Dynamiczne generowanie i kompilacja kodu źródłowego</related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]&#xA;override this.GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]" Usage="typeCodeDomSerializer.GetInitializeMethods (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">Menedżer serializacji do użycia dla serializacji.</param>
        <param name="declaration">Deklaracja typu na potrzeby serializacji.</param>
        <summary>Zwraca tablicę metody należy interpretować podczas deserializacji.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeMemberMethod" /> szereg metod, które należy interpretować podczas deserializacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja zwraca jednoelementowa tablica za pomocą konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="manager" /> lub <paramref name="typeDecl" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">Dynamiczne generowanie i kompilacja kodu źródłowego</related>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration&#xA;override this.Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration" Usage="typeCodeDomSerializer.Serialize (manager, root, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager">Menedżer serializacji do użycia dla serializacji.</param>
        <param name="root">Obiekt do zserializowania.</param>
        <param name="members">Opcjonalne Kolekcja elementów członkowskich. Może być <see langword="null" /> lub jest pusty.</param>
        <summary>Serializuje obiekt katalogu głównego, tworząc nowe deklaracji typu, który definiuje głównego.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> definiujący obiektu głównego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> Metoda wykonuje serializację obiektu danego głównego i opcjonalne kolekcji elementów członkowskich, aby utworzyć nową definicję typu. Jeśli `members` kolekcja zawiera wartości, te wartości są serializowane. Wartości może serializować jako zmienne Członkowskie lub zmiennych lokalnych. Oznaczanie odbywa się przez wyszukiwanie właściwości rozszerzenia dla obiektu o nazwie `GenerateMember`. Jeśli `true`, generowany jest członkiem. W przeciwnym razie generowany jest zmienną lokalną. Dla wygody `members` Kolekcja może zawierać obiektu głównego. W tym przypadku obiekt główny nie zostanie również dodane jako członkowie lub zmiennej lokalnej.  
  
 Nazwa typu zwracanego jest pobierana z nazwy obiektu głównego, jeśli został on nazwany obiekt. W przeciwnym razie nazwa jest wykonane na podstawie nazwy typu prostego klasy głównej.  
  
 W poniższej tabeli przedstawiono zadania wykonywane przez domyślną implementację elementu <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> metody.  
  
|Zadanie|Opis|  
|----------|-----------------|  
|Kontekst rozmieszczania|Kontekst serializacji jest inicjowany z danych, takie jak <xref:System.ComponentModel.Design.Serialization.RootContext> i <xref:System.CodeDom.CodeTypeDeclaration>|  
|Serializacja elementu członkowskiego|Następnie <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> zawiera wszystkie elementy członkowskie i wywołania <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>. Ponieważ serializacji jest wykonywane tylko wtedy w <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, daje to gwarancję, że serializacji nie jest wykonywane dwukrotnie.|  
|Serializacja głównego|Następnie serializowany jest obiekt główny i jego instrukcje są dodawane do kolekcji instrukcji.|  
|Integracja — instrukcja|Po wszystkie obiekty są serializowane, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> metoda porządkuje oświadczeń i dodaje je do zwrócony z metody <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>. Na koniec Konstruktor jest wykonane, wszystkie metody zwrócony z wywołania <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.|  
  
-  
  
 W poniższej tabeli przedstawiono obiekty <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> metoda umieszcza na stos kontekstu.  
  
|Wystąpienie|Opis|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|Przez ten serializator. Wyprowadzanie klasy przydatne może okazać się dodać właściwości publicznej do tej klasy.|  
|<xref:System.CodeDom.CodeTypeDeclaration>|Typ tworzenia. Większość obiektów nie ma potrzeby bezpośredniego dostępu do tego.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="manager" /> lub <paramref name="root" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">Dynamiczne generowanie i kompilacja kodu źródłowego</related>
      </Docs>
    </Member>
  </Members>
</Type>