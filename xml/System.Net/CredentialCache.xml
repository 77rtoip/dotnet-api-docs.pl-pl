<Type Name="CredentialCache" FullName="System.Net.CredentialCache">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a831915c0af2c4a05ec8821e85266b70307dfb53" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69071918" /></Metadata><TypeSignature Language="C#" Value="public class CredentialCache : System.Collections.IEnumerable, System.Net.ICredentials, System.Net.ICredentialsByHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CredentialCache extends System.Object implements class System.Collections.IEnumerable, class System.Net.ICredentials, class System.Net.ICredentialsByHost" />
  <TypeSignature Language="DocId" Value="T:System.Net.CredentialCache" />
  <TypeSignature Language="VB.NET" Value="Public Class CredentialCache&#xA;Implements ICredentials, ICredentialsByHost, IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CredentialCache : System::Collections::IEnumerable, System::Net::ICredentials, System::Net::ICredentialsByHost" />
  <TypeSignature Language="F#" Value="type CredentialCache = class&#xA;    interface ICredentials&#xA;    interface ICredentialsByHost&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Net.ICredentials</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Net.ICredentialsByHost</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zapewnia magazyn dla wielu poświadczeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.CredentialCache> Klasa przechowuje poświadczenia dla wielu zasobów internetowych. Aplikacje, które muszą mieć dostęp do wielu zasobów, mogą przechowywać poświadczenia dla tych zasobów <xref:System.Net.CredentialCache> w wystąpieniu, które następnie w razie potrzeby udostępniają odpowiedni zestaw poświadczeń dla zasobu internetowego. <xref:System.Net.CredentialCache.GetCredential%2A> Gdy metoda jest wywoływana, porównuje Uniform Resource Identifier (URI) i typ uwierzytelniania dostarczone z wartościami przechowywanymi w pamięci podręcznej i zwraca pierwszy zestaw poświadczeń, które są zgodne.  
  
 <xref:System.Net.CredentialCache.DefaultCredentials%2A> Właściwość zawiera poświadczenia systemowe bieżącego kontekstu zabezpieczeń. W przypadku aplikacji klienckich reprezentują one nazwę użytkownika, hasło i domenę użytkownika, który jest aktualnie zalogowany. W przypadku aplikacji ASP.NET domyślne poświadczenia to poświadczenia użytkownika zalogowanego użytkownika lub personifikowanego użytkownika.  
  
   
  
## Examples  
 Poniższy przykład kodu inicjuje <xref:System.Net.CredentialCache> z wieloma poświadczeniami zabezpieczeń i używa tych poświadczeń <xref:System.Net.WebRequest>z.  
  
 [!code-cpp[Classic CredentialCache.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CredentialCache.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CS/source.cs#1)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic CredentialCache.Add Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.ICredentials" />
    <altmember cref="P:System.Net.WebRequest.Credentials" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CredentialCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CredentialCache();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Net.CredentialCache" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor tworzy <xref:System.Net.CredentialCache> wystąpienie.  
  
   
  
## Examples  
 Poniższy przykład kodu inicjuje <xref:System.Net.CredentialCache> z wieloma poświadczeniami zabezpieczeń i używa tych poświadczeń <xref:System.Net.WebRequest>z.  
  
 [!code-cpp[Classic CredentialCache.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CredentialCache.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CS/source.cs#1)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic CredentialCache.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Net.NetworkCredential" /> Dodaje wystąpienie do pamięci podręcznej poświadczeń.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Uri uriPrefix, string authType, System.Net.NetworkCredential cred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Uri uriPrefix, string authType, class System.Net.NetworkCredential cred) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (uriPrefix As Uri, authType As String, cred As NetworkCredential)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(Uri ^ uriPrefix, System::String ^ authType, System::Net::NetworkCredential ^ cred);" />
      <MemberSignature Language="F#" Value="member this.Add : Uri * string * System.Net.NetworkCredential -&gt; unit" Usage="credentialCache.Add (uriPrefix, authType, cred)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
        <Parameter Name="cred" Type="System.Net.NetworkCredential" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.Uri" /> , który określa prefiks identyfikatora URI dla zasobów, do których uzyskuje się dostęp.</param>
        <param name="authType">Schemat uwierzytelniania używany przez zasób o nazwie w <paramref name="uriPrefix" />.</param>
        <param name="cred"><see cref="T:System.Net.NetworkCredential" /> Do dodania do pamięci podręcznej poświadczeń.</param>
        <summary><see cref="T:System.Net.NetworkCredential" /> Dodaje wystąpienie do pamięci podręcznej poświadczeń do użycia z protokołami innym niż SMTP i kojarzy je z prefiksem Uniform Resource Identifier (URI) i protokołem uwierzytelniania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda umieszcza wystąpienie do użycia z protokołami <xref:System.Net.CredentialCache>innym niż SMTP w. <xref:System.Net.NetworkCredential> <xref:System.Net.CredentialCache.Add%2A> Pamięć podręczna przechowuje poświadczenia w kolejności, w jakiej zostały dodane do niej. Gdy metoda jest wywoływana, zwraca poprawne zgodne <xref:System.Net.NetworkCredential> wystąpienie. <xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29>  
  
   
  
## Examples  
 Poniższy przykład kodu inicjuje <xref:System.Net.CredentialCache> z wieloma poświadczeniami zabezpieczeń i używa tych poświadczeń <xref:System.Net.WebRequest>z.  
  
 [!code-cpp[Classic CredentialCache.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CredentialCache.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CS/source.cs#1)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic CredentialCache.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="uriPrefix" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="authType" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Te same poświadczenia są dodawane więcej niż raz.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string host, int port, string authenticationType, System.Net.NetworkCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string host, int32 port, string authenticationType, class System.Net.NetworkCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (host As String, port As Integer, authenticationType As String, credential As NetworkCredential)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ host, int port, System::String ^ authenticationType, System::Net::NetworkCredential ^ credential);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int * string * System.Net.NetworkCredential -&gt; unit" Usage="credentialCache.Add (host, port, authenticationType, credential)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="authenticationType" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> identyfikujący komputer-hosta.</param>
        <param name="port">A <see cref="T:System.Int32" /> określa port, na <paramref name="host" />którym ma zostać nawiązane połączenie.</param>
        <param name="authenticationType">A <see cref="T:System.String" /> który identyfikuje schemat uwierzytelniania używany podczas łączenia się z <paramref name="host" /> usługą <paramref name="cred" />.</param>
        <param name="credential"><see cref="T:System.Net.NetworkCredential" /> Do dodania do pamięci podręcznej poświadczeń.</param>
        <summary><see cref="T:System.Net.NetworkCredential" /> Dodaje wystąpienie do użycia z protokołem SMTP do pamięci podręcznej poświadczeń i kojarzy je z komputerem hosta, portem i protokołem uwierzytelniania. Poświadczenia dodane przy użyciu tej metody są prawidłowe tylko w przypadku protokołu SMTP. Ta metoda nie działa w przypadku żądań HTTP lub FTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umieszcza <xref:System.Net.NetworkCredential> wystąpienie do użycia z protokołem SMTP <xref:System.Net.CredentialCache>w programie. Pamięć podręczna przechowuje poświadczenia w kolejności, w jakiej zostały dodane do niej. `host` `authType` `port`Gdy metoda jest wywoływana, <xref:System.Net.NetworkCredential> zwraca wystąpienie, które jest wybrane przez dopasowanie do,, i. <xref:System.Net.CredentialCache.GetCredential%28System.String%2CSystem.Int32%2CSystem.String%29> W porównaniu nie jest rozróżniana wielkość liter.  
  
 Obsługiwane wartości dla `authType` są "NTLM", "Digest", "Kerberos" i "Negotiate".  
  
 Poświadczenia dodane za pomocą tej metody są prawidłowe tylko w przypadku używania z protokołem SMTP. Ta metoda nie działa w przypadku protokołów HTTP i FTP.  
  
   
  
## Examples  
 Poniższy przykład kodu inicjuje <xref:System.Net.CredentialCache> z wieloma poświadczeniami zabezpieczeń do użycia z protokołem SMTP i używa jednego z tych poświadczeń <xref:System.Net.Mail.SmtpClient>z.  
  
 [!code-cpp[NCL_Credential.Cache.Add_SMTP#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCL_Credential.Cache.Add_SMTP/CPP/source.cpp#1)]
 [!code-csharp[NCL_Credential.Cache.Add_SMTP#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCL_Credential.Cache.Add_SMTP/cs/source.cs#1)]
 [!code-vb[NCL_Credential.Cache.Add_SMTP#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCL_Credential.Cache.Add_SMTP/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="host" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="authType" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="authType" />wartość nie jest akceptowana.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultCredentials">
      <MemberSignature Language="C#" Value="public static System.Net.ICredentials DefaultCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICredentials DefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.CredentialCache.DefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultCredentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::ICredentials ^ DefaultCredentials { System::Net::ICredentials ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCredentials : System.Net.ICredentials" Usage="System.Net.CredentialCache.DefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera poświadczenia systemowe aplikacji.</summary>
        <value><see cref="T:System.Net.ICredentials" /> Reprezentuje poświadczenia systemowe aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.CredentialCache.DefaultCredentials%2A> Właściwość ma zastosowanie tylko do uwierzytelniania NTLM, Negotiate i Kerberos.  
  
 <xref:System.Net.CredentialCache.DefaultCredentials%2A>reprezentuje poświadczenia systemowe dla bieżącego kontekstu zabezpieczeń, w którym jest uruchomiona aplikacja. W przypadku aplikacji po stronie klienta są to zazwyczaj poświadczenia systemu Windows (nazwa użytkownika, hasło i domena) użytkownika, na którym uruchomiono aplikację. W przypadku aplikacji ASP.NET domyślne poświadczenia to poświadczenia użytkownika zalogowanego użytkownika lub personifikowanego użytkownika.  
  
 Aby uzyskać poświadczenia jako <xref:System.Net.NetworkCredential> wystąpienie, <xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A> Użyj właściwości.  
  
 Obsługiwane wartości dla `authType` są "NTLM", "Digest", "Kerberos" i "Negotiate". Ta metoda nie działa w przypadku protokołów HTTP i FTP.  
  
> [!NOTE]
>  Wystąpienia zwróconego przez <xref:System.Net.CredentialCache.DefaultCredentials%2A> nie można użyć do wyświetlenia nazwy użytkownika, hasła lub domeny bieżącego kontekstu zabezpieczeń. <xref:System.Net.ICredentials>  
  
   
  
## Examples  
 Poniższy przykład kodu używa właściwości, <xref:System.Net.CredentialCache.DefaultCredentials%2A> Aby uzyskać poświadczenia systemowe aplikacji.  
  
 [!code-cpp[CredentialCache_DefaultCredentials#1](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_DefaultCredentials/CPP/credentialcache_defaultcredentials.cpp#1)]
 [!code-csharp[CredentialCache_DefaultCredentials#1](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_DefaultCredentials/CS/credentialcache_defaultcredentials.cs#1)]
 [!code-vb[CredentialCache_DefaultCredentials#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_DefaultCredentials/VB/credentialcache_defaultcredentials.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">do odczytywania zmiennej środowiskowej USERNAME. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DefaultNetworkCredentials">
      <MemberSignature Language="C#" Value="public static System.Net.NetworkCredential DefaultNetworkCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.NetworkCredential DefaultNetworkCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.CredentialCache.DefaultNetworkCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultNetworkCredentials As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::NetworkCredential ^ DefaultNetworkCredentials { System::Net::NetworkCredential ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultNetworkCredentials : System.Net.NetworkCredential" Usage="System.Net.CredentialCache.DefaultNetworkCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera poświadczenia sieciowe bieżącego kontekstu zabezpieczeń.</summary>
        <value><see cref="T:System.Net.NetworkCredential" /> Reprezentuje poświadczenia sieciowe bieżącego użytkownika lub aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poświadczenia zwrócone przez <xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A> właściwość są stosowane tylko w przypadku uwierzytelniania NTLM, Negotiate i Kerberos.  
  
 Poświadczenia zwrócone przez <xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A> reprezentuje poświadczenia uwierzytelniania dla bieżącego kontekstu zabezpieczeń, w którym jest uruchomiona aplikacja. W przypadku aplikacji po stronie klienta są to zazwyczaj poświadczenia systemu Windows (nazwa użytkownika, hasło i domena) użytkownika, na którym uruchomiono aplikację. W przypadku aplikacji ASP.NET domyślne poświadczenia sieciowe to poświadczenia użytkownika zalogowanego użytkownika lub personifikowanego użytkownika.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">do odczytywania zmiennej środowiskowej USERNAME. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCredential">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Net.NetworkCredential" /> Zwraca wystąpienie skojarzone z określonym Uniform Resource Identifier (URI) lub hosta i typem uwierzytelniania.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential GetCredential (Uri uriPrefix, string authType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.NetworkCredential GetCredential(class System.Uri uriPrefix, string authType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCredential (uriPrefix As Uri, authType As String) As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Net::NetworkCredential ^ GetCredential(Uri ^ uriPrefix, System::String ^ authType);" />
      <MemberSignature Language="F#" Value="abstract member GetCredential : Uri * string -&gt; System.Net.NetworkCredential&#xA;override this.GetCredential : Uri * string -&gt; System.Net.NetworkCredential" Usage="credentialCache.GetCredential (uriPrefix, authType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.ICredentials.GetCredential(System.Uri,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.Uri" /> , który określa prefiks identyfikatora URI dla zasobów, do których uzyskuje się dostęp.</param>
        <param name="authType">Schemat uwierzytelniania używany przez zasób o nazwie w <paramref name="uriPrefix" />.</param>
        <summary><see cref="T:System.Net.NetworkCredential" /> Zwraca wystąpienie skojarzone z określonym Uniform Resource Identifier (URI) i typem uwierzytelniania.</summary>
        <returns>A <see cref="T:System.Net.NetworkCredential" /> lub, jeśli w <see langword="null" />pamięci podręcznej nie ma pasujących poświadczeń.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda przeszukuje i zwraca <xref:System.Net.NetworkCredential> wystąpienie dla określonego identyfikatora URI i typu autoryzacji. <xref:System.Net.CredentialCache> <xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29> Jeśli nie <xref:System.Net.NetworkCredential> zawiera pasującego wystąpienia, `null` jest zwracana. <xref:System.Net.CredentialCache>  
  
 <xref:System.Net.CredentialCache.GetCredential%2A>używa najdłuższego pasującego prefiksu URI w pamięci podręcznej, aby określić zestaw poświadczeń do zwrócenia dla typu autoryzacji. W poniższej tabeli przedstawiono przykłady.  
  
|Prefiks identyfikatora URI|Dopasowania|  
|----------------|-------------|  
|`http://www.contoso.com/portal/news.htm`|Żądania dotyczące określonej strony `news.htm`sieci Web.|  
|`http://www.contoso.com/portal/`|Żądania dla całej zawartości w `portal` ścieżce, z wyjątkiem strony. `news.htm`|  
|`http://www.contoso.com/`|Żądania dla wszystkich zasobów o `www.contoso.com`, z wyjątkiem tych `portal` w ścieżce.|  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29> aby <xref:System.Net.NetworkCredential> zwrócić wystąpienie skojarzone z określonym identyfikatorem URI i typem uwierzytelniania.  
  
 [!code-cpp[CredentialCache_GetCredential#1](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_GetCredential/CPP/credentialcache_getcredential.cpp#1)]
 [!code-csharp[CredentialCache_GetCredential#1](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_GetCredential/CS/credentialcache_getcredential.cs#1)]
 [!code-vb[CredentialCache_GetCredential#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_GetCredential/VB/credentialcache_getcredential.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="uriPrefix" />lub <paramref name="authType" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential GetCredential (string host, int port, string authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.NetworkCredential GetCredential(string host, int32 port, string authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCredential (host As String, port As Integer, authenticationType As String) As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Net::NetworkCredential ^ GetCredential(System::String ^ host, int port, System::String ^ authenticationType);" />
      <MemberSignature Language="F#" Value="abstract member GetCredential : string * int * string -&gt; System.Net.NetworkCredential&#xA;override this.GetCredential : string * int * string -&gt; System.Net.NetworkCredential" Usage="credentialCache.GetCredential (host, port, authenticationType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="authenticationType" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> identyfikujący komputer-hosta.</param>
        <param name="port">A <see cref="T:System.Int32" /> określa port, na <paramref name="host" />którym ma zostać nawiązane połączenie.</param>
        <param name="authenticationType">A <see cref="T:System.String" /> identyfikujący schemat uwierzytelniania używany podczas nawiązywania połączenia <paramref name="host" />z usługą.</param>
        <summary><see cref="T:System.Net.NetworkCredential" /> Zwraca wystąpienie skojarzone z określonym hostem, portem i protokołem uwierzytelniania.</summary>
        <returns>A <see cref="T:System.Net.NetworkCredential" /> lub, jeśli w <see langword="null" />pamięci podręcznej nie ma pasujących poświadczeń.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wyszukuje <xref:System.Net.CredentialCache> i <xref:System.Net.NetworkCredential> zwraca wystąpienie dla określonego hosta, portu i typu autoryzacji. <xref:System.Net.CredentialCache> <xref:System.Net.CredentialCache.Add%2A> Wartości, ,`port` i`authType` przenoszone do tej metody są bez uwzględniania wielkości liter w porównaniu do wartości określonych podczas dodawania poświadczeń do metody. `host`  
  
 Obsługiwane wartości dla `authType` są "NTLM", "Digest", "Kerberos" i "Negotiate".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="host" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="authType" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="authType" />wartość nie jest akceptowana.  
  
—lub— 
 <paramref name="host" />jest równa pustemu ciągowi ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="credentialCache.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który może wykonywać <see cref="T:System.Net.CredentialCache" /> iterację w wystąpieniu.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> Dla .<see cref="T:System.Net.CredentialCache" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Net.CredentialCache.GetEnumerator%2A> aby zwrócić moduł wyliczający, który może wykonać iterację <xref:System.Net.CredentialCache> w wystąpieniu.  
  
 [!code-cpp[CredentialCache_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_GetEnumerator/CPP/credentialcache_getenumerator.cpp#1)]
 [!code-csharp[CredentialCache_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_GetEnumerator/CS/credentialcache_getenumerator.cs#1)]
 [!code-vb[CredentialCache_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_GetEnumerator/VB/credentialcache_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Net.NetworkCredential" /> Usuwa wystąpienie z pamięci podręcznej.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (Uri uriPrefix, string authType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Uri uriPrefix, string authType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Remove(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (uriPrefix As Uri, authType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(Uri ^ uriPrefix, System::String ^ authType);" />
      <MemberSignature Language="F#" Value="member this.Remove : Uri * string -&gt; unit" Usage="credentialCache.Remove (uriPrefix, authType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.Uri" /> Określa prefiks identyfikatora URI zasobów, dla których jest używane poświadczenie.</param>
        <param name="authType">Schemat uwierzytelniania używany przez hosta o nazwie w <paramref name="uriPrefix" />.</param>
        <summary><see cref="T:System.Net.NetworkCredential" /> Usuwa wystąpienie z pamięci podręcznej, jeśli jest ono skojarzone z określonym prefiksem Uniform Resource Identifier (URI) i protokołem uwierzytelniania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda usuwa <xref:System.Net.NetworkCredential> wystąpienie z, <xref:System.Net.CredentialCache> Jeśli określony prefiks identyfikatora URI i protokół uwierzytelniania są zgodne z tymi, które są skojarzone z poświadczeniem. Wielokrotne wywołania <xref:System.Net.CredentialCache.Remove%2A> metody dla tego samego <xref:System.Net.NetworkCredential> nie mają żadnego wpływu.  
  
 Jeśli `authType` jest `null` lub `uriPrefix` jest lubnieznalezionopasującychpoświadczeńwpamięcipodręcznej,tametodaniewykonujeżadnychoperacji.`null`  
  
   
  
## Examples  
 Poniższy przykład kodu używa tej metody do usuwania <xref:System.Net.NetworkCredential> wystąpienia z pamięci podręcznej.  
  
 [!code-cpp[CredentialCache_Add_Remove#3](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_Add_Remove/CPP/credentialcache_add_remove.cpp#3)]
 [!code-csharp[CredentialCache_Add_Remove#3](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_Add_Remove/CS/credentialcache_add_remove.cs#3)]
 [!code-vb[CredentialCache_Add_Remove#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_Add_Remove/VB/credentialcache_add_remove.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string host, int port, string authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string host, int32 port, string authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (host As String, port As Integer, authenticationType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ host, int port, System::String ^ authenticationType);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * int * string -&gt; unit" Usage="credentialCache.Remove (host, port, authenticationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="authenticationType" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> identyfikujący komputer-hosta.</param>
        <param name="port">A <see cref="T:System.Int32" /> określa port, na <paramref name="host" />którym ma zostać nawiązane połączenie.</param>
        <param name="authenticationType">A <see cref="T:System.String" /> identyfikujący schemat uwierzytelniania używany podczas nawiązywania połączenia <paramref name="host" />z usługą.</param>
        <summary><see cref="T:System.Net.NetworkCredential" /> Usuwa wystąpienie z pamięci podręcznej, jeśli jest ono skojarzone z określonym hostem, portem i protokołem uwierzytelniania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda usuwa <xref:System.Net.NetworkCredential> wystąpienie <xref:System.Net.CredentialCache> z, jeśli określony host, port i protokół uwierzytelniania są zgodne z tymi, które są skojarzone z poświadczeniem. Wielokrotne wywołania <xref:System.Net.CredentialCache.Remove%2A> metody dla tego samego <xref:System.Net.NetworkCredential> nie mają żadnego wpływu.  
  
 Jeśli `authType` jest `null` lub `uriPrefix` jest lubnieznalezionopasującychpoświadczeńwpamięcipodręcznej,tametodaniewykonujeżadnychoperacji.`null`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
