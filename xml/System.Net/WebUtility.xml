<Type Name="WebUtility" FullName="System.Net.WebUtility">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d26dd9460dd12b695a36cd9a7757a2ff00818623" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30561535" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class WebUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WebUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebUtility" />
  <TypeSignature Language="VB.NET" Value="Public Class WebUtility" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebUtility abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody kodowania i dekodowania adresów URL podczas przetwarzania żądania sieci Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpUtility> Klasa zawiera kodowania i dekodowania metody narzędziowe do użytku z ciągami kodowania HTML. <xref:System.Uri?displayProperty=nameWithType> Klasa zawiera także metody i właściwości, które mogą służyć do podobnych celów.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Uri" />
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="P:System.Web.HttpContext.Server" />
  </Docs>
  <Members>
    <MemberGroup MemberName="HtmlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje ciąg, który został zakodowany w formacie HTML do transmisji HTTP na Dekodowany ciąg.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public static string HtmlDecode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlDecode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.HtmlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlDecode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlDecode(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do zdekodowania.</param>
        <summary>Konwertuje ciąg, który został zakodowany w formacie HTML do transmisji HTTP na Dekodowany ciąg.</summary>
        <returns>Dekodowany ciąg.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli znaki, takie jak spacje i znaki interpunkcyjne zostały przesłane w strumieniu HTTP, może być błędnie zinterpretowane po stronie odbierającej. Kodowanie HTML konwertuje znaki, które nie są dozwolone w formacie HTML w równoważnych encjach znaków; Dekodowanie HTML odwraca kodowania. Na przykład, gdy w bloku tekstu, znaki \< i > są zakodowane jako &lt; i &gt; transmisji HTTP.  
  
 Jeśli `value` parametr jest `null`, jest zwracany ciąg dekodowane `null`. Jeśli `value` parametr jest pustym ciągiem, a następnie zwrócona Dekodowany ciąg jest pusty ciąg.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebUtility.HtmlEncode(System.String)" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String)" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public static void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do zdekodowania.</param>
        <param name="output">A <see cref="T:System.IO.TextWriter" /> strumienia wyjściowego.</param>
        <summary>Konwertuje ciąg, który został zakodowany w formacie HTML do Dekodowany ciąg, a następnie wysyła Dekodowany ciąg do <see cref="T:System.IO.TextWriter" /> strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli znaki, takie jak spacje i znaki interpunkcyjne zostały przesłane w strumieniu HTTP, może być błędnie zinterpretowane po stronie odbierającej. Kodowanie HTML konwertuje znaki, które nie są dozwolone w formacie HTML w równoważnych encjach znaków; Dekodowanie HTML odwraca kodowania. Na przykład, gdy w bloku tekstu, znaki \< i > są zakodowane jako &lt; i &gt; transmisji HTTP.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> Parametr nie może być <see langword="null" /> Jeśli <paramref name="value" /> parametr nie jest <see langword="null" />.</exception>
        <altmember cref="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje ciąg na ciąg kodowany w formacie HTML.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.HtmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlEncode(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <summary>Konwertuje ciąg na ciąg kodowany w formacie HTML.</summary>
        <returns>Zaszyfrowanym ciągiem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli znaki, takie jak spacje i znaki interpunkcyjne zostały przesłane w strumieniu HTTP, może być błędnie zinterpretowane po stronie odbierającej. Kodowanie HTML konwertuje znaki, które nie są dozwolone w formacie HTML w równoważnych encjach znaków; Dekodowanie HTML odwraca kodowania. Na przykład, gdy w bloku tekstu, znaki \< i > są zakodowane jako &lt; i &gt; transmisji HTTP.  
  
 Jeśli `value` parametr jest `null`, a następnie jest zwracany ciąg zakodowany `null`. Jeśli `value` parametr jest pustym ciągiem, a następnie zwracany ciąg zakodowany jest pustym ciągiem.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebUtility.HtmlDecode(System.String)" />
        <altmember cref="M:System.Web.HttpUtility.HtmlDecode(System.String)" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do kodowania.</param>
        <param name="output">A <see cref="T:System.IO.TextWriter" /> strumienia wyjściowego.</param>
        <summary>Konwertuje ciąg na ciąg kodowany w formacie HTML i zwraca dane wyjściowe jako <see cref="T:System.IO.TextWriter" /> strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli znaki, takie jak spacje i znaki interpunkcyjne zostały przesłane w strumieniu HTTP, może być błędnie zinterpretowane po stronie odbierającej. Kodowanie HTML konwertuje znaki, które nie są dozwolone w formacie HTML w równoważnych encjach znaków; Dekodowanie HTML odwraca kodowania. Na przykład, gdy w bloku tekstu, znaki \< i >, są zakodowane jako &lt; i &gt; transmisji HTTP.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> Parametr nie może być <see langword="null" /> Jeśli <paramref name="value" /> parametr nie jest <see langword="null" />.</exception>
        <altmember cref="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public static string UrlDecode (string encodedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlDecode(string encodedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.UrlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlDecode (encodedValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlDecode(System::String ^ encodedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="encodedValue">Zakodowane w adresie URL ciąg zdekodować.</param>
        <summary>Konwertuje ciąg, który został zakodowany transmisji w adresie URL w Dekodowany ciąg.</summary>
        <returns>Zwraca <see cref="T:System.String" />.  
  
 Dekodowany ciąg.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli znaki, takie jak spacje i znaki interpunkcyjne zostały przesłane w strumieniu HTTP, może być błędnie zinterpretowane po stronie odbierającej. Kodowanie adresu URL konwertuje znaki, które nie są dozwolone w adresie URL na równoważne unikowe szesnastkową. <xref:System.Net.WebUtility.UrlEncode%2A> Metoda tworzy ciąg kodowany w formacie adresu URL.  
  
 Dekodowanie adresu URL zastępuje szesnastkowe unikowe odpowiedniego odpowiedniki znaków ASCII. Na przykład osadzone w bloku tekstu zakodowane w adresie URL unikowe `%3c` i `%3e` są dekodować w znaki `<` i `>`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlDecodeToBytes">
      <MemberSignature Language="C#" Value="public static byte[] UrlDecodeToBytes (byte[] encodedValue, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlDecodeToBytes(unsigned int8[] encodedValue, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlDecodeToBytes (encodedValue As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlDecodeToBytes(cli::array &lt;System::Byte&gt; ^ encodedValue, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedValue" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="encodedValue">Zakodowane w adresie URL <see cref="T:System.Byte" /> tablicy w celu zdekodowania.</param>
        <param name="offset">Przesunięcie, w bajtach, od początku <see cref="T:System.Byte" /> tablicy w celu zdekodowania.</param>
        <param name="count">Liczba bajtów do zdekodowania z <see cref="T:System.Byte" /> tablicy.</param>
        <summary>Konwertuje zakodowanego tablicy bajtowej został zakodowany transmisji w adresie URL tablicy bajtów zdekodowana.</summary>
        <returns>Zwraca <see cref="T:System.Byte" />.  
  
 Dekodowane <see cref="T:System.Byte" /> tablicy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli znaki, takie jak spacje i znaki interpunkcyjne zostały przesłane w strumieniu HTTP, może być błędnie zinterpretowane po stronie odbierającej. Kodowanie adresu URL konwertuje znaki, które nie są dozwolone w adresie URL na równoważne unikowe szesnastkową. <xref:System.Net.WebUtility.UrlEncodeToBytes%2A> Metoda tworzy tablicę bajtów zakodowane w adresie URL.  
  
 Dekodowanie adresu URL zastępuje szesnastkowe unikowe odpowiedniego odpowiedniki znaków ASCII. Na przykład osadzone w bloku tekstu zakodowane w adresie URL unikowe `%3c` i `%3e` są dekodować w znaki `<` i `>`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Tekst do kodowania adresu URL.</param>
        <summary>Konwertuje ciąg tekstowy na ciąg zakodowane w adresie URL.</summary>
        <returns>Zwraca <see cref="T:System.String" />.  
  
 Ciąg kodowany w formacie adresu URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli znaki, takie jak spacje i znaki interpunkcyjne zostały przesłane w strumieniu HTTP, może być błędnie zinterpretowane po stronie odbierającej. Kodowanie adresu URL zastępuje znaki, które są niedozwolone w adresie URL w równoważnych encjach znaków składające się z sekwencji unikowych szesnastkową. Skonwertowany ciąg powinien mieć format UTF-8.  
  
 Kodowanie adresu URL zastępuje wszystkie kody znaków, z wyjątkiem litery, cyfry i następujące znaki interpunkcyjne:  
  
-   `-` (znak minus)  
  
-   `_` (podkreślenie)  
  
-   `.` (okres)  
  
-   `!` (wykrzyknika)  
  
-   \* (gwiazdkę)  
  
-   `(` i `)` (nawiasy otwierające i zamykające)  
  
 Na przykład w bloku tekstu, które ma zostać przesłany w adresie URL znaki `<` i `>` są zakodowane jako `%3c` i `%3e`.  
  
 <xref:System.Net.WebUtility.UrlDecode%2A> Odwraca metodę kodowania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncodeToBytes">
      <MemberSignature Language="C#" Value="public static byte[] UrlEncodeToBytes (byte[] value, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlEncodeToBytes(unsigned int8[] value, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncodeToBytes (value As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlEncodeToBytes(cli::array &lt;System::Byte&gt; ^ value, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Byte" /> Tablicy do kodowania adresu URL.</param>
        <param name="offset">Przesunięcie, w bajtach, od początku <see cref="T:System.Byte" /> tablicy do kodowania.</param>
        <param name="count">Liczba bajtów do kodowania z <see cref="T:System.Byte" /> tablicy.</param>
        <summary>Konwertuje tablicę bajtów na tablicę bajtów zakodowane w adresie URL.</summary>
        <returns>Zwraca <see cref="T:System.Byte" />.  
  
 Zakodowany <see cref="T:System.Byte" /> tablicy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli znaki, takie jak spacje i znaki interpunkcyjne zostały przesłane w strumieniu HTTP, może być błędnie zinterpretowane po stronie odbierającej. Kodowanie adresu URL zastępuje znaki, które są niedozwolone w adresie URL w równoważnych encjach znaków składające się z sekwencji unikowych szesnastkową. Skonwertowany ciąg powinien mieć format UTF-8.  
  
 Kodowanie adresu URL zastępuje wszystkie kody znaków, z wyjątkiem litery, cyfry i następujące znaki interpunkcyjne:  
  
-   `-` (znak minus)  
  
-   `_` (podkreślenie)  
  
-   `.` (okres)  
  
-   `!` (wykrzyknika)  
  
-   ' *' (gwiazdkę)  
  
-   `'` (pojedynczy cudzysłów)  
  
-   `(` i `)` (nawiasy otwierające i zamykające)  
  
 Na przykład w bloku tekstu, które ma zostać przesłany w adresie URL znaki `<` i `>` są zakodowane jako `%3c` i `%3e`.  
  
 <xref:System.Net.WebUtility.UrlDecodeToBytes%2A> Odwraca metodę kodowania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>