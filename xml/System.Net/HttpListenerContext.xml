<Type Name="HttpListenerContext" FullName="System.Net.HttpListenerContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="efb0b67d2b48b7fb574b175daf2a6cd4826f78c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30561442" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListenerContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListenerContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerContext sealed" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia dostęp do obiektów żądania i odpowiedzi, używanych przez <see cref="T:System.Net.HttpListener" /> klasy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa udostępnia informacje dotyczące żądania protokołu HTTP (Hypertext Transfer) klienta przetwarzanych przez <xref:System.Net.HttpListener> obiektu. Ta klasa ma również metody, które umożliwiają <xref:System.Net.HttpListener> obiekt, aby akceptować połączenia obiektu WebSocket.  
  
 <xref:System.Net.HttpListener.GetContext%2A> Metoda zwraca wystąpienia <xref:System.Net.HttpListenerContext> klasy. Aby uzyskać obiekt, który reprezentuje żądania klienta, należy użyć <xref:System.Net.HttpListenerContext.Request%2A> właściwości. Aby uzyskać obiekt, który reprezentuje odpowiedzi, który zostanie wysłany do klienta przez <xref:System.Net.HttpListener>, użyj <xref:System.Net.HttpListenerContext.Response%2A> właściwości. Aby uzyskać informacje użytkownika o wysyłania żądania, takie jak jego nazwa logowania i czy jej uwierzytelnieniu klient można zbadać właściwości w <xref:System.Security.Principal.IPrincipal> obiektu zwróconego przez <xref:System.Net.HttpListenerContext.User%2A> właściwości.  
  
 Zamykanie <xref:System.Net.HttpListenerContext> obiekt wysyła odpowiedź do klienta i zwalnia zasoby używane przez <xref:System.Net.HttpListenerContext>. Trwa przerywanie <xref:System.Net.HttpListenerContext> obiektu spowoduje odrzucenie odpowiedzi do klienta, jeśli jeszcze nie zostały wysłane i zwalnia zasoby używane przez <xref:System.Net.HttpListenerContext>. Po zamknięcie lub przerywanie <xref:System.Net.HttpListenerContext> obiektu, nie może odwoływać się właściwości lub metody. Jeśli tak zrobisz, zostanie wyświetlony <xref:System.ObjectDisposedException> wyjątku.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia informacje o użytkowniku dla żądania klienta.  
  
 [!code-csharp[Net_Listener_Basic#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#8)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="T:System.Net.HttpListenerRequest" />
    <altmember cref="T:System.Net.HttpListenerResponse" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AcceptWebSocketAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Akceptować połączenia obiektu WebSocket jako operację asynchroniczną.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subProtocol">Obsługiwany protokół podrzędny obiektu WebSocket.</param>
        <summary>Akceptować połączenia obiektu WebSocket jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  
  
 Obiekt zadania reprezentujący operację asynchroniczną. <see cref="P:System.Threading.Tasks.Task`1.Result" /> Zwraca właściwości dla obiektu task <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601> obiektu ukończy po zaakceptowaniu połączenia obiektu WebSocket.  
  
 Rozmiar buforu odbioru jest 16,385 bajtów. Interwał utrzymania aktywności protokołu WebSocket jest ustawiony na wartość domyślną 30 000 (30 sekund).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subProtocol" /> jest to pusty ciąg  
  
 —lub—  
  
 <paramref name="subProtocol" /> zawiera niedozwolone znaki.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">Wystąpił błąd podczas wysyłania odpowiedzi do wykonania procedury uzgadniania protokołu WebSocket.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, valuetype System.TimeSpan keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, keepAliveInterval As TimeSpan) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, TimeSpan keepAliveInterval);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="subProtocol">Obsługiwany protokół podrzędny obiektu WebSocket.</param>
        <param name="keepAliveInterval">Interwał utrzymania aktywności protokołu WebSocket w milisekundach.</param>
        <summary>Akceptować połączenia obiektu WebSocket Określanie obsługiwanych protokołu WebSocket i Interwał utrzymania aktywności protokołu WebSocket jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  
  
 Obiekt zadania reprezentujący operację asynchroniczną. <see cref="P:System.Threading.Tasks.Task`1.Result" /> Zwraca właściwości dla obiektu task <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601> obiektu ukończy po zaakceptowaniu połączenia obiektu WebSocket.  
  
 Rozmiar buforu odbioru jest 16,385 bajtów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subProtocol" /> jest to pusty ciąg  
  
 —lub—  
  
 <paramref name="subProtocol" /> zawiera niedozwolone znaki.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="keepAliveInterval" /> jest za mały.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">Wystąpił błąd podczas wysyłania odpowiedzi do wykonania procedury uzgadniania protokołu WebSocket.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, receiveBufferSize As Integer, keepAliveInterval As TimeSpan) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
        <Parameter Name="receiveBufferSize" Type="System.Int32" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="subProtocol">Obsługiwany protokół podrzędny obiektu WebSocket.</param>
        <param name="receiveBufferSize">Rozmiar buforów odbioru w bajtach.</param>
        <param name="keepAliveInterval">Interwał utrzymania aktywności protokołu WebSocket w milisekundach.</param>
        <summary>Akceptować połączenia obiektu WebSocket Określanie obsługiwanych protokołów podrzędnych protokołu WebSocket, rozmiar buforu i Interwał utrzymania aktywności protokołu WebSocket jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  
  
 Obiekt zadania reprezentujący operację asynchroniczną. <see cref="P:System.Threading.Tasks.Task`1.Result" /> Zwraca właściwości dla obiektu task <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601> > obiekt ukończy po zaakceptowaniu połączenia obiektu WebSocket.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subProtocol" /> jest to pusty ciąg  
  
 —lub—  
  
 <paramref name="subProtocol" /> zawiera niedozwolone znaki.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="keepAliveInterval" /> jest za mały.  
  
 —lub—  
  
 <paramref name="receiveBufferSize" /> jest mniejsza niż 16 bajtów  
  
 —lub—  
  
 <paramref name="receiveBufferSize" /> jest większe niż 64 KB.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">Wystąpił błąd podczas wysyłania odpowiedzi do wykonania procedury uzgadniania protokołu WebSocket.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment&lt;byte&gt; internalBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval, valuetype System.ArraySegment`1&lt;unsigned int8&gt; internalBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, receiveBufferSize As Integer, keepAliveInterval As TimeSpan, internalBuffer As ArraySegment(Of Byte)) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment&lt;System::Byte&gt; internalBuffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
        <Parameter Name="receiveBufferSize" Type="System.Int32" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
        <Parameter Name="internalBuffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="subProtocol">Obsługiwany protokół podrzędny obiektu WebSocket.</param>
        <param name="receiveBufferSize">Rozmiar buforów odbioru w bajtach.</param>
        <param name="keepAliveInterval">Interwał utrzymania aktywności protokołu WebSocket w milisekundach.</param>
        <param name="internalBuffer">Bufor wewnętrzny dla tej operacji.</param>
        <summary>Akceptować połączenia obiektu WebSocket, określając obsługiwanych protokołów podrzędnych protokołu WebSocket, rozmiar buforu, interwał utrzymania aktywności protokołu WebSocket i buforu wewnętrznego jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  
  
 Obiekt zadania reprezentujący operację asynchroniczną. <see cref="P:System.Threading.Tasks.Task`1.Result" /> Zwraca właściwości dla obiektu task <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601> obiektu ukończy po zaakceptowaniu połączenia obiektu WebSocket.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subProtocol" /> jest to pusty ciąg  
  
 —lub—  
  
 <paramref name="subProtocol" /> zawiera niedozwolone znaki.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="keepAliveInterval" /> jest za mały.  
  
 —lub—  
  
 <paramref name="receiveBufferSize" /> jest mniejsza niż 16 bajtów  
  
 —lub—  
  
 <paramref name="receiveBufferSize" /> jest większe niż 64 KB.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">Wystąpił błąd podczas wysyłania odpowiedzi do wykonania procedury uzgadniania protokołu WebSocket.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerRequest Request { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerRequest Request" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.Request" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Request As HttpListenerRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerRequest ^ Request { System::Net::HttpListenerRequest ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Net.HttpListenerRequest" /> reprezentujący żądania klienta dla zasobu.</summary>
        <value>
          <see cref="T:System.Net.HttpListenerRequest" /> Obiekt, który reprezentuje żądania klienta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli zamkniesz to <xref:System.Net.HttpListenerContext>, wysyła odpowiedź do klienta, Zamknij <xref:System.Net.HttpListenerResponse> zawierający odpowiedzi i Zamknij <xref:System.Net.HttpListenerRequest> obiektu zwróconego przez tę właściwość.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wywołanie tej metody. `listener` Zmienna przechowuje <xref:System.Net.HttpListener> obiektu.  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Response">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerResponse Response { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerResponse Response" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.Response" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Response As HttpListenerResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerResponse ^ Response { System::Net::HttpListenerResponse ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerResponse</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Net.HttpListenerResponse" /> obiektu, który zostanie wysłany do klienta w odpowiedzi na żądanie klienta.</summary>
        <value>
          <see cref="T:System.Net.HttpListenerResponse" /> Obiekt używany do wysyłania odpowiedzi do klienta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Umożliwia aplikacji skonfigurowanie odpowiedzi przez ustawienie właściwości <xref:System.Net.HttpListenerResponse> obiektu zwróconego przez tę właściwość. Po skonfigurowaniu odpowiedzi, zostanie wysłany do klienta przez zamknięcie odpowiedzi lub zamykając to <xref:System.Net.HttpListenerContext> obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje uzyskanie odpowiedzi na żądanie klienta i dodawanie treść odpowiedzi.  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Uwaga: Ten element członkowski generuje informacje o śledzeniu, gdy włączone śledzenie sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [śledzenia sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal User" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ User { System::Security::Principal::IPrincipal ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt używany do uzyskiwania tożsamości, informacje o uwierzytelnianiu i role zabezpieczeń dla klientów, których żądania jest reprezentowany przez ten <see cref="T:System.Net.HttpListenerContext" /> obiektu.</summary>
        <value>
          <see cref="T:System.Security.Principal.IPrincipal" /> Obiektu, który opisuje klienta lub <see langword="null" /> Jeśli <see cref="T:System.Net.HttpListener" /> który dostarczony to <see cref="T:System.Net.HttpListenerContext" /> nie wymaga uwierzytelniania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener> Oznacza, że wymaga uwierzytelniania za pomocą <xref:System.Net.HttpListener.AuthenticationSchemes%2A> właściwości lub określając <xref:System.Net.AuthenticationSchemeSelector> delegowanie przy użyciu <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> właściwości.  
  
 Aby określić nazwę logowania klienta i informacje dotyczące uwierzytelniania, należy sprawdzić <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=nameWithType> właściwości w obiekcie zwracane przez tę właściwość.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje podczas uzyskiwania dostępu do informacji uwierzytelnianie i tożsamość o klienta i zwróceniem do klienta w odpowiedzi.  
  
 [!code-csharp[Net_Listener_Basic#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>