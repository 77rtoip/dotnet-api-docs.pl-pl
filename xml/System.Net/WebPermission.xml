<Type Name="WebPermission" FullName="System.Net.WebPermission">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d39174b57b89d0563d3edcee36f7cf50509a6030" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56792294" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit WebPermission extends System.Security.CodeAccessPermission implements class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPermission&#xA;Inherits CodeAccessPermission&#xA;Implements IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPermission sealed : System::Security::CodeAccessPermission, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type WebPermission = class&#xA;    inherit CodeAccessPermission&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa prawa dostępu do zasobów HTTP w Internecie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebPermission> udostępnia zestaw metod i właściwości w celu kontrolowania dostępu do zasobów w Internecie. Możesz użyć <xref:System.Net.WebPermission> zapewnienie ograniczony lub nieograniczonego dostępu do zasobu, na podstawie <xref:System.Security.Permissions.PermissionState> jest ustawiana podczas <xref:System.Net.WebPermission> zostanie utworzony.  
  
 Utwórz <xref:System.Net.WebPermission> zestawy wystąpienie przez wywołanie konstruktora, jej przy użyciu jednej z następujących parametrów:  
  
-   Bez parametrów. Wartość domyślna <xref:System.Security.Permissions.PermissionState> jest <xref:System.Security.Permissions.PermissionState.None>.  
  
-   A <xref:System.Security.Permissions.PermissionState>. Wybierz opcję <xref:System.Security.Permissions.PermissionState.Unrestricted> umożliwia dowolny identyfikator URI do użycia w klasy docelowej lub <xref:System.Security.Permissions.PermissionState.None> zezwolić na dostęp tylko do identyfikatorów URI, który określisz za pośrednictwem <xref:System.Net.WebPermission.AddPermission%2A> metody.  
  
-   A <xref:System.Net.NetworkAccess> wartość i ciąg identyfikatora URI. Określony identyfikator URI ma uprawnienia przyznane przez <xref:System.Net.NetworkAccess> wartość.  
  
-   A <xref:System.Net.NetworkAccess> specyfikator i wyrażeń regularnych identyfikatora URI.  
  
 <xref:System.Net.WebPermission.ConnectList%2A> i <xref:System.Net.WebPermission.AcceptList%2A> przechowywania identyfikatorów URI, do której udzielono uprawnień dostępu. Aby dodać identyfikator URI do jednej z tych list, użyj <xref:System.Net.WebPermission.AddPermission%2A>. W przypadku przekazania <xref:System.Net.NetworkAccess.Accept> jako <xref:System.Net.NetworkAccess> parametru identyfikatora URI zostanie dodany do <xref:System.Net.WebPermission.AcceptList%2A>. <xref:System.Net.WebPermission> będzie zezwalał na połączenia do klasy docelowej z identyfikatorów URI dopasowania <xref:System.Net.WebPermission.AcceptList%2A>.  
  
> [!CAUTION]
>  Aby zablokować dostęp do zasobu internetowego, można odmówić dostępu do wszystkie możliwe ścieżki do tego zasobu. Wymaga to wywołanie <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=nameWithType> z parametrem stanu równa <xref:System.Security.CodeAccessPermission.Deny%2A>. Lepszym rozwiązaniem jest się zezwolić na dostęp do tylko określonego zasobu. Aby uzyskać więcej informacji na ten temat, zobacz [NIB: Za pomocą metody Odmów](https://msdn.microsoft.com/library/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) tematu.  
  
> [!NOTE]
>  Należy nie zezwoli na dostęp przy użyciu tylko ścieżki canonical zasobów. Nie ma potrzeby używania zmiany syntaktyczne wszystkie ścieżce.  
  
> [!NOTE]
>  Nazwa i domyślnego portu informacje o użytkowniku jest pozbawiony <xref:System.Uri> przed porównania z argumentem wyrażenia regularnego, która jest dostarczana do <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> konstruktora. Jeśli wyrażenie regularne zawiera informacje o użytkowniku lub domyślny numer portu, a następnie wszystkie przychodzące <xref:System.Uri>s nie powiedzie się zgodny z wyrażeniem regularnym.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć nowe wystąpienie klasy <xref:System.Net.WebPermission> przy użyciu <xref:System.Text.RegularExpressions.Regex>. Kolejne hosty zostaną dodane do połączenia i zaakceptuj listę <xref:System.Net.WebPermission>. Na koniec connect i zaakceptuj listy są wyświetlane w konsoli.  
  
 [!code-cpp[WebPermission_Regex#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Regex/CPP/regex.cpp#1)]
 [!code-csharp[WebPermission_Regex#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Regex/CS/regex.cs#1)]
 [!code-vb[WebPermission_Regex#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Regex/VB/regex.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.CodeAccessPermission" />
    <altmember cref="T:System.Security.Permissions.PermissionState" />
    <altmember cref="T:System.Net.NetworkAccess" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Net.WebPermission" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPermission ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPermission();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Net.WebPermission" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nowe wystąpienie klasy <xref:System.Net.WebPermission> klasy. Ten konstruktor tworzy pustą uprawnienia, które nie udziela żadnych praw.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.IsUnrestricted" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As PermissionState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPermission(System::Security::Permissions::PermissionState state);" />
      <MemberSignature Language="F#" Value="new System.Net.WebPermission : System.Security.Permissions.PermissionState -&gt; System.Net.WebPermission" Usage="new System.Net.WebPermission state" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Security.Permissions.PermissionState" /> wartość.</param>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Net.WebPermission" /> klasę, która przekazuje wszystkie wymagane lub nie powiedzie się wszystkich potrzeb.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość `state` parametr ma wartość <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType> lub <xref:System.Security.Permissions.PermissionState.Unrestricted?displayProperty=nameWithType>odpowiednio reaguje pełni ograniczone lub w pełni nieograniczony dostęp do wszystkich zmiennych zabezpieczeń. Jeśli określisz <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>, a następnie możesz udzielić dostępu do poszczególnych identyfikatorów URI przy użyciu <xref:System.Net.WebPermission.AddPermission%2A>.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.Net.WebPermission> i zapewnia dostęp do uprawnień do określonych adresów URL.  
  
 [!code-cpp[WebPermission_Copy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Copy/CPP/webpermission_copy.cpp#1)]
 [!code-csharp[WebPermission_Copy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Copy/CS/webpermission_copy.cs#1)]
 [!code-vb[WebPermission_Copy#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Copy/VB/webpermission_copy.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Security.Permissions.PermissionState.Unrestricted" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPermission (System.Net.NetworkAccess access, string uriString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.NetworkAccess access, string uriString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (access As NetworkAccess, uriString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPermission(System::Net::NetworkAccess access, System::String ^ uriString);" />
      <MemberSignature Language="F#" Value="new System.Net.WebPermission : System.Net.NetworkAccess * string -&gt; System.Net.WebPermission" Usage="new System.Net.WebPermission (access, uriString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="access" Type="System.Net.NetworkAccess" />
        <Parameter Name="uriString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="access">Wartość wartość, która wskazuje, jakiego rodzaju dostępu do określonego identyfikatora URI. <see cref="F:System.Net.NetworkAccess.Accept" /> Wskazuje, że aplikacja może być akceptują połączenia przychodzące z Internetu zasobów lokalnych. <see cref="F:System.Net.NetworkAccess.Connect" /> Wskazuje, czy aplikacja może nawiązać połączenia z określonych zasobów internetowych.</param>
        <param name="uriString">Ciąg identyfikatora URI, do którego dostęp prawa są przyznawane.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.WebPermission" /> klasie z atrybutem prawa dostępu określonego dla określonego identyfikatora URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Net.WebPermission> i przyznaje uprawnienia do jego docelowej albo nawiązać zdalne połączenie hosta lub akceptować połączenia zdalnego hosta za pomocą identyfikatora URI opisanego przez `uriString` parametru.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowe wystąpienie klasy <xref:System.Net.WebPermission> uprawnienia connect określonego identyfikatora URI.  
  
 [!code-cpp[WebPermission_Union#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Union/CPP/webpermission_union.cpp#1)]
 [!code-csharp[WebPermission_Union#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Union/CS/webpermission_union.cs#1)]
 [!code-vb[WebPermission_Union#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Union/VB/webpermission_union.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="uriString" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.NetworkAccess access, class System.Text.RegularExpressions.Regex uriRegex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (access As NetworkAccess, uriRegex As Regex)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPermission(System::Net::NetworkAccess access, System::Text::RegularExpressions::Regex ^ uriRegex);" />
      <MemberSignature Language="F#" Value="new System.Net.WebPermission : System.Net.NetworkAccess * System.Text.RegularExpressions.Regex -&gt; System.Net.WebPermission" Usage="new System.Net.WebPermission (access, uriRegex)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="access" Type="System.Net.NetworkAccess" />
        <Parameter Name="uriRegex" Type="System.Text.RegularExpressions.Regex" />
      </Parameters>
      <Docs>
        <param name="access">A <see cref="T:System.Net.NetworkAccess" /> wartość, która wskazuje, jakiego rodzaju dostępu do określonego identyfikatora URI. <see cref="F:System.Net.NetworkAccess.Accept" /> Wskazuje, że aplikacja może być akceptują połączenia przychodzące z Internetu zasobów lokalnych. <see cref="F:System.Net.NetworkAccess.Connect" /> Wskazuje, czy aplikacja może nawiązać połączenia z określonych zasobów internetowych.</param>
        <param name="uriRegex">Wyrażenie regularne w tym artykule opisano identyfikatora URI, do którego ma zostać udzielone dostępu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.WebPermission" /> klasie z atrybutem prawa dostępu określonego dla określonego identyfikatora URI wyrażenia regularnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Net.WebPermission> i przyznaje uprawnienia do jego docelowej albo nawiązać zdalne połączenie hosta lub akceptować połączenia zdalnego hosta za pomocą identyfikatora URI opisanego przez `uriRegex` parametru.  
  
> [!NOTE]
>  Zaleca się, że utworzono `uriRegex` przy użyciu <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>, <xref:System.Text.RegularExpressions.RegexOptions.Compiled?displayProperty=nameWithType>, i <xref:System.Text.RegularExpressions.RegexOptions.Singleline?displayProperty=nameWithType> flag.  
  
> [!NOTE]
>  Kandydat ciągu identyfikatora URI jest sprawdzana względem listę odpowiednich wyrażeń regularnych (<xref:System.Net.WebPermission.AcceptList%2A> lub <xref:System.Net.WebPermission.ConnectList%2A>) na dwa sposoby. Po pierwsze Release candidate ciągu identyfikatora URI jest sprawdzana względem odpowiednią listę; następnie, w przypadku braku dopasowania Release candidate ciągu identyfikatora URI jest konwertowana na <xref:System.Uri> i sprawdza, czy odpowiednie listy.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowe wystąpienie klasy <xref:System.Net.WebPermission> określonego uprawnienia connect <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType>.  
  
 [!code-cpp[WebPermission_Constructor4#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Constructor4/CPP/webpermission_constructor4.cpp#1)]
 [!code-csharp[WebPermission_Constructor4#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Constructor4/CS/webpermission_constructor4.cs#1)]
 [!code-vb[WebPermission_Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Constructor4/VB/webpermission_constructor4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="AcceptList">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator AcceptList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator AcceptList" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebPermission.AcceptList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AcceptList As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IEnumerator ^ AcceptList { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AcceptList : System.Collections.IEnumerator" Usage="System.Net.WebPermission.AcceptList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ta właściwość zwraca wyliczenie pojedynczej zaakceptowania uprawnień posiadanych przez to <see cref="T:System.Net.WebPermission" />. Obiekty możliwe typy znajdujących się w wyliczeniu, zwracane są <see cref="T:System.String" /> i <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        <value><see cref="T:System.Collections.IEnumerator" /> Interfejsu, który zawiera zaakceptowania uprawnień.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej właściwości pobiera listę zasobów lokalnych, dozwolone to <xref:System.Net.WebPermission>. Klasa, do którego zastosowano <xref:System.Net.WebPermission> ma tylko uprawnienia do odbierania połączenia przychodzącego do zasobów lokalnych na tej liście.  
  
> [!NOTE]
>  Identyfikatory URI można dodać do tej listy przy użyciu <xref:System.Net.WebPermission.AddPermission%2A>.  
  
> [!NOTE]
>  Kandydat ciągu identyfikatora URI jest sprawdzana względem listę odpowiednich wyrażeń regularnych (<xref:System.Net.WebPermission.AcceptList%2A> lub <xref:System.Net.WebPermission.ConnectList%2A>) na dwa sposoby. Po pierwsze Release candidate ciągu identyfikatora URI jest sprawdzana względem odpowiednią listę; następnie, w przypadku braku dopasowania Release candidate ciągu identyfikatora URI jest konwertowana na <xref:System.Uri> i sprawdza, czy odpowiednie listy.  
  
   
  
## Examples  
 Poniższy przykład drukuje adresy URL w <xref:System.Net.WebPermission.AcceptList%2A> do konsoli.  
  
 [!code-cpp[WebPermission_AcceptConnectList#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CPP/webpermission_acceptconnectlist.cpp#2)]
 [!code-csharp[WebPermission_AcceptConnectList#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CS/webpermission_acceptconnectlist.cs#2)]
 [!code-vb[WebPermission_AcceptConnectList#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_AcceptConnectList/VB/webpermission_acceptconnectlist.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddPermission">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje określonego identyfikatora URI z prawa dostępu określonego do bieżącego <see cref="T:System.Net.WebPermission" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddPermission">
      <MemberSignature Language="C#" Value="public void AddPermission (System.Net.NetworkAccess access, string uriString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPermission(valuetype System.Net.NetworkAccess access, string uriString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPermission (access As NetworkAccess, uriString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPermission(System::Net::NetworkAccess access, System::String ^ uriString);" />
      <MemberSignature Language="F#" Value="member this.AddPermission : System.Net.NetworkAccess * string -&gt; unit" Usage="webPermission.AddPermission (access, uriString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="access" Type="System.Net.NetworkAccess" />
        <Parameter Name="uriString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="access">A <see cref="T:System.Net.NetworkAccess" /> określający prawa dostępu, które są przypisywane do identyfikatora URI.</param>
        <param name="uriString">Ciąg, który opisuje identyfikator URI, do którego dostęp prawa są przyznawane.</param>
        <summary>Dodaje określony ciąg identyfikatora URI z prawami dostępu w określonym do bieżącego <see cref="T:System.Net.WebPermission" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określono <xref:System.Security.Permissions.PermissionState.None> jako <xref:System.Security.Permissions.PermissionState>, użyj <xref:System.Net.WebPermission.AddPermission%2A> Aby zezwolić na użycie `uriString` w klasie docelowej. Sposób `uriString` mogą być używane przez element docelowy jest określona przez `access`. Określ <xref:System.Net.NetworkAccess.Accept> jako parametr dostępu, można dodać określonego przez identyfikator URI `uriString` parametru do listy identyfikatorów URI zaakceptować ciągów lub określić <xref:System.Net.NetworkAccess.Connect> jako dostępu ciągów połączenia parametru, aby dodać identyfikator URI do listy identyfikatorów URI.  
  
> [!NOTE]
>  Wywoływanie <xref:System.Net.WebPermission.AddPermission%2A> na <xref:System.Security.Permissions.PermissionState.Unrestricted> <xref:System.Net.WebPermission> odniesie żadnego skutku, ponieważ uprawnienia do wszystkich identyfikatorów URI.  
  
> [!NOTE]
>  Kandydat ciągu identyfikatora URI jest sprawdzana względem listę odpowiednich wyrażeń regularnych (<xref:System.Net.WebPermission.AcceptList%2A> lub <xref:System.Net.WebPermission.ConnectList%2A>) na dwa sposoby. Po pierwsze Release candidate ciągu identyfikatora URI jest sprawdzana względem odpowiednią listę; następnie, w przypadku braku dopasowania Release candidate ciągu identyfikatora URI jest konwertowana na <xref:System.Uri> i sprawdza, czy odpowiednie listy.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak dodać praw dostępu do określonego ciągów adresów URL.  
  
 [!code-cpp[WebPermission_Intersect#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Intersect/CPP/webpermission_intersect.cpp#2)]
 [!code-csharp[WebPermission_Intersect#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Intersect/CS/webpermission_intersect.cs#2)]
 [!code-vb[WebPermission_Intersect#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Intersect/VB/webpermission_intersect.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="uriString" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Net.NetworkAccess" />
      </Docs>
    </Member>
    <Member MemberName="AddPermission">
      <MemberSignature Language="C#" Value="public void AddPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPermission(valuetype System.Net.NetworkAccess access, class System.Text.RegularExpressions.Regex uriRegex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPermission (access As NetworkAccess, uriRegex As Regex)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPermission(System::Net::NetworkAccess access, System::Text::RegularExpressions::Regex ^ uriRegex);" />
      <MemberSignature Language="F#" Value="member this.AddPermission : System.Net.NetworkAccess * System.Text.RegularExpressions.Regex -&gt; unit" Usage="webPermission.AddPermission (access, uriRegex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="access" Type="System.Net.NetworkAccess" />
        <Parameter Name="uriRegex" Type="System.Text.RegularExpressions.Regex" />
      </Parameters>
      <Docs>
        <param name="access">Wartość, która określa prawa dostępu, które są przypisywane do identyfikatora URI.</param>
        <param name="uriRegex">Wyrażenie regularne opisuje zestaw identyfikatorów URI, do którego dostęp prawa są przyznawane.</param>
        <summary>Dodaje określonego identyfikatora URI z prawa dostępu określonego do bieżącego <see cref="T:System.Net.WebPermission" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określono <xref:System.Security.Permissions.PermissionState.None> jako <xref:System.Security.Permissions.PermissionState>, użyj <xref:System.Net.WebPermission.AddPermission%2A> umożliwiający korzystanie z `uriRegex` w klasie docelowej. Określ <xref:System.Net.NetworkAccess.Accept> jako `access` parametru, aby dodać określonego przez identyfikator URI `uriRegex` parametru do listy identyfikatorów URI zaakceptować ciągów lub określić <xref:System.Net.NetworkAccess.Connect> jako dostępu ciągów połączenia parametru, aby dodać identyfikator URI do listy identyfikatorów URI.  
  
> [!NOTE]
>  Wywoływanie <xref:System.Net.WebPermission.AddPermission%2A> na <xref:System.Security.Permissions.PermissionState.Unrestricted> <xref:System.Net.WebPermission> wystąpienia odniesie żadnego skutku, ponieważ uprawnienia do wszystkich identyfikatorów URI.  
  
> [!NOTE]
>  Zaleca się, że utworzono `uriRegex` przy użyciu <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>, <xref:System.Text.RegularExpressions.RegexOptions.Compiled?displayProperty=nameWithType>, i <xref:System.Text.RegularExpressions.RegexOptions.Singleline?displayProperty=nameWithType> flag.  
  
> [!NOTE]
>  Kandydat ciągu identyfikatora URI jest sprawdzana względem listę odpowiednich wyrażeń regularnych (<xref:System.Net.WebPermission.AcceptList%2A> lub <xref:System.Net.WebPermission.ConnectList%2A>) na dwa sposoby. Po pierwsze Release candidate ciągu identyfikatora URI jest sprawdzana względem odpowiednią listę; następnie, w przypadku braku dopasowania Release candidate ciągu identyfikatora URI jest konwertowana na <xref:System.Uri> i sprawdza, czy odpowiednie listy.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Net.WebPermission.AddPermission%2A> Aby udzielić uprawnień dostępu do określonego identyfikatora URI.  
  
 [!code-cpp[WebPermission_IsSubset#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_IsSubset/CPP/webpermission_issubset.cpp#1)]
 [!code-csharp[WebPermission_IsSubset#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_IsSubset/CS/webpermission_issubset.cs#1)]
 [!code-vb[WebPermission_IsSubset#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_IsSubset/VB/webpermission_issubset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="uriRegex" /> Parametr <see langword="null" />.</exception>
        <altmember cref="T:System.Net.NetworkAccess" />
      </Docs>
    </Member>
    <Member MemberName="ConnectList">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator ConnectList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator ConnectList" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebPermission.ConnectList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConnectList As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IEnumerator ^ ConnectList { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectList : System.Collections.IEnumerator" Usage="System.Net.WebPermission.ConnectList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ta właściwość zwraca wyliczenie pojedynczej uprawnień posiadanych przez to <see cref="T:System.Net.WebPermission" />. Obiekty możliwe typy znajdujących się w wyliczeniu, zwracane są <see cref="T:System.String" /> i <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
        <value><see cref="T:System.Collections.IEnumerator" /> Interfejsu, który zawiera połączyć uprawnienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej właściwości pobiera listę zasobów zdalnych, które są dozwolone przez to <xref:System.Net.WebPermission>. Klasa, do którego zastosowano <xref:System.Net.WebPermission> ma tylko uprawnienia do łączenia się z zasobami, które można odnaleźć na tej liście.  
  
> [!NOTE]
>  Identyfikatory URI można dodać do tej listy przy użyciu <xref:System.Net.WebPermission.AddPermission%2A>.  
  
> [!NOTE]
>  Kandydat ciągu identyfikatora URI jest sprawdzana względem listę odpowiednich wyrażeń regularnych (<xref:System.Net.WebPermission.AcceptList%2A> lub <xref:System.Net.WebPermission.ConnectList%2A>) na dwa sposoby. Po pierwsze Release candidate ciągu identyfikatora URI jest sprawdzana względem odpowiednią listę; następnie, w przypadku braku dopasowania Release candidate ciągu identyfikatora URI jest konwertowana na <xref:System.Uri> i sprawdza, czy odpowiednie listy.  
  
   
  
## Examples  
 Poniższy przykład drukuje adresy URL w <xref:System.Net.WebPermission.ConnectList%2A> do konsoli.  
  
 [!code-cpp[WebPermission_AcceptConnectList#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CPP/webpermission_acceptconnectlist.cpp#1)]
 [!code-csharp[WebPermission_AcceptConnectList#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CS/webpermission_acceptconnectlist.cs#1)]
 [!code-vb[WebPermission_AcceptConnectList#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_AcceptConnectList/VB/webpermission_acceptconnectlist.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Security.IPermission" Usage="webPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię <see cref="T:System.Net.WebPermission" />.</summary>
        <returns>Nowe wystąpienie klasy <see cref="T:System.Net.WebPermission" /> klasy, która ma takie same wartości co oryginalny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IPermission> Zwracanego przez ten reprezentuje metodę taki sam dostęp do zasobów, co oryginalny <xref:System.Net.WebPermission>. Ta metoda zastępuje <xref:System.Security.CodeAccessPermission.Copy%2A> i jest implementowane w celu obsługi <xref:System.Security.IPermission> interfejsu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć drugiego wystąpienia <xref:System.Net.WebPermission> przy użyciu <xref:System.Net.WebPermission.Copy%2A>. To drugie wystąpienie jest taka sama jak pierwsza.  
  
 [!code-cpp[WebPermission_Copy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Copy/CPP/webpermission_copy.cpp#2)]
 [!code-csharp[WebPermission_Copy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Copy/CS/webpermission_copy.cs#2)]
 [!code-vb[WebPermission_Copy#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Copy/VB/webpermission_copy.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement securityElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement securityElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXml(System::Security::SecurityElement ^ securityElement);" />
      <MemberSignature Language="F#" Value="override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="webPermission.FromXml securityElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityElement" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="securityElement">Kodowanie XML, z którego można odtworzyć <see cref="T:System.Net.WebPermission" />.</param>
        <summary>Rekonstruuje <see cref="T:System.Net.WebPermission" /> z Kodowanie XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebPermission.FromXml%2A> Niezamrożone metoda <xref:System.Net.WebPermission> z pliku XML kodowanie określone przez <xref:System.Security.SecurityElement> klasy.  
  
 Użyj <xref:System.Net.WebPermission.ToXml%2A> metodę do zakodowania w formacie XML <xref:System.Net.WebPermission>, w tym informacje o stanie.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Security.SecurityElement?displayProperty=nameWithType>, wypełnia jego atrybuty i używa <xref:System.Net.WebPermission.FromXml%2A> do przesyłania tych informacji do wystąpienia <xref:System.Net.WebPermission>.  
  
 [!code-cpp[WebPermission_FromToXml#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_FromToXml/CPP/webpermission_fromtoxml.cpp#1)]
 [!code-csharp[WebPermission_FromToXml#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_FromToXml/CS/webpermission_fromtoxml.cs#1)]
 [!code-vb[WebPermission_FromToXml#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_FromToXml/VB/webpermission_fromtoxml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="securityElement" /> Parametr <see langword="null." /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="securityElement" /> nie jest elementem uprawnień dla tego typu.</exception>
        <altmember cref="M:System.Net.WebPermission.ToXml" />
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="webPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target"><see cref="T:System.Net.WebPermission" /> Do porównania z bieżącym wystąpieniem.</param>
        <summary>Zwraca wartość logiczną wspólną dwóch <see cref="T:System.Net.WebPermission" /> wystąpień.</summary>
        <returns>Nowy <see cref="T:System.Net.WebPermission" /> reprezentujący przecięcia bieżącego wystąpienia i <paramref name="target" /> parametru. Jeśli część wspólną jest pusta, metoda zwraca <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebPermission.Intersect%2A> Zwraca <xref:System.Net.WebPermission> zawiera te uprawnienia, które są wspólne w obu `target` i bieżącego wystąpienia.  
  
 Ta metoda zastępuje <xref:System.Security.CodeAccessPermission.Intersect%2A> i jest implementowane w celu obsługi <xref:System.Security.IPermission> interfejsu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć wystąpienie <xref:System.Net.WebPermission> przy użyciu logicznych część wspólną dwóch istniejących <xref:System.Net.WebPermission> wystąpień.  
  
 [!code-cpp[WebPermission_Intersect#3](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Intersect/CPP/webpermission_intersect.cpp#3)]
 [!code-csharp[WebPermission_Intersect#3](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Intersect/CS/webpermission_intersect.cs#3)]
 [!code-vb[WebPermission_Intersect#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Intersect/VB/webpermission_intersect.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="target" /> nie jest <see langword="null" /> lub typu <see cref="T:System.Net.WebPermission" /></exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="webPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target"><see cref="T:System.Net.WebPermission" /> Do porównania z bieżącą <see cref="T:System.Net.WebPermission" />.</param>
        <summary>Określa, czy bieżący <see cref="T:System.Net.WebPermission" /> jest podzbiorem określony obiekt.</summary>
        <returns><see langword="true" /> Jeśli bieżące wystąpienie jest podzbiorem <paramref name="target" /> parametru; w przeciwnym razie <see langword="false" />. Jeśli miejsce docelowe jest <see langword="null" />, metoda zwraca <see langword="true" /> pusty uprawnienia bieżącego, który nie jest nieograniczony i <see langword="false" /> inaczej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli bieżący <xref:System.Net.WebPermission> określa zestaw skojarzonych zasobów, które jest całkowicie zawarty w `target` parametru, a następnie bieżącego <xref:System.Net.WebPermission> jest podzbiorem `target`. Ta metoda zastępuje <xref:System.Net.WebPermission.IsSubsetOf%2A> i jest implementowane w celu obsługi <xref:System.Security.IPermission> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Net.WebPermission.IsSubsetOf%2A> do określenia, czy prawa dostępu znalezione w jednym wystąpieniu <xref:System.Net.WebPermission> znajdują się w innym wystąpieniu <xref:System.Net.WebPermission>.  
  
 [!code-cpp[WebPermission_IsSubset2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_IsSubset2/CPP/source.cpp#1)]
 [!code-csharp[WebPermission_IsSubset2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_IsSubset2/CS/source.cs#1)]
 [!code-vb[WebPermission_IsSubset2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_IsSubset2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Parametr docelowy nie jest wystąpieniem <see cref="T:System.Net.WebPermission" />.</exception>
        <exception cref="T:System.NotSupportedException">Bieżące wystąpienie zawiera po prawej stronie zakodowane w formacie wyrażeń regularnych i jest dokładnie taka sama bezpośrednio znalezione w wystąpieniu docelowym.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="override this.IsUnrestricted : unit -&gt; bool" Usage="webPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Permissions.IUnrestrictedPermission.IsUnrestricted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sprawdza, czy ogólny stan uprawnienia <see cref="T:System.Net.WebPermission" />.</summary>
        <returns><see langword="true" /> Jeśli <see cref="T:System.Net.WebPermission" /> został utworzony za pomocą <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> <see cref="T:System.Security.Permissions.PermissionState" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Net.WebPermission> jest <xref:System.Security.Permissions.PermissionState.Unrestricted>, Klasa docelowa używać wszystkich identyfikatorów URI. W przeciwnym razie określone uprawnienie należy podać dowolny identyfikator URI, którego chcesz użyć z klasy docelowej.  
  
> [!NOTE]
>  Użyj <xref:System.Net.WebPermission.AddPermission%2A> Dodaj identyfikator URI i określić jego uprawnień.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="webPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy XML kodowanie <see cref="T:System.Net.WebPermission" /> i bieżącego stanu.</summary>
        <returns>A <see cref="T:System.Security.SecurityElement" /> zawierający zakodowane w formacie XML reprezentacja <see cref="T:System.Net.WebPermission" />, w tym informacje o stanie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Net.WebPermission.FromXml%2A> metodę, aby przywracanie informacji o stanie z <xref:System.Security.SecurityElement>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Net.WebPermission.ToXml%2A> utworzyć <xref:System.Security.SecurityElement?displayProperty=nameWithType> i drukowanie jego atrybuty do konsoli.  
  
 [!code-cpp[WebPermission_FromToXml#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_FromToXml/CPP/webpermission_fromtoxml.cpp#1)]
 [!code-csharp[WebPermission_FromToXml#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_FromToXml/CS/webpermission_fromtoxml.cs#1)]
 [!code-vb[WebPermission_FromToXml#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_FromToXml/VB/webpermission_fromtoxml.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)" />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="webPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target"><see cref="T:System.Net.WebPermission" /> Połączyć się z bieżącym <see cref="T:System.Net.WebPermission" />.</param>
        <summary>Zwraca złożenie logiczne między dwoma rodzajami <see cref="T:System.Net.WebPermission" /> klasy.</summary>
        <returns>A <see cref="T:System.Net.WebPermission" /> reprezentujący Unii bieżącego wystąpienia i <paramref name="target" /> parametru. Jeśli <see langword="WebPermission" /> jest <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />, metoda zwraca <see cref="T:System.Net.WebPermission" /> czyli <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />. Jeśli miejsce docelowe jest <see langword="null" />, metoda zwraca kopię bieżącego <see cref="T:System.Net.WebPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebPermission.Union%2A> Zwraca <xref:System.Net.WebPermission> zawiera wszystkie uprawnienia w obu `target` i bieżącego wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład pobiera logiczne sumę dwóch <xref:System.Net.WebPermission> wystąpienia, aby utworzyć wystąpienie trzeci <xref:System.Net.WebPermission>.  
  
 [!code-cpp[WebPermission_Union#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Union/CPP/webpermission_union.cpp#2)]
 [!code-csharp[WebPermission_Union#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Union/CS/webpermission_union.cs#2)]
 [!code-vb[WebPermission_Union#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Union/VB/webpermission_union.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">element docelowy nie jest <see langword="null" /> lub typu <see cref="T:System.Net.WebPermission" />.</exception>
        <altmember cref="T:System.Security.Permissions.PermissionState" />
      </Docs>
    </Member>
  </Members>
</Type>