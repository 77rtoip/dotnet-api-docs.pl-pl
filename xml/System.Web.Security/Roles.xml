<Type Name="Roles" FullName="System.Web.Security.Roles">
  <Metadata><Meta Name="ms.openlocfilehash" Value="171691fbff13d58edd51e317d08305505e6b2292" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69050650" /></Metadata><TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <TypeSignature Language="VB.NET" Value="Public Class Roles" />
  <TypeSignature Language="C++ CLI" Value="public ref class Roles abstract sealed" />
  <TypeSignature Language="F#" Value="type Roles = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zarządza członkostwem użytkowników w rolach na potrzeby sprawdzania autoryzacji w aplikacji ASP.NET. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzanie rolami ASP.NET umożliwia zarządzanie autoryzacją aplikacji na podstawie grup użytkowników, nazywanych rolami. Przypisując użytkowników do ról, można kontrolować dostęp do różnych części lub funkcji aplikacji sieci Web w oparciu o rolę zamiast lub oprócz, określając autoryzację na podstawie nazwy użytkownika. Na przykład aplikacja pracownika może mieć takie role, jak Menedżerowie, pracownicy, operatorzy i tak dalej, gdzie dla każdej roli określono różne uprawnienia.  
  
 Użytkownicy mogą należeć do więcej niż jednej roli. Na przykład jeśli witryna jest forum dyskusyjnym, niektórzy użytkownicy mogą znajdować się w roli zarówno członków, jak i moderatorów. Można zdefiniować każdą rolę mającą inne uprawnienia w lokacji, a następnie użytkownik, który znajduje się w obu rolach, będzie miał oba zestawy uprawnień.  
  
 Aby włączyć zarządzanie rolami dla aplikacji ASP.NET, użyj elementu `system.web` [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) sekcji w pliku Web. config aplikacji, jak pokazano w poniższym przykładzie.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
  <roleManager defaultProvider="SqlProvider"   
    enabled="true"  
    cacheRolesInCookie="true"  
    cookieName=".ASPROLES"  
    cookieTimeout="30"  
    cookiePath="/"  
    cookieRequireSSL="false"  
    cookieSlidingExpiration="true"  
    cookieProtection="All" >  
    <providers>  
      <add  
        name="SqlProvider"  
        type="System.Web.Security.SqlRoleProvider"  
        connectionStringName="SqlServices"  
        applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Możesz określić reguły autoryzacji w pliku konfiguracyjnym aplikacji sieci Web lub programowo w kodzie. Na przykład następująca sekcja [autoryzacji](https://msdn.microsoft.com/library/2d3d9bf6-f914-4c30-ad03-32eea98fa612) z pliku Web. config wymaga od użytkowników logowania się (przez odmowę użytkowników anonimowych), a następnie Zezwalanie na dostęp tylko użytkownikom z roli Administratorzy.  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 Jeśli używasz `authorization` sekcji w pliku Web. config aplikacji, aby określić autoryzację opartą na rolach, użytkownicy aplikacji muszą podać tożsamość uwierzytelnionego użytkownika. Użytkowników można uwierzytelniać za pomocą uwierzytelniania systemu Windows lub formularzy. Użytkowników anonimowych nie można przypisać do roli. Role mogą być używane niezależnie od programu lub w połączeniu z klasami ASP.NET <xref:System.Web.Security.Membership> .  
  
 Aby sprawdzić członkostwo w rolach programowo, można użyć <xref:System.Web.Security.Roles> klasy <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> lub właściwości z <xref:System.Web.Security.Roles.IsUserInRole%2A> metodą <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=nameWithType> lub użyć <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> właściwości z metodą. Przykładowy kod, który programowo sprawdza członkostwo w rolach, znajduje się w sekcji przykład w tym temacie.  
  
 <xref:System.Web.Security.Roles> Klasa umożliwia również tworzenie i usuwanie ról oraz dodawanie użytkowników do ról lub usuwanie ich z nich.  
  
> [!NOTE]
>  Jeśli aplikacja została skonfigurowana do używania <xref:System.Web.Security.WindowsTokenRoleProvider> klasy, nie można modyfikować ról ani członkostwa w rolach. <xref:System.Web.Security.WindowsTokenRoleProvider> Klasa weryfikuje członkostwo tylko w grupach zabezpieczeń systemu Windows. W takim przypadku należy użyć funkcji zarządzania kontami użytkowników systemu Windows zamiast ról ASP.NET do tworzenia i usuwania grup oraz zarządzania członkostwem w grupie.  
  
 Informacje o rolach można przechowywać w kilku źródłach danych.  
  
-   <xref:System.Web.Security.WindowsTokenRoleProvider> Klasy można użyć do pobrania informacji o roli na podstawie członkostwa w grupach systemu Windows.  
  
-   Informacje o rolach można przechowywać w bazie danych SQL Server przy użyciu <xref:System.Web.Security.SqlRoleProvider> klasy.  
  
-   Jeśli masz istniejące informacje o roli lub chcesz przechowywać informacje o rolach w usłudze i pobrać informacje o roli ze źródła danych innego niż Windows, magazynu autoryzacji lub SQL Server, można zaimplementować niestandardowego dostawcę roli przez utworzenie klasy, która dziedziczy <xref:System.Web.Security.RoleProvider> Klasa abstrakcyjna. Aby uzyskać więcej informacji, zobacz [implementowanie dostawcy roli](https://msdn.microsoft.com/library/851671ce-bf9b-43f2-aba4-bc9d28b11c7d).  
  
 Jeśli przeglądarka użytkownika akceptuje pliki cookie, można przechowywać informacje o rolach dla tego użytkownika w pliku cookie na komputerze użytkownika. Na każdym żądaniu strony ASP.NET odczytuje informacje o roli dla tego użytkownika z pliku cookie. Może to zwiększyć wydajność aplikacji przez zmniejszenie ilości komunikacji wymaganej ze źródłem danych w celu pobrania informacji o roli. Jeśli informacje o roli dla użytkownika są zbyt długie do przechowywania w pliku cookie, ASP.NET przechowuje tylko ostatnio używane informacje o roli w pliku cookie, a następnie wyszukuje dodatkowe informacje o roli w źródle danych zgodnie z wymaganiami. Jeśli przeglądarka użytkownika nie obsługuje plików cookie lub pliki cookie są wyłączone, informacje o roli nie są buforowane w pliku cookie.  
  
 Można poprawić niezawodność nazw ról w pamięci podręcznej przez określenie <xref:System.Web.Security.Roles.CookieProtectionValue%2A> właściwości podczas konfigurowania ról ASP.NET. Wartość domyślna <xref:System.Web.Security.Roles.CookieProtectionValue%2A> to `All`, która szyfruje nazwy ról w pliku cookie i sprawdza, czy zawartość pliku cookie nie została zmieniona.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono plik Web. config dla aplikacji skonfigurowanej do używania zarówno członkostwa ASP.NET, jak i ról ASP.NET oraz do <xref:System.Web.Security.SqlRoleProvider> przechowywania informacji o członkostwie i rolach w SQL Serverej bazie danych. Użytkownicy są uwierzytelniani przy użyciu uwierzytelniania formularzy i dostęp do aplikacji mają tylko użytkownicy z roli Administratorzy.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
      <allow roles="Administrators" />  
      <deny users="*" />  
    </authorization>  
  
    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">  
    </membership>  
  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
  
      <providers>  
        <clear />  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="SampleApplication" />  
        </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Poniższy przykład kodu programowo sprawdza, czy zalogowany użytkownik należy do roli Administratorzy przed zezwoleniem użytkownikom na wyświetlanie ról innych użytkowników.  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Tablica ciągów nazw użytkowników do dodania do określonej roli.</param>
        <param name="roleName">Rola, do której mają zostać dodane określone nazwy użytkowników.</param>
        <summary>Dodaje określonych użytkowników do określonej roli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRole%2A> Metoda wywołuje domyślnego dostawcę roli w celu skojarzenia określonych użytkowników z określoną rolą w źródle danych.  
  
 Jeśli aplikacja używa <xref:System.Web.Security.SqlRoleProvider> klasy, aktualizacje bazy danych wykonywane w trakcie wywołania <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> metody są wykonywane w ramach transakcji. Jeśli wystąpi błąd, taki jak nazwa użytkownika, który znajduje się już w określonej roli, transakcja zostanie wycofana i nie są wykonywane żadne aktualizacje.  
  
> [!NOTE]
>  Nazwy użytkowników i ról nie mogą zawierać przecinków.  
  
   
  
## Examples  
 Poniższy przykład kodu dodaje jednego lub kilku użytkowników do roli lub usuwa użytkownika z roli na podstawie danych wejściowych użytkownika. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.  
  
—lub— 
Jeden z elementów w programie <paramref name="usernames" /> ma <see langword="null" />wartość.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
Jeden z elementów w <paramref name="usernames" /> jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="usernames" />zawiera zduplikowany element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Tablica ciągów nazw użytkowników do dodania do określonych ról.</param>
        <param name="roleNames">Tablica ciągów nazw ról, do której mają zostać dodane określone nazwy użytkowników.</param>
        <summary>Dodaje określonych użytkowników do określonych ról.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRoles%2A> Metoda wywołuje domyślnego dostawcę roli w celu skojarzenia określonych użytkowników z określonymi rolami w źródle danych.  
  
 Jeśli aplikacja używa <xref:System.Web.Security.SqlRoleProvider> klasy, aktualizacje bazy danych wykonywane w trakcie wywołania <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> metody są wykonywane w ramach transakcji. Jeśli wystąpi błąd, taki jak nazwa użytkownika, który znajduje się już w określonej roli, transakcja zostanie wycofana i nie są wykonywane żadne aktualizacje.  
  
> [!NOTE]
>  Nazwy użytkowników i ról nie mogą zawierać przecinków.  
  
   
  
## Examples  
 Poniższy przykład kodu dodaje jednego lub kilku użytkowników do co najmniej jednej roli. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jedna z ról w programie <paramref name="roleNames" /> ma <see langword="null" />wartość.  
  
—lub— 
Jeden z użytkowników w <paramref name="usernames" /> usłudze ma. <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException">Jedna z ról w <paramref name="roleNames" /> jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
Jeden z użytkowników w programie <paramref name="usernames" /> jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="roleNames" />zawiera zduplikowany element.  
  
—lub— 
 <paramref name="usernames" />zawiera zduplikowany element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUserToRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Nazwa użytkownika, która ma zostać dodana do określonej roli.</param>
        <param name="roleName">Rola, do której ma zostać dodana określona nazwa użytkownika.</param>
        <summary>Dodaje określonego użytkownika do określonej roli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRole%2A> Metoda wywołuje domyślnego dostawcę roli w celu skojarzenia określonego użytkownika z określoną rolą w źródle danych.  
  
> [!NOTE]
>  Nazwy użytkowników i ról nie mogą zawierać przecinków.  
  
   
  
## Examples  
 Poniższy przykład kodu dodaje użytkownika do roli. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="username" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="username" />jest pustym ciągiem lub zawiera przecinek (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.  
  
 —lub—  
  
 Użytkownik jest już przypisany do określonej roli.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUserToRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">Nazwa użytkownika, która ma zostać dodana do określonych ról.</param>
        <param name="roleNames">Tablica ciągów ról, do której ma zostać dodana określona nazwa użytkownika.</param>
        <summary>Dodaje określonego użytkownika do określonych ról.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRoles%2A> Metoda wywołuje domyślnego dostawcę roli w celu skojarzenia określonego użytkownika z określonymi rolami w źródle danych.  
  
 Jeśli aplikacja używa <xref:System.Web.Security.SqlRoleProvider> klasy, aktualizacje bazy danych wykonywane w trakcie wywołania <xref:System.Web.Security.Roles.AddUserToRoles%2A> metody są wykonywane w ramach transakcji. Jeśli wystąpi błąd, taki jak nazwa użytkownika, który znajduje się już w określonej roli, transakcja zostanie wycofana i nie są wykonywane żadne aktualizacje.  
  
> [!NOTE]
>  Nazwy użytkowników i ról nie mogą zawierać przecinków.  
  
   
  
## Examples  
 Poniższy przykład kodu dodaje użytkownika do co najmniej jednej roli. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jedna z ról w programie <paramref name="roleNames" /> ma <see langword="null" />wartość.  
  
—lub— 
 <paramref name="username" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Jedna z ról w <paramref name="roleNames" /> jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="username" />jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="roleNames" />zawiera zduplikowany element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Roles.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę aplikacji do przechowywania i pobierania informacji o roli dla programu.</summary>
        <value>Nazwa aplikacji do przechowywania i pobierania informacji o roli dla programu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest używana przez klasę do kojarzenia użytkowników i ról z różnymi aplikacjami. <xref:System.Web.Security.Roles> <xref:System.Web.Security.Roles.ApplicationName%2A> Dzięki temu wiele aplikacji może korzystać z tego samego źródła danych w celu przechowywania informacji o użytkownikach i rolach bez rozwiązywania konfliktów między zduplikowanymi nazwami użytkowników lub zduplikowanymi nazwami ról. Wiele aplikacji ASP.NET może używać tego samego źródła danych, określając tę samą wartość we <xref:System.Web.Security.Roles.ApplicationName%2A> właściwości. Można ustawić <xref:System.Web.Security.Roles.ApplicationName%2A> właściwość programowo lub można ustawić ją w sposób deklaratywny w pliku konfiguracji dla aplikacji sieci Web przy `applicationName` użyciu atrybutu.  
  
 Jeśli <xref:System.Web.Security.SqlRoleProvider> aplikacja sieci Web używa klasy, a `applicationName` dla atrybutu w pliku konfiguracji nie określono wartości, <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> zostanie użyta wartość właściwości bieżącej <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> właściwości.  
  
> [!CAUTION]
>  Ponieważ pojedyncze domyślne wystąpienie dostawcy roli jest używane dla wszystkich żądań obsłużonych przez <xref:System.Web.HttpApplication> obiekt, można wykonywać wiele żądań jednocześnie i próbować <xref:System.Web.Security.Roles.ApplicationName%2A> ustawić wartość właściwości. Właściwość nie jest bezpieczna wątkowo dla wielu zapisów, a <xref:System.Web.Security.Roles.ApplicationName%2A> zmiana wartości właściwości może spowodować nieoczekiwane zachowanie dla wielu użytkowników aplikacji. <xref:System.Web.Security.Roles.ApplicationName%2A> Należy unikać pisania kodu, aby umożliwić użytkownikom ustawianie <xref:System.Web.Security.Roles.ApplicationName%2A> właściwości, chyba że jest to wymagane. Przykładem aplikacji, w <xref:System.Web.Security.Roles.ApplicationName%2A> której ustawienie właściwości może być wymagane, jest aplikacja administracyjna, która zarządza danymi roli dla wielu aplikacji. Taka aplikacja powinna być aplikacją pojedynczego użytkownika, a nie aplikacją sieci Web.  
  
   
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i `applicationName` ustawia atrybut na `MyApplication`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CacheRolesInCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CacheRolesInCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheRolesInCookie : bool" Usage="System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy role bieżącego użytkownika są buforowane w pliku cookie.</summary>
        <value><see langword="true" />Jeśli bieżące role użytkownika są buforowane w pliku cookie; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy właściwość jest ustawiona na `true` wartość w pliku Web. config, informacje o rolach poszczególnych użytkowników są przechowywane w pliku cookie. <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> Gdy zarządzanie rolami sprawdza, czy użytkownik znajduje się w określonej roli, plik cookie ról jest sprawdzany przed wywołaniem dostawcy roli w celu sprawdzenia listy ról w źródle danych. Plik cookie jest dynamicznie aktualizowany w celu buforowania ostatnio zweryfikowanych nazw ról.  
  
 Można poprawić niezawodność nazw ról w pamięci podręcznej przez określenie <xref:System.Web.Security.Roles.CookieProtectionValue%2A> właściwości podczas konfigurowania ról ASP.NET. Wartość domyślna <xref:System.Web.Security.Roles.CookieProtectionValue%2A> to `All`, która szyfruje nazwy ról w pliku cookie i sprawdza, czy zawartość pliku cookie nie została zmieniona.  
  
> [!NOTE]
>  Ponieważ nazwy ról mogą być buforowane poza źródłem danych, istnieje możliwość, że zmiany w zarządzaniu rolami w źródle danych nie zostaną odzwierciedlone w buforowanych wartościach. W takim przypadku użytkownik musi zamknąć i ponownie otworzyć przeglądarkę, aby wyczyścić wartość buforowanego pliku cookie.  
  
   
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i `cacheRolesInCookie` ustawia atrybut na `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
   </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieName : string" Usage="System.Web.Security.Roles.CookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę pliku cookie, w którym są buforowane nazwy ról.</summary>
        <value>Nazwa pliku cookie, w którym są buforowane nazwy ról. Wartość domyślna to. ASPXROLES.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz określić nazwę pliku cookie, w którym role są buforowane dla aplikacji, ustawiając `cookieName` atrybut w pliku Web. config dla aplikacji ASP.NET. Jest to przydatne, gdy chcesz jednoznacznie identyfikować plik cookie dla aplikacji lub gdy plik cookie jest współużytkowany przez wiele aplikacji, takich jak plik cookie domeny.  
  
   
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i `cookieName` ustawia atrybut na. ASPROLES.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiePath : string" Usage="System.Web.Security.Roles.CookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ścieżkę do pliku cookie nazw ról w pamięci podręcznej.</summary>
        <value>Ścieżka pliku cookie, w którym są buforowane nazwy ról. Wartość domyślna to/.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz określić ścieżkę pliku cookie, w którym role są buforowane dla aplikacji, ustawiając `cookiePath` atrybut w plik Web. config dla aplikacji ASP.NET. Aby uzyskać więcej informacji na temat ścieżek plików <xref:System.Web.HttpCookie.Path%2A>cookie, zobacz.  
  
   
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i `cookiePath` ustawia atrybut na/MyApplication.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieProtectionValue As CookieProtection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::CookieProtection CookieProtectionValue { System::Web::Security::CookieProtection get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieProtectionValue : System.Web.Security.CookieProtection" Usage="System.Web.Security.Roles.CookieProtectionValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, w jaki sposób są chronione nazwy ról w pamięci podręcznej.</summary>
        <value>Jedna z <see cref="T:System.Web.Security.CookieProtection" /> wartości wyliczenia wskazująca, jak nazwy ról, które są buforowane w pliku cookie są chronione. Wartość domyślna to <see langword="All" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić ochronę plików cookie, w przypadku których role są buforowane dla aplikacji, ustawiając `cookieProtection` atrybut w pliku Web. config dla aplikacji ASP.NET. `cookieProtection` Atrybut przyjmujewartośćwyliczenia,którawskazuje,czynazwyrólsązaszyfrowane,zweryfikowane,<xref:System.Web.Security.CookieProtection> oba, czy nie.  
  
   
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i ustawia `cookieProtection` atrybut na `Encrypted`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieRequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieRequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieRequireSSL : bool" Usage="System.Web.Security.Roles.CookieRequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy plik cookie nazw ról wymaga protokołu SSL, aby można było zwrócić do serwera.</summary>
        <value><see langword="true" />Jeśli protokół SSL jest wymagany do zwrócenia plików cookie nazw ról na serwer; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz określić, czy protokół SSL (SSL) jest wymagany do zwrócenia plików cookie nazw ról do serwera w aplikacji przez ustawienie `cookieRequireSSL` atrybutu w pliku Web. config dla aplikacji ASP.NET. Aby uzyskać więcej informacji, zobacz <xref:System.Web.HttpCookie.Secure%2A>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i jest ustawiana `cookieRequireSSL` na. `true`  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieSlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSlidingExpiration : bool" Usage="System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy data i godzina wygaśnięcia pliku cookie nazwy roli będą okresowo resetowane.</summary>
        <value><see langword="true" />Jeśli nazwa roli, Data i godzina wygaśnięcia pliku cookie, będą okresowo resetowane; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz określić, czy nazwa roli plik cookie Data i godzina wygaśnięcia będą resetowane z każdą odpowiedzią przy `cookieSlidingExpiration` użyciu atrybutu w pliku Web. config dla aplikacji ASP.NET. Jeśli `true`czas wygaśnięcia pliku cookie zostanie początkowo ustawiony na bieżącą datę i godzinę <xref:System.Web.Security.Roles.CookieTimeout%2A> oraz w minutach. Gdy użytkownik nadal aktywnie korzysta z aplikacji ASP.NET, Data i godzina wygaśnięcia pliku cookie zostaną automatycznie odświeżone, jeśli jest mniejsza niż połowa <xref:System.Web.Security.Roles.CookieTimeout%2A> pozostałej liczby. Aby uzyskać więcej informacji, zobacz <xref:System.Web.HttpCookie.Expires%2A> właściwość.  
  
   
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> ustawia właściwość na `false`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="false"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CookieTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieTimeout : int" Usage="System.Web.Security.Roles.CookieTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę minut, po których plik cookie ról wygasa.</summary>
        <value>Liczba całkowita określająca liczbę minut, po której wygasa plik cookie ról. Wartość domyślna to 30 minut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest używana, <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> gdy właściwość jest `true` i określa czas wygaśnięcia w minutach dla plików cookie. <xref:System.Web.Security.Roles.CookieTimeout%2A> Aby ustawić <xref:System.Web.Security.Roles.CookieTimeout%2A> wartość, `cookieTimeout` Dodaj atrybut do elementu [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w pliku Web. config dla aplikacji ASP.NET i określ wartość całkowitą.  
  
 Jeśli <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> jest`false`, ta właściwość jest ignorowana.  
  
   
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i <xref:System.Web.Security.Roles.CookieTimeout%2A> ustawia właściwość na 30 minut.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
  <add  
    name="SqlProvider"  
    type="System.Web.Security.SqlRoleProvider"  
    connectionStringName="SqlServices"  
    applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreatePersistentCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CreatePersistentCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CreatePersistentCookie : bool" Usage="System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy plik cookie nazw roli jest oparty na sesji czy trwały.</summary>
        <value><see langword="true" />Jeśli plik cookie nazw roli jest trwałym plikiem cookie; w <see langword="false" />przeciwnym razie. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest ustawiana w konfiguracji dla aplikacji ASP.NET `createPersistentCookie` przy użyciu atrybutu elementu [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) . <xref:System.Web.Security.Roles.CreatePersistentCookie%2A>  
  
 Kiedy `false`, plik cookie nazw roli to plik cookie sesji, czyli plik cookie zostanie utracony, gdy przeglądarka zostanie zamknięta. Kiedy `true`, plik cookie nazw roli jest trwałym plikiem cookie, który jest dostępny w wielu sesjach przeglądarki. Data i godzina wygaśnięcia trwałych plików cookie są ustawiane na bieżącą datę i godzinę <xref:System.Web.Security.Roles.CookieTimeout%2A> oraz wartość w minutach.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member CreateRole : string -&gt; unit" Usage="System.Web.Security.Roles.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nazwa roli do utworzenia.</param>
        <summary>Dodaje nową rolę do źródła danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CreateRole%2A> Metoda dodaje nazwę roli do źródła danych. <xref:System.Web.Security.Roles.CreateRole%2A><xref:System.Web.Security.RoleProvider.CreateRole%2A> wywołuje metodę domyślnego dostawcy roli w celu dodania określonej roli do źródła danych.  
  
> [!NOTE]
>  Nazwy ról nie mogą zawierać przecinków.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy nową rolę w źródle danych. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, czyli potencjalne zagrożenie bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem.  
  
—lub— 
 <paramref name="roleName" />zawiera przecinek.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteCookie();" />
      <MemberSignature Language="F#" Value="static member DeleteCookie : unit -&gt; unit" Usage="System.Web.Security.Roles.DeleteCookie " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa plik cookie, w którym są buforowane nazwy ról.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteCookie%2A> Metoda czyści zawartość pliku cookie, który jest używany do buforowania nazw ról. Aby uzyskać więcej informacji na temat buforowania nazw ról <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>, zobacz.  
  
   
  
## Examples  
 Poniższy przykład kodu wywołuje <xref:System.Web.Security.Roles.DeleteCookie%2A> metodę w celu wyczyszczenia wszystkich buforowanych nazw ról podczas logowania użytkownika. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, czyli potencjalne zagrożenie bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa rolę ze źródła danych.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nazwa roli do usunięcia.</param>
        <summary>Usuwa rolę ze źródła danych.</summary>
        <returns><see langword="true" />Jeśli <paramref name="roleName" /> został usunięty ze źródła danych; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A> Metoda usuwa nazwę roli ze źródła danych. <xref:System.Web.Security.Roles.DeleteRole%2A><xref:System.Web.Security.RoleProvider.DeleteRole%2A> wywołuje metodę domyślnego dostawcy roli, aby usunąć określoną rolę ze źródła danych.  
  
 Jeśli rola identyfikowana przez `roleName` parametr ma co najmniej jeden element członkowski, zostanie zgłoszony wyjątek, a rola nie zostanie usunięta.  
  
   
  
## Examples  
 Poniższy przykład kodu usuwa rolę ze źródła danych. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" />ma co najmniej jednego członka.  
  
—lub— 
Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string * bool -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">Nazwa roli do usunięcia.</param>
        <param name="throwOnPopulatedRole">Jeśli <see langword="true" />, zgłasza wyjątek, jeśli <paramref name="roleName" /> ma co najmniej jednego członka.</param>
        <summary>Usuwa rolę ze źródła danych.</summary>
        <returns><see langword="true" />Jeśli <paramref name="roleName" /> został usunięty ze źródła danych; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A> Metoda usuwa nazwę roli ze źródła danych. <xref:System.Web.Security.Roles.DeleteRole%2A><xref:System.Web.Security.RoleProvider.DeleteRole%2A> wywołuje metodę domyślnego dostawcy roli, aby usunąć określoną rolę ze źródła danych.  
  
 Jeśli `throwOnPopulatedRole` ma `true`wartość, zostanie zgłoszony wyjątek, a rola nie zostanie usunięta, Jeśli rola identyfikowana przez `roleName` parametr ma co najmniej jednego członka. Jeśli `throwOnPopulatedRole` jest`false`, rola zostanie usunięta, niezależnie od tego, czy jest pusta.  
  
   
  
## Examples  
 Poniższy przykład kodu usuwa rolę ze źródła danych. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" />ma co najmniej jednego członka i <paramref name="throwOnPopulatedRole" /> jest <see langword="true" />.  
  
—lub— 
Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Domain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string" Usage="System.Web.Security.Roles.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość domeny pliku cookie nazw roli.</summary>
        <value><see cref="P:System.Web.HttpCookie.Domain" /> Nazwa roli plik cookie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest ustawiana w konfiguracji dla aplikacji ASP.NET `domain` przy użyciu atrybutu elementu [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) . <xref:System.Web.Security.Roles.Domain%2A>  
  
 Jeśli żadna wartość nie zostanie określona w konfiguracji <xref:System.Web.Security.Roles.Domain%2A> atrybutu domeny, funkcja zwraca `null` wartość, a nazwa domeny plik cookie nazwy roli domyślnie <xref:System.Web.HttpCookie> <xref:System.Web.HttpCookie.Domain%2A> do zachowania właściwości.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.Security.Roles.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy włączono zarządzanie rolami dla bieżącej aplikacji sieci Web.</summary>
        <value><see langword="true" />Jeśli zarządzanie rolami jest włączone; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i `enabled` ustawia atrybut na `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersInRole : string * string -&gt; string[]" Usage="System.Web.Security.Roles.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Rola do przeszukania.</param>
        <param name="usernameToMatch">Nazwa użytkownika do wyszukania.</param>
        <summary>Pobiera listę użytkowników w określonej roli, gdzie nazwa użytkownika zawiera określoną nazwę użytkownika do dopasowania.</summary>
        <returns>Tablica ciągów zawierająca nazwy wszystkich użytkowników, których nazwa użytkownika jest zgodna <paramref name="usernameToMatch" /> i które są członkami określonej roli.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.FindUsersInRole%2A>zwraca listę użytkowników w roli, gdzie nazwa użytkownika zawiera dopasowanie do wartości dostarczonej `usernameToMatch` dla skonfigurowanego `applicationName`elementu. Na przykład, jeśli `usernameToMatch` parametr ma wartość "User", wówczas są zwracane użytkownicy "Użytkownik1", "user3" i tak dalej. Użytkownicy są przywracani w kolejności alfabetycznej według nazwy użytkownika.  
  
 Wykonuje wyszukiwanie przy użyciu klauzuli LIKE `usernameToMatch` względem parametru. <xref:System.Web.Security.SqlRoleProvider> Wszystkie symbole wieloznaczne, które są obsługiwane przez SQL Server w klauzulach like, mogą `usernameToMatch` być używane w wartości parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Web.Security.Roles.FindUsersInRole%2A> metody do wyświetlania przynależności do ról na podstawie danych wejściowych użytkownika. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, czyli potencjalne zagrożenie bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" /> (<see langword="Nothing" /> w Visual Basic).  
  
—lub— 
 <paramref name="usernameToMatch" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="usernameToMatch" />jest pustym ciągiem.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="static member GetAllRoles : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera listę wszystkich ról aplikacji.</summary>
        <returns>Tablica ciągów zawierająca nazwy wszystkich ról przechowywanych w źródle danych dla aplikacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetAllRoles%2A> Metoda<xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=nameWithType> wywołuje metodę domyślnego dostawcy roli w celu uzyskania listy wszystkich ról ze źródła danych dla aplikacji. Pobierane są tylko role dla aplikacji określonej we <xref:System.Web.Security.Roles.ApplicationName%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Web.Security.Roles.GetAllRoles%2A> Aby uzyskać listę ról dla aplikacji i powiązać wyniki <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> z kontrolką. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, czyli potencjalne zagrożenie bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera listę ról, do których należy użytkownik.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser();" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera listę ról, w których znajduje się aktualnie zalogowany użytkownik.</summary>
        <returns>Tablica ciągów zawierająca nazwy wszystkich ról aktualnie zalogowanego użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A> Metoda<xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> wywołuje metodę domyślnego dostawcy roli do pobrania ze źródła danych, w którym znajduje się aktualnie zalogowany użytkownik. Aktualnie zalogowany użytkownik jest identyfikowany przez <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> Właściwość bieżącej <xref:System.Web.HttpContext?displayProperty=nameWithType>lub przez <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> środowiska hostingu inne niż http. Jeśli żaden użytkownik nie jest zalogowany, zostanie zgłoszony wyjątek. Pobierane są tylko role dla aplikacji określonej we <xref:System.Web.Security.Roles.ApplicationName%2A> właściwości.  
  
 Jeśli <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> tak `true`, wyniki<xref:System.Web.Security.Roles.GetRolesForUser%2A> metody mogą być zwracane z pamięci podręcznej roli, a nie od określonego dostawcy roli.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Web.Security.Roles.GetRolesForUser%2A> aby pobrać listę ról dla określonego użytkownika i powiązać zwrócone role <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> z kontrolką. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Brak bieżącego zalogowanego użytkownika.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : string -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Użytkownik, który ma zwrócić listę ról dla.</param>
        <summary>Pobiera listę ról, do których należy użytkownik.</summary>
        <returns>Tablica ciągów zawierająca nazwy wszystkich ról, w których znajduje się określony użytkownik.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A> Metoda<xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> wywołuje metodę domyślnego dostawcy roli do pobrania ze źródła danych, w którym znajduje się użytkownik. Pobierane są tylko role dla aplikacji określonej we <xref:System.Web.Security.Roles.ApplicationName%2A> właściwości.  
  
 Jeśli `username` jest równa bieżącemu zalogowanemu użytkownikowi i <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> jest `true`, wyniki <xref:System.Web.Security.Roles.GetRolesForUser%2A> metody mogą zostać zwrócone z pamięci podręcznej roli, a nie do określonego <xref:System.Web.Security.Roles.Provider%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Web.Security.Roles.GetRolesForUser%2A> aby pobrać listę ról dla określonego użytkownika i powiązać zwrócone role <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> z kontrolką. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" />zawiera przecinek (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member GetUsersInRole : string -&gt; string[]" Usage="System.Web.Security.Roles.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Rola, dla której ma zostać uzyskana lista użytkowników.</param>
        <summary>Pobiera listę użytkowników w określonej roli.</summary>
        <returns>Tablica ciągów zawierająca nazwy wszystkich użytkowników, którzy są członkami określonej roli.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetUsersInRole%2A> Metoda<xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> wywołuje metodę domyślnego dostawcy roli w celu pobrania nazw użytkowników skojarzonych z rolą ze źródła danych. Pobierane są tylko role dla aplikacji określonej we <xref:System.Web.Security.Roles.ApplicationName%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Web.Security.Roles.GetUsersInRole%2A> Aby uzyskać listę użytkowników w określonej roli i powiązać wyniki <xref:System.Web.UI.WebControls.GridView> z kontrolką. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy użytkownik znajduje się w określonej roli.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nazwa roli do przeszukania.</param>
        <summary>Pobiera wartość wskazującą, czy aktualnie zalogowany użytkownik znajduje się w określonej roli. Interfejs API ma być wywoływany tylko w kontekście wątku żądania ASP.NET, a w przypadku oficjalnie zaakceptowanego przypadku użycia jest bezpieczny wątkowo.</summary>
        <returns><see langword="true" />Jeśli aktualnie zalogowany użytkownik znajduje się w określonej roli; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołuje metodę domyślnego dostawcy roli w celu ustalenia, czy aktualnie zalogowany użytkownik jest skojarzony z rolą ze źródła danych aplikacji <xref:System.Web.Security.Roles.ApplicationName%2A> , która jest określona we właściwości. <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=nameWithType> <xref:System.Web.Security.Roles.IsUserInRole%2A> Aktualnie zalogowany użytkownik jest identyfikowany przez <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> Właściwość bieżącej <xref:System.Web.HttpContext?displayProperty=nameWithType>lub przez <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> środowiska hostingu inne niż http. Jeśli żaden użytkownik nie jest zalogowany, zostanie zgłoszony wyjątek. Pobierane są tylko role dla aplikacji określonej we <xref:System.Web.Security.Roles.ApplicationName%2A> właściwości.  
  
 Jeśli <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> jest `true`, wówczas`roleName` może być sprawdzane względem pamięci podręcznej ról, a nie od określonego dostawcy roli.  
  
   
  
## Examples  
 Poniższy przykład kodu programowo sprawdza, czy aktualnie zalogowany użytkownik należy do roli administratorów przed zezwoleniem użytkownikowi na wyświetlanie ustawień ról aplikacji. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.  
  
—lub— 
Brak bieżącego zalogowanego użytkownika.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string * string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Nazwa użytkownika do wyszukania.</param>
        <param name="roleName">Nazwa roli do przeszukania.</param>
        <summary>Pobiera wartość wskazującą, czy określony użytkownik znajduje się w określonej roli. Interfejs API ma być wywoływany tylko w kontekście wątku żądania ASP.NET, a w przypadku oficjalnie zaakceptowanego przypadku użycia jest bezpieczny wątkowo.</summary>
        <returns><see langword="true" />Jeśli określony użytkownik należy do określonej roli; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołuje metodę domyślnego dostawcy roli w celu ustalenia, czy nazwa użytkownika jest skojarzona z rolą ze źródła danych aplikacji <xref:System.Web.Security.Roles.ApplicationName%2A> , która jest określona we właściwości. <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> <xref:System.Web.Security.Roles.IsUserInRole%2A>  
  
 Jeśli `username` jest równe bieżącemu zalogowanemu użytkownikowi, <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> a wartość właściwości jest `true`, może być `roleName` sprawdzana względem pamięci podręcznej roli, a nie <xref:System.Web.Security.Roles.Provider%2A>do określonego.  
  
   
  
## Examples  
 Poniższy przykład kodu programowo sprawdza, czy użytkownik należy do roli administratorów przed zezwoleniem użytkownikowi na wyświetlanie ustawień ról aplikacji. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="username" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="username" />zawiera przecinek (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxCachedResults As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxCachedResults { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxCachedResults : int" Usage="System.Web.Security.Roles.MaxCachedResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera maksymalną liczbę nazw ról, które mają być buforowane dla użytkownika.</summary>
        <value>Maksymalna liczba nazw ról, które mają być buforowane dla użytkownika. Wartość domyślna to 25.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest ustawiana `maxCachedResults` przy użyciu atrybutu Configuration. <xref:System.Web.Security.Roles.MaxCachedResults%2A> Wartość `maxCachedResults` atrybutu konfiguracji musi być ustawiona na wartość całkowitą większą od zera.  
  
   
  
## Examples  
 Poniższy przykład pokazuje element [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w `system.web` sekcji pliku Web. config dla aplikacji ASP.NET. Określa, że aplikacja używa <xref:System.Web.Security.SqlRoleProvider> wystąpienia i `maxCachedResults` ustawia atrybut na 10.  
  
```  
<roleManager  
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All"   
  maxCachedResults="10" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As RoleProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProvider ^ Provider { System::Web::Security::RoleProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.RoleProvider" Usage="System.Web.Security.Roles.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera domyślnego dostawcę roli dla aplikacji.</summary>
        <value>Domyślny dostawca roli dla aplikacji, który jest udostępniany jako Klasa, która dziedziczy <see cref="T:System.Web.Security.RoleProvider" /> klasę abstrakcyjną.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Provider%2A> Właściwość pozwala bezpośrednio odwoływać się do domyślnego dostawcy roli dla aplikacji. Jest to często używane do uzyskiwania dostępu do niestandardowych członków dostawcy roli, które nie są częścią <xref:System.Web.Security.RoleProvider> klasy abstrakcyjnej.  
  
 Na przykład <xref:System.Web.Security.WindowsTokenRoleProvider> Klasa zawiera Przeciążenie <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> metody, która pozwala określić, czy użytkownik znajduje się w wspólnej roli <xref:System.Security.Principal.WindowsBuiltInRole> systemu Windows przy użyciu wartości wyliczenia. Odwołanie do <xref:System.Web.Security.WindowsTokenRoleProvider> klasy dla aplikacji można uzyskać przy <xref:System.Web.Security.Roles.Provider%2A> użyciu właściwości i może być rzutowane jako a <xref:System.Web.Security.WindowsTokenRoleProvider> w celu odwoływania się do <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> przeciążenia.  
  
 Jeśli dla aplikacji skonfigurowano wielu dostawców ról, można uzyskać dostęp do różnych dostawców ról przy użyciu <xref:System.Web.Security.Roles.Providers%2A> kolekcji.  
  
   
  
## Examples  
 Poniższy przykład kodu rzutuje domyślnego dostawcę roli na <xref:System.Web.Security.WindowsTokenRoleProvider> i sprawdza, czy aktualnie zalogowany użytkownik należy do roli Administratorzy przed zezwoleniem użytkownikowi na wyświetlanie ustawień ról dla aplikacji. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.WindowsTokenRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As RoleProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProviderCollection ^ Providers { System::Web::Security::RoleProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.RoleProviderCollection" Usage="System.Web.Security.Roles.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję dostawców ról dla aplikacji ASP.NET.</summary>
        <value>A <see cref="T:System.Web.Security.RoleProviderCollection" /> , który zawiera dostawców ról skonfigurowanych dla aplikacji ASP.NET.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Providers%2A> Właściwość odwołuje się do wszystkich dostawców ról włączonych dla aplikacji, w tym dostawców dodanych w pliku Web. config. Można kontrolować, którzy dostawcy ról są dostępni dla aplikacji, za pomocą `providers` elementu roleManager [](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) w pliku Web. config aplikacji.  
  
 Poniższy przykład pokazuje sekcję [roleManager](https://msdn.microsoft.com/library/4b0f6078-4824-4fc8-a5ee-4ae00ee3ceec) , która usuwa wszystkich istniejących dostawców (takich jak określone w pliku Machine. config) i dodaje <xref:System.Web.Security.SqlRoleProvider> wystąpienie jako dostawcę roli dla aplikacji.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="Encrypted">  
  
      <providers>  
        <clear/>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
         </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Można uzyskać jednoznacznie określone odwołanie do dostawcy z <xref:System.Web.Security.Roles.Providers%2A> kolekcji przez indeksowanie dostawcy roli według nazwy i rzutowanie go jako żądany typ.  
  
 Możesz uzyskać odwołanie do domyślnego dostawcy aplikacji przy użyciu <xref:System.Web.Security.Roles.Provider%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu zawiera listę dostawców włączonych dla aplikacji i ich odpowiednich typów.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Użytkownik, który ma zostać usunięty z określonej roli.</param>
        <param name="roleName">Rola, z której ma zostać usunięty określony użytkownik.</param>
        <summary>Usuwa określonego użytkownika z określonej roli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> Metoda wywołuje domyślnego dostawcę roli w celu usunięcia określonego użytkownika z określonej roli w źródle danych.  
  
   
  
## Examples  
 Poniższy przykład kodu usuwa użytkownika z roli. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="username" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,) 
 <paramref name="username" />jest pustym ciągiem lub zawiera przecinek (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">Użytkownik, który ma zostać usunięty z określonych ról.</param>
        <param name="roleNames">Tablica ciągów nazw ról, z której ma zostać usunięty określony użytkownik.</param>
        <summary>Usuwa określonego użytkownika z określonych ról.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> Metoda wywołuje domyślnego dostawcę roli w celu usunięcia określonego użytkownika z określonych ról w źródle danych.  
  
 Jeśli aplikacja jest skonfigurowana do używania <xref:System.Web.Security.SqlRoleProvider> klasy, aktualizacje bazy danych wykonywane podczas wywołania <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> metody są wykonywane w ramach transakcji. Jeśli wystąpi błąd, taki jak nazwa użytkownika, który nie należy do określonej roli, transakcja zostanie wycofana i nie są wykonywane żadne aktualizacje.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> aby usunąć użytkownika z jednej lub wielu ról. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jedna z ról w programie <paramref name="roleNames" /> ma <see langword="null" />wartość.  
  
—lub— 
 <paramref name="username" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Jedna z ról w <paramref name="roleNames" /> jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="username" />jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="roleNames" />zawiera zduplikowany element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Tablica ciągów nazw użytkowników do usunięcia z określonych ról.</param>
        <param name="roleName">Nazwa roli, z której mają zostać usunięte określeni użytkownicy.</param>
        <summary>Usuwa określonych użytkowników z określonej roli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> Metoda wywołuje domyślnego dostawcę roli w celu usunięcia określonych użytkowników z określonej roli w źródle danych.  
  
 Jeśli aplikacja używa <xref:System.Web.Security.SqlRoleProvider> klasy, aktualizacje bazy danych wykonywane w trakcie wywołania <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> metody są wykonywane w ramach transakcji. Jeśli wystąpi błąd, taki jak nazwa użytkownika, który nie należy do określonej roli, transakcja zostanie wycofana i nie są wykonywane żadne aktualizacje.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> aby usunąć jednego lub kilku użytkowników z roli. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" />.  
  
—lub— 
Jedna z nazw użytkowników w <paramref name="usernames" /> jest. <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
Jedna z nazw użytkowników w programie <paramref name="usernames" /> jest ciągiem pustym lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="usernames" />zawiera zduplikowany element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Tablica ciągów nazw użytkowników do usunięcia z określonych ról.</param>
        <param name="roleNames">Tablica ciągów nazw ról służących do usuwania określonych użytkowników z programu.</param>
        <summary>Usuwa określone nazwy użytkowników z określonych ról.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> Metoda wywołuje domyślnego dostawcę roli w celu usunięcia określonych użytkowników z określonych ról w źródle danych.  
  
 Jeśli aplikacja używa <xref:System.Web.Security.SqlRoleProvider> klasy, aktualizacje bazy danych wykonywane w trakcie wywołania <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> metody są wykonywane w ramach transakcji. Jeśli wystąpi błąd, taki jak nazwa użytkownika, który nie należy do określonej roli, transakcja zostanie wycofana i nie są wykonywane żadne aktualizacje.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> aby usunąć jednego lub kilku użytkowników z jednej lub wielu ról na podstawie danych wejściowych użytkownika. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jedna z ról określona w <paramref name="roleNames" /> jest. <see langword="null" />  
  
—lub— 
Jeden z użytkowników określonych w <paramref name="usernames" /> usłudze ma wartość. <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException">Jedna z ról określona w <paramref name="roleNames" /> jest ciągiem pustym lub zawiera przecinek (,).  
  
—lub— 
Jeden z użytkowników określonych w <paramref name="usernames" /> jest pustym ciągiem lub zawiera przecinek (,).  
  
—lub— 
 <paramref name="roleNames" />zawiera zduplikowany element.  
  
—lub— 
 <paramref name="usernames" />zawiera zduplikowany element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RoleExists : string -&gt; bool" Usage="System.Web.Security.Roles.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nazwa roli do wyszukania w źródle danych.</param>
        <summary>Pobiera wartość wskazującą, czy określona nazwa roli już istnieje w źródle danych roli.</summary>
        <returns><see langword="true" />Jeśli nazwa roli już istnieje w źródle danych; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołuje metodę domyślnego dostawcy roli w celu ustalenia, czy nazwa roli istnieje w źródle danych dla aplikacji <xref:System.Web.Security.Roles.ApplicationName%2A> , która jest określona we właściwości. `RoleExists` <xref:System.Web.Security.Roles.RoleExists%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Web.Security.Roles.RoleExists%2A> aby określić, czy nazwa roli już istnieje przed utworzeniem roli. Przykład pliku Web. config, który umożliwia zarządzanie rolami, znajduje się w temacie <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, czyli potencjalne zagrożenie bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />jest <see langword="null" /> (<see langword="Nothing" /> w Visual Basic).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />jest pustym ciągiem lub zawiera przecinek (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Zarządzanie rolami nie jest włączone.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Informacje o zarządzaniu rolami ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>
