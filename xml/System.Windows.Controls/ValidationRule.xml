<Type Name="ValidationRule" FullName="System.Windows.Controls.ValidationRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4ce8a369ceaf83a9f1a6935fe72e92ee14df27c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37579622" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValidationRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValidationRule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ValidationRule" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValidationRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValidationRule abstract" />
  <TypeSignature Language="F#" Value="type ValidationRule = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia sposób, aby utworzyć regułę niestandardową, aby sprawdzić poprawność danych wejściowych użytkownika.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kiedy używasz [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] powiązanie modelu danych, można skojarzyć <xref:System.Windows.Data.Binding.ValidationRules%2A> za pomocą obiektu powiązania. Aby utworzyć reguły niestandardowe, upewnij podklasę tej klasy i implementuje <xref:System.Windows.Controls.ValidationRule.Validate%2A> metody. Opcjonalnie można użyć wbudowanego <xref:System.Windows.Controls.ExceptionValidationRule>, która przechwytuje wyjątki, które są generowane podczas aktualizacji źródła lub <xref:System.Windows.Controls.DataErrorValidationRule>, która sprawdza, czy błędy wygenerowane przez <xref:System.ComponentModel.IDataErrorInfo> implementacji obiektu źródłowego.  
  
 Aparat powiązania sprawdza każdą <xref:System.Windows.Controls.ValidationRule> skojarzonym z powiązaniem za każdym razem, gdy przesyłania wartości wejściowej, która jest wartością właściwości powiązania docelowej do właściwości źródła powiązania.  
  
 Aby uzyskać szczegółowe informacje dotyczące sprawdzania poprawności danych, zobacz [Przegląd wiązanie danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 Aby uzyskać informacje dotyczące sposobu weryfikowania danych wprowadzonych przez użytkownika w oknie dialogowym, zobacz [Przegląd okien dialogowych](~/docs/framework/wpf/app-development/dialog-boxes-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak zaimplementować regułę sprawdzania poprawności. Wartość wejściowa jest nieprawidłowa, jeśli zawiera ona znaki nienumeryczne lub znajduje się poza dolną i górną granicę. Jeśli wartości zwracanej <xref:System.Windows.Controls.ValidationResult> jest nieprawidłowy, <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> właściwość jest ustawiona na odpowiedni komunikat o błędzie i <xref:System.Windows.Controls.ValidationResult.IsValid%2A> właściwość jest ustawiona na `false`.  
  
 Aby uzyskać kompletny przykład, zobacz [jak: Implementowanie walidacji powiązanie](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Controls.DataErrorValidationRule" />
    <altmember cref="T:System.Windows.Controls.ExceptionValidationRule" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.ValidationRule" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValidationRule ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValidationRule();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.ValidationRule" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValidationRule (System.Windows.Controls.ValidationStep validationStep, bool validatesOnTargetUpdated);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Controls.ValidationStep validationStep, bool validatesOnTargetUpdated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.#ctor(System.Windows.Controls.ValidationStep,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValidationRule(System::Windows::Controls::ValidationStep validationStep, bool validatesOnTargetUpdated);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ValidationRule : System.Windows.Controls.ValidationStep * bool -&gt; System.Windows.Controls.ValidationRule" Usage="new System.Windows.Controls.ValidationRule (validationStep, validatesOnTargetUpdated)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="validationStep" Type="System.Windows.Controls.ValidationStep" />
        <Parameter Name="validatesOnTargetUpdated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="validationStep">Jedna z wartości wyliczenia, które określa, po uruchomieniu reguły sprawdzania poprawności.</param>
        <param name="validatesOnTargetUpdated">
          <see langword="true" /> Aby reguła sprawdzania poprawności, uruchamiać, gdy celem <see cref="T:System.Windows.Data.Binding" /> jest aktualizowana, a w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.ValidationRule" /> klasie z atrybutem krok weryfikacji określonego i wartość, która wskazuje, czy reguła sprawdzania poprawności jest uruchamiany, gdy element docelowy jest aktualizowana.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wykonuje sprawdzanie poprawności na podstawie wartości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Controls.ValidationResult Validate(object value, class System.Globalization.CultureInfo cultureInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Windows::Controls::ValidationResult ^ Validate(System::Object ^ value, System::Globalization::CultureInfo ^ cultureInfo);" />
      <MemberSignature Language="F#" Value="abstract member Validate : obj * System.Globalization.CultureInfo -&gt; System.Windows.Controls.ValidationResult" Usage="validationRule.Validate (value, cultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">Wartość z wiązanie docelowe do sprawdzenia.</param>
        <param name="cultureInfo">Kultura używana w tej regule.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, wykonuje sprawdzanie poprawności na podstawie wartości.</summary>
        <returns>Element <see cref="T:System.Windows.Controls.ValidationResult" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zaimplementować tę metodę, gdy Utwórz podklasę <xref:System.Windows.Controls.ValidationRule> klasy, aby można było utworzyć niestandardową regułę poprawności.  
  
 Każdorazowo aparat powiązania danych przesyła wartości z właściwości docelowej powiązania (z danych wejściowych użytkownika) właściwości źródła powiązania (danych bazowych), jego sprawdza, czy <xref:System.Windows.Data.Binding.ValidationRules%2A> są zdefiniowane dla tego powiązania. Jeśli <xref:System.Windows.Data.Binding.ValidationRules%2A> są zdefiniowane dla powiązania, wywołuje aparat <xref:System.Windows.Controls.ValidationRule.Validate%2A> metody na każdym <xref:System.Windows.Controls.ValidationRule> aż do znalezienia błędu w jeden z nich lub wszystkie z nich przekazywania.  
  
 Aby uzyskać szczegółowe informacje dotyczące sprawdzania poprawności danych, zobacz [Przegląd wiązanie danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak zaimplementować regułę sprawdzania poprawności. W poniższym przykładzie wartość wejściowa jest nieprawidłowa, jeśli zawiera ona znaki nienumeryczne lub znajduje się poza dolną i górną granicę. Jeśli wartość wejściowa jest nieprawidłowa, <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> właściwość jest ustawiona na odpowiedni komunikat o błędzie i <xref:System.Windows.Controls.ValidationResult.IsValid%2A> właściwość jest ustawiona na `false`.  
  
 Aby uzyskać kompletny przykład, zobacz [jak: Implementowanie walidacji powiązanie](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.DataErrorValidationRule" />
        <altmember cref="T:System.Windows.Controls.ExceptionValidationRule" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo, System.Windows.Data.BindingExpressionBase owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Controls.ValidationResult Validate(object value, class System.Globalization.CultureInfo cultureInfo, class System.Windows.Data.BindingExpressionBase owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo,System.Windows.Data.BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Controls::ValidationResult ^ Validate(System::Object ^ value, System::Globalization::CultureInfo ^ cultureInfo, System::Windows::Data::BindingExpressionBase ^ owner);" />
      <MemberSignature Language="F#" Value="abstract member Validate : obj * System.Globalization.CultureInfo * System.Windows.Data.BindingExpressionBase -&gt; System.Windows.Controls.ValidationResult&#xA;override this.Validate : obj * System.Globalization.CultureInfo * System.Windows.Data.BindingExpressionBase -&gt; System.Windows.Controls.ValidationResult" Usage="validationRule.Validate (value, cultureInfo, owner)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="owner" Type="System.Windows.Data.BindingExpressionBase" />
      </Parameters>
      <Docs>
        <param name="value">Wartość z wiązanie docelowe do sprawdzenia.</param>
        <param name="cultureInfo">Kultura używana w tej regule.</param>
        <param name="owner">Wyrażenie powiązania, które używa reguły weryfikacji.</param>
        <summary>Wykonuje sprawdzanie poprawności na podstawie wartości.</summary>
        <returns>Element <see cref="T:System.Windows.Controls.ValidationResult" /> obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo, System.Windows.Data.BindingGroup owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Controls.ValidationResult Validate(object value, class System.Globalization.CultureInfo cultureInfo, class System.Windows.Data.BindingGroup owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo,System.Windows.Data.BindingGroup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Controls::ValidationResult ^ Validate(System::Object ^ value, System::Globalization::CultureInfo ^ cultureInfo, System::Windows::Data::BindingGroup ^ owner);" />
      <MemberSignature Language="F#" Value="abstract member Validate : obj * System.Globalization.CultureInfo * System.Windows.Data.BindingGroup -&gt; System.Windows.Controls.ValidationResult&#xA;override this.Validate : obj * System.Globalization.CultureInfo * System.Windows.Data.BindingGroup -&gt; System.Windows.Controls.ValidationResult" Usage="validationRule.Validate (value, cultureInfo, owner)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="owner" Type="System.Windows.Data.BindingGroup" />
      </Parameters>
      <Docs>
        <param name="value">Wartość z wiązanie docelowe do sprawdzenia.</param>
        <param name="cultureInfo">Kultura używana w tej regule.</param>
        <param name="owner">Grupy powiązania, która korzysta z reguł sprawdzania poprawności.</param>
        <summary>Wykonuje sprawdzanie poprawności na podstawie wartości.</summary>
        <returns>Element <see cref="T:System.Windows.Controls.ValidationResult" /> obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnTargetUpdated">
      <MemberSignature Language="C#" Value="public bool ValidatesOnTargetUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnTargetUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationRule.ValidatesOnTargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnTargetUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnTargetUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnTargetUpdated : bool with get, set" Usage="System.Windows.Controls.ValidationRule.ValidatesOnTargetUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy reguła sprawdzania poprawności jest uruchamiana podczas celem <see cref="T:System.Windows.Data.Binding" /> jest aktualizowana.</summary>
        <value>
          <see langword="true" /> Jeśli reguła sprawdzania poprawności jest uruchamiany, gdy celem <see cref="T:System.Windows.Data.Binding" /> jest aktualizowana, a w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Następujące testy przykład czy <xref:System.Windows.Controls.TextBox> jest pusty. <xref:System.Windows.Controls.ValidationRule>, `ValueIsNotNull`, Ma <xref:System.Windows.Controls.ValidationRule.ValidatesOnTargetUpdated%2A> równa `true`, dzięki czemu podczas uruchamiania aplikacji <xref:System.Windows.Controls.ValidationRule> uruchomiona i wyświetli komunikat, jeśli <xref:System.Windows.Controls.TextBox> jest pusty.  
  
 [!code-xaml[BindingGroupSnippets#ValidatesOnTargetUpdated](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validatesontargetupdated)]  
  
 W poniższym przykładzie przedstawiono <xref:System.Windows.Controls.ValidationRule> używany w poprzednim przykładzie i program obsługi zdarzeń dla <xref:System.Windows.Controls.Validation.Error> zdarzeń.  
  
 [!code-csharp[BindingGroupSnippets#ValueIsNotNull](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#valueisnotnull)]
 [!code-vb[BindingGroupSnippets#ValueIsNotNull](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#valueisnotnull)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationStep">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ValidationStep ValidationStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ValidationStep ValidationStep" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationRule.ValidationStep" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationStep As ValidationStep" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ValidationStep ValidationStep { System::Windows::Controls::ValidationStep get(); void set(System::Windows::Controls::ValidationStep value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationStep : System.Windows.Controls.ValidationStep with get, set" Usage="System.Windows.Controls.ValidationRule.ValidationStep" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationStep</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia po uruchomieniu reguły sprawdzania poprawności.</summary>
        <value>Jedna z wartości wyliczenia.  Wartość domyślna to <see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ustawia <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> do <xref:System.Windows.Controls.ValidationStep.ConvertedProposedValue> na <xref:System.Windows.Controls.ValidationRule> o nazwie `ValidateDateAndPrice` tak, aby po jego uruchomieniu, <xref:System.Windows.Controls.ValidationRule.Validate%2A> metoda ma dostęp do wartości, które mają typ właściwości source. Gdy zasady `PriceIsAPositiveNumber` i `FutureDateRule` Uruchom wartości w każdym <xref:System.Windows.Controls.ValidationRule.Validate%2A> metody są ciągami, ponieważ reguły są uruchamiane przed wartości są konwertowane na ich odpowiednich typów.  
  
 [!code-xaml[BindingGroupSnippets#WindowLayout](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#windowlayout)]  
  
 W poniższym przykładzie przedstawiono <xref:System.Windows.Controls.ValidationRule> `ValidateDateAndPrice`. W `Validate` zastąpienie metody `Price` właściwość jest typu <xref:System.Double> i `OfferExpires` właściwość jest typu <xref:System.DateTime> ponieważ ciągi zostały przekonwertowane na ich odpowiednich typów do czasu <xref:System.Windows.Controls.ValidationRule> działa.  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>