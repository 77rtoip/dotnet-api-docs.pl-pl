<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e9d7ce836a18b8827e0c2dd61702db1c62de516a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30697364" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia w czasie rzeczywistym funkcji Sprawdzanie pisowni w formantach edycji tekstu, takich jak <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby włączyć sprawdzanie pisowni, ustaw <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> właściwości `true` w formancie edycji tekstu. Po włączeniu tego sprawdzania pisowni pisowni są podkreślone przy użyciu czerwone faliste wiersza, jak pokazano na poniższej ilustracji. Moduł sprawdzania pisowni jest obsługiwana tylko wtedy, gdy WPF zawiera słownik domyślny. W [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], WPF zapewnia słowniki angielskim, francuskim, niemieckim i hiszpańskim.  
  
 ![Pole tekstowe z pisowni&#45;sprawdzanie](~/add/media/editing-textbox-with-spellchecking.png "pole tekstowe z sprawdzanie pisowni")  
  
 Aby dodać słownika, Dodaj lokalizację pliku słownika do <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> kolekcji.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję leksykonie lokalizacje plików, które są używane do sprawdzania pisowni niestandardowych.</summary>
        <value>Kolekcja lokalizacje plików słownika.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niestandardowe słowniki Użyj leksykonie pliki, które są plikami tekstowymi, które mają rozszerzenie .lex. Każdy wiersz w pliku leksykonie zawiera pojedynczego wyrazu są akceptowane jako uzasadnionych pisowni. Pierwszy wiersz pliku można określić identyfikator ustawień regionalnych (LCID) dotyczy słownika. Jeśli nie określono ustawienia regionalne, słownik ma zastosowanie do wszystkich języków. Aby uzyskać więcej informacji, zobacz [identyfikatory ustawień regionalnych](http://go.microsoft.com/fwlink/?LinkId=165561). W poniższym przykładzie przedstawiono kilka pierwszych wierszy pliku leksykonie dla języka angielskiego.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Aby określić co najmniej jeden niestandardowych słowników <xref:System.Windows.Controls.TextBox> lub dowolnej klasy, która jest pochodną <xref:System.Windows.Controls.Primitives.TextBoxBase>, określ lokalizację pliku słownika przez dodanie identyfikatora URI dla pliku <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> kolekcji.  
  
> [!NOTE]
>  Przy użyciu <xref:System.Collections.IList.Insert%2A> Aby dodać plik do <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> kolekcji powoduje zgłoszenie wyjątku. Zamiast tego należy użyć <xref:System.Collections.IList.Add%2A> i <xref:System.Collections.IList.Remove%2A> można zaktualizować kolekcji.  
  
 Pliki leksykonie mogą być uwzględnione w aplikacji jako pliki zawartości są zainstalowane na komputerze lokalnym lub pliki zasobów skompilowany w lokalnym odwołuje się do zestawu. Plik można odwoływać się przy użyciu pakietu identyfikatorów URI. Aby uzyskać więcej informacji, zobacz [identyfikatorów URI pakietu na platformie WPF](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md).  
  
 Aby włączyć sprawdzanie pisowni, ustaw <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> właściwości `true` na <xref:System.Windows.Controls.TextBox> lub dowolnej klasy, która jest pochodną <xref:System.Windows.Controls.Primitives.TextBoxBase>. Wszystkie niestandardowe słowniki tego <xref:System.Windows.Controls.TextBox> są używane oprócz domyślne sprawdzanie pisowni. Aby uzyskać więcej informacji na temat narzędzia sprawdzania pisowni, zobacz <xref:System.Windows.Controls.SpellCheck>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono sposób dodawania dwóch słowniki do <xref:System.Windows.Controls.RichTextBox>. Słownik niestandardowy pierwszy (customwords.lex) jest dodawany w języku XAML. Plik jest zawartych w aplikacji jako plik zawartości i skopiowany do katalogu wyjściowego. Aby użyć <xref:System.Uri> element, należy uwzględnić przestrzeń nazw systemu.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 Słownik niestandardowy drugi (customwords2.lex) został dodany w <xref:System.Windows.Controls.Primitives.ButtonBase.Click> obsługi zdarzeń. Plik jest uwzględniona jako plik zasobów i kompilowane do zestawu aplikacji o nazwie WPFCustomDictionary.  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Formant edycji tekstu których zbieranie plików słownika są pobierane.</param>
        <summary>Pobiera kolekcję leksykonie lokalizacje plików, używanych do niestandardowych pisowni na określonej kontrolki edycji tekstu.</summary>
        <returns>Kolekcja lokalizacje plików słownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niestandardowe słowniki Użyj leksykonie pliki, które są plikami tekstowymi proste, które mają rozszerzenie .lex. Każdy wiersz w pliku leksykonie zawiera pojedynczego wyrazu są akceptowane jako uzasadnionych pisowni. Pierwszy wiersz pliku można określić identyfikator ustawień regionalnych (LCID) dotyczy słownika. Jeśli nie określono ustawienia regionalne, słownik ma zastosowanie do wszystkich języków. Aby uzyskać więcej informacji, zobacz [identyfikatory ustawień regionalnych](http://go.microsoft.com/fwlink/?LinkId=165561). W poniższym przykładzie przedstawiono kilka pierwszych wierszy pliku leksykonie dla języka angielskiego.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Aby określić co najmniej jeden niestandardowych słowników <xref:System.Windows.Controls.TextBox> lub dowolnej klasy, która jest pochodną <xref:System.Windows.Controls.Primitives.TextBoxBase>, określ lokalizację pliku słownika przez dodanie identyfikatora URI dla pliku <xref:System.Collections.IList> zwrócony przez <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> — metoda.  
  
 Aby włączyć sprawdzanie pisowni, ustaw <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> właściwości `true` na <xref:System.Windows.Controls.TextBox> lub dowolnej klasy, która jest pochodną <xref:System.Windows.Controls.Primitives.TextBoxBase>. Wszystkie niestandardowe słowniki tego <xref:System.Windows.Controls.TextBox> są używane oprócz domyślne sprawdzanie pisowni. Aby uzyskać więcej informacji na temat narzędzia sprawdzania pisowni, zobacz <xref:System.Windows.Controls.SpellCheck>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textBoxBase" /> Jest <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Formant edycji tekstu do sprawdzenia. Przykład obejmują <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <summary>Zwraca wartość wskazującą, czy sprawdzanie pisowni jest włączone na określonym kontrolki edycji tekstu.</summary>
        <returns>
          <see langword="true" /> Jeśli sprawdzanie pisowni jest włączone w formancie edycji tekstu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textBoxBase" /> Jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy sprawdzanie pisowni jest włączone dla tego formantu edycji tekstu, takich jak <see cref="T:System.Windows.Controls.TextBox" /> lub <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <value>
          <see langword="true" /> Jeśli sprawdzanie pisowni jest włączone w formancie; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zależności ma również użycie specjalnych dołączona właściwość tylko do zapisu. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Składnia ustawienie właściwości jest `<` *textBoxBaseClass* **SpellCheck.IsEnabled**`="`*boolValue* `" .../>`, gdzie *textBoxBaseClass* jest elementem obiektu klasy, która jest pochodną <xref:System.Windows.Controls.Primitives.TextBoxBase>, i *boolValue* jest `true` lub `false` (wielkości liter wielkość liter). Aby ustawić właściwość jako dołączona właściwość w kodzie, zobacz <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> metody. Brak pasującego `GetIsEnabled` metody dostępu. Można uzyskać wartość, Pobierz bieżący <xref:System.Windows.Controls.SpellCheck> obiekt z <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> właściwości, a następnie pobrać wartości <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> właściwości, z którego <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Formant edycji tekstu na których chcesz włączyć lub wyłączyć sprawdzanie pisowni. Przykład obejmują <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Wartość logiczna określająca, czy sprawdzanie pisowni jest włączone w formancie edycji tekstu.</param>
        <summary>Włącza lub wyłącza sprawdzanie pisowni w określonej kontrolki edycji tekstu, takich jak <see cref="T:System.Windows.Controls.TextBox" /> lub <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia użycie dołączona właściwość <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> właściwości w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. W poniższym przykładzie przedstawiono [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] użycia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Formant edycji tekstu dotyczą sprawdzania pisowni. Przykład obejmują <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">
          <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> Wartość, która określa zasad reformy pisowni.</param>
        <summary>Określa reguły reformy pisowni, które są używane przez moduł sprawdzania pisowni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguły reformy pisowni, używanych przez tę metodę odnoszą się do zmian pisowni francuskim i niemieckim uterowych. Ta metoda nie ma znaczenia, gdy jest używany z innego języka.  
  
 Ta metoda umożliwia użycie dołączona właściwość <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> właściwości w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia reguł reformy pisowni, które są używane przez moduł sprawdzania pisowni.</summary>
        <value>Reformy reguł pisowni, które są używane przez moduł sprawdzania pisowni. Wartość domyślna to <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" /> francuski i <see cref="F:System.Windows.Controls.SpellingReform.Postreform" /> na język niemiecki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguły reformy pisowni, które są określone przez tę właściwość można znaleźć reform pisowni francuskim i niemieckim. Ta właściwość nie ma znaczenia, gdy jest używany z innego języka.  
  
 Ta właściwość zależności ma również użycie specjalnych dołączona właściwość tylko do zapisu. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Składnia ustawienie właściwości jest `<` *textBoxBaseClass* **SpellCheck.SpellingReform**`="`*enumValue* `" .../>`, gdzie *textBoxBaseClass* jest elementem obiektu klasy, która jest pochodną <xref:System.Windows.Controls.Primitives.TextBoxBase>, i *enumValue* jest nazwą ciągu dla wartości <xref:System.Windows.Controls.SpellingReform> wyliczenie. Aby ustawić właściwość jako dołączona właściwość w kodzie, zobacz <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> metody. Brak pasującego `GetSpellingReform` metody dostępu. Można uzyskać wartość, Pobierz bieżący <xref:System.Windows.Controls.SpellCheck> obiekt z <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> właściwości, a następnie pobrać wartości <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> właściwości, z którego <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>