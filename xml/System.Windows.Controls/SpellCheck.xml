<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce359dd919a5b1ba5fedb356654b37f84ba8e0fb" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37579823" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia w czasie rzeczywistym funkcji sprawdzania pisowni do kontrolki edycji tekstu, takie jak <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby włączyć sprawdzanie pisowni, ustaw <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> właściwość `true` w formancie edycji tekstu. Po włączeniu tego sprawdzania pisowni błędnie napisanych wyrazów podkreśleniu przy użyciu czerwona linia falista, jak pokazano na poniższej ilustracji. Moduł sprawdzania pisowni jest obsługiwana tylko wtedy, gdy WPF zawiera słownik domyślne. W [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], WPF przewiduje słowników angielskim, francuskim, niemieckim i hiszpańskim.  
  
 ![Pole tekstowe z pisowni&#45;sprawdzanie](~/add/media/editing-textbox-with-spellchecking.png "pole tekstowe z sprawdzanie pisowni")  
  
 Aby dodać słownika niestandardowego, Dodaj lokalizację pliku leksykonu <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> kolekcji.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję leksykonu lokalizacje plików, które są używane do sprawdzania pisowni niestandardowych.</summary>
        <value>Kolekcja leksykonu lokalizacji plików.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niestandardowe słowniki Użyj leksykonu pliki, które są plikami tekstowymi, które mają rozszerzenie .lex. Każdy wiersz w pliku leksykonu zawiera pojedynczego wyrazu zaakceptowanej jako uzasadnione pisowni. Pierwszy wiersz pliku można określić identyfikator ustawień regionalnych (LCID) dotyczy słownika. Jeśli nie określono ustawienia regionalne, słownika ma zastosowanie do wszystkich języków. Aby uzyskać więcej informacji, zobacz [identyfikatory ustawień regionalnych](http://go.microsoft.com/fwlink/?LinkId=165561). Poniższy przykład pokazuje pierwszych kilka wierszy tego pliku leksykonu dla języka angielskiego.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Aby określić co najmniej jeden słowników niestandardowych dla <xref:System.Windows.Controls.TextBox> lub dowolnej klasy, która pochodzi od klasy <xref:System.Windows.Controls.Primitives.TextBoxBase>, określ lokalizację pliku leksykonu, dodając identyfikator URI pliku <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> kolekcji.  
  
> [!NOTE]
>  Za pomocą <xref:System.Collections.IList.Insert%2A> można dodać pliku do <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> kolekcji powoduje wyjątek. Zamiast tego należy użyć <xref:System.Collections.IList.Add%2A> i <xref:System.Collections.IList.Remove%2A> można zaktualizować kolekcji.  
  
 Pliki leksykonu można uwzględnić w aplikacji jako pliki zawartości są zainstalowane na komputerze lokalnym lub plików zasobów skompilowany w lokalnym odwołanie do zestawu. Plik można odwoływać się za pomocą pakietu identyfikatorów URI. Aby uzyskać więcej informacji, zobacz [pakiet URI w WPF](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md).  
  
 Aby włączyć sprawdzanie pisowni, ustaw <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> właściwości `true` na <xref:System.Windows.Controls.TextBox> lub na dowolną klasę pochodzącą od <xref:System.Windows.Controls.Primitives.TextBoxBase>. Wszystkie słowników niestandardowych, w tym <xref:System.Windows.Controls.TextBox> są używane poza domyślne sprawdzanie pisowni. Aby uzyskać więcej informacji na temat sprawdzania pisowni, zobacz <xref:System.Windows.Controls.SpellCheck>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób dodawania dwóch słowników niestandardowych do <xref:System.Windows.Controls.RichTextBox>. Pierwszy słownika (customwords.lex) zostanie dodany w XAML. Plik jest zawartych w aplikacji jako pliku zawartości i kopiowane do katalogu wyjściowego. Aby użyć <xref:System.Uri> elementu, należy dołączyć systemową przestrzenią nazw.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 Drugi słownika (customwords2.lex) zostanie dodany do <xref:System.Windows.Controls.Primitives.ButtonBase.Click> programu obsługi zdarzeń. Plik jest uwzględniona jako plik zasobów i kompilowane do zestawu aplikacji, który nosi nazwę WPFCustomDictionary.  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Których zbieranie plików leksykonu jest pobierany formant edycji tekstu.</param>
        <summary>Pobiera kolekcję leksykonu pliku lokalizacje, które są używane na potrzeby niestandardowych pisowni na określoną kontrolkę edycji tekstu.</summary>
        <returns>Kolekcja leksykonu lokalizacji plików.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niestandardowe słowniki Użyj leksykonu pliki, które są proste pliki tekstowe, które mają rozszerzenie .lex. Każdy wiersz w pliku leksykonu zawiera pojedynczego wyrazu zaakceptowanej jako uzasadnione pisowni. Pierwszy wiersz pliku można określić identyfikator ustawień regionalnych (LCID) dotyczy słownika. Jeśli nie określono ustawienia regionalne, słownika ma zastosowanie do wszystkich języków. Aby uzyskać więcej informacji, zobacz [identyfikatory ustawień regionalnych](http://go.microsoft.com/fwlink/?LinkId=165561). Poniższy przykład pokazuje pierwszych kilka wierszy tego pliku leksykonu dla języka angielskiego.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Aby określić co najmniej jeden słowników niestandardowych dla <xref:System.Windows.Controls.TextBox> lub dowolnej klasy, która pochodzi od klasy <xref:System.Windows.Controls.Primitives.TextBoxBase>, określ lokalizację pliku leksykonu, dodając identyfikator URI dla pliku, aby <xref:System.Collections.IList> zwrócone przez <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> — metoda.  
  
 Aby włączyć sprawdzanie pisowni, ustaw <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> właściwości `true` na <xref:System.Windows.Controls.TextBox> lub na dowolną klasę pochodzącą od <xref:System.Windows.Controls.Primitives.TextBoxBase>. Wszystkie słowników niestandardowych, w tym <xref:System.Windows.Controls.TextBox> są używane poza domyślne sprawdzanie pisowni. Aby uzyskać więcej informacji na temat sprawdzania pisowni, zobacz <xref:System.Windows.Controls.SpellCheck>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textBoxBase" /> Jest <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Kontrolka edycji tekstu do sprawdzenia. Przykład zawierają między innymi <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <summary>Zwraca wartość wskazującą, czy moduł sprawdzania pisowni jest włączone na określoną kontrolkę edycji tekstu.</summary>
        <returns>
          <see langword="true" /> włączenie sprawdzania pisowni w formancie edycji tekstu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textBoxBase" /> Jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy moduł sprawdzania pisowni jest włączone dla tej kontrolki edycji tekstu, takie jak <see cref="T:System.Windows.Controls.TextBox" /> lub <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <value>
          <see langword="true" /> włączenie sprawdzania pisowni w formancie; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zależności ma również użycie specjalnych dołączoną właściwość tylko do zapisu. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Składnia ustawienie właściwości jest `<` *textBoxBaseClass* **SpellCheck.IsEnabled**`="`*boolValue* `" .../>`, gdzie *textBoxBaseClass* jest element obiektu dla klasy, która pochodzi od klasy <xref:System.Windows.Controls.Primitives.TextBoxBase>, i *boolValue* jest `true` lub `false` (przypadek wielkość liter). Aby ustawić właściwość jako dołączoną właściwość w kodzie, zobacz <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> metody. Nie ma pasującego `GetIsEnabled` metody dostępu. Można uzyskać wartość, Pobierz bieżącą <xref:System.Windows.Controls.SpellCheck> obiektu z <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> właściwości, a następnie wartość <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> właściwość przy jego użyciu <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Kontrolka edycji tekstu na którym chcesz włączyć lub wyłączyć sprawdzanie pisowni. Przykład zawierają między innymi <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Wartość logiczna określająca, czy moduł sprawdzania pisowni jest włączone w formancie edycji tekstu.</param>
        <summary>Włącza lub wyłącza sprawdzanie pisowni na określoną kontrolkę edycji tekstu, takie jak <see cref="T:System.Windows.Controls.TextBox" /> lub <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia użycie dołączoną właściwość <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> właściwość [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. W poniższym przykładzie przedstawiono [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] użycia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Kontrolka edycji tekstu do którego zastosowano sprawdzania pisowni. Przykład zawierają między innymi <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">
          <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> Wartość, która określa reguły reforma sprawdzania pisowni.</param>
        <summary>Określa zasady Reforma pisowni, które są używane przez moduł sprawdzania pisowni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguły Reforma pisowni, używanych przez tę metodę odnoszą się do zmian pisowni francuskim i niemieckim uterowych. Ta metoda nie obowiązuje, gdy jest używana z dowolnym innym języku.  
  
 Ta metoda umożliwia użycie dołączoną właściwość <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> właściwość [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zasady Reforma pisowni, które są używane przez moduł sprawdzania pisowni.</summary>
        <value>Pisownia reforma reguły które są używane przez moduł sprawdzania pisowni. Wartość domyślna to <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" /> francuski i <see cref="F:System.Windows.Controls.SpellingReform.Postreform" /> dla języka niemieckiego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguły Reforma pisowni, które są określone przez tę właściwość można znaleźć reform pisowni francuskim i niemieckim. Ta właściwość nie obowiązuje, gdy jest używana z dowolnym innym języku.  
  
 Ta właściwość zależności ma również użycie specjalnych dołączoną właściwość tylko do zapisu. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Składnia ustawienie właściwości jest `<` *textBoxBaseClass* **SpellCheck.SpellingReform**`="`*enumValue* `" .../>`, gdzie *textBoxBaseClass* jest element obiektu dla klasy, która pochodzi od klasy <xref:System.Windows.Controls.Primitives.TextBoxBase>, i *enumValue* jest nazwą ciągu dla wartości <xref:System.Windows.Controls.SpellingReform> wyliczenie. Aby ustawić właściwość jako dołączoną właściwość w kodzie, zobacz <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> metody. Nie ma pasującego `GetSpellingReform` metody dostępu. Można uzyskać wartość, Pobierz bieżącą <xref:System.Windows.Controls.SpellCheck> obiektu z <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> właściwości, a następnie wartość <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> właściwość przy jego użyciu <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>