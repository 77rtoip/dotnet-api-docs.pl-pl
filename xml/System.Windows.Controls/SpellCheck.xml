<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fcf2137c4c51b05a5901e274d5ba109263153ba1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69212821" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia funkcje sprawdzania pisowni w czasie rzeczywistym do kontrolek edycji tekstu, takich jak <see cref="T:System.Windows.Controls.TextBox" /> i. <see cref="T:System.Windows.Controls.RichTextBox" /></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby włączyć sprawdzanie pisowni, ustaw <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> `true` właściwość na kontrolkę edycji tekstu. Po włączeniu tego modułu sprawdzania pisowni błędne słowa są podkreślane przy użyciu czerwonej linii falistej, jak pokazano na poniższej ilustracji. Sprawdzanie pisowni jest obsługiwane tylko wtedy, gdy WPF udostępnia słownik domyślny. W [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]programie WPF zawiera słowniki dla języków angielskim, francuskim, niemieckim i hiszpańskim.  
  
 ![Pole tekstowe ze&#45;sprawdzaniem pisowni] (~/add/media/editing-textbox-with-spellchecking.png "Pole tekstowe z sprawdzaniem pisowni")  
  
 Aby dodać słownik niestandardowy, Dodaj lokalizację pliku leksykonu do <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> kolekcji.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję lokalizacji plików leksykonów, które są używane do sprawdzania pisowni niestandardowej.</summary>
        <value>Kolekcja lokalizacji plików leksykonu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Słowniki niestandardowe używają plików leksykonów, które są plikami tekstowymi, które mają rozszerzenie. lex. Każdy wiersz pliku leksykonu zawiera pojedynczy wyraz, który jest akceptowany jako legalna pisownia. Pierwszy wiersz pliku może określać identyfikator ustawień regionalnych (LCID), do którego ma zastosowanie słownik. Jeśli nie określono ustawień regionalnych, słownik ma zastosowanie do wszystkich języków. Aby uzyskać więcej informacji, zobacz [identyfikatory ustawień regionalnych](https://go.microsoft.com/fwlink/?LinkId=165561). Poniższy przykład pokazuje pierwsze kilka wierszy pliku leksykonu w języku angielskim.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Aby określić jeden lub więcej słowników niestandardowych dla <xref:System.Windows.Controls.TextBox> lub dla każdej klasy, która pochodzi <xref:System.Windows.Controls.Primitives.TextBoxBase>od, określ lokalizację pliku leksykonu przez dodanie identyfikatora URI <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> dla pliku do kolekcji.  
  
> [!NOTE]
>  Użycie <xref:System.Collections.IList.Insert%2A> do dodania pliku <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> do kolekcji powoduje wystąpienie wyjątku. Zamiast tego należy <xref:System.Collections.IList.Add%2A> użyć <xref:System.Collections.IList.Remove%2A> i zaktualizować kolekcję.  
  
 Pliki leksykonu można dołączać do aplikacji jako pliki zawartości zainstalowane na komputerze lokalnym lub jako pliki zasobów skompilowane w lokalnym zestawie, do którego istnieje odwołanie. Można odwołać się do pliku przy użyciu identyfikatorów URI pakietu. Aby uzyskać więcej informacji, zobacz [identyfikatory URI pakietów w WPF](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md).  
  
 Aby włączyć sprawdzanie <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> pisowni, należy ustawić `true` właściwość na na <xref:System.Windows.Controls.TextBox> lub dla każdej klasy, która dziedziczy z <xref:System.Windows.Controls.Primitives.TextBoxBase>. Wszystkie Słowniki niestandardowe dla <xref:System.Windows.Controls.TextBox> programu są używane oprócz domyślnego sprawdzania pisowni. Aby uzyskać więcej informacji na temat sprawdzania pisowni, <xref:System.Windows.Controls.SpellCheck>Zobacz.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak dodać dwa Słowniki niestandardowe do <xref:System.Windows.Controls.RichTextBox>. Pierwszy słownik niestandardowy (customwords. Lex) jest dodawany w języku XAML. Plik jest dołączany do aplikacji jako plik zawartości i kopiowany do katalogu wyjściowego. Aby użyć <xref:System.Uri> elementu, musisz uwzględnić systemową przestrzeń nazw.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 Drugi słownik niestandardowy (customwords2. Lex) jest dodawany do <xref:System.Windows.Controls.Primitives.ButtonBase.Click> procedury obsługi zdarzeń. Plik zostanie dołączony jako plik zasobów i skompilowany w zestawie aplikacji o nazwie WPFCustomDictionary.  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Kontrolka edycji tekstu, w której jest pobierana Kolekcja plików leksykonu.</param>
        <summary>Pobiera kolekcję lokalizacji plików leksykonów, które są używane dla niestandardowych elementów sprawdzania pisowni w określonej kontrolce edycji tekstu.</summary>
        <returns>Kolekcja lokalizacji plików leksykonu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Słowniki niestandardowe używają plików leksykonów, które są prostymi plikami tekstowymi, które mają rozszerzenie. lex. Każdy wiersz pliku leksykonu zawiera pojedynczy wyraz, który jest akceptowany jako legalna pisownia. Pierwszy wiersz pliku może określać identyfikator ustawień regionalnych (LCID), do którego ma zastosowanie słownik. Jeśli nie określono ustawień regionalnych, słownik ma zastosowanie do wszystkich języków. Aby uzyskać więcej informacji, zobacz [identyfikatory ustawień regionalnych](https://go.microsoft.com/fwlink/?LinkId=165561). Poniższy przykład pokazuje pierwsze kilka wierszy pliku leksykonu w języku angielskim.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Aby określić jeden lub więcej słowników niestandardowych dla <xref:System.Windows.Controls.TextBox> lub dla każdej klasy, która <xref:System.Windows.Controls.Primitives.TextBoxBase>pochodzi od, określ lokalizację pliku leksykonu przez dodanie identyfikatora URI <xref:System.Collections.IList> dla tego pliku <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> do zwracanego przez metodę.  
  
 Aby włączyć sprawdzanie <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> pisowni, należy ustawić `true` właściwość na na <xref:System.Windows.Controls.TextBox> lub dla każdej klasy, która dziedziczy z <xref:System.Windows.Controls.Primitives.TextBoxBase>. Wszystkie Słowniki niestandardowe dla <xref:System.Windows.Controls.TextBox> programu są używane oprócz domyślnego sprawdzania pisowni. Aby uzyskać więcej informacji na temat sprawdzania pisowni, <xref:System.Windows.Controls.SpellCheck>Zobacz.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> Ma<see langword="null" />wartość.</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Kontrolka edycji tekstu do sprawdzenia. Przykładowe formanty obejmują <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <summary>Zwraca wartość wskazującą, czy sprawdzanie pisowni jest włączone dla określonej kontrolki edycji tekstu.</summary>
        <returns><see langword="true" />Jeśli sprawdzanie pisowni jest włączone w kontrolce edycji tekstu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> Ma<see langword="null" />wartość.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy sprawdzanie pisowni jest włączone dla tej kontrolki edycji tekstu, takiej jak <see cref="T:System.Windows.Controls.TextBox" /> lub. <see cref="T:System.Windows.Controls.RichTextBox" /></summary>
        <value><see langword="true" />Jeśli sprawdzanie pisowni jest włączone w formancie; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zależności ma również specjalne użycie właściwości dołączonej tylko do zapisu. `="` `<``" .../>`** ** ** **** Składnia służąca do ustawiania właściwości jest textBoxBaseClass sprawdzania pisowni. IsEnabled boolValue, gdzie textBoxBaseClass jest elementem obiektu dla klasy, która [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] pochodzi od <xref:System.Windows.Controls.Primitives.TextBoxBase>, i *boolValue* jest albo `true` `false` (bez uwzględniania wielkości liter). Aby ustawić właściwość jako dołączoną właściwość w kodzie, zobacz <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> metodę. Brak pasujących `GetIsEnabled` metod dostępu. Aby uzyskać wartość, Pobierz <xref:System.Windows.Controls.SpellCheck> bieżący obiekt <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> z właściwości, a następnie <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> Pobierz wartość właściwości z tego <xref:System.Windows.Controls.SpellCheck>elementu.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Kontrolka edycji tekstu, na której ma zostać włączona lub wyłączona funkcja sprawdzania pisowni. Przykładowe formanty obejmują <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Wartość logiczna określająca, czy sprawdzanie pisowni jest włączone w kontrolce edycji tekstu.</param>
        <summary>Włącza lub wyłącza sprawdzanie pisowni w określonej kontrolce edycji tekstu, takiej jak <see cref="T:System.Windows.Controls.TextBox" /> lub. <see cref="T:System.Windows.Controls.RichTextBox" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia użycie dołączonej właściwości dla <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> właściwości w. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] W poniższym przykładzie pokazano [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] użycie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Kontrolka edycji tekstu, do której jest stosowany moduł sprawdzania pisowni. Przykładowe formanty obejmują <see cref="T:System.Windows.Controls.TextBox" /> i <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value"><see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> Wartość określająca reguły reform pisowni.</param>
        <summary>Określa reguły reform pisowni, które są używane przez moduł sprawdzania pisowni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguły reform pisowni, do których uzyskuje się dostęp w tej metodzie, odnoszą się do reform pisowni w języku francuskim i niemieckim. Ta metoda nie działa, gdy jest używana z innym językiem.  
  
 Ta metoda umożliwia użycie dołączonej właściwości dla <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> właściwości w. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia reguły reform pisowni, które są używane przez moduł sprawdzania pisowni.</summary>
        <value>Reguły reform pisowni, które są używane przez moduł sprawdzania pisowni. Wartość domyślna to <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" /> dla języka francuskiego <see cref="F:System.Windows.Controls.SpellingReform.Postreform" /> i dla języka niemieckiego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reguły reform pisowni, które są określane przez tę właściwość, odnoszą się do reform pisowni w języku francuskim i niemieckim. Ta właściwość nie ma znaczenia, gdy jest używana z innym językiem.  
  
 Ta właściwość zależności ma również specjalne użycie właściwości dołączonej tylko do zapisu. `="` `<``" .../>`** ** ** **** Składnia służąca do ustawiania właściwości jest textBoxBaseClass sprawdzania pisowni. SpellingReform EnumValue, gdzie textBoxBaseClass jest elementem obiektu klasy [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] pochodzi od <xref:System.Windows.Controls.Primitives.TextBoxBase>, i *EnumValue* jest nazwą ciągu dla wartości <xref:System.Windows.Controls.SpellingReform> wyliczenia. Aby ustawić właściwość jako dołączoną właściwość w kodzie, zobacz <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> metodę. Brak pasujących `GetSpellingReform` metod dostępu. Aby uzyskać wartość, Pobierz <xref:System.Windows.Controls.SpellCheck> bieżący obiekt <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> z właściwości, a następnie <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> Pobierz wartość właściwości z tego <xref:System.Windows.Controls.SpellCheck>elementu.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
