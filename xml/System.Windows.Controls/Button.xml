<Type Name="Button" FullName="System.Windows.Controls.Button">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4f27703fa71f05b80e008d54392bbc3de2d605ac" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52599087" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Button : System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Button extends System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Button" />
  <TypeSignature Language="VB.NET" Value="Public Class Button&#xA;Inherits ButtonBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class Button : System::Windows::Controls::Primitives::ButtonBase" />
  <TypeSignature Language="F#" Value="type Button = class&#xA;    inherit ButtonBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Primitives.ButtonBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje kontrolkę przycisku Windows, która reaguje na <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Button> Klasa dziedziczy bezpośrednio z <xref:System.Windows.Controls.Primitives.ButtonBase?displayProperty=nameWithType> klasy.  
  
 **Model zawartości:** <xref:System.Windows.Controls.Button> jest <xref:System.Windows.Controls.ContentControl>. Jego właściwość zawartości ma <xref:System.Windows.Controls.ContentControl.Content%2A>.  
  
 Obsługa <xref:System.Windows.Controls.Primitives.ButtonBase.Click?displayProperty=nameWithType> zdarzenie, aby odpowiadać, gdy użytkownik kliknie <xref:System.Windows.Controls.Button>.  
  
 <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> Znaczniki metoda <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzeń jako obsługiwane. Odpowiedzieć na <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzeń, program obsługi zdarzeń, aby dołączyć <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> zdarzenia lub wywołanie <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` równa `true`.  
  
## <a name="customizing-the-button-control"></a>Dostosowywanie formantu przycisku  
 Aby zastosować te same ustawienia właściwości z wieloma <xref:System.Windows.Controls.Button> kontrolki, używać <xref:System.Windows.FrameworkElement.Style%2A> właściwości. Można zmodyfikować domyślne <xref:System.Windows.Controls.ControlTemplate> zapewnienie unikatowego wyglądu kontrolki. Aby uzyskać więcej informacji o tworzeniu <xref:System.Windows.Controls.ControlTemplate>, zobacz [Dostosowywanie wyglądu istniejącego formantu przez stworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  Aby zobaczyć elementy i Stany, które są specyficzne dla <xref:System.Windows.Controls.Button>, zobacz [style i szablony przycisków](~/docs/framework/wpf/controls/button-styles-and-templates.md).  
  
 Właściwości zależności dla tego formantu może być ustawione przez domyślnego stylu.  Jeśli właściwość jest ustawiana przez domyślnego stylu, zmienić właściwość z jego wartość domyślną gdy formant ma być wyświetlany w aplikacji. Domyślny styl jest określona, przez który motyw pulpitu jest używany podczas działania aplikacji.  Aby uzyskać więcej informacji, zobacz [domyślne motywy WPF](https://go.microsoft.com/fwlink/?LinkID=158252).  
  
> [!NOTE]
>  Ustawienie wartości właściwości wizualnej będzie miał wpływ tylko jeśli ta właściwość jest obecny w <xref:System.Windows.Controls.Button> kontrolki użytkownika domyślnego szablonu i ustawić za pomocą. Lista właściwości visual można znaleźć w sekcji "Zmiana Visual struktury z Control" [Dostosowywanie wyglądu istniejącego formantu przez stworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia trzy przyciski, które odpowiadanie na kliknięcia na trzy różne sposoby.  
  
-   Po wskazaniu wskaźnikiem: pierwszy przycisk zmienia kolory, gdy użytkownik ustawi wskaźnik myszy nad przyciskiem.  
  
-   Naciśnij klawisz: drugi przycisk wymaga naciśnięcia przycisku myszy, gdy wskaźnik myszy znajduje się nad przyciskiem.  
  
-   Wersja: trzecia nie powoduje resetowania kolor tła przycisków, dopóki wskaźnik myszy jest wciśnięty i wydanej w dniu przycisku.  
  
 [!code-xaml[ClickModes_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml#1)]  
  
 [!code-csharp[ClickModes_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml.cs#2)]
 [!code-vb[ClickModes_snip#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClickModes_snip/VisualBasic/Window1.xaml.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160053">Przykładu z galerii kontrolki WPF</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Button.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Button();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.Button" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancel">
      <MemberSignature Language="C#" Value="public bool IsCancel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Button.IsCancel" />
      <MemberSignature Language="VB.NET" Value="Public Property IsCancel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancel { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsCancel : bool with get, set" Usage="System.Windows.Controls.Button.IsCancel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Windows.Controls.Button" /> jest przycisk Anuluj. Użytkownik może uaktywnić przycisk Anuluj, naciskając klawisz ESC.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Controls.Button" /> przycisku Anuluj; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po ustawieniu <xref:System.Windows.Controls.Button.IsCancel%2A> właściwości przycisku, aby `true`, możesz utworzyć <xref:System.Windows.Controls.Button> zarejestrowaniu w usłudze <xref:System.Windows.Input.AccessKeyManager>. Następnie zostanie aktywowany przycisk, gdy użytkownik naciśnie klawisz ESC.  
  
<a name="dependencyPropertyInfo_IsCancel"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Button.IsCancelProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości, aby utworzyć przycisk Anuluj.  
  
 [!code-xaml[ButtonProps_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ButtonProps_snip/CSharp/Page1.xaml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancelProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsCancelProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsCancelProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Button.IsCancelProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsCancelProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsCancelProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsCancelProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Button.IsCancelProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.Button.IsCancel" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public bool IsDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Button.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool with get, set" Usage="System.Windows.Controls.Button.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Windows.Controls.Button" /> to przycisk domyślny. Użytkownik wywołuje przycisk domyślny, naciskając klawisz ENTER.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Controls.Button" /> to przycisk domyślny; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po ustawieniu <xref:System.Windows.Controls.Button.IsDefault%2A> właściwości przycisku, aby `true`, należy zarejestrować button z <xref:System.Windows.Input.AccessKeyManager> , dzięki czemu użytkownik może wywołać ten przycisk, naciskając klawisz ENTER.  
  
<a name="dependencyPropertyInfo_IsDefault"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Button.IsDefaultProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak określić przycisku jako przycisk domyślny.  
  
 [!code-xaml[ButtonProps_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ButtonProps_snip/CSharp/Page1.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaulted">
      <MemberSignature Language="C#" Value="public bool IsDefaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefaulted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Button.IsDefaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefaulted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefaulted : bool" Usage="System.Windows.Controls.Button.IsDefaulted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Windows.Controls.Button" /> jest przycisk, który jest aktywowany, gdy użytkownik naciśnie klawisz ENTER.</summary>
        <value>
          <see langword="true" /> Jeśli przycisk jest aktywowany, gdy użytkownik naciśnie ENTER; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Button.IsDefaulted%2A> Właściwość `true` podczas <xref:System.Windows.Controls.Button.IsDefault%2A> właściwość jest ustawiona na `true` i formant, który ma fokus nie akceptuje ENTER jako dane wejściowe.  Na przykład w **Uruchom** okno dialogowe **OK** przycisk to przycisk domyślny. Gdy fokus znajduje się w polu tekstowym <xref:System.Windows.Controls.Button.IsDefaulted%2A> na **OK** znajduje się przycisk `true` ponieważ użytkownik może uaktywnić przycisk, naciskając klawisz ENTER.  
  
> [!NOTE]
>  Jeśli przycisk domyślny jest ustawiony fokus, <xref:System.Windows.Controls.Button.IsDefaulted%2A> jest `false`. Jest to spowodowane <xref:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown%2A> obsługiwała ENTER, a nie jest konieczne <xref:System.Windows.Controls.Button.IsDefaulted%2A> należy ustawić `true`.  
  
<a name="dependencyPropertyInfo_IsDefaulted"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Button.IsDefaultedProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak ustalić, czy <xref:System.Windows.Controls.Button.IsDefaulted%2A> właściwość `true` jako przycisk domyślny.  
  
 [!code-csharp[ButtonProps_snip#3](~/samples/snippets/csharp/VS_Snippets_Wpf/ButtonProps_snip/CSharp/Page1.xaml.cs#3)]
 [!code-vb[ButtonProps_snip#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ButtonProps_snip/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsDefaultedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsDefaultedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Button.IsDefaultedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsDefaultedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsDefaultedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsDefaultedProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Button.IsDefaultedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.Button.IsDefaulted" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsDefaultProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsDefaultProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Button.IsDefaultProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsDefaultProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsDefaultProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsDefaultProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Button.IsDefaultProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.Button.IsDefault" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected override void OnClick ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Button.OnClick" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClick ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClick();" />
      <MemberSignature Language="F#" Value="override this.OnClick : unit -&gt; unit" Usage="button.OnClick " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wywoływane, gdy <see cref="T:System.Windows.Controls.Button" /> kliknięciu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Button.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="button.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy odpowiedni <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> dla tej kontrolki w ramach [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] infrastruktury.</summary>
        <returns>Element <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> dla tego formantu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>