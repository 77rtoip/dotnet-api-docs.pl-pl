<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a71f7b445e32e2d2b8a6ae24fd628258009ae370" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69216210" /></Metadata><TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia sposób wyboru <see cref="T:System.Windows.DataTemplate" /> na podstawie obiektu danych i elementu powiązanego z danymi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj tworzysz, <xref:System.Windows.Controls.DataTemplateSelector> gdy masz więcej niż jeden <xref:System.Windows.DataTemplate> dla tego samego typu obiektów i chcesz dostarczyć <xref:System.Windows.DataTemplate> własną logikę do wyboru, która ma zostać zastosowana na podstawie właściwości każdego obiektu danych. Należy pamiętać, że jeśli masz obiekty różnych typów, możesz ustawić <xref:System.Windows.DataTemplate.DataType%2A> Właściwość <xref:System.Windows.DataTemplate>na. W takim przypadku nie trzeba tworzyć <xref:System.Windows.Controls.DataTemplateSelector>. Ponadto, jeśli masz obiekty tego samego typu, ale z różnymi właściwościami, możesz również rozważyć użycie <xref:System.Windows.DataTrigger> konwertera danych lub. Aby uzyskać więcej informacji, zobacz [tworzenia szablonów danych — omówienie](~/docs/framework/wpf/data/data-templating-overview.md).  
  
 Aby utworzyć selektor szablonu, Utwórz klasę, która dziedziczy z <xref:System.Windows.Controls.DataTemplateSelector> i <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> przesłania metodę. Po zdefiniowaniu klasy można przypisać wystąpienie klasy do właściwości selektora szablonów elementu.  
  
   
  
## Examples  
 W tym przykładzie Źródło powiązania jest listą `Task` obiektów. Jedną z właściwości `Task` obiektu jest `Priority`. Zdefiniowano `myTaskTemplate` dwa szablony danych i `importantTaskTemplate`.  
  
 Aby określić logikę do wyboru <xref:System.Windows.DataTemplate> <xref:System.Windows.Controls.DataTemplateSelector> , która ma być używana `Priority` na podstawie wartości obiektu danych, należy utworzyć <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> podklasę i zastąpić metodę. W poniższym przykładzie <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> Metoda udostępnia logikę do zwrócenia odpowiedniego szablonu na podstawie wartości `Priority` właściwości. Szablon do zwrócenia znajduje się w zasobach <xref:System.Windows.Window> elementu obejmujących.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Następnie można zadeklarować `TaskListDataTemplateSelector` jako zasób:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Aby użyć zasobu selektora szablonów, przypisz go do <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> właściwości. <xref:System.Windows.Controls.ListBox> <xref:System.Windows.Controls.ListBox> Wywołuje<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metodę dla`TaskListDataTemplateSelector` każdego elementu w kolekcji źródłowej. Wywołanie przekazuje obiekt danych jako parametr elementu. Wartość <xref:System.Windows.DataTemplate> zwracana przez metodę jest następnie stosowana do tego obiektu danych.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Pełny przykład można znaleźć w artykule [wprowadzenie do danych tworzenia szablonów Sample](https://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.DataTemplateSelector" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">Obiekt danych, dla którego ma zostać wybrany szablon.</param>
        <param name="container">Obiekt powiązany z danymi.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca <see cref="T:System.Windows.DataTemplate" /> na podstawie logiki niestandardowej.</summary>
        <returns><see cref="T:System.Windows.DataTemplate" /> Zwraca lub .<see langword="null" /> Wartość domyślna to <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle selektor szablonu jest używany, gdy istnieje więcej niż jeden szablon danych zdefiniowany dla tego samego typu obiektów. Na przykład, jeśli źródło powiązania jest listą obiektów uczniów i chcesz zastosować konkretny szablon do uczniów w czasie częściowym. Można to zrobić, tworząc klasę, która dziedziczy z <xref:System.Windows.Controls.DataTemplateSelector> i <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> zastępując metodę. Po zdefiniowaniu klasy można przypisać wystąpienie klasy do właściwości selektora szablonów elementu.  
  
   
  
## Examples  
 W tym przykładzie Źródło powiązania jest listą `Task` obiektów. Jedną z właściwości `Task` obiektu jest `Priority`. Zdefiniowano `myTaskTemplate` dwa szablony danych i `importantTaskTemplate`.  
  
 Aby określić logikę do wyboru <xref:System.Windows.DataTemplate> <xref:System.Windows.Controls.DataTemplateSelector> , która ma być używana `Priority` na podstawie wartości obiektu danych, należy utworzyć <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> podklasę i zastąpić metodę. W poniższym przykładzie <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> Metoda udostępnia logikę do zwrócenia odpowiedniego szablonu na podstawie wartości `Priority` właściwości. Szablon do zwrócenia znajduje się w zasobach <xref:System.Windows.Window> elementu obejmujących.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Następnie można zadeklarować `TaskListDataTemplateSelector` jako zasób:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Aby użyć zasobu selektora szablonów, przypisz go do <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> właściwości. <xref:System.Windows.Controls.ListBox> <xref:System.Windows.Controls.ListBox> Wywołuje<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metodę dla`TaskListDataTemplateSelector` każdego elementu w kolekcji źródłowej. Wywołanie przekazuje obiekt danych jako parametr elementu. Wartość <xref:System.Windows.DataTemplate> zwracana przez metodę jest następnie stosowana do tego obiektu danych.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Pełny przykład można znaleźć w artykule [wprowadzenie do danych tworzenia szablonów Sample](https://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
