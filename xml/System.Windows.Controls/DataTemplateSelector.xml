<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7cf6ef824251b65f85296296a1a43a3ae2db5d26" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30697208" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia wybranie <see cref="T:System.Windows.DataTemplate" /> na podstawie obiektu danych i powiązane z danymi elementu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj w celu utworzenia <xref:System.Windows.Controls.DataTemplateSelector> Jeśli masz więcej niż jeden <xref:System.Windows.DataTemplate> dla tego samego typu obiektów i użytkownik chce dostarczyć logiki wybrać <xref:System.Windows.DataTemplate> do zastosowania na podstawie właściwości każdego obiektu danych. Należy pamiętać, że jeśli obiekty z różnych typów można ustawić <xref:System.Windows.DataTemplate.DataType%2A> właściwość <xref:System.Windows.DataTemplate>. Jeśli można to zrobić, nie istnieje potrzeba do utworzenia <xref:System.Windows.Controls.DataTemplateSelector>. Ponadto, jeśli obiekty tego samego typu, ale z innymi właściwościami, można także rozważyć użycie <xref:System.Windows.DataTrigger> lub konwertera danych. Aby uzyskać więcej informacji, zobacz [omówienie tworzenia szablonów danych](~/docs/framework/wpf/data/data-templating-overview.md).  
  
 Selektor szablonu, utworzyć klasę, która dziedziczy <xref:System.Windows.Controls.DataTemplateSelector> i zastąpić <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metody. Po klasie zdefiniowano wystąpienia klasy można przypisać do właściwości selektor szablonu z elementu.  
  
   
  
## Examples  
 W tym przykładzie źródle powiązania znajduje się lista `Task` obiektów. Jedna z właściwości obiektu `Task` obiekt jest `Priority`. Istnieją dwa szablony dane zdefiniowane, `myTaskTemplate` i `importantTaskTemplate`.  
  
 Umożliwiają określanie logiki, aby wybrać <xref:System.Windows.DataTemplate> do użycia na podstawie `Priority` wartość obiektu danych, Utwórz podklasę <xref:System.Windows.Controls.DataTemplateSelector> i zastąpić <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metody. W poniższym przykładzie <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metoda zawiera logikę do zwrócenia odpowiedni szablon na podstawie wartości z `Priority` właściwości. Szablon do zwrócenia zostanie znaleziony w zasobów obejmujące <xref:System.Windows.Window> elementu.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Firma Microsoft może następnie zadeklarować `TaskListDataTemplateSelector` jako zasób:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Aby korzystać z zasobów selektor szablonu, przypisz go do <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> właściwość <xref:System.Windows.Controls.ListBox>. <xref:System.Windows.Controls.ListBox> Wywołania <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metody `TaskListDataTemplateSelector` dla poszczególnych elementów w źródłowej kolekcji. Wywołanie przekazuje obiekt danych jako parametru elementu. <xref:System.Windows.DataTemplate> Zwracany przez metodę jest następnie stosowany do tego obiektu danych.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Pełny przykład, zobacz [wprowadzenie do danych przykładowych tworzenia szablonów](http://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.DataTemplateSelector" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">Obiekt danych, do których chcesz wybrać szablon.</param>
        <param name="container">Obiekt powiązane z danymi.</param>
        <summary>Po przesłonięciu w klasie pochodnej zwraca <see cref="T:System.Windows.DataTemplate" /> opartych na logice niestandardowej.</summary>
        <returns>Zwraca <see cref="T:System.Windows.DataTemplate" /> lub <see langword="null" />. Wartość domyślna to <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj selektor szablonu używane w sytuacji, gdy masz więcej niż jeden szablon danych zdefiniowany dla tego samego typu obiektów. Na przykład jeżeli źródło powiązania jest lista listę obiektów dla użytkowników domowych i chcesz zastosować danego szablonu niepełnym studentom. Można to zrobić, tworząc klasę, która dziedziczy <xref:System.Windows.Controls.DataTemplateSelector> i zastępowanie <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metody. Po klasie zdefiniowano wystąpienia klasy można przypisać do właściwości selektor szablonu z elementu.  
  
   
  
## Examples  
 W tym przykładzie źródle powiązania znajduje się lista `Task` obiektów. Jedna z właściwości obiektu `Task` obiekt jest `Priority`. Istnieją dwa szablony dane zdefiniowane, `myTaskTemplate` i `importantTaskTemplate`.  
  
 Umożliwiają określanie logiki, aby wybrać <xref:System.Windows.DataTemplate> do użycia na podstawie `Priority` wartość obiektu danych, Utwórz podklasę <xref:System.Windows.Controls.DataTemplateSelector> i zastąpić <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metody. W poniższym przykładzie <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metoda zawiera logikę do zwrócenia odpowiedni szablon na podstawie wartości z `Priority` właściwości. Szablon do zwrócenia zostanie znaleziony w zasobów obejmujące <xref:System.Windows.Window> elementu.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Firma Microsoft może następnie zadeklarować `TaskListDataTemplateSelector` jako zasób:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Aby korzystać z zasobów selektor szablonu, przypisz go do <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> właściwość <xref:System.Windows.Controls.ListBox>. <xref:System.Windows.Controls.ListBox> Wywołania <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metody `TaskListDataTemplateSelector` dla poszczególnych elementów w źródłowej kolekcji. Wywołanie przekazuje obiekt danych jako parametru elementu. <xref:System.Windows.DataTemplate> Zwracany przez metodę jest następnie stosowany do tego obiektu danych.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Pełny przykład, zobacz [wprowadzenie do danych przykładowych tworzenia szablonów](http://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>