<Type Name="Label" FullName="System.Windows.Controls.Label">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a3bdf9f30885533de55a9ca92a7d4010e4a865b1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37580467" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <TypeSignature Language="VB.NET" Value="Public Class Label&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Label : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Label = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje tekst etykiety dla formantu i zapewnia obsługę kluczy dostępu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa obsługuje funkcjonalne i visual klucze dostępu (znany także jako klawiszy skrótu). Włącz klawiatury szybki dostęp do formantów, takich jak często jest używana <xref:System.Windows.Controls.TextBox>. Aby przypisać <xref:System.Windows.Controls.Label> do <xref:System.Windows.Controls.Control>ustaw <xref:System.Windows.Controls.Label.Target%2A> właściwości formantu, który powinien otrzymywać fokus, gdy użytkownik naciśnie klawisz dostępu. Ustawienia obiektu docelowego również powoduje, że [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] Aby użyć tekstu etykiety jako nazwę docelowej kontrolki. Aby uzyskać więcej informacji, zobacz [ułatwień dostępu](~/docs/framework/ui-automation/index.md).  
  
 Aby ustawić klucz dostępu, należy dodać podkreślenia przed znakiem, który powinien być klucz dostępu. Jeśli Twoja zawartość zawiera wielu znaków podkreślenia, tylko pierwszy z nich jest konwertowana na klucz dostępu; inne znaki podkreślenia są wyświetlane jako zwykły tekst. Jeśli znak podkreślenia, która ma zostać przekonwertowane na klucz dostępu nie jest pierwszym znakiem podkreślenia, na użytek dwóch znaków podkreślenia obok siebie wszelkie znaki podkreślenia, które poprzedzają ten, który ma zostać przekonwertowany. Na przykład, poniższy kod zawiera klucz dostępu i wyświetla w postaci _Hello**W**eszcie użytkowników:  
  
```  
<Label>__Hello_World</Label>   
```  
  
 Ponieważ wartość o podwójnej precyzji, podkreślenia, który poprzedza H klawisz W rejestruje jako klucz dostępu.  
  
 Etykieta nie jest focusable i nie jest tabulatora. Aby uzyskać więcej informacji, zobacz [Przegląd fokus](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 A <xref:System.Windows.Controls.Label> jest <xref:System.Windows.Controls.ContentControl>, co oznacza, że może ono zawierać pojedynczy obiekt dowolnego typu (na przykład ciąg, obrazu lub panelu). Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Controls.ContentControl> klasy.  
  
## <a name="customizing-the-label-control"></a>Dostosowywanie formantu etykiety  
 Aby zastosować te same ustawienia właściwości z wieloma <xref:System.Windows.Controls.Label> kontrolki, używać <xref:System.Windows.FrameworkElement.Style%2A> właściwości. Można zmodyfikować domyślne <xref:System.Windows.Controls.ControlTemplate> zapewnienie unikatowego wyglądu kontrolki. Aby uzyskać więcej informacji o tworzeniu <xref:System.Windows.Controls.ControlTemplate>, zobacz [Dostosowywanie wyglądu istniejącego formantu przez stworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  Aby zobaczyć elementy i Stany, które są specyficzne dla <xref:System.Windows.Controls.Label>, zobacz [style i szablony etykiet](~/docs/framework/wpf/controls/label-styles-and-templates.md).  
  
 Właściwości zależności dla tego formantu może być ustawione przez domyślnego stylu.  Jeśli właściwość jest ustawiana przez domyślnego stylu, zmienić właściwość z jego wartość domyślną gdy formant ma być wyświetlany w aplikacji. Domyślny styl jest określona, przez który motyw pulpitu jest używany podczas działania aplikacji.  Aby uzyskać więcej informacji, zobacz [domyślne motywy WPF](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
> [!NOTE]
>  Ustawienie wartości właściwości wizualnej będzie miał wpływ tylko jeśli ta właściwość jest obecny w <xref:System.Windows.Controls.Label> kontrolki użytkownika domyślnego szablonu i ustawić za pomocą. Lista właściwości visual można znaleźć w sekcji "Zmiana Visual struktury z Control" [Dostosowywanie wyglądu istniejącego formantu przez stworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Windows.Controls.Label> używającej powiązanie ustawić obiekt docelowy.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Windows.Controls.Label> który ma klucz dostępu i obsługuje zawijania tekstu.  
  
 [!code-xaml[LabelSnippet#4](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Label();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.Label" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="label.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapewnia odpowiednią <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> implementacji dla tej kontrolki, jako część [! Infrastruktura include[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-MD.MD)].</summary>
        <returns>Konkretny typ <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Target { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Target : System.Windows.UIElement with get, set" Usage="System.Windows.Controls.Label.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia element, który otrzymuje fokus, gdy użytkownik naciśnie klawisz dostępu etykiety.</summary>
        <value>
          <see cref="T:System.Windows.UIElement" /> Zostanie ustawiony fokus, gdy użytkownik naciśnie klawisz dostępu. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz podać skróty klawiaturowe do elementów, które nie obsługują klucze dostępu, zapewniając <xref:System.Windows.Controls.Label> klucza dostępu i ustawienie tej właściwości. Przypisz klucza dostępu do etykiety, umieszczając podkreślenia bezpośrednio przed znakiem, który działa jako klucz dostępu. Klucz dostępu można określić w <xref:System.Windows.Controls.ContentControl.Content%2A> właściwości lub poprzez skonfigurowanie <xref:System.Windows.Controls.ContentControl.Content%2A> do <xref:System.Windows.Controls.AccessText> obiektu.  
  
 Nie można użyć tej właściwości, aby zdefiniować <xref:System.Windows.UIElement>. Na przykład, następujące kompiluje, ale nie działa: `<object.Target><UIElement../></object.Target>`. Ta właściwość zawiera odwołanie do elementu, który jest już zdefiniowany w aplikacji.  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Label.TargetProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<Label Target=" nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
<a name="xamlValues_Target"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 `nameOfExistingElement`  
 Nazwa <xref:System.Windows.UIElement> zostanie ustawiony fokus, gdy zostanie naciśnięty klawisz dostępu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak ustawić <xref:System.Windows.Controls.Label.Target%2A> właściwość <xref:System.Windows.Controls.Label>.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Label.TargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.Label.Target" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>