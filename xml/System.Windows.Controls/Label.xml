<Type Name="Label" FullName="System.Windows.Controls.Label">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="798f920770e4bce81b155e4b8f1aab67923f98a2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36565947" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <TypeSignature Language="VB.NET" Value="Public Class Label&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Label : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Label = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje etykietę tekstową dla kontrolki i zapewnia obsługę klucze dostępu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa obsługuje zarówno funkcjonalności i visual klucze dostępu (znanej także jako klawiszy skrótu). Często jest używana do włączenia klawiatury szybki dostęp do formantów, takich jak <xref:System.Windows.Controls.TextBox>. Aby przypisać <xref:System.Windows.Controls.Label> do <xref:System.Windows.Controls.Control>ustaw <xref:System.Windows.Controls.Label.Target%2A> właściwości formantu, który należy uzyskać fokusu, gdy użytkownik naciśnie klawisz dostępu. Ustawienia obiektu docelowego również przyczyny [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] do użycia jako nazwa formantu docelowego tekst etykiety. Aby uzyskać więcej informacji, zobacz [ułatwień dostępu](~/docs/framework/ui-automation/index.md).  
  
 Aby ustawić klucz dostępu, należy dodać podkreślenia przed znakiem, który powinien być klucz dostępu. Jeśli zawartość ma wiele znaków podkreślenia, tylko pierwszy z nich jest konwertowany na klucz dostępu; inne znaki podkreślenia są wyświetlane jako zwykły tekst. Jeśli podkreślenia, który ma zostać przekonwertowany na klucz dostępu nie jest pierwszym podkreślenia, użyj dwóch kolejnych znaków podkreślenia dla dowolnego podkreślenia poprzedzających ten, który ma zostać przekonwertowany. Na przykład poniższy kod zawiera klucz dostępu i będzie wyświetlany jako _Hello**W**eszcie użytkowników:  
  
```  
<Label>__Hello_World</Label>   
```  
  
 Ponieważ znak podkreślenia poprzedzający H jest wartość o podwójnej precyzji, klawisz W rejestruje jako klucz dostępu.  
  
 Etykieta nie jest focusable i nie jest tabulatora. Aby uzyskać więcej informacji, zobacz [omówienie fokus](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 A <xref:System.Windows.Controls.Label> jest <xref:System.Windows.Controls.ContentControl>, co oznacza, że może zawierać pojedynczy obiekt dowolnego typu (np. ciąg, obrazu lub panelu). Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Controls.ContentControl> klasy.  
  
## <a name="customizing-the-label-control"></a>Dostosowywanie formantu etykiety  
 Aby zastosować te same ustawienia właściwości z wieloma <xref:System.Windows.Controls.Label> formantów, użyj <xref:System.Windows.FrameworkElement.Style%2A> właściwości. Można zmodyfikować domyślne <xref:System.Windows.Controls.ControlTemplate> umożliwiają unikatowego wyglądu formantu. Aby uzyskać więcej informacji o tworzeniu <xref:System.Windows.Controls.ControlTemplate>, zobacz [Dostosowywanie wyglądu formant tworząc ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  Aby wyświetlić części i Stany, które są specyficzne dla <xref:System.Windows.Controls.Label>, zobacz [style etykiety i szablony](~/docs/framework/wpf/controls/label-styles-and-templates.md).  
  
 Właściwości zależności dla tego formantu może być ustawiona w stylu domyślnym formantu.  Jeśli właściwość jest ustawiona w stylu domyślnym, gdy formant jest wyświetlany w aplikacji właściwość może zmienić ze swojej wartości domyślnej. Domyślny styl jest określana, przez które kompozycji pulpitu jest używana, gdy aplikacja jest uruchomiona.  Aby uzyskać więcej informacji, zobacz [domyślnej kompozycji WPF](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
> [!NOTE]
>  Ustawienie właściwości visual będzie miał wpływ tylko jeśli ta właściwość jest obecny w obu <xref:System.Windows.Controls.Label> formant na szablon domyślny i ustawić za pomocą. Lista właściwości visual można znaleźć w sekcji "Zmiana Visual struktury kontroli" [Dostosowywanie wyglądu formant tworząc ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia <xref:System.Windows.Controls.Label> używającą powiązanie, aby ustawić cel.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 Poniższy przykład przedstawia sposób tworzenia <xref:System.Windows.Controls.Label> , który ma klucz dostępu i obsługuje zawijania tekstu.  
  
 [!code-xaml[LabelSnippet#4](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Label();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.Label" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="label.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zawiera odpowiednie <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> implementacji dla tego formantu, jako część [! Infrastruktura include[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-MD.MD)].</summary>
        <returns>Określonego typu <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Target { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Target : System.Windows.UIElement with get, set" Usage="System.Windows.Controls.Label.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia element, który otrzymuje fokus, gdy użytkownik naciśnie klawisz dostępu etykiety.</summary>
        <value>
          <see cref="T:System.Windows.UIElement" /> Uzyska fokus, gdy użytkownik naciśnie klawisz dostępu. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz podać skróty klawiaturowe dla elementów, które nie obsługują klucze dostępu, zapewniając <xref:System.Windows.Controls.Label> klawisza dostępu i ustawienie dla tej właściwości. Przypisz klucza dostępu z etykietą przez umieszczenie znaku podkreślenia bezpośrednio przed znakiem, który działa jako klucz dostępu. Klucz dostępu można określić w <xref:System.Windows.Controls.ContentControl.Content%2A> właściwości lub przez ustawienie <xref:System.Windows.Controls.ContentControl.Content%2A> do <xref:System.Windows.Controls.AccessText> obiektu.  
  
 Tej właściwości nie można użyć do zdefiniowania <xref:System.Windows.UIElement>. Na przykład następujące kompiluje, ale nie działa: `<object.Target><UIElement../></object.Target>`. Ta właściwość zawiera odwołanie do elementu, który jest już zdefiniowany w aplikacji.  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Label.TargetProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<Label Target=" nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
<a name="xamlValues_Target"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 `nameOfExistingElement`  
 Nazwa <xref:System.Windows.UIElement> uzyska fokus, gdy zostanie naciśnięty klawisz dostępu.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób ustawiania <xref:System.Windows.Controls.Label.Target%2A> właściwość <xref:System.Windows.Controls.Label>.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Label.TargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.Label.Target" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>