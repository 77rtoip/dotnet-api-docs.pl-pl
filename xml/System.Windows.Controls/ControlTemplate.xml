<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d649f8ce82674742c207e0c887f3c032775fa47f" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55364157" /></Metadata><TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type ControlTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa struktury efektów wizualnych i aspektów zachowania <see cref="T:System.Windows.Controls.Control" /> , mogą być współużytkowane przez wiele wystąpień formantu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ControlTemplate> Pozwala na określenie visual strukturze kontroli. Autor kontroli można zdefiniować domyślny <xref:System.Windows.Controls.ControlTemplate> i autor aplikacji może zastąpić <xref:System.Windows.Controls.ControlTemplate> odtworzenie visual struktury formantu.  
  
 Tworzenie szablonów kontrolki jest jednym z wielu funkcji oferowanych przez [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modelu Tworzenie szablonów i stylów. Tworzenie szablonów i stylów modelu zapewnia takie dużą elastyczność w wielu przypadkach konieczne do pisania własnych kontrolek. Autor aplikacji, która chce, aby zmienić wizualizację formantu lub Zastąp <xref:System.Windows.Controls.ControlTemplate> istniejącego formantu, zobacz [Tworzenie szablonów i stylów](~/docs/framework/wpf/controls/styling-and-templating.md) tematu, przykłady i szczegółowe omówienie.  
  
 Jeśli piszesz własnego formantu, zobacz "Utwórz kontrolkę niestandardową" w [omówienie tworzenia kontrolek](~/docs/framework/wpf/controls/control-authoring-overview.md).  
  
 Element <xref:System.Windows.Controls.ControlTemplate> ma być niezależna jednostki szczegółów implementacji, który jest niewidoczny dla użytkowników i obiektów, w tym style poza. Jedynym sposobem modyfikowania zawartości szablonu kontrolki mieści się z tego samego szablonu kontrolki.  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<ControlTemplate>  
  <VisualTreeRootNode > VisualTreeNodeContents  
  </VisualTreeRootNode >  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *ControlTemplate*  
 Element obiektu dla <xref:System.Windows.Controls.ControlTemplate> lub klasę pochodną.  
  
 *VisualTreeRootNode*  
 Pojedynczy [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] elementu jako natychmiastowego podrzędny <xref:System.Windows.Controls.ControlTemplate> (lub klasy pochodnej). Szablony musi mieć na jednym węźle głównym. Aby wygenerować szablon przydatny element, który został wybrany jako *VisualTreeRootNode* oczekiwana model zawartości własnych, często modelu, który obsługuje wiele elementów podrzędnych.  
  
 *VisualTreeNodeContents*  
 Jeden lub więcej elementów, które ukończenia odpowiedniego szablonu. Jeśli element, który został wybrany jako *VisualTreeRootNode* obsługuje tylko pojedynczy element podrzędny, następnie może tylko jeden element można zadeklarować jako *VisualTreeNodeContents*. Istnieje również możliwość (chociaż jest to rzadkie) zapewnienie zawartości tekstowej, jeśli wybrana *VisualTreeRootNode* obsługuje właściwości zawartości tekstu.  
  
   
  
## Examples  
 Poniższej przedstawiono <xref:System.Windows.Controls.Button> <xref:System.Windows.Style> określająca <xref:System.Windows.Controls.ControlTemplate> z <xref:System.Windows.Controls.Button>:  
  
 [!code-xaml[StylingIntroSample_snippet#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snippet/CSharp/Window1.xaml#buttonct)]     
  
 Gdy to zostanie zastosowany, <xref:System.Windows.Controls.Button> pojawia się jako <xref:System.Windows.Shapes.Ellipse>:  
  
 ![ControlTemplate przycisku](~/add/media/stylingintro-buttoncontroltemplate.png "ControlTemplate przycisku")  
  
 Po ustawieniu <xref:System.Windows.Controls.Control.Template%2A> właściwość <xref:System.Windows.Controls.Control> na nową <xref:System.Windows.Controls.ControlTemplate> tak jak w powyższym przykładzie następuje wymiana całego szablonu. Co <xref:System.Windows.Controls.Button> wygląda podobnie, gdy jest w trybie koncentracji uwagi, lub naciśnięciu jest częścią domyślnego wyglądu przycisku, który jest zamieniany. W związku z tym w zależności od potrzeb można umieścić w swojej definicji, jakie przycisku powinno wyglądać po naciśnięciu i tak dalej, jak w poniższym przykładzie:  
  
 [!code-xaml[ControlTemplateExamples#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 Należy pamiętać, że w tym przykładzie odwołuje się do zasobów, które nie są wyświetlane w tym miejscu. Aby uzyskać pełny przykład, zobacz [style przykład ControlTemplates](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating). Ten przykład zawiera przykłady szablonów kontrolek dla wielu formantów i to najlepszy sposób umożliwiające wprowadzenie do tworzenia szablonów kontrolek.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Wprowadzenie do przykładowych szablonów i stylów</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.ControlTemplate" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.ControlTemplate" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ControlTemplate : Type -&gt; System.Windows.Controls.ControlTemplate" Usage="new System.Windows.Controls.ControlTemplate targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">Typ ten szablon jest przeznaczony dla.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.ControlTemplate" /> klasie z atrybutem typu określonego obiektu docelowego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ, dla którego należy to <see cref="T:System.Windows.Controls.ControlTemplate" /> jest przeznaczony.</summary>
        <value>Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku autonomicznego <xref:System.Windows.Controls.ControlTemplate> w sekcji zasobów za pomocą <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> właściwość ustawioną na typ <xref:System.Windows.Controls.ControlTemplate> nie zostać zastosowane do tego typu automatycznie. Zamiast tego należy określić `x:Key` i jawne stosowanie szablonu.  
  
 Należy również zauważyć, że <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> właściwość jest wymagana dla <xref:System.Windows.Controls.ControlTemplate> , gdy definicja szablonu zawiera <xref:System.Windows.Controls.ContentPresenter>.  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *typeName*  
 Nazwa typu klasy. Aby odwołać się do <xref:System.Type> nazwę klasy, użyj [rozszerzenia znacznikowania i WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje użycie tej właściwości:  
  
 [!code-xaml[ControlTemplateExamples#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 Powyższy przykład używa następujących zasobów:  
  
  
  
 Aby uzyskać pełny przykład, zobacz [style przykład ControlTemplates](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> Właściwość nie może być <see langword="null" /> Jeśli definicja szablonu ma <see cref="T:System.Windows.Controls.ContentPresenter" />.</exception>
        <exception cref="T:System.ArgumentException">Określonych typów nie są prawidłowe. <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> z <see cref="T:System.Windows.Controls.ControlTemplate" /> musi być lub dziedziczyć <see cref="T:System.Windows.Controls.Control" />, <see cref="T:System.Windows.Controls.Page" />, lub <see cref="T:System.Windows.Navigation.PageFunctionBase" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Windows.TriggerBase" /> obiekty, które umożliwia stosowanie zmian właściwości lub wykonywać akcje na podstawie określonych warunków.</summary>
        <value>Kolekcja <see cref="T:System.Windows.TriggerBase" /> obiektów. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreTriggers*  
 Co najmniej jeden <xref:System.Windows.TriggerBase> obiektów (zazwyczaj są to <xref:System.Windows.Trigger>).  
  
   
  
## Examples  
 Poniższy przykład pokazuje użycie tej właściwości:  
  
 [!code-xaml[ControlTemplateExamples#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 Powyższy przykład używa następujących zasobów:  
  
  
  
  
 Aby uzyskać pełny przykład, zobacz [style przykład ControlTemplates](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating).  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Wprowadzenie do przykładowych szablonów i stylów</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="controlTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">Element, którego dotyczy ten szablon.</param>
        <summary>Sprawdza, czy oparte na szablonach nadrzędnej względem zestawu reguł.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metody stosowane są następujące reguły:  
  
 1. `templatedParent` Nie może być typu <xref:System.Windows.FrameworkContentElement>.  
  
 2. `templatedParent` Nie może być typu <xref:System.Windows.FrameworkElement> , który nie jest <xref:System.Windows.Controls.Control>.  
  
 3. `templatedParent` Nie może być <xref:System.Windows.Controls.Control> , nie jest skojarzony z <xref:System.Windows.Controls.ControlTemplate>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="templatedParent" /> Nie może być <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Musisz skojarzyć <see cref="T:System.Windows.Controls.ControlTemplate" /> z <see cref="T:System.Windows.Controls.Control" /> , ustawiając <see cref="P:System.Windows.Controls.Control.Template" /> właściwości przed użyciem <see cref="T:System.Windows.Controls.ControlTemplate" /> na <see cref="T:System.Windows.Controls.Control" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>