<Type Name="ValidationResult" FullName="System.Windows.Controls.ValidationResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5b0d99fceac9e281ee2959f2ed2c42f4764faf0f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69211751" /></Metadata><TypeSignature Language="C#" Value="public class ValidationResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValidationResult extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ValidationResult" />
  <TypeSignature Language="VB.NET" Value="Public Class ValidationResult" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValidationResult" />
  <TypeSignature Language="F#" Value="type ValidationResult = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje wynik zwrócony przez <see cref="T:System.Windows.Controls.ValidationRule" />.<see cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" /> Metoda wskazująca, czy sprawdzona wartość została <see cref="T:System.Windows.Controls.ValidationRule" />przeniesiona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Model powiązania <xref:System.Windows.Data.Binding.ValidationRules%2A> <xref:System.Windows.Data.Binding> danych umożliwia skojarzenie z obiektem lub <xref:System.Windows.Data.MultiBinding>. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Reguły niestandardowe można tworzyć według podklasy <xref:System.Windows.Controls.ValidationRule> klasy i <xref:System.Windows.Controls.ValidationRule.Validate%2A> implementującej metodę. <xref:System.Windows.Controls.ValidationRule.Validate%2A> Metoda<xref:System.Windows.Controls.ValidationResult> zwraca obiekt, aby zgłosić, czy sprawdzona wartość jest prawidłowa.  
  
 Aby uzyskać szczegółowe omówienie procesu weryfikacji, zobacz "Sprawdzanie poprawności danych" w temacie [powiązanie danych — omówienie](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje implementację reguły walidacji, która oznacza wartość wejściową jako nieprawidłową, jeśli zawiera znaki niebędące liczbą lub poza dolną i górną granicą. Jeśli wartość jest nieprawidłowa <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> , właściwość <xref:System.Windows.Controls.ValidationResult.IsValid%2A> i Właściwość zwracanych <xref:System.Windows.Controls.ValidationResult> są ustawiane na odpowiedni komunikat o błędzie i `false` odpowiednio.  
  
 Pełny przykład można znaleźć w temacie [How to: Implementowanie walidacji](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)powiązania.  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidationResult (bool isValid, object errorContent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isValid, object errorContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.#ctor(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isValid As Boolean, errorContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ValidationResult(bool isValid, System::Object ^ errorContent);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ValidationResult : bool * obj -&gt; System.Windows.Controls.ValidationResult" Usage="new System.Windows.Controls.ValidationResult (isValid, errorContent)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isValid" Type="System.Boolean" />
        <Parameter Name="errorContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="isValid">Określa, czy wartość <see cref="T:System.Windows.Controls.ValidationRule" /> jest sprawdzana pod kątem poprawności.</param>
        <param name="errorContent">Informacje o unieważnieniu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.ValidationResult" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Model powiązania <xref:System.Windows.Data.Binding.ValidationRules%2A> <xref:System.Windows.Data.Binding> danych umożliwia skojarzenie z obiektem lub <xref:System.Windows.Data.MultiBinding>. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Reguły niestandardowe można tworzyć według podklasy <xref:System.Windows.Controls.ValidationRule> klasy i <xref:System.Windows.Controls.ValidationRule.Validate%2A> implementującej metodę. <xref:System.Windows.Controls.ValidationRule.Validate%2A> Metoda<xref:System.Windows.Controls.ValidationResult> zwraca obiekt, aby zgłosić, czy sprawdzona wartość jest prawidłowa.  
  
 Aby uzyskać szczegółowe omówienie procesu weryfikacji, zobacz "Sprawdzanie poprawności danych" w temacie [powiązanie danych — omówienie](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje implementację reguły walidacji, która oznacza wartość wejściową jako nieprawidłową, jeśli zawiera znaki niebędące liczbą lub poza dolną i górną granicą. Jeśli wartość jest nieprawidłowa <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> , właściwość <xref:System.Windows.Controls.ValidationResult.IsValid%2A> i Właściwość zwracanych <xref:System.Windows.Controls.ValidationResult> są ustawiane na odpowiedni komunikat o błędzie i `false` odpowiednio.  
  
 Pełny przykład można znaleźć w temacie [How to: Implementowanie walidacji](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)powiązania.  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="validationResult.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Wystąpienie <see cref="T:System.Windows.Controls.ValidationResult" /> , które ma zostać porównane.</param>
        <summary>Porównuje określone wystąpienie i bieżące wystąpienie o <see cref="T:System.Windows.Controls.ValidationResult" /> równość wartości.</summary>
        <returns><see langword="true" />Jeśli <paramref name="obj" /> i to wystąpienie elementu <see cref="T:System.Windows.Controls.ValidationResult" />. ma te same wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez zastąpienia operatora.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorContent">
      <MemberSignature Language="C#" Value="public object ErrorContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ErrorContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.ErrorContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorContent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ErrorContent { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorContent : obj" Usage="System.Windows.Controls.ValidationResult.ErrorContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który zapewnia dodatkowe informacje o unieważnieniu.</summary>
        <value>Obiekt, który zawiera dodatkowe informacje o unieważnieniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Model powiązania <xref:System.Windows.Data.Binding.ValidationRules%2A> <xref:System.Windows.Data.Binding> danych umożliwia skojarzenie z obiektem lub <xref:System.Windows.Data.MultiBinding>. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Reguły niestandardowe można tworzyć według podklasy <xref:System.Windows.Controls.ValidationRule> klasy i <xref:System.Windows.Controls.ValidationRule.Validate%2A> implementującej metodę. <xref:System.Windows.Controls.ValidationRule.Validate%2A> Metoda<xref:System.Windows.Controls.ValidationResult> zwraca obiekt, aby zgłosić, czy sprawdzona wartość jest prawidłowa.  
  
 Aby uzyskać szczegółowe omówienie procesu weryfikacji, zobacz "Sprawdzanie poprawności danych" w temacie [powiązanie danych — omówienie](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje implementację reguły walidacji, która oznacza wartość wejściową jako nieprawidłową, jeśli zawiera znaki niebędące liczbą lub poza dolną i górną granicą. Jeśli wartość jest nieprawidłowa <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> , właściwość <xref:System.Windows.Controls.ValidationResult.IsValid%2A> i Właściwość zwracanych <xref:System.Windows.Controls.ValidationResult> są ustawiane na odpowiedni komunikat o błędzie i `false` odpowiednio.  
  
 Pełny przykład można znaleźć w temacie [How to: Implementowanie walidacji](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)powiązania.  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="validationResult.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego <see cref="T:System.Windows.Controls.ValidationResult" />elementu.</summary>
        <returns>Kod skrótu dla tego <see cref="T:System.Windows.Controls.ValidationResult" />elementu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Windows.Controls.ValidationResult.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wartość <see cref="T:System.Windows.Controls.ValidationRule" /> jest sprawdzana pod kątem poprawności.</summary>
        <value><see langword="true" />Jeśli wartość jest prawidłowa; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Model powiązania <xref:System.Windows.Data.Binding.ValidationRules%2A> <xref:System.Windows.Data.Binding> danych umożliwia skojarzenie z obiektem lub <xref:System.Windows.Data.MultiBinding>. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Reguły niestandardowe można tworzyć według podklasy <xref:System.Windows.Controls.ValidationRule> klasy i <xref:System.Windows.Controls.ValidationRule.Validate%2A> implementującej metodę. <xref:System.Windows.Controls.ValidationRule.Validate%2A> Metoda<xref:System.Windows.Controls.ValidationResult> zwraca obiekt, aby zgłosić, czy sprawdzona wartość jest prawidłowa.  
  
 Aby uzyskać szczegółowe omówienie procesu weryfikacji, zobacz "Sprawdzanie poprawności danych" w temacie [powiązanie danych — omówienie](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje implementację reguły walidacji, która oznacza wartość wejściową jako nieprawidłową, jeśli zawiera znaki niebędące liczbą lub poza dolną i górną granicą. Jeśli wartość jest nieprawidłowa <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> , właściwość <xref:System.Windows.Controls.ValidationResult.IsValid%2A> i Właściwość zwracanych <xref:System.Windows.Controls.ValidationResult> są ustawiane na odpowiedni komunikat o błędzie i `false` odpowiednio.  
  
 Pełny przykład można znaleźć w temacie [How to: Implementowanie walidacji](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)powiązania.  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.op_Equality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ValidationResult, right As ValidationResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Controls::ValidationResult ^ left, System::Windows::Controls::ValidationResult ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Controls.ValidationResult * System.Windows.Controls.ValidationResult -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsze wystąpienie do porównania.</param>
        <param name="right">Drugie wystąpienie do porównania.</param>
        <summary>Porównuje <see cref="T:System.Windows.Controls.ValidationResult" /> dwa obiekty pod kątem równości wartości.</summary>
        <returns><see langword="true" />Jeśli dwa obiekty są równe; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.op_Inequality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ValidationResult, right As ValidationResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Controls::ValidationResult ^ left, System::Windows::Controls::ValidationResult ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Controls.ValidationResult * System.Windows.Controls.ValidationResult -&gt; bool" Usage="System.Windows.Controls.ValidationResult.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsze wystąpienie do porównania.</param>
        <param name="right">Drugie wystąpienie do porównania.</param>
        <summary>Porównuje <see cref="T:System.Windows.Controls.ValidationResult" /> dwa obiekty pod kątem nierówności wartości.</summary>
        <returns><see langword="true" />Jeśli wartości nie są równe; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidResult">
      <MemberSignature Language="C#" Value="public static System.Windows.Controls.ValidationResult ValidResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Controls.ValidationResult ValidResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.ValidResult" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ValidResult As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Controls::ValidationResult ^ ValidResult { System::Windows::Controls::ValidationResult ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidResult : System.Windows.Controls.ValidationResult" Usage="System.Windows.Controls.ValidationResult.ValidResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prawidłowe wystąpienie <see cref="T:System.Windows.Controls.ValidationResult" />.</summary>
        <value>Prawidłowe wystąpienie <see cref="T:System.Windows.Controls.ValidationResult" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
