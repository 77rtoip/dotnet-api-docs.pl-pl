<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6029f291d01ac72d8aad54c46a381e25a236c1c7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36390600" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditor abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje zestaw właściwości i metod do obliczenia wyrażenia, który jest skojarzony z właściwością formantu w czasie projektowania i zapewnienie arkusza edytora wyrażeń hosta wizualnego projektu do użycia w oknie edytora wyrażeń. Ta klasa jest abstrakcyjna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Host wizualnego projektanta, takich jak [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], używa <xref:System.Web.UI.Design.ExpressionEditor> klasy do prezentowania wyrażenia niestandardowego edytora arkusze użytkownikowi, a następnie ocenę wybranego wyrażenia do renderowania w czasie projektowania.  
  
 Po przejściu <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> właściwości formantu w siatce właściwości czasu projektowania, Projektant wizualny Wyświetla okno dialogowe można ustawić wyrażenia dla właściwości formantu. Można wybrać typ wyrażenia na podstawie listy prefiksu wyrażenia. Po wybraniu prefiksu wyrażenia z listy, Projektant wizualny używa skojarzony <xref:System.Web.UI.Design.ExpressionEditor> i <xref:System.Web.UI.Design.ExpressionEditorSheet> obiektów, aby ustawić, oceny i przekonwertować ciągu wyrażenia na podstawie składni dla tego typu wyrażenia. Projektant wizualny ustawia wyrażenie nie zawiera właściwości skojarzonym formancie, a następnie używa wyników obliczane wyrażenie można przypisać wartości właściwości, które mają być renderowane na powierzchni projektu kontroli.  
  
 Statycznych <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> metody get edytora wyrażeń, który jest skojarzony z prefiksu określonego wyrażenia lub Konstruktor wyrażeń. <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> Właściwość <xref:System.Web.UI.Design.ExpressionEditor> obiektu zwraca prefiksu wyrażenia skonfigurowany. <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> Metody ocenia ciąg wejściowy wyrażenia. <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> Metoda zwraca <xref:System.Web.UI.Design.ExpressionEditorSheet> implementacji używany monitowanie dla właściwości niestandardowego wyrażenia w oknie dialogowym wyrażenia.  
  
 Zazwyczaj aby obsługiwać nowy typ wyrażenia w czasie projektowania, można zdefiniować prefiksu wyrażenia unikatowy i podać niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> implementacji. Opcjonalnie możesz podać niestandardowy <xref:System.Web.UI.Design.ExpressionEditorSheet> implementację, która definiuje właściwości, które są używane do tworzenia wyrażenia w oknie dialogowym wyrażenia.  
  
 Prefiksu wyrażenia Określa typ wyrażenia niestandardowego i kojarzy wyrażenia z Konstruktor wyrażeń i edytora wyrażeń. Gdy wyrażenia niestandardowe są parsowane na stronie, prefiksu wyrażenia służy do tworzenia wystąpień skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klasy. Aby skojarzyć prefiksu wyrażenia z Konstruktor wyrażeń i edytora wyrażeń, zastosuj <xref:System.Web.Compilation.ExpressionEditorAttribute> i <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybuty niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> klasy i Konfiguracja prefiksu wyrażenia dla Konstruktora wyrażeń w `expressionBuilders` element w pliku konfiguracji sieci Web. Prefiks jest nie jest wymagana, ale zdecydowanie zalecane.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak pochodzi od <xref:System.Web.UI.Design.ExpressionEditor> klasę, aby zdefiniować edytor wyrażenia niestandardowego.  
  
 [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Poniższe kroki są wymagane w wyprowadzanie niestandardowego <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy:-Override <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> metody można oszacować wyrażenia niestandardowego typu w czasie projektowania.  -Opcjonalnie zastąpić <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metodę, aby zwrócić niestandardowej klasy, która definiuje właściwości, które są łączone do tworzenia wyrażenia niestandardowego.  -Zastosuj <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> atrybutu <see cref="T:System.Web.Compilation.ExpressionBuilder" /> deklaracji, aby skojarzyć Konstruktor wyrażeń niestandardowych w klasie pochodnej wyrażenie Edytor klasy.  Na przykład <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> pochodną klasy <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy i udostępnia implementację dla oceny i kojarzenie odwołania ciągu zasobu z właściwości formantu w czasie projektowania. <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" /> Klasy jest skojarzone z prefiksu wyrażenia <see langword="Resources" /> i <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> implementacji. <see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> Metoda zwraca <see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />, który definiuje poszczególnych właściwości, które tworzą wyrażenia odwołania do zasobów.</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ <xref:System.Web.UI.Design.ExpressionEditor> klasa jest abstrakcyjna, nie można utworzyć wystąpienia <xref:System.Web.UI.Design.ExpressionEditor> bezpośrednio przy użyciu <xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A> konstruktora.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas tworzenia klasy pochodnej z <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy, Zastąp <see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" /> konstruktora w celu wykonania akcji niestandardowej inicjowania implementacji edytora wyrażeń.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EvaluateExpression (expression As String, parseTimeData As Object, propertyType As Type, serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EvaluateExpression(System::String ^ expression, System::Object ^ parseTimeData, Type ^ propertyType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : string * obj * Type * IServiceProvider -&gt; obj" Usage="expressionEditor.EvaluateExpression (expression, parseTimeData, propertyType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">Ciąg wyrażenie do oceny. Wyrażenie nie ma prefiksu wyrażenia.</param>
        <param name="parseTimeData">Obiekt zawierający dodatkowe informacje podczas analizowania, oceny <c>wyrażenia</c>. Zwykle odbywa się przez Konstruktor wyrażeń.</param>
        <param name="propertyType">Typ właściwości formantu, do którego <c>wyrażenie</c> jest powiązany.</param>
        <param name="serviceProvider">Implementacja dostawcy usługi dostarczone przez hosta projektanta, używany do uzyskania dodatkowych usług czasu projektowania.</param>
        <summary>Oblicza wyrażenie ciągu i zawiera wartość czasu projektowania dla właściwości formantu.</summary>
        <returns>Obiekt określany w odwołaniu w ciągu obliczane wyrażenie, jeśli Obliczanie wyrażenia zakończyło się pomyślnie; w przeciwnym razie <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual host projektanta używa <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> metodę, aby obliczyć wyrażenia i podaj wartość czasu projektowania dla właściwości skojarzonym formancie.  
  
 Projektant wizualny używa <xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=nameWithType> metody do analizowania wyrażenia w czasie projektowania, a następnie wywołania <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> metody z danych przeanalizowany wyrażenia. Projektant wizualny używa wynik obliczane wyrażenie można przypisać wartości właściwości, które mają być renderowane na powierzchni projektu kontroli.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Klasy wywodzące się z <see cref="T:System.Web.UI.Design.ExpressionEditor" /> przesłonięcie klasy <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> metody można oszacować wyrażenia niestandardowego typu w czasie projektowania.  Co najmniej <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> implementacji musi, wykonaj następujące kroki: 1.  Oceń ciąg wyrażenia i określić obiekt, który odwołuje się wyrażenie.  2.  Zwraca <see langword="null" />, jeśli nie można obliczyć wyrażenia ciągu.  3.  Użyj <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> metoda <paramref name="propertyType" /> ustalenie, czy odwołuje się do obiektu można przypisać bezpośrednio do typu właściwości formantu, a następnie, w zależności od wyniku ukończenia jednej z następujących czynności: - Jeśli odwołuje się do obiektu można przypisać bezpośrednio do właściwości formantu Zwróć przywoływanego obiektu dla wyrażenia.  — Jeśli odwołuje się do obiektu jest typem prostym, takiego jak ciąg, zwróć odwołuje się do obiektu.  — W przeciwnym razie sprawdzenia, czy odwołuje się do obiektu mogą być przypisane do przekonwertować na typ właściwości.  4.  Użyj <see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" /> metoda <see cref="T:System.ComponentModel.TypeConverter" /> obiekt do <paramref name="propertyType" /> ustalenie, czy odwołuje się do obiektu można przekonwertować na typ właściwości formantu, a następnie, w zależności od wyniku ukończenia jednej z następujących czynności: - Jeśli obiekt może być przekonwertowana na typ właściwości formantu, zwracać obiekt przekonwertowany przy użyciu <see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /> metody.  — Jeśli odwołuje się do obiektu nie może być przypisana ani przekonwertować <paramref name="propertyType" />, zwróć odwołuje się do obiektu.  Opcjonalnie <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> można używać implementacji <paramref name="parseTimeData" /> obiektu, który został dostarczony przez <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> implementacji zoptymalizować lub pomoc w ocenie ciąg wejściowy wyrażenia.</para>
        </block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string" Usage="System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prefiks wyrażenia, który identyfikuje ciągów wyrażenie, które są obsługiwane przez implementację edytora wyrażeń.</summary>
        <value>Ciąg reprezentujący prefiks dla wyrażenia są obsługiwane przez klasę pochodną <see cref="T:System.Web.UI.Design.ExpressionEditor" />; w przeciwnym razie ciąg pusty (""), jeśli Edytor wyrażeń nie ma prefiksu wyrażenia skojarzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prefiksu wyrażenia Określa typ wyrażenia niestandardowego i kojarzy wyrażenia z Konstruktor wyrażeń i edytora wyrażeń. Gdy wyrażenia niestandardowe są parsowane na stronie, prefiksu wyrażenia służy do tworzenia wystąpień skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klasy. Aby skojarzyć prefiksu wyrażenia z Konstruktor wyrażeń i edytora wyrażeń, zastosuj <xref:System.Web.Compilation.ExpressionEditorAttribute> i <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybuty niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> klasy i Konfiguracja prefiksu wyrażenia dla Konstruktora wyrażeń w `expressionBuilders` element w pliku konfiguracji sieci Web.  
  
 Zazwyczaj nie zastępują klas pochodnych <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> właściwości. Podstawowym <xref:System.Web.UI.Design.ExpressionEditor> klasy zestawy <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> na podstawie wartości <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybutu skojarzonych z nim <xref:System.Web.Compilation.ExpressionBuilder> obiektu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementację, która jest skojarzona z prefiksu wyrażenia lub Konstruktor wyrażeń.</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionPrefix As String, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(System::String ^ expressionPrefix, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionPrefix, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">Prefiksu wyrażenia używana do znajdowania skojarzone wyrażenie edytora.</param>
        <param name="serviceProvider">Implementacja dostawcy usługi dostarczone przez hosta projektanta, używany do uzyskania dodatkowych usług czasu projektowania.</param>
        <summary>Zwraca <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementację, która jest skojarzona z prefiksem określone wyrażenie.</summary>
        <returns>
          <see cref="T:System.Web.UI.Design.ExpressionEditor" /> Wdrożenia skojarzony z <paramref name="expressionPrefix" />; w przeciwnym razie <see langword="null" />, jeśli <paramref name="expressionPrefix" /> nie jest określony lub nie jest skojarzony z <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj statycznych <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> przeciążenia metody, aby znaleźć <xref:System.Web.UI.Design.ExpressionEditor> obiekt, który jest skojarzony z prefiksu określonego wyrażenia lub wyrażenia konstruktora typu.  
  
 Dla każdego typu wyrażenia niestandardowego prefiksu wyrażenia identyfikuje Konstruktor wyrażeń skojarzone i edytora wyrażeń. Gdy wyrażenia niestandardowe są parsowane na stronie, prefiksu wyrażenia służy do tworzenia wystąpień skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klasy.  
  
 Aby skojarzyć prefiksu wyrażenia z Konstruktor wyrażeń i edytora wyrażeń, zastosuj <xref:System.Web.Compilation.ExpressionEditorAttribute> i <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybuty niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> klasy i Konfiguracja prefiksu wyrażenia dla Konstruktora wyrażeń w `expressionBuilders` element w pliku konfiguracji sieci Web.  
  
 Aby znaleźć skojarzone wyrażenie Edytor prefiksu wyrażenia <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> metoda wylicza dostępnych <xref:System.Web.Compilation.ExpressionBuilder> implementacji dla zgodny prefiks. <xref:System.Web.Compilation.ExpressionBuilder> Implementacje można skonfigurować w `expressionBuilders` sekcji pliku konfiguracji sieci Web. Jeśli jest dostępny <xref:System.Web.Compilation.ExpressionBuilder> implementacja definiuje prefiksu wyrażenia <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> metoda zwraca wartość typu, który jest określony w <xref:System.Web.Compilation.ExpressionEditorAttribute> atrybutu <xref:System.Web.Compilation.ExpressionBuilder> metadanych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceProvider" /> jest <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionBuilderType As Type, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(Type ^ expressionBuilderType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : Type * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionBuilderType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">Typ wyrażenia pochodnej klasy konstruktora, używana do lokalizowania Edytor skojarzone wyrażenie.</param>
        <param name="serviceProvider">Implementacja dostawcy usługi dostarczone przez hosta projektanta, używany do uzyskania dodatkowych usług czasu projektowania.</param>
        <summary>Zwraca <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementację, która jest skojarzona z określonego wyrażenia konstruktora typu.</summary>
        <returns>
          <see cref="T:System.Web.UI.Design.ExpressionEditor" /> Wdrożenia skojarzony z <paramref name="expressionBuilderType" />; w przeciwnym razie <see langword="null" />, jeśli <paramref name="expressionBuilderType" /> nie można odnaleźć lub została nr skojarzone <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj statycznych <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> przeciążenia można znaleźć <xref:System.Web.UI.Design.ExpressionEditor> obiekt, który jest skojarzony z prefiksu określonego wyrażenia lub wyrażenia konstruktora typu.  
  
 Dla każdego typu wyrażenia niestandardowego prefiksu wyrażenia identyfikuje Konstruktor wyrażeń skojarzone i edytora wyrażeń. Gdy wyrażenia niestandardowe są parsowane na stronie, prefiksu wyrażenia służy do tworzenia wystąpień skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klasy.  
  
 Aby skojarzyć prefiksu wyrażenia z Konstruktor wyrażeń i edytora wyrażeń, zastosuj <xref:System.Web.Compilation.ExpressionEditorAttribute> i <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybuty niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> klasy i Konfiguracja prefiksu wyrażenia dla Konstruktora wyrażeń w `expressionBuilders` element w pliku konfiguracji sieci Web.  
  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> Metoda wylicza dostępnych <xref:System.Web.Compilation.ExpressionBuilder> implementacji, aby zlokalizować `expressionBuilderType`. <xref:System.Web.Compilation.ExpressionBuilder> Implementacje można skonfigurować w `expressionBuilders` sekcji pliku konfiguracji sieci Web. Jeśli `expressionBuilderType` znajduje się w zestawie dostępności <xref:System.Web.Compilation.ExpressionBuilder> implementacji, <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> metoda zwraca wartość typu, który jest określony w <xref:System.Web.Compilation.ExpressionEditorAttribute> atrybutu <xref:System.Web.Compilation.ExpressionBuilder> metadanych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expressionBuilderType" /> jest <see langword="null" />.  \- lub - <paramref name="serviceProvider" /> jest <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExpressionEditorSheet (expression As String, serviceProvider As IServiceProvider) As ExpressionEditorSheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::ExpressionEditorSheet ^ GetExpressionEditorSheet(System::String ^ expression, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet&#xA;override this.GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="expressionEditor.GetExpressionEditorSheet (expression, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">Ciąg wyrażenia, ustaw dla właściwości formantu, używaną do inicjalizacji arkusza edytora wyrażeń.</param>
        <param name="serviceProvider">Implementacja dostawcy usługi dostarczone przez hosta projektanta, używany do uzyskania dodatkowych usług czasu projektowania.</param>
        <summary>Zwraca arkusza edytora wyrażeń, skojarzony z bieżącym edytora wyrażeń.</summary>
        <returns>
          <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> Definiuje właściwości wyrażenia niestandardowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> Metoda zwraca <xref:System.Web.UI.Design.ExpressionEditorSheet> wdrożenia, który definiuje ciągów, które są łączone do tworzenia wyrażenia niestandardowego. Projektant wizualny używa wyrażenia Edytor arkusza z monitem o jeden lub więcej ciągów, łączące w wyrażeniu niestandardowym. Klasa podstawowa metoda zwraca domyślnego arkusza edytora wyrażeń, który za pomocą jednego ciągu wejściowego tworzą wyrażenie. Arkusz Edytor wyrażenie definiuje siatki właściwości dla wyrażenia. W związku z tym właściwości, które udostępnia edytora wyrażeń stają się właściwości, które mogą być definiowane dla wyrażenia w oknie dialogowym.  
  
 Klasy wywodzące się z <xref:System.Web.UI.Design.ExpressionEditor> klasy Opcjonalnie można zastąpić <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> metodę w celu zapewnienia arkusz wyrażenia niestandardowego edytora. Arkusz wyrażenia niestandardowego edytora można zezwolić na wiele właściwości, które są połączone ze sobą w postaci ciągu wyrażenia wartości wejściowe czasu projektowania.  
  
 Na przykład <xref:System.Web.UI.Design.ResourceExpressionEditor> pochodną klasy <xref:System.Web.UI.Design.ExpressionEditor> klasy i udostępnia implementację dla oceny i kojarzenie odwołania ciągu zasobu z właściwości formantu w czasie projektowania. <xref:System.Web.Compilation.ResourceExpressionBuilder> Klasy jest skojarzone z prefiksu wyrażenia `Resources` i <xref:System.Web.UI.Design.ResourceExpressionEditor> implementacji. <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=nameWithType> Metoda zwraca <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, który definiuje poszczególnych właściwości, które tworzą wyrażenia odwołania do zasobów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zazwyczaj aby przekazać nowy typ wyrażenia w czasie projektowania, można zdefiniować prefiksu wyrażenia unikatowy i podać niestandardowy <see cref="T:System.Web.Compilation.ExpressionBuilder" /> i <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementacji. Opcjonalnie możesz podać niestandardowy <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> implementację, która definiuje właściwości, które są używane do tworzenia wyrażenia. Mimo że plik konfiguracyjny definiuje prefiks, należy także zastosować <see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" /> obiektu i <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> obiektu.  Zastąpienie <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metoda zwraca arkusz Edytor wyrażenia, który definiuje wartości wejściowe wiele właściwości czasu projektowania w wyrażeniu niestandardowym. Po wybraniu właściwości formantu i typ wyrażenia Edytor projektanta wizualnego wywołuje <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> — metoda i dostaw bieżącego wyrażenia ciąg znaków ustaw dla właściwości formantu. Użyj <paramref name="expression" /> można ustawić właściwości wyrażenia wartości początkowej. Użyj <paramref name="serviceProvider" /> zainicjować konstruktora arkusza wyrażenia niestandardowego i dostępu do usług udostępnianych przez projektanta hosta. Na przykład wywołać <see cref="M:System.IServiceProvider.GetService(System.Type)" /> metody z <see cref="T:System.Web.UI.Design.IWebApplication" /> typu na dostęp do elementów projektu, dokumentów lub szczegóły pliku konfiguracji, które są realizowane za pośrednictwem projektanta wizualnego.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>