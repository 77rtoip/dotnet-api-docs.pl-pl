<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="48fedb086caeaf341300f29853c3c3cb0649a9e8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69044335" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditor abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje zestaw właściwości i metod oceniania wyrażenia, które jest skojarzone z właściwością kontrolki w czasie projektowania i aby zapewnić arkusz edytora wyrażeń dla hosta projektu wizualizacji do użycia w oknie dialogowym Edytor wyrażeń. Ta klasa jest abstrakcyjna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Host projektanta wizualnego, taki jak [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], <xref:System.Web.UI.Design.ExpressionEditor> używa klasy do prezentowania użytkownikowi arkuszy edytora wyrażeń niestandardowych, a następnie szacuje wybrane wyrażenie na potrzeby renderowania w czasie projektowania.  
  
 Podczas przeglądania <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> właściwości kontrolki w siatce właściwości czasu projektowania projektant wizualny wyświetli okno dialogowe, w którym można ustawić wyrażenia dla właściwości kontrolki. Typ wyrażenia można wybrać na podstawie listy prefiksów wyrażeń. Po wybraniu prefiksu wyrażenia z listy, projektant wizualny używa skojarzonych <xref:System.Web.UI.Design.ExpressionEditor> i <xref:System.Web.UI.Design.ExpressionEditorSheet> obiektów, aby ustawić, oszacować i przekonwertować ciąg wyrażenia na podstawie składni dla tego typu wyrażenia. Projektant wizualny ustawi wyrażenie dla skojarzonej właściwości kontrolki, a następnie użyje obliczanego wyniku wyrażenia, aby przypisać wartości właściwości kontrolki, które są renderowane na powierzchni projektowej.  
  
 Metody statyczne <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> pobierają Edytor wyrażeń, który jest skojarzony z określonym prefiksem wyrażenia lub konstruktorem wyrażeń. <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> Właściwość<xref:System.Web.UI.Design.ExpressionEditor> obiektu zwraca skonfigurowany prefiks wyrażenia. <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> Metoda szacuje ciąg wyrażenia danych wejściowych. <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> Metoda<xref:System.Web.UI.Design.ExpressionEditorSheet> zwraca implementację, która jest używana do wyświetlania monitu o właściwości wyrażenia niestandardowego w oknie dialogowym wyrażenia.  
  
 Zazwyczaj w celu zapewnienia obsługi nowego typu wyrażenia w czasie projektowania należy zdefiniować unikatowy prefiks wyrażenia i udostępnić niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> implementacje. Opcjonalnie można podać implementację niestandardową <xref:System.Web.UI.Design.ExpressionEditorSheet> , która definiuje właściwości, które są używane do tworzenia wyrażenia w oknie dialogowym wyrażenia.  
  
 Prefiks wyrażenia identyfikuje typ wyrażenia niestandardowego i kojarzy wyrażenie z konstruktorem wyrażeń i edytorem wyrażeń. Gdy wyrażenia niestandardowe są analizowane na stronie, prefiks wyrażenia jest używany do tworzenia wystąpień skojarzonych <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klas. Aby skojarzyć prefiks wyrażenia <xref:System.Web.Compilation.ExpressionEditorAttribute> z konstruktorem wyrażeń i edytorem wyrażeń, Zastosuj atrybuty i <xref:System.Web.Compilation.ExpressionPrefixAttribute> do klasy niestandardowej <xref:System.Web.Compilation.ExpressionBuilder> i skonfiguruj prefiks `expressionBuilders` wyrażenia dla konstruktora wyrażeń w w pliku konfiguracji sieci Web. Prefiks nie jest wymagany, ale jest zdecydowanie zalecany.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.Design.ExpressionEditor> jak dziedziczyć z klasy w celu zdefiniowania niestandardowego edytora wyrażeń.  
  
 [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Następujące kroki są wymagane w przypadku wyprowadzania klasy niestandardowej <see cref="T:System.Web.UI.Design.ExpressionEditor" /> : 
-Zastąpienie <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> metody w celu obliczenia typu wyrażenia niestandardowego w czasie projektowania.  
  
— Opcjonalnie Przesłoń <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metodę, aby zwrócić klasę niestandardową, która definiuje właściwości, które są łączone w celu utworzenia wyrażenia niestandardowego.  
  
-Zastosuj <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> atrybut <see cref="T:System.Web.Compilation.ExpressionBuilder" /> w deklaracji klasy, aby skojarzyć niestandardowy Konstruktor wyrażeń z pochodną klasą edytora wyrażeń.  
  
Na przykład <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> Klasa pochodzi <see cref="T:System.Web.UI.Design.ExpressionEditor" /> z klasy i zawiera implementację do oceny i kojarzenia odwołania do ciągu zasobu z właściwością kontrolki w czasie projektowania. Klasa jest skojarzona z prefiksem <see langword="Resources" /> wyrażenia i <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> implementacją. <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" /> <see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> Metoda<see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />zwraca, który definiuje poszczególne właściwości, które tworzą wyrażenie odwołania do zasobu.</para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ Klasa jest abstrakcyjna, nie można utworzyć wystąpienia <xref:System.Web.UI.Design.ExpressionEditor> klasy bezpośrednio przy użyciu <xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A> konstruktora. <xref:System.Web.UI.Design.ExpressionEditor>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas wyprowadzania z <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy, <see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" /> Przesłoń konstruktora, aby zaimplementować niestandardowe akcje inicjowania dla implementacji edytora wyrażeń.</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EvaluateExpression (expression As String, parseTimeData As Object, propertyType As Type, serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EvaluateExpression(System::String ^ expression, System::Object ^ parseTimeData, Type ^ propertyType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : string * obj * Type * IServiceProvider -&gt; obj" Usage="expressionEditor.EvaluateExpression (expression, parseTimeData, propertyType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">Ciąg wyrażenia do obliczenia. Wyrażenie nie zawiera prefiksu wyrażenia.</param>
        <param name="parseTimeData">Obiekt zawierający dodatkowe informacje o analizie do oceny <paramref name="expression" />. Zwykle jest to zapewniane przez konstruktora wyrażeń.</param>
        <param name="propertyType">Typ właściwości kontrolki, która <paramref name="expression" /> jest powiązana.</param>
        <param name="serviceProvider">Implementacja dostawcy usług dostarczana przez hosta projektanta, używana do uzyskiwania dodatkowych usług czasu projektowania.</param>
        <summary>Oblicza ciąg wyrażenia i dostarcza wartość czasu projektowania dla właściwości kontrolki.</summary>
        <returns>Obiekt, do którego odwołuje się obliczony ciąg wyrażenia, jeśli Obliczanie wyrażenia powiodło się; w przeciwnym razie. <see langword="null" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Host projektanta wizualnego używa <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> metody do obliczenia wyrażenia i zapewnienia wartości czasu projektowania skojarzonej właściwości kontrolki.  
  
 Projektant wizualny używa metody <xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=nameWithType> , aby przeanalizować ciąg wyrażenia w czasie projektowania, a następnie <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> wywołuje metodę z przeanalizowanymi danymi wyrażenia. Projektant wizualny używa wyniku obliczanego wyrażenia do przypisywania wartości właściwości kontrolki, które są renderowane na powierzchni projektowej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Klasy pochodne <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy muszą <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> przesłaniać metodę w celu obliczenia typu wyrażenia niestandardowego w czasie projektowania.  
  
<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> Implementacja musi mieć co najmniej następujące czynności: 
1.  Oceń ciąg wyrażenia i Określ obiekt, do którego odwołuje się wyrażenie.  
  
2.  Return <see langword="null" />, jeśli nie można obliczyć ciągu wyrażenia.  
  
3.  <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> Użyj<paramref name="propertyType" /> metody z, aby określić, czy przywoływany obiekt może być przypisany bezpośrednio do typu właściwości kontrolki, a następnie, w zależności od wyniku, wykonaj jedną z następujących czynności: 
-Jeśli obiekt, do którego istnieje odwołanie, można przypisać bezpośrednio do właściwości kontrolki, zwróć przywoływany obiekt dla wyrażenia.  
  
-Jeśli przywoływany obiekt jest typem prostym, takim jak ciąg, zwraca obiekt, do którego istnieje odwołanie.  
  
— W przeciwnym razie Ustal, czy przywoływany obiekt może być przypisany do typu właściwości lub przekonwertowany na ten typ.  
  
4.  Użyj metody na <see cref="T:System.ComponentModel.TypeConverter" /> obiekcie<paramref name="propertyType" /> , aby określić, czy obiekt, do którego istnieje odwołanie, można przekonwertować na typ właściwości kontrolki, a następnie, w zależności od wyniku, wykonaj jedną z następujących czynności: <see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" /> 
-Jeśli obiekt można przekonwertować na typ właściwości kontrolki, zwróć Obiekt przekonwertowany za pomocą <see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /> metody.  
  
-Jeśli obiektu, do którego się odwoływano, nie <paramref name="propertyType" />można przypisać ani przekonwertować do, zwróć przywoływany obiekt.  
  
Opcjonalnie implementacja może <paramref name="parseTimeData" /> użyć obiektu <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> , który jest dostarczany przez implementację, aby zoptymalizować lub pomóc w ocenie ciągu wyrażenia danych wejściowych. <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /></para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string" Usage="System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prefiks wyrażenia, który identyfikuje ciągi wyrażeń, które są obsługiwane przez implementację edytora wyrażeń.</summary>
        <value>Ciąg reprezentujący prefiks dla wyrażeń obsługiwanych przez klasę pochodną <see cref="T:System.Web.UI.Design.ExpressionEditor" />; w przeciwnym razie, pusty ciąg (""), jeśli Edytor wyrażeń nie ma skojarzonego prefiksu wyrażenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prefiks wyrażenia identyfikuje typ wyrażenia niestandardowego i kojarzy wyrażenie z konstruktorem wyrażeń i edytorem wyrażeń. Gdy wyrażenia niestandardowe są analizowane na stronie, prefiks wyrażenia jest używany do tworzenia wystąpień skojarzonych <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klas. Aby skojarzyć prefiks wyrażenia <xref:System.Web.Compilation.ExpressionEditorAttribute> z konstruktorem wyrażeń i edytorem wyrażeń, Zastosuj atrybuty i <xref:System.Web.Compilation.ExpressionPrefixAttribute> do klasy niestandardowej <xref:System.Web.Compilation.ExpressionBuilder> i skonfiguruj prefiks `expressionBuilders` wyrażenia dla konstruktora wyrażeń w w pliku konfiguracji sieci Web.  
  
 Zazwyczaj klasy pochodne nie przesłaniają <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> właściwości. Klasa bazowa <xref:System.Web.UI.Design.ExpressionEditor> <xref:System.Web.Compilation.ExpressionPrefixAttribute> ustawia wartość na podstawie atrybutu dla skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> obiektu. <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.Design.ExpressionEditor" /> Zwraca implementację, która jest skojarzona z prefiksem wyrażenia lub konstruktorem wyrażeń.</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionPrefix As String, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(System::String ^ expressionPrefix, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionPrefix, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">Prefiks wyrażenia używany do znajdowania skojarzonego edytora wyrażeń.</param>
        <param name="serviceProvider">Implementacja dostawcy usług dostarczana przez hosta projektanta, używana do uzyskiwania dodatkowych usług czasu projektowania.</param>
        <summary><see cref="T:System.Web.UI.Design.ExpressionEditor" /> Zwraca implementację, która jest skojarzona z określonym prefiksem wyrażenia.</summary>
        <returns><paramref name="expressionPrefix" /> <see langword="null" /> <paramref name="expressionPrefix" /> Implementacja skojarzona z; w przeciwnym razie, jeśli nie jest zdefiniowana lub nie jest skojarzona <see cref="T:System.Web.UI.Design.ExpressionEditor" />z. <see cref="T:System.Web.UI.Design.ExpressionEditor" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj przeciążenia metody <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> statycznej, aby <xref:System.Web.UI.Design.ExpressionEditor> znaleźć obiekt, który jest skojarzony z określonym prefiksem wyrażenia lub typem konstruktora wyrażeń.  
  
 Dla każdego typu wyrażenia niestandardowego prefiks wyrażenia identyfikuje skojarzonego konstruktora wyrażeń i edytora wyrażeń. Gdy wyrażenia niestandardowe są analizowane na stronie, prefiks wyrażenia jest używany do tworzenia wystąpień skojarzonych <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klas.  
  
 Aby skojarzyć prefiks wyrażenia <xref:System.Web.Compilation.ExpressionEditorAttribute> z konstruktorem wyrażeń i edytorem wyrażeń, Zastosuj atrybuty i <xref:System.Web.Compilation.ExpressionPrefixAttribute> do klasy niestandardowej <xref:System.Web.Compilation.ExpressionBuilder> i skonfiguruj prefiks `expressionBuilders` wyrażenia dla konstruktora wyrażeń w w pliku konfiguracji sieci Web.  
  
 Aby znaleźć skojarzony Edytor wyrażeń dla prefiksu wyrażenia, <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> Metoda wylicza dostępne <xref:System.Web.Compilation.ExpressionBuilder> implementacje dla pasującego prefiksu. Implementacje można skonfigurować `expressionBuilders` w sekcji pliku konfiguracji sieci Web. <xref:System.Web.Compilation.ExpressionBuilder> Jeśli dostępna <xref:System.Web.Compilation.ExpressionBuilder> implementacja definiuje prefiks wyrażenia <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> , metoda zwraca typ <xref:System.Web.Compilation.ExpressionEditorAttribute> , który jest określony <xref:System.Web.Compilation.ExpressionBuilder> w atrybucie metadanych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" />jest <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionBuilderType As Type, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(Type ^ expressionBuilderType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : Type * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionBuilderType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">Typ klasy konstruktora wyrażeń pochodnych używany do lokalizowania skojarzonego edytora wyrażeń.</param>
        <param name="serviceProvider">Implementacja dostawcy usług dostarczana przez hosta projektanta, używana do uzyskiwania dodatkowych usług czasu projektowania.</param>
        <summary><see cref="T:System.Web.UI.Design.ExpressionEditor" /> Zwraca implementację, która jest skojarzona z określonym typem konstruktora wyrażeń.</summary>
        <returns><see langword="null" /> <paramref name="expressionBuilderType" /> <see cref="T:System.Web.UI.Design.ExpressionEditor" />Implementacja skojarzona z; w przeciwnym razie, <paramref name="expressionBuilderType" /> Jeśli nie może zostać zlokalizowana lub nie jest skojarzona z żadną z nich. <see cref="T:System.Web.UI.Design.ExpressionEditor" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj statycznych <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> przeciążeń, aby <xref:System.Web.UI.Design.ExpressionEditor> znaleźć obiekt, który jest skojarzony z określonym prefiksem wyrażenia lub typem konstruktora wyrażeń.  
  
 Dla każdego typu wyrażenia niestandardowego prefiks wyrażenia identyfikuje skojarzonego konstruktora wyrażeń i edytora wyrażeń. Gdy wyrażenia niestandardowe są analizowane na stronie, prefiks wyrażenia jest używany do tworzenia wystąpień skojarzonych <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klas.  
  
 Aby skojarzyć prefiks wyrażenia <xref:System.Web.Compilation.ExpressionEditorAttribute> z konstruktorem wyrażeń i edytorem wyrażeń, Zastosuj atrybuty i <xref:System.Web.Compilation.ExpressionPrefixAttribute> do klasy niestandardowej <xref:System.Web.Compilation.ExpressionBuilder> i skonfiguruj prefiks `expressionBuilders` wyrażenia dla konstruktora wyrażeń w w pliku konfiguracji sieci Web.  
  
 Metoda wylicza dostępne <xref:System.Web.Compilation.ExpressionBuilder> implementacje do zlokalizowania `expressionBuilderType`. <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> Implementacje można skonfigurować `expressionBuilders` w sekcji pliku konfiguracji sieci Web. <xref:System.Web.Compilation.ExpressionBuilder> Jeśli `expressionBuilderType` zostanie znaleziony w zestawie dostępnych <xref:System.Web.Compilation.ExpressionBuilder> implementacji, <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> Metoda <xref:System.Web.Compilation.ExpressionEditorAttribute> zwraca typ <xref:System.Web.Compilation.ExpressionBuilder> , który jest określony w atrybucie metadanych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="expressionBuilderType" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="serviceProvider" />jest <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExpressionEditorSheet (expression As String, serviceProvider As IServiceProvider) As ExpressionEditorSheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::ExpressionEditorSheet ^ GetExpressionEditorSheet(System::String ^ expression, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet&#xA;override this.GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="expressionEditor.GetExpressionEditorSheet (expression, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">Ciąg wyrażenia ustawiony dla właściwości kontrolki, używany do inicjowania arkusza edytora wyrażeń.</param>
        <param name="serviceProvider">Implementacja dostawcy usług dostarczana przez hosta projektanta, używana do uzyskiwania dodatkowych usług czasu projektowania.</param>
        <summary>Zwraca arkusz edytora wyrażeń, który jest skojarzony z bieżącym edytorem wyrażeń.</summary>
        <returns><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> , Który definiuje niestandardowe właściwości wyrażeń.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> Metoda<xref:System.Web.UI.Design.ExpressionEditorSheet> zwraca implementację, która definiuje ciągi, które są połączone, aby utworzyć wyrażenie niestandardowe. Projektant wizualny używa arkusza edytora wyrażeń do wyświetlania monitu o jeden lub więcej ciągów, które łączą się z wyrażeniem niestandardowym. Metoda klasy bazowej zwraca domyślny arkusz edytora wyrażeń, który używa pojedynczego ciągu wejściowego do utworzenia wyrażenia. Arkusz edytora wyrażeń definiuje siatkę właściwości dla wyrażenia. W związku z tym właściwości, które uwidacznia Edytor wyrażeń, stają się właściwościami, które można zdefiniować dla wyrażenia w oknie dialogowym.  
  
 Klasy wywodzące się <xref:System.Web.UI.Design.ExpressionEditor> z klasy opcjonalnie mogą <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> przesłaniać metodę w celu zapewnienia niestandardowego arkusza edytora wyrażeń. Niestandardowy arkusz edytora wyrażeń umożliwia wprowadzanie danych w czasie projektowania dla wielu właściwości połączonych ze sobą w celu utworzenia ciągu wyrażenia.  
  
 Na przykład <xref:System.Web.UI.Design.ResourceExpressionEditor> Klasa pochodzi <xref:System.Web.UI.Design.ExpressionEditor> z klasy i zawiera implementację do oceny i kojarzenia odwołania do ciągu zasobu z właściwością kontrolki w czasie projektowania. Klasa jest skojarzona z prefiksem `Resources` wyrażenia i <xref:System.Web.UI.Design.ResourceExpressionEditor> implementacją. <xref:System.Web.Compilation.ResourceExpressionBuilder> <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=nameWithType> Metoda<xref:System.Web.UI.Design.ResourceExpressionEditorSheet>zwraca, który definiuje poszczególne właściwości, które tworzą wyrażenie odwołania do zasobu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zazwyczaj, aby podać nowy typ wyrażenia w czasie projektowania, należy zdefiniować unikatowy prefiks wyrażenia i udostępnić niestandardowe <see cref="T:System.Web.Compilation.ExpressionBuilder" /> i <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementacje. Opcjonalnie można podać implementację niestandardową <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> , która definiuje właściwości, które są używane do tworzenia wyrażenia. Mimo że plik konfiguracji definiuje prefiks, należy również zastosować <see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" /> obiekt <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> i obiekt.  
  
Zastąp <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metodę, aby zwrócić arkusz edytora wyrażeń, który definiuje dane wejściowe czasu projektowania dla wielu właściwości w niestandardowym wyrażeniu. Po wybraniu właściwości kontrolki i typu edytora wyrazów, projektant wizualny wywołuje <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metodę, a następnie dostarcza bieżący ciąg wyrażenia, który jest ustawiony dla właściwości kontrolki. Służy <paramref name="expression" /> do ustawiania początkowych wartości właściwości wyrażenia. Użyj <paramref name="serviceProvider" /> , aby zainicjować Konstruktor niestandardowego arkusza wyrażeń i uzyskać dostęp do usług dostarczonych przez hosta projektanta. Na przykład Wywołaj <see cref="M:System.IServiceProvider.GetService(System.Type)" /> metodę <see cref="T:System.Web.UI.Design.IWebApplication" /> z typem, aby uzyskać dostęp do szczegółów elementów projektu, dokumentów lub pliku konfiguracji, które są dostępne za pomocą projektanta wizualnego.</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>
