<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8c8778fe408397d83c3bfac5a1ceb2de1d89421e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39759603" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditor abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje zestaw właściwości i metody do obliczenia wyrażenia, która jest skojarzona z właściwością formantu w czasie projektowania i w celu zapewnienia arkuszu edytora wyrażeń do projektowania wizualnego hosta do użycia w oknie dialogowym Edytor wyrażeń. Ta klasa jest abstrakcyjna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hostowanie projektanta wizualnego, takich jak [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], używa <xref:System.Web.UI.Design.ExpressionEditor> klasy do przedstawienia wyrażenia niestandardowego edytora arkuszy do użytkownika, a następnie ocenę wybranego wyrażenia do renderowania w czasie projektowania.  
  
 Po przejściu <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> właściwości kontrolki w siatce właściwości czasu projektowania wizualnego projektanta wyświetlane jest okno dialogowe, można ustawić wyrażenia dla właściwości kontrolki. Można wybrać typ wyrażenia, w oparciu o listę prefiksów wyrażenia. Po wybraniu prefiksu wyrażenia z listy skojarzonej korzysta z projektanta wizualnego <xref:System.Web.UI.Design.ExpressionEditor> i <xref:System.Web.UI.Design.ExpressionEditorSheet> obiektów, aby ustawić, oceny i przekonwertować ciąg wyrażenia, w zależności od składni dla tego typu wyrażenia. Projektant wizualny ustawia wyrażenie nie zawiera właściwości kontrolki skojarzone, a następnie używa wynik wyrażenia ocenianego można przypisać wartości właściwości, które są renderowane na powierzchni projektowej kontroli.  
  
 Statyczne <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> metody Pobierz Edytor wyrażeń, który jest skojarzony z prefiksu określonego wyrażenia lub Konstruktor wyrażeń. <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> Właściwość <xref:System.Web.UI.Design.ExpressionEditor> zwraca prefiksu skonfigurowane wyrażenia. <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> Metoda ocenia ciąg wejściowy wyrażenia. <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> Metoda zwraca <xref:System.Web.UI.Design.ExpressionEditorSheet> implementację, która jest używana monit o wyrażenie niestandardowe właściwości w oknie dialogowym wyrażenia.  
  
 Zazwyczaj, aby zapewnić obsługę nowego typu wyrażenia w czasie projektowania, możesz zdefiniowania prefiksu unikatowych wyrażenia i dostarczyć niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> implementacji. Opcjonalnie można podać niestandardowy <xref:System.Web.UI.Design.ExpressionEditorSheet> implementację, która definiuje właściwości, które są używane w celu utworzenia wyrażenia w oknie dialogowym wyrażenia.  
  
 Prefiks wyrażenie identyfikuje typ wyrażenia niestandardowego i kojarzy wyrażenie za pomocą Kreatora wyrażeń i edytora wyrażeń. Gdy wyrażeń niestandardowych są parsowane na stronie, prefiks wyrażenie jest używany do tworzenia wystąpień skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klasy. Aby skojarzyć prefiks wyrażenie za pomocą Kreatora wyrażeń i Edytor wyrażeń, zastosuj <xref:System.Web.Compilation.ExpressionEditorAttribute> i <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybuty niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> klasy i Konfiguracja prefiksu wyrażenia dla Konstruktora wyrażeń w `expressionBuilders` element w pliku konfiguracji sieci Web. Prefiks jest nie jest wymagana, ale zdecydowanie zaleca się.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak dziedziczyć <xref:System.Web.UI.Design.ExpressionEditor> klasy, aby zdefiniować edytora wyrażeń niestandardowych.  
  
 [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Poniższe kroki są wymagane w wyprowadzanie niestandardowego <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy:-zastąpić <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> metody, można obliczyć wartości wyrażenia niestandardowego typu w czasie projektowania.  — Opcjonalnie zastąpić <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metodę, aby zwrócić klasę niestandardową, która definiuje właściwości, które są łączone w celu utworzenia wyrażenia niestandardowego.  -Zastosuj <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> atrybutu na <see cref="T:System.Web.Compilation.ExpressionBuilder" /> deklaracji do skojarzenia z konstruktorem wyrażeń niestandardowych z klasy edytora wyrażeń pochodnej klasy.  Na przykład <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> klasa pochodzi od <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy i dostarcza implementację oceniania i kojarzenie odwołanie do ciągu zasobu z właściwości formantu w czasie projektowania. <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" /> Klasy jest skojarzony z prefiksem wyrażenie <see langword="Resources" /> i <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> implementacji. <see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> Metoda zwraca <see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />, która definiuje poszczególne właściwości, które tworzą wyrażenia odwołania do zasobu.</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ <xref:System.Web.UI.Design.ExpressionEditor> klasa jest klasą abstrakcyjną, nie można utworzyć wystąpienia <xref:System.Web.UI.Design.ExpressionEditor> bezpośrednio przy użyciu <xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A> konstruktora.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas wyprowadzania z <see cref="T:System.Web.UI.Design.ExpressionEditor" /> klasy, Zastąp <see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" /> konstruktora do zaimplementowania akcji niestandardowej inicjalizacji implementacji edytora wyrażeń.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EvaluateExpression (expression As String, parseTimeData As Object, propertyType As Type, serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EvaluateExpression(System::String ^ expression, System::Object ^ parseTimeData, Type ^ propertyType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : string * obj * Type * IServiceProvider -&gt; obj" Usage="expressionEditor.EvaluateExpression (expression, parseTimeData, propertyType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">Ciąg wyrażenie do oceny. Wyrażenie nie zawiera prefiksu wyrażenia.</param>
        <param name="parseTimeData">Obiekt zawierający dodatkowe informacje podczas analizowania, oceny <c>wyrażenie</c>. To zwykle są udostępniane przez Konstruktor wyrażeń.</param>
        <param name="propertyType">Typ właściwości kontrolki, która <c>wyrażenie</c> jest powiązany.</param>
        <param name="serviceProvider">Implementacja dostawcy usług dostarczanych przez projektanta hosta, używane do uzyskiwania dodatkowych usług pomocy technicznej czasu projektowania.</param>
        <summary>Oblicza wyrażenie ciągu i zawiera wartość czasu projektowania dla właściwości kontrolki.</summary>
        <returns>Obiekt określany w odwołaniu w ciągu obliczane wyrażenie, jeśli Obliczanie wyrażenia zakończyło się pomyślnie; w przeciwnym razie <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wizualnego projektanta host używa <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> metodę, aby obliczyć wyrażenia i podaj wartość czasu projektowania dla właściwości skojarzonego formantu.  
  
 Projektant wizualny używa <xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=nameWithType> metodę, aby przeanalizować ciąg wyrażenia w czasie projektowania i wywołania <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> metody za pomocą danych przeanalizowany wyrażenia. Projektant wizualny używane wynik wyrażenia ocenianego do przypisywania kontroli wartości właściwości, które są renderowane na powierzchni projektowej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Klasy wywodzące się z <see cref="T:System.Web.UI.Design.ExpressionEditor" /> przesłonięcie klasy <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> metody, można obliczyć wartości wyrażenia niestandardowego typu w czasie projektowania.  Co najmniej <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> implementacja musi wykonaj następujące kroki: 1.  Oceń ciąg wyrażenia i określić obiekt, który odwołuje się do wyrażenia.  2.  Zwróć <see langword="null" />, jeśli nie można obliczyć wartości wyrażenia ciągu.  3.  Użyj <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> metody <paramref name="propertyType" /> ustalenie, czy przywoływany obiekt można przypisać bezpośrednio do typu właściwości formantu, a następnie w zależności od wyniku pełną jedną z następujących czynności: - Jeśli przywoływany obiekt można przypisać bezpośrednio do właściwości kontrolki Zwróć przywoływanego obiektu dla wyrażenia.  — Jeśli przywoływanego obiektu jest typem prostym, takie jak ciąg, zwróć przywoływanego obiektu.  — W przeciwnym razie można określić, czy przywoływanego obiektu mogą być przypisane do lub przekonwertować na typ właściwości.  4.  Użyj <see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" /> metody <see cref="T:System.ComponentModel.TypeConverter" /> dla obiektu <paramref name="propertyType" /> ustalenie, czy przywoływanego obiektu można przekonwertować na typ właściwości formantu, a następnie, w zależności od wyniku pełną jedną z następujących czynności: - Jeśli obiekt może być konwertowane na typ właściwości formantu, zwraca obiekt przekonwertowany, przy użyciu <see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /> metody.  — Jeśli przywoływanego obiektu nie można przypisać lub przekonwertowane na <paramref name="propertyType" />, zwracają przywoływanego obiektu.  Opcjonalnie <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> użyć implementacji <paramref name="parseTimeData" /> obiekt, który jest dostarczany przez <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> implementacji zoptymalizować lub pomoc w ocenie ciąg wejściowy wyrażenia.</para>
        </block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string" Usage="System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prefiks wyrażenia, który identyfikuje ciągów wyrażenie, które są obsługiwane przez implementację edytora wyrażeń.</summary>
        <value>Ciąg reprezentujący prefiks dla wyrażeń obsługiwany przez klasę pochodną <see cref="T:System.Web.UI.Design.ExpressionEditor" />; w przeciwnym razie pusty ciąg (""), jeśli Edytor wyrażeń nie ma prefiks skojarzone wyrażenie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prefiks wyrażenie identyfikuje typ wyrażenia niestandardowego i kojarzy wyrażenie za pomocą Kreatora wyrażeń i edytora wyrażeń. Gdy wyrażeń niestandardowych są parsowane na stronie, prefiks wyrażenie jest używany do tworzenia wystąpień skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klasy. Aby skojarzyć prefiks wyrażenie za pomocą Kreatora wyrażeń i Edytor wyrażeń, zastosuj <xref:System.Web.Compilation.ExpressionEditorAttribute> i <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybuty niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> klasy i Konfiguracja prefiksu wyrażenia dla Konstruktora wyrażeń w `expressionBuilders` element w pliku konfiguracji sieci Web.  
  
 Zazwyczaj nie zastępują klasy pochodne <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> właściwości. Podstawa <xref:System.Web.UI.Design.ExpressionEditor> klasy zestawy <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> na podstawie wartości <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybutu dla skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> obiektu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementację, która jest skojarzona z prefiksu wyrażenia lub Konstruktor wyrażeń.</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionPrefix As String, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(System::String ^ expressionPrefix, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionPrefix, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">Prefiks wyrażenie umożliwia znalezienie skojarzone wyrażenie edytora.</param>
        <param name="serviceProvider">Implementacja dostawcy usług dostarczanych przez projektanta hosta, używane do uzyskiwania dodatkowych usług pomocy technicznej czasu projektowania.</param>
        <summary>Zwraca <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementację, która jest skojarzona z prefiksem określone wyrażenie.</summary>
        <returns>
          <see cref="T:System.Web.UI.Design.ExpressionEditor" /> Wdrożenia skojarzony z <paramref name="expressionPrefix" />; w przeciwnym razie <see langword="null" />, jeśli <paramref name="expressionPrefix" /> nie został zdefiniowany lub nie jest skojarzony z <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używa się statycznej <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> przeciążenia metody, aby znaleźć <xref:System.Web.UI.Design.ExpressionEditor> obiekt, który jest skojarzony z prefiksu określonego wyrażenia lub wyrażeń konstruktora typu.  
  
 Dla każdego typu wyrażenia niestandardowego prefiks wyrażenie identyfikuje Konstruktor wyrażeń skojarzone i edytora wyrażeń. Gdy wyrażeń niestandardowych są parsowane na stronie, prefiks wyrażenie jest używany do tworzenia wystąpień skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klasy.  
  
 Aby skojarzyć prefiks wyrażenie za pomocą Kreatora wyrażeń i Edytor wyrażeń, zastosuj <xref:System.Web.Compilation.ExpressionEditorAttribute> i <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybuty niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> klasy i Konfiguracja prefiksu wyrażenia dla Konstruktora wyrażeń w `expressionBuilders` element w pliku konfiguracji sieci Web.  
  
 Aby znaleźć skojarzone wyrażenie edytora dla prefiksu wyrażenia <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> metoda wylicza dostępnych <xref:System.Web.Compilation.ExpressionBuilder> implementacje dla dopasowania prefiksu. <xref:System.Web.Compilation.ExpressionBuilder> Implementacje można skonfigurować w `expressionBuilders` sekcję pliku konfiguracji sieci Web. Jeśli jest dostępny <xref:System.Web.Compilation.ExpressionBuilder> implementacja definiuje prefiksu wyrażenia <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> metoda zwraca typ, który jest określony w <xref:System.Web.Compilation.ExpressionEditorAttribute> atrybutu <xref:System.Web.Compilation.ExpressionBuilder> metadanych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceProvider" /> jest <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionBuilderType As Type, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(Type ^ expressionBuilderType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : Type * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionBuilderType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">Typ klasy pochodnej wyrażenia konstruktora używana do lokalizowania edytora wyrażeń skojarzone.</param>
        <param name="serviceProvider">Implementacja dostawcy usług dostarczanych przez projektanta hosta, używane do uzyskiwania dodatkowych usług pomocy technicznej czasu projektowania.</param>
        <summary>Zwraca <see cref="T:System.Web.UI.Design.ExpressionEditor" /> wdrożenia, który jest skojarzony typ konstruktora określone wyrażenie.</summary>
        <returns>
          <see cref="T:System.Web.UI.Design.ExpressionEditor" /> Wdrożenia skojarzony z <paramref name="expressionBuilderType" />; w przeciwnym razie <see langword="null" />, jeśli <paramref name="expressionBuilderType" /> nie można odnaleźć lub została bez skojarzonych <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używa się statycznej <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> przeciążenia, aby znaleźć <xref:System.Web.UI.Design.ExpressionEditor> obiekt, który jest skojarzony z prefiksu określonego wyrażenia lub wyrażeń konstruktora typu.  
  
 Dla każdego typu wyrażenia niestandardowego prefiks wyrażenie identyfikuje Konstruktor wyrażeń skojarzone i edytora wyrażeń. Gdy wyrażeń niestandardowych są parsowane na stronie, prefiks wyrażenie jest używany do tworzenia wystąpień skojarzonego <xref:System.Web.Compilation.ExpressionBuilder> i <xref:System.Web.UI.Design.ExpressionEditor> klasy.  
  
 Aby skojarzyć prefiks wyrażenie za pomocą Kreatora wyrażeń i Edytor wyrażeń, zastosuj <xref:System.Web.Compilation.ExpressionEditorAttribute> i <xref:System.Web.Compilation.ExpressionPrefixAttribute> atrybuty niestandardowe <xref:System.Web.Compilation.ExpressionBuilder> klasy i Konfiguracja prefiksu wyrażenia dla Konstruktora wyrażeń w `expressionBuilders` element w pliku konfiguracji sieci Web.  
  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> Metoda wylicza dostępnych <xref:System.Web.Compilation.ExpressionBuilder> implementacji w celu zlokalizowania `expressionBuilderType`. <xref:System.Web.Compilation.ExpressionBuilder> Implementacje można skonfigurować w `expressionBuilders` sekcję pliku konfiguracji sieci Web. Jeśli `expressionBuilderType` znajduje się w zestawie dostępności <xref:System.Web.Compilation.ExpressionBuilder> implementacji <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> metoda zwraca typ, który jest określony w <xref:System.Web.Compilation.ExpressionEditorAttribute> atrybutu <xref:System.Web.Compilation.ExpressionBuilder> metadanych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expressionBuilderType" /> jest <see langword="null" />.  
  
\- lub — 
 <paramref name="serviceProvider" /> jest <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExpressionEditorSheet (expression As String, serviceProvider As IServiceProvider) As ExpressionEditorSheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::ExpressionEditorSheet ^ GetExpressionEditorSheet(System::String ^ expression, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet&#xA;override this.GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="expressionEditor.GetExpressionEditorSheet (expression, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">Ciąg wyrażenia, ustaw dla właściwości kontrolki, używane do zainicjowania arkusza edytora wyrażeń.</param>
        <param name="serviceProvider">Implementacja dostawcy usług dostarczanych przez projektanta hosta, używane do uzyskiwania dodatkowych usług pomocy technicznej czasu projektowania.</param>
        <summary>Zwraca arkusza edytora wyrażenia, który jest skojarzony z bieżącym edytora wyrażeń.</summary>
        <returns>
          <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> Definiujący właściwości niestandardowe wyrażenie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> Metoda zwraca <xref:System.Web.UI.Design.ExpressionEditorSheet> wdrożenia, który definiuje ciągi, które są połączone, tworząc niestandardowe wyrażenie. Projektant wizualny używa arkuszu edytora wyrażeń na monitowanie o jeden lub więcej ciągów, które łączą się do wyrażenia niestandardowego. Metody klasy bazowej, zwraca domyślny arkusz Edytor wyrażeń, który używa pojedynczego ciągu wejściowego w celu utworzenia wyrażenia. Arkusz edytora wyrażeń definiuje siatki właściwości dla wyrażenia. W związku z tym właściwości, które przedstawia Edytor wyrażeń stają się właściwości, które mogą być definiowane dla wyrażenia w oknie dialogowym.  
  
 Klasy wywodzące się z <xref:System.Web.UI.Design.ExpressionEditor> klasy Opcjonalnie można zastąpić <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> metody w celu zapewnienia arkusz edytora wyrażeń niestandardowych. Arkusz edytora wyrażeń niestandardowych można zezwolić na wejście czasu projektowania dla wielu właściwości, które są połączone ze sobą, formularz ciąg wyrażenia.  
  
 Na przykład <xref:System.Web.UI.Design.ResourceExpressionEditor> klasa pochodzi od <xref:System.Web.UI.Design.ExpressionEditor> klasy i dostarcza implementację oceniania i kojarzenie odwołanie do ciągu zasobu z właściwości formantu w czasie projektowania. <xref:System.Web.Compilation.ResourceExpressionBuilder> Klasy jest skojarzony z prefiksem wyrażenie `Resources` i <xref:System.Web.UI.Design.ResourceExpressionEditor> implementacji. <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=nameWithType> Metoda zwraca <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, która definiuje poszczególne właściwości, które tworzą wyrażenia odwołania do zasobu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zazwyczaj, aby przekazać nowy typ wyrażenia w czasie projektowania, możesz zdefiniowania prefiksu unikatowych wyrażenia i dostarczyć niestandardowe <see cref="T:System.Web.Compilation.ExpressionBuilder" /> i <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementacji. Opcjonalnie można podać niestandardowy <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> implementację, która definiuje właściwości, które są używane w celu utworzenia wyrażenia. Mimo, że plik konfiguracyjny definiuje prefiksu, należy również zastosować <see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" /> obiektu i <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> obiektu.  Zastąp <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metodę, aby zwrócić arkusza Edytor wyrażeń, definiujący projektowania dane wejściowe na potrzeby wielu właściwości niestandardowe wyrażenia. Po wybraniu właściwości kontrolki i wyrażenia typu Edytor projektanta wizualnego wywołuje <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metody, a następnie dostarcza bieżącego wyrażenia ciągu, to znaczy, ustaw dla właściwości kontrolki. Użyj <paramref name="expression" /> można ustawić początkowe wartości dla właściwości wyrażenia. Użyj <paramref name="serviceProvider" /> zainicjować konstruktora arkusza wyrażenia niestandardowego oraz dostęp do usług, które są dostarczane przez hosta projektanta. Na przykład wywołać <see cref="M:System.IServiceProvider.GetService(System.Type)" /> metody z <see cref="T:System.Web.UI.Design.IWebApplication" /> typu na uzyskiwanie dostępu do elementów projektu, dokumentów lub szczegółów pliku konfiguracji, które są dostępne za pośrednictwem projektanta wizualnego.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>