<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="910a7bfeee1e93c687fc95aeb1e5cd8b49ab6725" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69348243" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Śledzi okres istnienia operacji asynchronicznej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas implementowania klasy zgodnie z [omówieniem asynchronicznego wzorca opartego](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)na zdarzeniach może być konieczne śledzenie okresu istnienia każdej operacji asynchronicznej wywołanej na wystąpieniu klasy. <xref:System.ComponentModel.AsyncOperation> Klasa zapewnia sposoby śledzenia i raportowania postępu zadania asynchronicznego.  
  
 Na poniższej liście przedstawiono sposoby używania <xref:System.ComponentModel.AsyncOperation> obiektu:  
  
-   Aby zgłosić postęp i wyniki pośrednie do klienta, wywołaj <xref:System.ComponentModel.AsyncOperation.Post%2A> z kodu asynchronicznego procesu roboczego.  
  
-   Aby wskazać, że zadanie asynchroniczne zostało zakończone, lub aby anulować oczekujące zadanie asynchroniczne, wywołaj <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>polecenie.  
  
 Klasa powinna uzyskać <xref:System.ComponentModel.AsyncOperation> obiekt dla każdego zadania asynchronicznego przez wywołanie <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> , gdy każde zadanie zostanie rozpoczęte. Aby umożliwić klientowi odróżnienie oddzielnych zadań asynchronicznych, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> pobiera parametr dla unikatowego tokenu dostarczonego przez klienta, który <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> staje się właściwością. Może być następnie używany przez kod klienta do identyfikowania konkretnego zadania asynchronicznego, które zwiększa postęp lub zdarzenia zakończenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.ComponentModel.AsyncOperation> obiektu do śledzenia okresu istnienia operacji asynchronicznych. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.  
  
 Aby zapoznać się z pełną listą [kodu, zobacz How to: Implementacja składnika obsługującego wzorzec](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)asynchroniczny oparty na zdarzeniach. Aby zapoznać się z pełną listą kodu formularza klienta, [zobacz How to: Implementacja klienta wzorca](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)asynchronicznego opartego na zdarzeniach.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Implementacje muszą zapewnić <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> asynchroniczne wywołania <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> i, tak aby dostawcy biblioteki klas nie musieli zajmować się potencjalnymi przedziałami stosu, jeśli zakładają asynchroniczne zachowanie w określonej aplikacji model, który ma być synchroniczny.  
  
Aby uzyskać więcej informacji na temat implementowania klas asynchronicznych, zobacz [implementowanie wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Instrukcje: Implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy operację asynchroniczną.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Końcowy okres istnienia operacji asynchronicznej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> metodę, aby zakończyć okres istnienia operacji asynchronicznej. Po wywołaniu tej metody dla konkretnego zadania wywołania do niego <xref:System.ComponentModel.AsyncOperation> będą zgłaszać wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />została wcześniej wywołana dla tego zadania.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><see cref="T:System.Threading.SendOrPostCallback" /> Obiekt, który otacza delegata, aby mógł zostać wywołany po zakończeniu operacji.</param>
        <param name="arg">Argument delegata zawarty w <paramref name="d" /> parametrze.</param>
        <summary>Wywołuje delegata w wątku lub kontekście odpowiednim dla modelu aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołuje delegata określonego `arg` przez parametr bez zakończenia okresu istnienia operacji asynchronicznej. <xref:System.ComponentModel.AsyncOperation.Post%2A>  
  
 <xref:System.ComponentModel.AsyncOperation.Post%2A> Metodę można wywołać tak często, jak chcesz, gdy okres istnienia operacji asynchronicznej nie został zakończony przez <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>wywołanie metody. Możesz użyć metody, aby zgłosić postęp lub pośrednie wyniki z powrotem do klientów.  
  
 `d` Parametr otacza delegata, który ma zostać wywołany, gdy chcesz opublikować aktualizację o stanie zadania asynchronicznego. <xref:System.ComponentModel.AsyncOperation> Obiekt zapewni, że delegat jest wywoływany w wątku lub kontekście odpowiednim dla modelu aplikacji. Metoda może opcjonalnie zgłosić zdarzenie, które powiadamia klientów o zmianie stanu, aktualizacji postępu lub nowo dostępnych przyrostowych wynikach.  
  
 Parametr powinien służyć do przekazywania stanu do delegata opakowanego `d` przez parametr. `arg` Może to być odwołanie do <xref:System.ComponentModel.AsyncOperation>, lub może <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> być obiektem. Może być pożądane, aby utworzyć własną klasę z <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> programu w celu zapewnienia dodatkowego magazynu Stanów.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.ComponentModel.AsyncOperation.Post%2A> metody raportowania postępu i przyrostowych wyników operacji asynchronicznej. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> Metoda została wcześniej wywołana dla tego zadania.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" />jest <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Dziedziczenia muszą powodować <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołanie asynchroniczne, tak aby dostawcy biblioteki klas nie musieli zajmować się potencjalnymi przedziałami stosu, jeśli zakładają asynchroniczności, ale konkretny model aplikacji stanie się synchronicznie.  
  
 <block subset="none" type="note"><para>  
 Aplikacje konsolowe nie synchronizują wykonywania <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołań. Może to spowodować <see langword="ProgressChanged" /> , że zdarzenia zostaną wygenerowane poza kolejnością. Jeśli chcesz mieć serializowane wykonywanie <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołań, zaimplementuj i <see cref="T:System.Threading.SynchronizationContext" /> Zainstaluj klasę.  
  
</para></block>  
  
 Aby uzyskać więcej informacji na temat implementowania klas asynchronicznych, zobacz [implementowanie wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Instrukcje: Implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach</related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><see cref="T:System.Threading.SendOrPostCallback" /> Obiekt, który otacza delegata, aby mógł zostać wywołany po zakończeniu operacji.</param>
        <param name="arg">Argument delegata zawarty w <paramref name="d" /> parametrze.</param>
        <summary>Końcowy okres istnienia operacji asynchronicznej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metodę, aby zakończyć okres istnienia operacji asynchronicznej. Po wywołaniu tej metody dla określonego zadania, wywołania do odpowiedniego <xref:System.ComponentModel.AsyncOperation> obiektu spowodują wystąpienie wyjątku.  
  
 `d` Parametr otacza delegata, który ma być wywoływany przez klasę po zakończeniu okresu istnienia zadania z powodu ukończenia, anulowania lub niepowodzenia zadania. <xref:System.ComponentModel.AsyncOperation> Obiekt zapewni, że delegat jest wywoływany w wątku lub kontekście odpowiednim dla modelu aplikacji. Delegat może opcjonalnie zgłosić zdarzenie, które powiadamia klientów, że okres istnienia zadania asynchronicznego zakończył się.  
  
 Parametr służy do przekazywania informacji o stanie do delegata `d`ukończenia. `arg` Możesz użyć <xref:System.ComponentModel.AsyncOperation> obiektu <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> lub obiektu jako wartości parametru. Alternatywnie, jeśli chcesz podać dodatkowy magazyn Stanów, możesz użyć wystąpienia klasy pochodnej od <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie metody, <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> aby zakończyć okres istnienia operacji asynchronicznej. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />została wcześniej wywołana dla tego zadania.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" />jest <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Dziedziczenia muszą powodować <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> wywołanie asynchroniczne, tak aby dostawcy biblioteki klas nie musieli zajmować się potencjalnymi przedziałami stosu, jeśli zakładają asynchroniczności, ale konkretny model aplikacji stanie się synchronicznie. Metoda powinna być interpretowana jako "Kończenie wywołania okresu istnienia", co oznacza, że implementacja musi wykonać odpowiednie działania w modelu aplikacji. Na przykład ASP.NET zmniejszy liczbę zaległych operacji asynchronicznych. Powinno to również spowodować przeprowadzenie operacji w stanie, w taki sposób, że wszelkie kolejne wywołania do niego zakończą się niepowodzeniem, ponieważ zostały ukończone.  
  
Aby uzyskać więcej informacji na temat implementowania klas asynchronicznych, zobacz [implementowanie wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Instrukcje: Implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Threading.SynchronizationContext" /> Pobiera obiekt, który został przekazano do konstruktora.</summary>
        <value><see cref="T:System.Threading.SynchronizationContext" /> Obiekt, który został przesłany do konstruktora.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt używany do jednoznacznej identyfikacji operacji asynchronicznej.</summary>
        <value>Obiekt stanu przeszedł do wywołania metody asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli klasa obsługuje wiele metod asynchronicznych lub wiele wywołań pojedynczej metody asynchronicznej, klienci będą musieli określić, które zadanie asynchroniczne wywołuje zdarzenia. Metoda powinna przyjmować parametr typu <xref:System.Object> , który będzie pełnić rolę identyfikatora zadania. `MethodNameAsync` Ten identyfikator zadania będzie używany podczas wywoływania <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>metody, która spowoduje skojarzenie identyfikatora zadania klienta z określonym wywołaniem operacji asynchronicznej. Ten identyfikator zadania jest udostępniany dla implementacji przez <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwość.  
  
> [!CAUTION]
>  Kod klienta należy zachować ostrożność, aby zapewnić unikatową wartość <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwości. Identyfikatory zadań inne niż unikatowe mogą spowodować nieprawidłowe Raportowanie postępu i innych zdarzeń przez implementację. Kod powinien sprawdzać, czy nie unikatowy identyfikator zadania i zgłaszać <xref:System.ArgumentException> , jeśli został wykryty.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> do śledzenia okresu istnienia operacji asynchronicznych. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3">Asynchroniczny wzorzec oparty na zdarzeniach — przegląd</related>
      </Docs>
    </Member>
  </Members>
</Type>
