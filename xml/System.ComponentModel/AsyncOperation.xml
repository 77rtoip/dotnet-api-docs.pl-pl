<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1507e3ec3ce746db846a48b30d3ca22ba934549a" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52218323" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Śledzi okres istnienia operacji asynchronicznej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas implementacji klasy zgodnie z opisem w [oparte na zdarzeniach asynchronicznych omówienie wzorca](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), konieczne może być śledzić okres istnienia każdej operacji asynchronicznej, wywołana w wystąpieniu klasy. <xref:System.ComponentModel.AsyncOperation> Klasa udostępnia metody śledzenia i raportować postęp zadania asynchronicznego.  
  
 Poniższa lista zawiera sposoby na wykorzystanie <xref:System.ComponentModel.AsyncOperation> obiektu:  
  
-   Aby raporty postęp i wyniki pośrednie do klienta, należy wywołać <xref:System.ComponentModel.AsyncOperation.Post%2A> z kodu asynchronicznego procesu roboczego.  
  
-   Aby wskazać, że Ukończono zadanie asynchroniczne lub Anuluj oczekujące zadanie asynchroniczne, wywołaj <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  
  
 Klasa powinna pojawić się <xref:System.ComponentModel.AsyncOperation> obiekt dla każdego zadania asynchroniczne, wywołując <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> podczas uruchamiania każdego zadania. Aby umożliwić klientowi w celu odróżnienia poszczególnych zadań asynchronicznych, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> przyjmuje parametr unikatowy token dostarczonych przez klienta, która staje się <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwości. Może następnie służyć przez kod klienta do identyfikowania konkretnej asynchroniczne zadanie, które jest wywoływanie zdarzeń o postępie lub zakończeniu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.ComponentModel.AsyncOperation> obiektów do śledzenia okresu istnienia operacji asynchronicznych. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.  
  
 Lista pełny kod znajduje się [porady: implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Listę pełnego kodu formularza klienta, zobacz [porady: implementacja klienta wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Należy upewnić się, implementacje <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> i <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołania są asynchroniczne, tak aby dostawców biblioteki klasy nie powinny być zajmowania z przepełnienie stosu potencjalnych, jeśli zakładają też zachowanie asynchroniczne w konkretnej aplikacji model, który ma miejsce synchroniczne.  
  
Aby uzyskać więcej informacji dotyczących implementowania klas asynchronicznych, zobacz [implementacja wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Porady: implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończenie znajdujących się w operacji asynchronicznej.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy się okres istnienia operacji asynchronicznej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> metody do końca okresu istnienia operacji asynchronicznej. Po ta metoda jest wywoływana dla danego zadania, wywołania odpowiadającymi mu dostawcami <xref:System.ComponentModel.AsyncOperation> zgłosi wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> Wywołano wcześniej dla tego zadania.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">A <see cref="T:System.Threading.SendOrPostCallback" /> obiekt, który opakowuje delegat wywoływany, gdy operacja kończy się.</param>
        <param name="arg">Argument do delegata zawarte w <paramref name="d" /> parametru.</param>
        <summary>Wywołuje delegata w wątku lub kontekstu odpowiednie dla modelu aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperation.Post%2A> Metoda wywołuje delegata, określony przez `arg` parametru bez przerywania okres istnienia operację asynchroniczną.  
  
 Możesz wywołać <xref:System.ComponentModel.AsyncOperation.Post%2A> tak często, jak podczas okresu istnienia operacja asynchroniczna nie został zakończony przez wywołanie metody <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. Metoda umożliwia raportować postęp lub wyników pośrednich do klientów.  
  
 `d` Parametr opakowuje delegata, o których ma być wywoływana gdy aktualizacja o stanie zadania asynchronicznego. <xref:System.ComponentModel.AsyncOperation> Obiektu zapewni, że Twoje obiekt delegowany jest wywoływany w wątku lub kontekstu odpowiednie dla modelu aplikacji. Metoda Opcjonalnie można wywołać zdarzenie, które powiadamia klientów o zmianę stanu, postępu aktualizacji lub nowo dostępne wyniki przyrostowe.  
  
 `arg` Parametru należy używać do przekazania stanu do delegata opakowane przez `d` parametru. Może być odwołaniem do <xref:System.ComponentModel.AsyncOperation>, lub może być <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> obiektu. Może być pożądane do wyprowadzenia klasy z <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> magazynowanie dodatkowy stan.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.ComponentModel.AsyncOperation.Post%2A> metodę raportowania postęp i wyniki przyrostową operacją asynchroniczną. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> Została wywołana metoda wcześniej dla tego zadania.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> jest <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Należy wprowadzić obiektów dziedziczących <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> przepełnienia wywołania asynchronicznego, tak aby klasy biblioteki dostawcy nie trzeba zajmować się potencjalnymi stosu, jeśli zakładają też asynchroniczności, ale modelu określona aplikacja stanie się być synchroniczne.  
  
 <block subset="none" type="note"><para>  
 Aplikacje konsoli nie są synchronizowane wykonywania <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołania. Może to spowodować <see langword="ProgressChanged" /> zdarzenia wywoływane, poza kolejnością. Jeśli chcesz mieć serializacji wykonywania <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołań, wdrożyć i zainstalować <see cref="T:System.Threading.SynchronizationContext" /> klasy.  
  
</para></block>  
  
 Aby uzyskać więcej informacji dotyczących implementowania klas asynchronicznych, zobacz [implementacja wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Porady: implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach</related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">A <see cref="T:System.Threading.SendOrPostCallback" /> obiekt, który opakowuje delegat wywoływany, gdy operacja kończy się.</param>
        <param name="arg">Argument do delegata zawarte w <paramref name="d" /> parametru.</param>
        <summary>Kończy się okres istnienia operacji asynchronicznej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metody do końca okresu istnienia operacji asynchronicznej. Po ta metoda jest wywoływana dla danego zadania, wywołania odpowiadającymi mu dostawcami <xref:System.ComponentModel.AsyncOperation> obiektu zgłosi wyjątek.  
  
 `d` Parametr opakowuje delegata, o których chcesz klasy do wywołania po zakończeniu okresu istnienia zadania podrzędnego, ze względu na ukończenie, anulowanie lub niepowodzenie zadania. <xref:System.ComponentModel.AsyncOperation> Obiektu zapewni, że Twoje obiekt delegowany jest wywoływany w wątku lub kontekstu odpowiednie dla modelu aplikacji. Pełnomocnik może opcjonalnie wywołać zdarzenie, które powiadamia klientów, których okres istnienia zadania asynchroniczne zostało zakończone.  
  
 `arg` Parametr jest używany do przekazania informacji o stanie do delegata uzupełniania `d`. Możesz użyć <xref:System.ComponentModel.AsyncOperation> obiektu lub <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> obiektu jako wartość tego parametru. Alternatywnie, jeśli chcesz udostępnić magazyn dodatkowy stan, można użyć wystąpienia klasy pochodzić od <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metody do końca okresu istnienia operacji asynchronicznej. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> Wywołano wcześniej dla tego zadania.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> jest <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Należy wprowadzić obiektów dziedziczących <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> przepełnienia wywołania asynchronicznego, tak aby klasy biblioteki dostawcy nie trzeba zajmować się potencjalnymi stosu, jeśli zakładają też asynchroniczności, ale modelu określona aplikacja stanie się być synchroniczne. Metoda powinny być interpretowane jako wywołanie "zakończenie okresu istnienia", co oznacza, że implementacja musi wykonać, co to jest odpowiednia dla modelu aplikacji. Na przykład ASP.NET zmniejszy się jego liczbę oczekujących operacji asynchronicznych. To również należy umieścić operacji w stan taki sposób, że kolejnych wywołań do niej zakończy się niepowodzeniem, ponieważ teraz zostało zakończone.  
  
Aby uzyskać więcej informacji dotyczących implementowania klas asynchronicznych, zobacz [implementacja wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Porady: implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Threading.SynchronizationContext" /> obiektu, który został przekazany do konstruktora.</summary>
        <value>
          <see cref="T:System.Threading.SynchronizationContext" /> Obiektu, który został przekazany do konstruktora.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt używany do jednoznacznego identyfikowania operacji asynchronicznej.</summary>
        <value>Obiekt stanu przekazywany do wywołania metody asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli klasa obsługuje wiele metod asynchronicznych lub wielu wywołań pojedynczej metody asynchronicznej, klienci będą wymagać określenie, które zadanie asynchroniczne jest wywoływanie zdarzeń. Twoje `MethodNameAsync` metoda powinny przyjmować parametr typu <xref:System.Object> pełniący identyfikator zadania. Użyjesz tego Identyfikatora zadania po wywołaniu <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, metody i to zostanie skojarzony identyfikator zadania klienta za pomocą określonego wywołania operacji asynchronicznej. To zadanie, identyfikator jest udostępniany implementacji za pośrednictwem <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwości.  
  
> [!CAUTION]
>  Kod klienta należy uważać, aby podać unikatową wartość dla <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwości. Nieunikatowy identyfikatorów zadań może spowodować implementacji do raportowania postępu i inne zdarzenia niepoprawnie. Kodu należy wyszukać identyfikator zadania nie jest unikatowa i podnieść <xref:System.ArgumentException> po wykryciu jednego.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> śledzić okres istnienia operacji asynchronicznych. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3">Asynchroniczny wzorzec oparty na zdarzeniach — przegląd</related>
      </Docs>
    </Member>
  </Members>
</Type>