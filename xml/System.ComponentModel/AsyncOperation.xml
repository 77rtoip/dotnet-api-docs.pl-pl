<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="910a7bfeee1e93c687fc95aeb1e5cd8b49ab6725" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69348243" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8b116-101">Śledzi okres istnienia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-101">Tracks the lifetime of an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b116-102">Podczas implementowania klasy zgodnie z [omówieniem asynchronicznego wzorca opartego](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)na zdarzeniach może być konieczne śledzenie okresu istnienia każdej operacji asynchronicznej wywołanej na wystąpieniu klasy.</span><span class="sxs-lookup"><span data-stu-id="8b116-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="8b116-103"><xref:System.ComponentModel.AsyncOperation> Klasa zapewnia sposoby śledzenia i raportowania postępu zadania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="8b116-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="8b116-104">Na poniższej liście przedstawiono sposoby używania <xref:System.ComponentModel.AsyncOperation> obiektu:</span><span class="sxs-lookup"><span data-stu-id="8b116-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="8b116-105">Aby zgłosić postęp i wyniki pośrednie do klienta, wywołaj <xref:System.ComponentModel.AsyncOperation.Post%2A> z kodu asynchronicznego procesu roboczego.</span><span class="sxs-lookup"><span data-stu-id="8b116-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="8b116-106">Aby wskazać, że zadanie asynchroniczne zostało zakończone, lub aby anulować oczekujące zadanie asynchroniczne, wywołaj <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>polecenie.</span><span class="sxs-lookup"><span data-stu-id="8b116-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="8b116-107">Klasa powinna uzyskać <xref:System.ComponentModel.AsyncOperation> obiekt dla każdego zadania asynchronicznego przez wywołanie <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> , gdy każde zadanie zostanie rozpoczęte.</span><span class="sxs-lookup"><span data-stu-id="8b116-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="8b116-108">Aby umożliwić klientowi odróżnienie oddzielnych zadań asynchronicznych, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> pobiera parametr dla unikatowego tokenu dostarczonego przez klienta, który <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> staje się właściwością.</span><span class="sxs-lookup"><span data-stu-id="8b116-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="8b116-109">Może być następnie używany przez kod klienta do identyfikowania konkretnego zadania asynchronicznego, które zwiększa postęp lub zdarzenia zakończenia.</span><span class="sxs-lookup"><span data-stu-id="8b116-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b116-110">Poniższy przykład kodu demonstruje użycie <xref:System.ComponentModel.AsyncOperation> obiektu do śledzenia okresu istnienia operacji asynchronicznych.</span><span class="sxs-lookup"><span data-stu-id="8b116-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="8b116-111">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="8b116-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="8b116-112">Aby zapoznać się z pełną listą [kodu, zobacz How to: Implementacja składnika obsługującego wzorzec](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)asynchroniczny oparty na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="8b116-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="8b116-113">Aby zapoznać się z pełną listą kodu formularza klienta, [zobacz How to: Implementacja klienta wzorca](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)asynchronicznego opartego na zdarzeniach.</span><span class="sxs-lookup"><span data-stu-id="8b116-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="8b116-114">Implementacje muszą zapewnić <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> asynchroniczne wywołania <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> i, tak aby dostawcy biblioteki klas nie musieli zajmować się potencjalnymi przedziałami stosu, jeśli zakładają asynchroniczne zachowanie w określonej aplikacji model, który ma być synchroniczny.</span><span class="sxs-lookup"><span data-stu-id="8b116-114">Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</span></span>  
  
<span data-ttu-id="8b116-115">Aby uzyskać więcej informacji na temat implementowania klas asynchronicznych, zobacz [implementowanie wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="8b116-115">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="8b116-116">Zarządzana wątkowość — najlepsze rozwiązania</span><span class="sxs-lookup"><span data-stu-id="8b116-116">Managed Threading Best Practices</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="8b116-117">Instrukcje: Implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach</span><span class="sxs-lookup"><span data-stu-id="8b116-117">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b116-118">Kończy operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="8b116-118">Finalizes the asynchronous operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b116-119">Końcowy okres istnienia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-119">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b116-120">Wywołaj <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> metodę, aby zakończyć okres istnienia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-120">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="8b116-121">Po wywołaniu tej metody dla konkretnego zadania wywołania do niego <xref:System.ComponentModel.AsyncOperation> będą zgłaszać wyjątek.</span><span class="sxs-lookup"><span data-stu-id="8b116-121">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b116-122"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />została wcześniej wywołana dla tego zadania.</span><span class="sxs-lookup"><span data-stu-id="8b116-122"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="8b116-123"><see cref="T:System.Threading.SendOrPostCallback" /> Obiekt, który otacza delegata, aby mógł zostać wywołany po zakończeniu operacji.</span><span class="sxs-lookup"><span data-stu-id="8b116-123">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="8b116-124">Argument delegata zawarty w <paramref name="d" /> parametrze.</span><span class="sxs-lookup"><span data-stu-id="8b116-124">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="8b116-125">Wywołuje delegata w wątku lub kontekście odpowiednim dla modelu aplikacji.</span><span class="sxs-lookup"><span data-stu-id="8b116-125">Invokes a delegate on the thread or context appropriate for the application model.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b116-126">Metoda wywołuje delegata określonego `arg` przez parametr bez zakończenia okresu istnienia operacji asynchronicznej. <xref:System.ComponentModel.AsyncOperation.Post%2A></span><span class="sxs-lookup"><span data-stu-id="8b116-126">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="8b116-127"><xref:System.ComponentModel.AsyncOperation.Post%2A> Metodę można wywołać tak często, jak chcesz, gdy okres istnienia operacji asynchronicznej nie został zakończony przez <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>wywołanie metody.</span><span class="sxs-lookup"><span data-stu-id="8b116-127">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="8b116-128">Możesz użyć metody, aby zgłosić postęp lub pośrednie wyniki z powrotem do klientów.</span><span class="sxs-lookup"><span data-stu-id="8b116-128">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="8b116-129">`d` Parametr otacza delegata, który ma zostać wywołany, gdy chcesz opublikować aktualizację o stanie zadania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="8b116-129">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="8b116-130"><xref:System.ComponentModel.AsyncOperation> Obiekt zapewni, że delegat jest wywoływany w wątku lub kontekście odpowiednim dla modelu aplikacji.</span><span class="sxs-lookup"><span data-stu-id="8b116-130">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="8b116-131">Metoda może opcjonalnie zgłosić zdarzenie, które powiadamia klientów o zmianie stanu, aktualizacji postępu lub nowo dostępnych przyrostowych wynikach.</span><span class="sxs-lookup"><span data-stu-id="8b116-131">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="8b116-132">Parametr powinien służyć do przekazywania stanu do delegata opakowanego `d` przez parametr. `arg`</span><span class="sxs-lookup"><span data-stu-id="8b116-132">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="8b116-133">Może to być odwołanie do <xref:System.ComponentModel.AsyncOperation>, lub może <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> być obiektem.</span><span class="sxs-lookup"><span data-stu-id="8b116-133">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="8b116-134">Może być pożądane, aby utworzyć własną klasę z <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> programu w celu zapewnienia dodatkowego magazynu Stanów.</span><span class="sxs-lookup"><span data-stu-id="8b116-134">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b116-135">Poniższy przykład kodu demonstruje użycie <xref:System.ComponentModel.AsyncOperation.Post%2A> metody raportowania postępu i przyrostowych wyników operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-135">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="8b116-136">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="8b116-136">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b116-137"><see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> Metoda została wcześniej wywołana dla tego zadania.</span><span class="sxs-lookup"><span data-stu-id="8b116-137">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b116-138"><paramref name="d" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b116-138"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="8b116-139">Dziedziczenia muszą powodować <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołanie asynchroniczne, tak aby dostawcy biblioteki klas nie musieli zajmować się potencjalnymi przedziałami stosu, jeśli zakładają asynchroniczności, ale konkretny model aplikacji stanie się synchronicznie.</span><span class="sxs-lookup"><span data-stu-id="8b116-139">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="8b116-140">Aplikacje konsolowe nie synchronizują wykonywania <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołań.</span><span class="sxs-lookup"><span data-stu-id="8b116-140">Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls.</span></span> <span data-ttu-id="8b116-141">Może to spowodować <see langword="ProgressChanged" /> , że zdarzenia zostaną wygenerowane poza kolejnością.</span><span class="sxs-lookup"><span data-stu-id="8b116-141">This can cause <see langword="ProgressChanged" /> events to be raised out of order.</span></span> <span data-ttu-id="8b116-142">Jeśli chcesz mieć serializowane wykonywanie <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołań, zaimplementuj i <see cref="T:System.Threading.SynchronizationContext" /> Zainstaluj klasę.</span><span class="sxs-lookup"><span data-stu-id="8b116-142">If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="8b116-143">Aby uzyskać więcej informacji na temat implementowania klas asynchronicznych, zobacz [implementowanie wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="8b116-143">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="8b116-144">Zarządzana wątkowość — najlepsze rozwiązania</span><span class="sxs-lookup"><span data-stu-id="8b116-144">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="8b116-145">Instrukcje: Implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach</span><span class="sxs-lookup"><span data-stu-id="8b116-145">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="8b116-146"><see cref="T:System.Threading.SendOrPostCallback" /> Obiekt, który otacza delegata, aby mógł zostać wywołany po zakończeniu operacji.</span><span class="sxs-lookup"><span data-stu-id="8b116-146">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="8b116-147">Argument delegata zawarty w <paramref name="d" /> parametrze.</span><span class="sxs-lookup"><span data-stu-id="8b116-147">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="8b116-148">Końcowy okres istnienia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-148">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b116-149">Wywołaj <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metodę, aby zakończyć okres istnienia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-149">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="8b116-150">Po wywołaniu tej metody dla określonego zadania, wywołania do odpowiedniego <xref:System.ComponentModel.AsyncOperation> obiektu spowodują wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="8b116-150">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="8b116-151">`d` Parametr otacza delegata, który ma być wywoływany przez klasę po zakończeniu okresu istnienia zadania z powodu ukończenia, anulowania lub niepowodzenia zadania.</span><span class="sxs-lookup"><span data-stu-id="8b116-151">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="8b116-152"><xref:System.ComponentModel.AsyncOperation> Obiekt zapewni, że delegat jest wywoływany w wątku lub kontekście odpowiednim dla modelu aplikacji.</span><span class="sxs-lookup"><span data-stu-id="8b116-152">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="8b116-153">Delegat może opcjonalnie zgłosić zdarzenie, które powiadamia klientów, że okres istnienia zadania asynchronicznego zakończył się.</span><span class="sxs-lookup"><span data-stu-id="8b116-153">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="8b116-154">Parametr służy do przekazywania informacji o stanie do delegata `d`ukończenia. `arg`</span><span class="sxs-lookup"><span data-stu-id="8b116-154">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="8b116-155">Możesz użyć <xref:System.ComponentModel.AsyncOperation> obiektu <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> lub obiektu jako wartości parametru.</span><span class="sxs-lookup"><span data-stu-id="8b116-155">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="8b116-156">Alternatywnie, jeśli chcesz podać dodatkowy magazyn Stanów, możesz użyć wystąpienia klasy pochodnej od <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="8b116-156">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b116-157">Poniższy przykład kodu demonstruje użycie metody, <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> aby zakończyć okres istnienia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-157">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="8b116-158">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="8b116-158">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b116-159"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />została wcześniej wywołana dla tego zadania.</span><span class="sxs-lookup"><span data-stu-id="8b116-159"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b116-160"><paramref name="d" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b116-160"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="8b116-161">Dziedziczenia muszą powodować <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> wywołanie asynchroniczne, tak aby dostawcy biblioteki klas nie musieli zajmować się potencjalnymi przedziałami stosu, jeśli zakładają asynchroniczności, ale konkretny model aplikacji stanie się synchronicznie.</span><span class="sxs-lookup"><span data-stu-id="8b116-161">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span> <span data-ttu-id="8b116-162">Metoda powinna być interpretowana jako "Kończenie wywołania okresu istnienia", co oznacza, że implementacja musi wykonać odpowiednie działania w modelu aplikacji.</span><span class="sxs-lookup"><span data-stu-id="8b116-162">The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</span></span> <span data-ttu-id="8b116-163">Na przykład ASP.NET zmniejszy liczbę zaległych operacji asynchronicznych.</span><span class="sxs-lookup"><span data-stu-id="8b116-163">For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</span></span> <span data-ttu-id="8b116-164">Powinno to również spowodować przeprowadzenie operacji w stanie, w taki sposób, że wszelkie kolejne wywołania do niego zakończą się niepowodzeniem, ponieważ zostały ukończone.</span><span class="sxs-lookup"><span data-stu-id="8b116-164">This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</span></span>  
  
<span data-ttu-id="8b116-165">Aby uzyskać więcej informacji na temat implementowania klas asynchronicznych, zobacz [implementowanie wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="8b116-165">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="8b116-166">Zarządzana wątkowość — najlepsze rozwiązania</span><span class="sxs-lookup"><span data-stu-id="8b116-166">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="8b116-167">Instrukcje: Implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach</span><span class="sxs-lookup"><span data-stu-id="8b116-167">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b116-168"><see cref="T:System.Threading.SynchronizationContext" /> Pobiera obiekt, który został przekazano do konstruktora.</span><span class="sxs-lookup"><span data-stu-id="8b116-168">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></summary>
        <value><span data-ttu-id="8b116-169"><see cref="T:System.Threading.SynchronizationContext" /> Obiekt, który został przesłany do konstruktora.</span><span class="sxs-lookup"><span data-stu-id="8b116-169">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b116-170">Pobiera lub ustawia obiekt używany do jednoznacznej identyfikacji operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-170">Gets or sets an object used to uniquely identify an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="8b116-171">Obiekt stanu przeszedł do wywołania metody asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-171">The state object passed to the asynchronous method invocation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b116-172">Jeśli klasa obsługuje wiele metod asynchronicznych lub wiele wywołań pojedynczej metody asynchronicznej, klienci będą musieli określić, które zadanie asynchroniczne wywołuje zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="8b116-172">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="8b116-173">Metoda powinna przyjmować parametr typu <xref:System.Object> , który będzie pełnić rolę identyfikatora zadania. `MethodNameAsync`</span><span class="sxs-lookup"><span data-stu-id="8b116-173">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="8b116-174">Ten identyfikator zadania będzie używany podczas wywoływania <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>metody, która spowoduje skojarzenie identyfikatora zadania klienta z określonym wywołaniem operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="8b116-174">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="8b116-175">Ten identyfikator zadania jest udostępniany dla implementacji przez <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwość.</span><span class="sxs-lookup"><span data-stu-id="8b116-175">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8b116-176">Kod klienta należy zachować ostrożność, aby zapewnić unikatową wartość <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="8b116-176">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="8b116-177">Identyfikatory zadań inne niż unikatowe mogą spowodować nieprawidłowe Raportowanie postępu i innych zdarzeń przez implementację.</span><span class="sxs-lookup"><span data-stu-id="8b116-177">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="8b116-178">Kod powinien sprawdzać, czy nie unikatowy identyfikator zadania i zgłaszać <xref:System.ArgumentException> , jeśli został wykryty.</span><span class="sxs-lookup"><span data-stu-id="8b116-178">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b116-179">Poniższy przykład kodu demonstruje użycie <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> do śledzenia okresu istnienia operacji asynchronicznych.</span><span class="sxs-lookup"><span data-stu-id="8b116-179">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="8b116-180">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="8b116-180">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="8b116-181">Zarządzana wątkowość — najlepsze rozwiązania</span><span class="sxs-lookup"><span data-stu-id="8b116-181">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3"><span data-ttu-id="8b116-182">Asynchroniczny wzorzec oparty na zdarzeniach — przegląd</span><span class="sxs-lookup"><span data-stu-id="8b116-182">Event-based Asynchronous Pattern Overview</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
