<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8233507e60cc21eeaa9f70d12a2ac70cc9b2b5c4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36705225" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="98d2f-101">Śledzi okres istnienia operacji asynchronicznej.</span>
      <span class="sxs-lookup">
        <span data-stu-id="98d2f-101">Tracks the lifetime of an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98d2f-102">Podczas implementacji klasy zgodnie z [oparty na zdarzeniach asynchroniczny wzorzec — Przegląd](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), konieczne może być śledzić okres istnienia każdej operacji asynchronicznej wywoływane na wystąpienie klasy.</span><span class="sxs-lookup"><span data-stu-id="98d2f-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="98d2f-103"><xref:System.ComponentModel.AsyncOperation> Klasa dostarcza metody do śledzenia i raportowania postępu zadania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="98d2f-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="98d2f-104">Poniższa lista zawiera sposoby używania <xref:System.ComponentModel.AsyncOperation> obiektu:</span><span class="sxs-lookup"><span data-stu-id="98d2f-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="98d2f-105">Aby zgłosić postęp i wyniki pośrednie do klienta, należy wywołać <xref:System.ComponentModel.AsyncOperation.Post%2A> w kodzie asynchroniczne procesu roboczego.</span><span class="sxs-lookup"><span data-stu-id="98d2f-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="98d2f-106">Aby wskazać, że Ukończono zadanie asynchroniczne lub aby anulować oczekujące zadania asynchronicznego wywołania <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="98d2f-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="98d2f-107">Należy uzyskać klasy <xref:System.ComponentModel.AsyncOperation> obiekt dla każdego zadania asynchroniczne, wywołując <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> podczas uruchamiania każdego zadania.</span><span class="sxs-lookup"><span data-stu-id="98d2f-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="98d2f-108">Aby umożliwić klientowi rozróżnienia oddzielne zadania asynchroniczne, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> przyjmuje parametr unikatowy token dostarczony do klienta, która staje się <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="98d2f-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="98d2f-109">Następnie umożliwia przez kod klienta do identyfikowania określonego zadania asynchroniczne, które jest wywoływanie zdarzeń w toku lub zakończenia.</span><span class="sxs-lookup"><span data-stu-id="98d2f-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98d2f-110">Poniższy przykład kodu pokazuje, przy użyciu <xref:System.ComponentModel.AsyncOperation> obiekt, aby śledzić okres istnienia operacji asynchronicznych.</span><span class="sxs-lookup"><span data-stu-id="98d2f-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="98d2f-111">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="98d2f-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="98d2f-112">Listy pełnego kodu, zobacz [porady: implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span><span class="sxs-lookup"><span data-stu-id="98d2f-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="98d2f-113">Listy pełnego kodu formularza klienta, zobacz [porady: implementacja klienta wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="98d2f-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="98d2f-114">
        <para>Implementacje musi zapewnić <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> i <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołania są asynchroniczne, dzięki czemu nie trzeba dotyczą się z klasy dostawców biblioteki przepełnienie stosu potencjalnych, jeśli zakładają asynchroniczne zachowanie w określonej aplikacji Model stanie się odbywać się synchronicznie.  Aby uzyskać więcej informacji o implementacji klasy asynchroniczne Zobacz [Implementacja Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md) asynchroniczny oparty na zdarzeniach.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="98d2f-114">
          <para>Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.  For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="98d2f-115">Kończenie znajdujących się w operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-115">Finalizes the asynchronous operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="98d2f-116">Kończy się okres istnienia operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-116">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98d2f-117">Wywołanie <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> metody do końca okresu istnienia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="98d2f-117">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="98d2f-118">Po ta metoda jest wywoływana dla poszczególnych zadań, wywołań odpowiednie <xref:System.ComponentModel.AsyncOperation> zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="98d2f-118">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="98d2f-119">
            <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> Wywołano wcześniej dla tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-119">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="98d2f-120">A <see cref="T:System.Threading.SendOrPostCallback" /> obiekt, który opakowuje delegata, który ma być wywoływana po zakończeniu operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-120">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="98d2f-121">Argument dla obiekt delegowany zawarte w <c>d</c> parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-121">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98d2f-122">Wywołuje delegata w kontekście odpowiednie dla modelu aplikacji lub wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-122">Invokes a delegate on the thread or context appropriate for the application model.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98d2f-123"><xref:System.ComponentModel.AsyncOperation.Post%2A> Metoda wywołuje delegata określony przez `arg` parametru bez przerywania okres istnienia operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="98d2f-123">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="98d2f-124">Możesz wywołać <xref:System.ComponentModel.AsyncOperation.Post%2A> tak często, jak podczas trwania operacji asynchronicznej nie został zakończony przez wywołanie do metody <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="98d2f-124">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="98d2f-125">Metoda umożliwia raportowanie postępu lub wyników pośrednich wstecz do klientów.</span><span class="sxs-lookup"><span data-stu-id="98d2f-125">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="98d2f-126">`d` Parametr opakowuje delegat ma być wywołane gdy aktualizacja o stanie zadania asynchronicznego.</span><span class="sxs-lookup"><span data-stu-id="98d2f-126">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="98d2f-127"><xref:System.ComponentModel.AsyncOperation> Obiektu zapewni, że pełnomocnika została wywołana w kontekście odpowiednie dla modelu aplikacji lub wątku.</span><span class="sxs-lookup"><span data-stu-id="98d2f-127">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="98d2f-128">Metodę można opcjonalnie podnieść zdarzenie powiadamia klientów o Zmień stan, postęp aktualizacji lub nowo dostępne wyniki przyrostowe.</span><span class="sxs-lookup"><span data-stu-id="98d2f-128">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="98d2f-129">`arg` Parametr powinien być używany do przekazania stanu do delegata opakowane przez `d` parametru.</span><span class="sxs-lookup"><span data-stu-id="98d2f-129">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="98d2f-130">Może być odwołaniem do <xref:System.ComponentModel.AsyncOperation>, lub może być <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> obiektu.</span><span class="sxs-lookup"><span data-stu-id="98d2f-130">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="98d2f-131">Może być pożądane wyprowadzenia klasy z <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> magazynowanie dodatkowy stan.</span><span class="sxs-lookup"><span data-stu-id="98d2f-131">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98d2f-132">Poniższy przykład kodu pokazuje, przy użyciu <xref:System.ComponentModel.AsyncOperation.Post%2A> metodę raportowania postępu i przyrostowych wyniki operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="98d2f-132">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="98d2f-133">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="98d2f-133">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="98d2f-134">
            <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> Została wywołana metoda wcześniej dla tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-134">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="98d2f-135">
            <paramref name="d" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-135">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="98d2f-136">
            <para>Należy wprowadzić dziedziczenia <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołania asynchronicznego tak, aby dostawców biblioteki klasy nie trzeba zajmować się stosu potencjalne przepełnienie Jeśli zakładają asynchrony, ale modelu aplikacji stanie się odbywać się synchronicznie.  <block subset="none" type="note"><para> Aplikacje konsoli nie Synchronizuj wykonywanie <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołania. Może to spowodować <see langword="ProgressChanged" /> zdarzenia, które mają zostać wywołane poza kolejnością. Jeśli chcesz mieć serializacji wykonywanie <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> wywołań, wdrożenia i zainstalować <see cref="T:System.Threading.SynchronizationContext" /> klasy.  </para></block>  Aby uzyskać więcej informacji o implementacji klasy asynchroniczne Zobacz [Implementacja Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md) asynchroniczny oparty na zdarzeniach.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-136">
              <para>Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.  <block subset="none" type="note"><para> Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls. This can cause <see langword="ProgressChanged" /> events to be raised out of order. If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.  </para></block>  For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="98d2f-137">A <see cref="T:System.Threading.SendOrPostCallback" /> obiekt, który opakowuje delegata, który ma być wywoływana po zakończeniu operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-137">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="98d2f-138">Argument dla obiekt delegowany zawarte w <c>d</c> parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-138">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98d2f-139">Kończy się okres istnienia operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-139">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98d2f-140">Wywołanie <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metody do końca okresu istnienia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="98d2f-140">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="98d2f-141">Po ta metoda jest wywoływana dla poszczególnych zadań, wywołań odpowiednie <xref:System.ComponentModel.AsyncOperation> obiektu zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="98d2f-141">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="98d2f-142">`d` Parametr opakowuje delegat ma klasy do wywołania po zakończeniu okresu istnienia zadania z powodu niepowodzenia zadania zakończenia lub anulowania.</span><span class="sxs-lookup"><span data-stu-id="98d2f-142">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="98d2f-143"><xref:System.ComponentModel.AsyncOperation> Obiektu zapewni, że pełnomocnika została wywołana w kontekście odpowiednie dla modelu aplikacji lub wątku.</span><span class="sxs-lookup"><span data-stu-id="98d2f-143">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="98d2f-144">Pełnomocnika można opcjonalnie wywołaj zdarzenie powiadomienia klientów, którzy zakończył się okres istnienia zadanie asynchroniczne.</span><span class="sxs-lookup"><span data-stu-id="98d2f-144">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="98d2f-145">`arg` Parametr jest używany do przekazywania informacji o stanie do delegata ukończenia `d`.</span><span class="sxs-lookup"><span data-stu-id="98d2f-145">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="98d2f-146">Można użyć <xref:System.ComponentModel.AsyncOperation> obiekt, lub <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> obiekt jako wartość parametru.</span><span class="sxs-lookup"><span data-stu-id="98d2f-146">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="98d2f-147">Jeśli chcesz podać dodatkowe stanu magazynu, możesz też użyć wystąpienia klasy pochodzi od <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="98d2f-147">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98d2f-148">Poniższy przykład kodu pokazuje, przy użyciu <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metody do końca okresu istnienia operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="98d2f-148">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="98d2f-149">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="98d2f-149">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="98d2f-150">
            <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> Wywołano wcześniej dla tego zadania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-150">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="98d2f-151">
            <paramref name="d" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-151">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="98d2f-152">
            <para>Należy wprowadzić dziedziczenia <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> wywołania asynchronicznego tak, aby dostawców biblioteki klasy nie trzeba zajmować się stosu potencjalne przepełnienie Jeśli zakładają asynchrony, ale modelu aplikacji stanie się odbywać się synchronicznie. Metoda powinny być rozumiane jako wywołanie "zakończenia okresu istnienia", co oznacza, że implementacja musi wykonać, co to jest odpowiedni dla modelu aplikacji. Na przykład ASP.NET będzie zmniejszyć jego liczbę oczekujących operacji asynchronicznych. To również należy umieścić operacji do stanu tak, aby kolejnych wywołań do niego zakończy się niepowodzeniem, ponieważ zostało teraz zakończone.  Aby uzyskać więcej informacji o implementacji klasy asynchroniczne Zobacz [Implementacja Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md) asynchroniczny oparty na zdarzeniach.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-152">
              <para>Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous. The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model. For instance, ASP.NET will decrement its count of outstanding asynchronous operations. This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.  For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="98d2f-153">Pobiera <see cref="T:System.Threading.SynchronizationContext" /> obiektu, który został przekazany do konstruktora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-153">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="98d2f-154">
            <see cref="T:System.Threading.SynchronizationContext" /> Obiektu, który został przekazany do konstruktora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-154">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="98d2f-155">Pobiera lub ustawia obiekt używany do jednoznacznego identyfikowania operacji asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-155">Gets or sets an object used to uniquely identify an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="98d2f-156">Obiekt stanu przekazywany do wywołania metody asynchronicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98d2f-156">The state object passed to the asynchronous method invocation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98d2f-157">Jeśli klasa obsługuje wiele metod asynchronicznych lub wielu wywołań jednej metody asynchroniczne, klienci będą wymagać możliwość określenia, które zadanie asynchroniczne jest wywoływanie zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="98d2f-157">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="98d2f-158">Twoje `MethodNameAsync` metoda powinna przyjmować parametr typu <xref:System.Object> pełniący funkcję identyfikator zadania.</span><span class="sxs-lookup"><span data-stu-id="98d2f-158">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="98d2f-159">Podczas wywoływania użyje tego zadania o identyfikatorze <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, metody i to zostanie skojarzony identyfikator zadania klienta z określonym wywołaniem operacji asynchronicznej.</span><span class="sxs-lookup"><span data-stu-id="98d2f-159">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="98d2f-160">To zadanie identyfikator ma zostać udostępnione za pośrednictwem implementacji <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="98d2f-160">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98d2f-161">Kod klienta należy zachować ostrożność i Podaj unikatową wartość dla <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="98d2f-161">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="98d2f-162">Nieunikatowy identyfikatorów zadań może spowodować implementacji nieprawidłowo raportuje postęp i inne zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="98d2f-162">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="98d2f-163">Sprawdź identyfikator zadania nie jest unikatowa i podnieść swój kod <xref:System.ArgumentException> po wykryciu jednego.</span><span class="sxs-lookup"><span data-stu-id="98d2f-163">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98d2f-164">Poniższy przykład kodu pokazuje, przy użyciu <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> śledzić okres istnienia operacji asynchronicznych.</span><span class="sxs-lookup"><span data-stu-id="98d2f-164">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="98d2f-165">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="98d2f-165">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
  </Members>
</Type>