<Type Name="IEditableCollectionView" FullName="System.ComponentModel.IEditableCollectionView">
  <Metadata><Meta Name="ms.openlocfilehash" Value="340e44383ae5d205029c5bc5915a7907bfde5869" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69327911" /></Metadata><TypeSignature Language="C#" Value="public interface IEditableCollectionView" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEditableCollectionView" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.IEditableCollectionView" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEditableCollectionView" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEditableCollectionView" />
  <TypeSignature Language="F#" Value="type IEditableCollectionView = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje metody i właściwości, które <see cref="T:System.Windows.Data.CollectionView" /> implementuje, aby zapewnić możliwości edycji dla kolekcji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy widok kolekcji implementuje <xref:System.ComponentModel.IEditableCollectionView> interfejs, można bezpośrednio zmienić kolekcję źródłową, jeśli pozwala ona na wprowadzanie zmian, przy użyciu metod i właściwości, które <xref:System.ComponentModel.IEditableCollectionView> ujawniają, niezależnie od typu kolekcji.  
  
 Typy <xref:System.Windows.Controls.ItemCollection>, <xref:System.Windows.Data.BindingListCollectionView>, i [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] <xref:System.Windows.Data.CollectionView>są typami, które są dostarczane z tą, która dziedziczy z. <xref:System.Windows.Data.ListCollectionView>  Te typy również implementują <xref:System.ComponentModel.IEditableCollectionView>, więc można edytować kolekcję, która używa jednego z tych typów.  <xref:System.Windows.Controls.ItemCollection>w szczególności, jest często używany, ponieważ <xref:System.Windows.Controls.ItemsControl.Items%2A?displayProperty=nameWithType> Właściwość <xref:System.Windows.Controls.ItemCollection>jest.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak dodać element do kolekcji przy użyciu metod, które są zdefiniowane przez <xref:System.ComponentModel.IEditableCollectionView>.  Ta aplikacja wyświetla listę elementów do sprzedaży i daje użytkownikowi możliwość dodawania, edytowania lub usuwania elementu.  Gdy użytkownik doda lub edytuje element, formularz poprosi użytkownika o wprowadzenie nowego elementu.  Jeśli użytkownik prześle formularz, element zostanie przekazany do kolekcji.  Jeśli użytkownik anuluje formularz, element zostanie odrzucony. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public object AddNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.AddNew" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNew () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddNew();" />
      <MemberSignature Language="F#" Value="abstract member AddNew : unit -&gt; obj" Usage="iEditableCollectionView.AddNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dodaje nowy element do kolekcji.</summary>
        <returns>Nowy element, który jest dodawany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> rozpoczyna się od dodania transakcji.  Należy wywołać <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> lub <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> zakończyć dodawanie transakcji. Nowy element jest zawsze wyświetlany w widoku kolekcji. Wszelkie filtrowanie, sortowanie lub grupowanie stosowane do widoku jest stosowane do nowego elementu, gdy <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> jest wywoływana.  
  
   
  
## Examples  
 W poniższym przykładzie zostanie utworzony <xref:System.Windows.Window> komunikat z prośbą o dodanie nowego elementu.  Następnie wywołuje <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> , aby utworzyć nowy obiekt i <xref:System.Windows.FrameworkElement.DataContext%2A> ustawić <xref:System.Windows.Window> dla niego obiekt. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddNew">
      <MemberSignature Language="C#" Value="public bool CanAddNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanAddNew" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanAddNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanAddNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanAddNew { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanAddNew : bool" Usage="System.ComponentModel.IEditableCollectionView.CanAddNew" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy do kolekcji można dodać nowy element.</summary>
        <value><see langword="true" />Jeśli do kolekcji można dodać nowy element, w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView> Można dodać nowy element, jeśli są spełnione następujące warunki:  
  
-   Element można dodać do źródłowej kolekcji.  Na przykład, jeśli kolekcja jest tylko do odczytu, <xref:System.ComponentModel.IEditableCollectionView.CanAddNew%2A> to. `false`  
  
-   <xref:System.ComponentModel.IEditableCollectionView> Można utworzyć obiekt typu, który znajduje się w kolekcji.  Na przykład jeśli kolekcja jest typu <xref:System.Collections.ObjectModel.ObservableCollection%601> <xref:System.ComponentModel.IEditableCollectionView> , musi istnieć możliwość utworzenia obiektu typu `T`.  
  
   
  
## Examples  
 Poniższy przykład sprawdza, czy element można dodać do kolekcji.  Jeśli <xref:System.ComponentModel.IEditableCollectionView.CanAddNew%2A> jest`false`, przykład informuje użytkownika, że nie można dodać elementu.  W przeciwnym razie pokazuje formularz, który będzie monitował użytkownika o dodanie nowego elementu. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections) .  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCancelEdit">
      <MemberSignature Language="C#" Value="public bool CanCancelEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanCancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanCancelEdit { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanCancelEdit : bool" Usage="System.ComponentModel.IEditableCollectionView.CanCancelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy widok kolekcji może odrzucać oczekujące zmiany i przywracać oryginalne wartości edytowanego obiektu.</summary>
        <value><see langword="true" />Jeśli widok kolekcji może odrzucić oczekujące zmiany i przywrócić oryginalne wartości edytowanego obiektu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A>`true` czy widok obsługuje pojęcie "oczekujące zmiany" aktualnie edytowanego elementu.   Na przykład widok kolekcji może zwrócić `true` w przypadku zaimplementowania <xref:System.ComponentModel.IEditableObject>edytowanego elementu lub jeśli widok zawiera informacje o stanie elementu, którego może użyć do wycofania zmian. <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A>`false` czy widok nie może cofnąć zmian w obiekcie.  W takim przypadku należy wywołać <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> , aby spowodować, że widok zakończył edytowanie stanu i zapewnić logikę, aby przywrócić zmiany w edytowanym obiekcie.  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> , aby sprawdzić, czy oryginalne wartości edytowanego elementu mogą zostać przywrócone przed wywołaniem <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.  Jeśli wartości nie mogą zostać przywrócone, musisz podać dodatkową logikę, aby to zrobić.  Jeśli tak, wartości są przywracane podczas przykładowego wywołania <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.   W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelEdit();" />
      <MemberSignature Language="F#" Value="abstract member CancelEdit : unit -&gt; unit" Usage="iEditableCollectionView.CancelEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka edytowanie transakcji i, jeśli to możliwe, przywraca oryginalną wartość do elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>ustawia <xref:System.ComponentModel.IEditableCollectionView.CurrentEditItem%2A> na`null` i powoduje, że widok kolekcji zakończy edytowanie stanu.  Jeśli <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> jest `true` ,<xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> przywraca również oryginalne wartości edytowanego obiektu.  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> , aby sprawdzić, czy oryginalne wartości edytowanego elementu mogą zostać przywrócone przed wywołaniem <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.  Jeśli wartości nie mogą zostać przywrócone, musisz podać dodatkową logikę, aby to zrobić.  Jeśli tak, wartości są przywracane podczas przykładowego wywołania <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelNew">
      <MemberSignature Language="C#" Value="public void CancelNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CancelNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelNew();" />
      <MemberSignature Language="F#" Value="abstract member CancelNew : unit -&gt; unit" Usage="iEditableCollectionView.CancelNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka Dodawanie transakcji i odrzuca oczekujące nowe elementy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład wyświetla formularz monitujący użytkownika o dodanie nowego elementu.  Jeśli użytkownik prześle formularz, przykład wywołuje <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> , aby dodać element do kolekcji.  Jeśli użytkownik anuluje formularz, przykład wywołuje <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> do odrzucenia elementu. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemove">
      <MemberSignature Language="C#" Value="public bool CanRemove { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRemove" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanRemove" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRemove As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRemove { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRemove : bool" Usage="System.ComponentModel.IEditableCollectionView.CanRemove" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy element można usunąć z kolekcji.</summary>
        <value><see langword="true" />Jeśli element można usunąć z kolekcji; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A>jest `false` Jeśli źródłowa kolekcja jest tylko do odczytu.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> , aby sprawdzić, czy element można usunąć z kolekcji.  Jeśli element może zostać usunięty, przykład monituje użytkownika o potwierdzenie akcji i wywołań <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> , jeśli użytkownik kliknie **przycisk tak**. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#removeitem)]
 [!code-vb[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#removeitem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public void CommitEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CommitEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitEdit();" />
      <MemberSignature Language="F#" Value="abstract member CommitEdit : unit -&gt; unit" Usage="iEditableCollectionView.CommitEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka edytowanie transakcji i zapisuje oczekujące zmiany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy formularz, który będzie monitował użytkownika o Edytowanie istniejącego elementu.  Jeśli użytkownik prześle formularz, przykład wywoła <xref:System.ComponentModel.IEditableCollectionView.CommitEdit%2A> żądanie zapisania zmian w kolekcji.  Jeśli użytkownik anuluje formularz, przykład wywołuje <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> , aby odrzucić zmiany. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#EditItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#edititem)]
 [!code-vb[EditingCollectionsSnippets#EditItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#edititem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitNew">
      <MemberSignature Language="C#" Value="public void CommitNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CommitNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitNew();" />
      <MemberSignature Language="F#" Value="abstract member CommitNew : unit -&gt; unit" Usage="iEditableCollectionView.CommitNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka Dodawanie transakcji i zapisuje oczekujący nowy element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszelkie filtrowanie, sortowanie lub grupowanie, które są stosowane do <xref:System.Windows.Data.CollectionView> elementu, jest stosowane do nowej pozycji, gdy <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> jest wywoływana.  
  
   
  
## Examples  
 Poniższy przykład wyświetla formularz monitujący użytkownika o dodanie nowego elementu.  Jeśli użytkownik prześle formularz, przykład wywołuje <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> , aby dodać element do kolekcji.  Jeśli użytkownik anuluje formularz, przykład wywołuje <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> do odrzucenia elementu. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentAddItem">
      <MemberSignature Language="C#" Value="public object CurrentAddItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentAddItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentAddItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentAddItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentAddItem : obj" Usage="System.ComponentModel.IEditableCollectionView.CurrentAddItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera element, który jest dodawany podczas bieżącego dodawania transakcji.</summary>
        <value>Element, który jest dodawany, jeśli <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> jest <see langword="true" />; w przeciwnym <see langword="null" />razie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentEditItem">
      <MemberSignature Language="C#" Value="public object CurrentEditItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentEditItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentEditItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentEditItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentEditItem : obj" Usage="System.ComponentModel.IEditableCollectionView.CurrentEditItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera element z edytowanej kolekcji.</summary>
        <value>Element w kolekcji, który jest edytowany, <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> <see langword="null" />jeśli jest <see langword="true" />; w przeciwnym razie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItem">
      <MemberSignature Language="C#" Value="public void EditItem (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditItem(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EditItem (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EditItem(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member EditItem : obj -&gt; unit" Usage="iEditableCollectionView.EditItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Element do edycji.</param>
        <summary>Rozpoczyna edytowanie transakcji określonego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy formularz, który będzie monitował użytkownika o Edytowanie istniejącego elementu.  Jeśli użytkownik prześle formularz, zmiany zostaną zatwierdzone do kolekcji.  Jeśli użytkownik anuluje formularz, zmiany zostaną odrzucone. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections) .  
  
 [!code-csharp[EditingCollectionsSnippets#EditItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#edititem)]
 [!code-vb[EditingCollectionsSnippets#EditItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#edititem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddingNew">
      <MemberSignature Language="C#" Value="public bool IsAddingNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAddingNew" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAddingNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAddingNew { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAddingNew : bool" Usage="System.ComponentModel.IEditableCollectionView.IsAddingNew" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy Dodawanie transakcji jest w toku.</summary>
        <value><see langword="true" />Jeśli trwa Dodawanie transakcji, w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby rozpocząć dodawanie transakcji, należy wywołać <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> i zakończyć dodawanie transakcji przez wywołanie <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> lub <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEditingItem">
      <MemberSignature Language="C#" Value="public bool IsEditingItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEditingItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEditingItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEditingItem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEditingItem : bool" Usage="System.ComponentModel.IEditableCollectionView.IsEditingItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy edytowanie transakcji jest w toku.</summary>
        <value><see langword="true" />Jeśli edytowanie transakcji jest w toku; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby rozpocząć edycję transakcji, należy <xref:System.ComponentModel.IEditableCollectionView.EditItem%2A> wywołać i zakończyć transakcję, <xref:System.ComponentModel.IEditableCollectionView.CommitEdit%2A> wywołując <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>lub.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewItemPlaceholderPosition">
      <MemberSignature Language="C#" Value="public System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition" />
      <MemberSignature Language="VB.NET" Value="Public Property NewItemPlaceholderPosition As NewItemPlaceholderPosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::NewItemPlaceholderPosition NewItemPlaceholderPosition { System::ComponentModel::NewItemPlaceholderPosition get(); void set(System::ComponentModel::NewItemPlaceholderPosition value); };" />
      <MemberSignature Language="F#" Value="member this.NewItemPlaceholderPosition : System.ComponentModel.NewItemPlaceholderPosition with get, set" Usage="System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.NewItemPlaceholderPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia położenie symbolu zastępczego nowego elementu w widoku kolekcji.</summary>
        <value>Jedna z wartości wyliczenia, która określa położenie symbolu zastępczego nowego elementu w widoku kolekcji.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit" Usage="iEditableCollectionView.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Element do usunięcia.</param>
        <summary>Usuwa określony element z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `item` nie znajduje się w kolekcji, <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> nic nie robi.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> , aby sprawdzić, czy element można usunąć z kolekcji.  Jeśli element może zostać usunięty, przykład monituje użytkownika o potwierdzenie akcji i wywołań <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> , jeśli użytkownik kliknie **przycisk tak**. W przypadku całego przykładu zobacz [Zmiana kolekcji przy użyciu przykładu IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#removeitem)]
 [!code-vb[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#removeitem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit" Usage="iEditableCollectionView.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Pozycja elementu do usunięcia.</param>
        <summary>Usuwa element z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `index`jest względem widoku kolekcji, a nie kolekcji.  Na przykład jeśli kolekcja zawiera 10 elementów, a widok ma wartość <xref:System.ComponentModel.ICollectionView.Filter%2A> , tak aby liczba `index` elementów była wyświetlana, prawidłowe wartości to od 0 do 6.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />jest mniejsza niż 0 lub większa niż liczba elementów w widoku kolekcji.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
