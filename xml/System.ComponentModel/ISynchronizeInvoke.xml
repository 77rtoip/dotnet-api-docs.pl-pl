<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata><Meta Name="ms.openlocfilehash" Value="89029ee04645326089681c9c6cbecc31dd4ae85f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69346759" /></Metadata><TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="26393-101">Zapewnia sposób synchronicznego lub asynchronicznego wykonywania delegata.</span><span class="sxs-lookup"><span data-stu-id="26393-101">Provides a way to synchronously or asynchronously execute a delegate.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26393-102"><xref:System.ComponentModel.ISynchronizeInvoke> Interfejs zapewnia synchroniczną i asynchroniczną komunikację między obiektami o wystąpieniu zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="26393-102">The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</span></span> <span data-ttu-id="26393-103">Obiekty implementujące ten interfejs mogą odbierać powiadomienia o wystąpieniu zdarzenia i mogą reagować na zapytania dotyczące zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="26393-103">Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</span></span> <span data-ttu-id="26393-104">Dzięki temu klienci mogą upewnić się, że jedno żądanie zostało przetworzone przed przesłaniem kolejnego żądania, które zależy od ukończenia pierwszego.</span><span class="sxs-lookup"><span data-stu-id="26393-104">In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</span></span>  
  
 <span data-ttu-id="26393-105"><xref:System.ComponentModel.ISynchronizeInvoke> Klasa zapewnia dwa sposoby wywoływania procesu:</span><span class="sxs-lookup"><span data-stu-id="26393-105">The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:</span></span>  
  
1.  <span data-ttu-id="26393-106">Asynchronicznie, za pomocą <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="26393-106">Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method.</span></span> <span data-ttu-id="26393-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>uruchamia proces, a następnie zwraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="26393-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately.</span></span> <span data-ttu-id="26393-108">Użyj <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> , aby poczekać, aż proces <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> zostanie uruchomiony po zakończeniu.</span><span class="sxs-lookup"><span data-stu-id="26393-108">Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.</span></span>  
  
2.  <span data-ttu-id="26393-109">Synchronicznie, za pomocą <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="26393-109">Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method.</span></span> <span data-ttu-id="26393-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>uruchamia proces, czeka do jego zakończenia, a następnie zwraca.</span><span class="sxs-lookup"><span data-stu-id="26393-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns.</span></span> <span data-ttu-id="26393-111">Użyj <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> , gdy główny wątek formantu różni się od wątku wywołującego, aby skierować wywołanie do właściwego wątku.</span><span class="sxs-lookup"><span data-stu-id="26393-111">Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26393-112">&#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading> <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> <xref:System.Security.Permissions.HostProtectionResource.Synchronization> Atrybut zastosowany do tej klasy ma następującą wartość właściwości:. <xref:System.Security.Permissions.HostProtectionAttribute></span><span class="sxs-lookup"><span data-stu-id="26393-112">The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span></span> <span data-ttu-id="26393-113">Atrybut <xref:System.Security.Permissions.HostProtectionAttribute> nie ma wpływu na aplikacje pulpitu (które typowo są uruchamiane przez dwukrotne kliknięcie ikony, wpisanie polecenia albo wprowadzenie adresu URL w przeglądarce).</span><span class="sxs-lookup"><span data-stu-id="26393-113">The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</span></span> <span data-ttu-id="26393-114">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.HostProtectionAttribute> [atrybuty programowania klasy lub SQL Server i ochrony hosta](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span><span class="sxs-lookup"><span data-stu-id="26393-114">For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="26393-115">A <see cref="T:System.Delegate" /> do metody, która pobiera parametry o tej samej liczbie i typie, które są <paramref name="args" />zawarte w.</span><span class="sxs-lookup"><span data-stu-id="26393-115">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are contained in <paramref name="args" />.</span></span></param>
        <param name="args"><span data-ttu-id="26393-116">Tablica typu <see cref="T:System.Object" /> do przekazania jako argumenty do danej metody.</span><span class="sxs-lookup"><span data-stu-id="26393-116">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method.</span></span> <span data-ttu-id="26393-117">Może to być <see langword="null" /> brak argumentów.</span><span class="sxs-lookup"><span data-stu-id="26393-117">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="26393-118">Asynchronicznie wykonuje delegata w wątku, który utworzył ten obiekt.</span><span class="sxs-lookup"><span data-stu-id="26393-118">Asynchronously executes the delegate on the thread that created this object.</span></span></summary>
        <returns><span data-ttu-id="26393-119"><see cref="T:System.IAsyncResult" /> Interfejs, który reprezentuje operację asynchroniczną rozpoczętą przez wywołanie tej metody.</span><span class="sxs-lookup"><span data-stu-id="26393-119">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26393-120">Delegat jest wykonywany w wątku, który utworzył obiekt, a nie wątku, w którym <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> został wywołany. `method`</span><span class="sxs-lookup"><span data-stu-id="26393-120">The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called.</span></span>  
  
 <span data-ttu-id="26393-121">Delegat jest wywoływany asynchronicznie i ta metoda wraca natychmiast.</span><span class="sxs-lookup"><span data-stu-id="26393-121">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="26393-122">Metodę można wywołać z dowolnego wątku.</span><span class="sxs-lookup"><span data-stu-id="26393-122">You can call this method from any thread.</span></span> <span data-ttu-id="26393-123">Jeśli potrzebujesz wartości zwracanej z procesu rozpoczętego za pomocą tej metody, wywołaj <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> , aby pobrać wartość.</span><span class="sxs-lookup"><span data-stu-id="26393-123">If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.</span></span>  
  
 <span data-ttu-id="26393-124">Jeśli musisz wywołać delegata synchronicznie, użyj <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metody zamiast.</span><span class="sxs-lookup"><span data-stu-id="26393-124">If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="26393-125">Interfejs, który reprezentuje operację asynchroniczną rozpoczętą przez <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />wywołanie. <see cref="T:System.IAsyncResult" /></span><span class="sxs-lookup"><span data-stu-id="26393-125">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span></span></param>
        <summary><span data-ttu-id="26393-126">Czeka, aż proces zostanie uruchomiony przez <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> wywołanie metody Zakończ, a następnie zwróci wartość wygenerowaną przez proces.</span><span class="sxs-lookup"><span data-stu-id="26393-126">Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> completes, and then returns the value generated by the process.</span></span></summary>
        <returns><span data-ttu-id="26393-127">Element <see cref="T:System.Object" /> reprezentujący wartość zwracaną wygenerowaną przez operację asynchroniczną.</span><span class="sxs-lookup"><span data-stu-id="26393-127">An <see cref="T:System.Object" /> that represents the return value generated by the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26393-128">Ta metoda pobiera wartość zwracaną operacji asynchronicznej reprezentowanej przez <xref:System.IAsyncResult> przekazywanie przez ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="26393-128">This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface.</span></span> <span data-ttu-id="26393-129">Jeśli operacja asynchroniczna nie została ukończona, ta metoda będzie oczekiwać do momentu udostępnienia wyniku.</span><span class="sxs-lookup"><span data-stu-id="26393-129">If the asynchronous operation has not completed, this method will wait until the result is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="26393-130">A <see cref="T:System.Delegate" /> , który zawiera metodę do wywołania, w kontekście wątku dla kontrolki.</span><span class="sxs-lookup"><span data-stu-id="26393-130">A <see cref="T:System.Delegate" /> that contains a method to call, in the context of the thread for the control.</span></span></param>
        <param name="args"><span data-ttu-id="26393-131">Tablica typu <see cref="T:System.Object" /> , która reprezentuje argumenty do przekazania do danej metody.</span><span class="sxs-lookup"><span data-stu-id="26393-131">An array of type <see cref="T:System.Object" /> that represents the arguments to pass to the given method.</span></span> <span data-ttu-id="26393-132">Może to być <see langword="null" /> brak argumentów.</span><span class="sxs-lookup"><span data-stu-id="26393-132">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="26393-133">Synchronicznie wykonuje delegata w wątku, który utworzył ten obiekt i kierowanie wywołania do wątku tworzenia.</span><span class="sxs-lookup"><span data-stu-id="26393-133">Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</span></span></summary>
        <returns><span data-ttu-id="26393-134">Reprezentuje wartość zwracaną z wywoływanego delegata lub <see langword="null" /> Jeśli delegat nie ma zwracanej wartości. <see cref="T:System.Object" /></span><span class="sxs-lookup"><span data-stu-id="26393-134">An <see cref="T:System.Object" /> that represents the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26393-135">W przeciwieństwie do <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, ta metoda działa synchronicznie, czyli czeka na zakończenie procesu przed zwróceniem.</span><span class="sxs-lookup"><span data-stu-id="26393-135">Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning.</span></span> <span data-ttu-id="26393-136">Wyjątki wywoływane podczas wywołania są propagowane z powrotem do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="26393-136">Exceptions raised during the call are propagated back to the caller.</span></span>  
  
 <span data-ttu-id="26393-137">Użyj tej metody podczas wywoływania metody z innego wątku w celu skierowania wywołania do właściwego wątku.</span><span class="sxs-lookup"><span data-stu-id="26393-137">Use this method when calling a method from a different thread to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26393-138">Pobiera wartość wskazującą, czy obiekt wywołujący musi <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> wywołać podczas wywoływania obiektu, który implementuje ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="26393-138">Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> when calling an object that implements this interface.</span></span></summary>
        <value><span data-ttu-id="26393-139"><see langword="true" />Jeśli obiekt wywołujący musi <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />wywołać; w <see langword="false" />przeciwnym razie,.</span><span class="sxs-lookup"><span data-stu-id="26393-139"><see langword="true" /> if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26393-140">Ta właściwość określa, czy obiekt wywołujący <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> musi być wywoływany podczas wykonywania wywołań metody do obiektu, który implementuje ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="26393-140">This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface.</span></span> <span data-ttu-id="26393-141">Takie obiekty są powiązane z określonym wątkiem i nie są bezpieczne dla wątków.</span><span class="sxs-lookup"><span data-stu-id="26393-141">Such objects are bound to a specific thread and are not thread-safe.</span></span> <span data-ttu-id="26393-142">Jeśli wywołujesz metodę z innego wątku, musisz użyć <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metody do skierowania wywołania do właściwego wątku.</span><span class="sxs-lookup"><span data-stu-id="26393-142">If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
