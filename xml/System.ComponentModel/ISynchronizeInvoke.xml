<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata><Meta Name="ms.openlocfilehash" Value="89029ee04645326089681c9c6cbecc31dd4ae85f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69346759" /></Metadata><TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zapewnia sposób synchronicznego lub asynchronicznego wykonywania delegata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.ISynchronizeInvoke> Interfejs zapewnia synchroniczną i asynchroniczną komunikację między obiektami o wystąpieniu zdarzenia. Obiekty implementujące ten interfejs mogą odbierać powiadomienia o wystąpieniu zdarzenia i mogą reagować na zapytania dotyczące zdarzenia. Dzięki temu klienci mogą upewnić się, że jedno żądanie zostało przetworzone przed przesłaniem kolejnego żądania, które zależy od ukończenia pierwszego.  
  
 <xref:System.ComponentModel.ISynchronizeInvoke> Klasa zapewnia dwa sposoby wywoływania procesu:  
  
1.  Asynchronicznie, za pomocą <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> metody. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>uruchamia proces, a następnie zwraca natychmiast. Użyj <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> , aby poczekać, aż proces <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> zostanie uruchomiony po zakończeniu.  
  
2.  Synchronicznie, za pomocą <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metody. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>uruchamia proces, czeka do jego zakończenia, a następnie zwraca. Użyj <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> , gdy główny wątek formantu różni się od wątku wywołującego, aby skierować wywołanie do właściwego wątku.  
  
> [!NOTE]
>  &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading> <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> <xref:System.Security.Permissions.HostProtectionResource.Synchronization> Atrybut zastosowany do tej klasy ma następującą wartość właściwości:. <xref:System.Security.Permissions.HostProtectionAttribute> Atrybut <xref:System.Security.Permissions.HostProtectionAttribute> nie ma wpływu na aplikacje pulpitu (które typowo są uruchamiane przez dwukrotne kliknięcie ikony, wpisanie polecenia albo wprowadzenie adresu URL w przeglądarce). Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.HostProtectionAttribute> [atrybuty programowania klasy lub SQL Server i ochrony hosta](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">A <see cref="T:System.Delegate" /> do metody, która pobiera parametry o tej samej liczbie i typie, które są <paramref name="args" />zawarte w.</param>
        <param name="args">Tablica typu <see cref="T:System.Object" /> do przekazania jako argumenty do danej metody. Może to być <see langword="null" /> brak argumentów.</param>
        <summary>Asynchronicznie wykonuje delegata w wątku, który utworzył ten obiekt.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Interfejs, który reprezentuje operację asynchroniczną rozpoczętą przez wywołanie tej metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat jest wykonywany w wątku, który utworzył obiekt, a nie wątku, w którym <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> został wywołany. `method`  
  
 Delegat jest wywoływany asynchronicznie i ta metoda wraca natychmiast. Metodę można wywołać z dowolnego wątku. Jeśli potrzebujesz wartości zwracanej z procesu rozpoczętego za pomocą tej metody, wywołaj <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> , aby pobrać wartość.  
  
 Jeśli musisz wywołać delegata synchronicznie, użyj <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metody zamiast.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Interfejs, który reprezentuje operację asynchroniczną rozpoczętą przez <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />wywołanie. <see cref="T:System.IAsyncResult" /></param>
        <summary>Czeka, aż proces zostanie uruchomiony przez <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> wywołanie metody Zakończ, a następnie zwróci wartość wygenerowaną przez proces.</summary>
        <returns>Element <see cref="T:System.Object" /> reprezentujący wartość zwracaną wygenerowaną przez operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda pobiera wartość zwracaną operacji asynchronicznej reprezentowanej przez <xref:System.IAsyncResult> przekazywanie przez ten interfejs. Jeśli operacja asynchroniczna nie została ukończona, ta metoda będzie oczekiwać do momentu udostępnienia wyniku.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">A <see cref="T:System.Delegate" /> , który zawiera metodę do wywołania, w kontekście wątku dla kontrolki.</param>
        <param name="args">Tablica typu <see cref="T:System.Object" /> , która reprezentuje argumenty do przekazania do danej metody. Może to być <see langword="null" /> brak argumentów.</param>
        <summary>Synchronicznie wykonuje delegata w wątku, który utworzył ten obiekt i kierowanie wywołania do wątku tworzenia.</summary>
        <returns>Reprezentuje wartość zwracaną z wywoływanego delegata lub <see langword="null" /> Jeśli delegat nie ma zwracanej wartości. <see cref="T:System.Object" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie do <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, ta metoda działa synchronicznie, czyli czeka na zakończenie procesu przed zwróceniem. Wyjątki wywoływane podczas wywołania są propagowane z powrotem do obiektu wywołującego.  
  
 Użyj tej metody podczas wywoływania metody z innego wątku w celu skierowania wywołania do właściwego wątku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy obiekt wywołujący musi <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> wywołać podczas wywoływania obiektu, który implementuje ten interfejs.</summary>
        <value><see langword="true" />Jeśli obiekt wywołujący musi <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />wywołać; w <see langword="false" />przeciwnym razie,.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość określa, czy obiekt wywołujący <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> musi być wywoływany podczas wykonywania wywołań metody do obiektu, który implementuje ten interfejs. Takie obiekty są powiązane z określonym wątkiem i nie są bezpieczne dla wątków. Jeśli wywołujesz metodę z innego wątku, musisz użyć <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metody do skierowania wywołania do właściwego wątku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
