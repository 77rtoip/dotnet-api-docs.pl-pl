<Type Name="ITypedList" FullName="System.ComponentModel.ITypedList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="59db5c54ac95878afae28daa97037292a4fb5bd6" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69327635" /></Metadata><TypeSignature Language="C#" Value="public interface ITypedList" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITypedList" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ITypedList" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITypedList" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITypedList" />
  <TypeSignature Language="F#" Value="type ITypedList = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zapewnia funkcję do odnajdywania schematu dla listy możliwej do powiązania, gdzie właściwości dostępne dla powiązania różnią się od właściwości publicznych obiektu, z którym ma zostać utworzone powiązanie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego interfejsu, jeśli na przykład <xref:System.Data.DataView> używasz obiektu, który `customer` reprezentuje tabelę, chcesz powiązać `customer` z właściwościami obiektu, który reprezentuje, <xref:System.Data.DataView>a <xref:System.Data.DataView> nie z właściwościami.  
  
 Ten interfejs nie jest wymagany do obsługi czasu projektowania na liście możliwej do powiązania.  
  
 Powiązanie z danymi może odbywać się w czasie wykonywania lub w projektancie, ale istnieją reguły dla obu tych metod. W czasie wykonywania można powiązać z danymi w dowolnym z następujących elementów:  
  
-   <xref:System.Array>  
  
-   Realizator programu <xref:System.Collections.IList>, pod warunkiem, że realizator ma właściwość <xref:System.Type> <xref:System.Object>silnie wpisaną <xref:System.Collections.IList.Item%2A> Można to osiągnąć, wprowadzając domyślną implementację <xref:System.Collections.IList.Item%2A> prywatną. Jeśli chcesz utworzyć <xref:System.Collections.IList> , która następuje po regułach kolekcji o jednoznacznie określonym typie, należy pochodzić od <xref:System.Collections.CollectionBase>.  
  
-   Realizator elementu <xref:System.ComponentModel.ITypedList>.  
  
 W projektancie można zainicjować powiązanie z <xref:System.ComponentModel.Component> obiektami, wykonując te same reguły.  
  
 Aby uzyskać więcej informacji na temat powiązania ze źródłem danych, zobacz <xref:System.Windows.Forms.Binding?displayProperty=nameWithType> Klasa.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób implementacji <xref:System.ComponentModel.ITypedList> interfejsu. Typ ogólny o nazwie `SortableBindingList` pochodzi <xref:System.ComponentModel.BindingList%601> od klasy i implementuje <xref:System.ComponentModel.ITypedList> interfejs. Aby zapoznać się z pełną listą [kodu, zobacz How to: Zaimplementuj Interfejs](~/docs/framework/winforms/how-to-implement-the-itypedlist-interface.md)ITypedList.  
  
 [!code-csharp[System.ComponentModel.ITypedList#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.ITypedList/CS/SortableBindingList.cs#1)]
 [!code-vb[System.ComponentModel.ITypedList#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.ITypedList/VB/SortableBindingList.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.BindingList`1" />
    <related type="Article" href="https://msdn.microsoft.com/library/834cc15c-50bc-4a8b-a610-313d6a217357">Instrukcje: Implementowanie interfejsu ITypedList</related>
    <related type="Article" href="https://msdn.microsoft.com/library/c3826d8e-ea25-4ad4-a669-45bfb19192aa">Powiązywanie danych formularzy systemu Windows</related>
  </Docs>
  <Members>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptorCollection GetItemProperties (System.ComponentModel.PropertyDescriptor[] listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection GetItemProperties(class System.ComponentModel.PropertyDescriptor[] listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemProperties (listAccessors As PropertyDescriptor()) As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::PropertyDescriptorCollection ^ GetItemProperties(cli::array &lt;System::ComponentModel::PropertyDescriptor ^&gt; ^ listAccessors);" />
      <MemberSignature Language="F#" Value="abstract member GetItemProperties : System.ComponentModel.PropertyDescriptor[] -&gt; System.ComponentModel.PropertyDescriptorCollection" Usage="iTypedList.GetItemProperties listAccessors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.ComponentModel.PropertyDescriptor[]" />
      </Parameters>
      <Docs>
        <param name="listAccessors">Tablica <see cref="T:System.ComponentModel.PropertyDescriptor" /> obiektów do znalezienia w kolekcji jako możliwe do powiązania. Może to być <see langword="null" />.</param>
        <summary><see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> Zwraca wartość reprezentującą właściwości dla każdego elementu użytego do powiązania danych.</summary>
        <returns><see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> Reprezentuje właściwości dla każdego elementu użytego do powiązania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli parametr nie `null`jest, zwykle zawiera deskryptor właściwości, który identyfikuje listę kontenerów do pobrania dla obiektu, który implementuje <xref:System.ComponentModel.ITypedList>. `listAccessors` Na przykład, <xref:System.Data.DataSet> zawierający dwie `myCustomers` tabele i `myOrders`, z relacją między nimi `myCustOrders`. Jeśli <xref:System.Data.DataView> utworzysz obiekt do wyświetlenia <xref:System.ComponentModel.ITypedList.GetItemProperties%2A> `myCustomers`, wywołanie metody z `null` zwraca deskryptory właściwości dla kolumn w `myCustomers`. W efekcie jeden z zwracanych deskryptorów właściwości jest deskryptorem właściwości dla `myCustOrders`, podobnie jak <xref:System.ComponentModel.ITypedList.GetItemProperties%2A> wywołanie metody z tablicą akcesora listy zawierającą deskryptory właściwości dla `myCustOrders` zwraca deskryptory właściwości dla `myOrders`programu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.ComponentModel.ITypedList.GetItemProperties%2A> jak zaimplementować metodę. Aby zapoznać się z pełną listą [kodu, zobacz How to: Zaimplementuj Interfejs](~/docs/framework/winforms/how-to-implement-the-itypedlist-interface.md)ITypedList.  
  
 [!code-csharp[System.ComponentModel.ITypedList#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.ITypedList/CS/SortableBindingList.cs#3)]
 [!code-vb[System.ComponentModel.ITypedList#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.ITypedList/VB/SortableBindingList.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.BindingList`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/834cc15c-50bc-4a8b-a610-313d6a217357">Instrukcje: Implementowanie interfejsu ITypedList</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c3826d8e-ea25-4ad4-a669-45bfb19192aa">Powiązywanie danych formularzy systemu Windows</related>
      </Docs>
    </Member>
    <Member MemberName="GetListName">
      <MemberSignature Language="C#" Value="public string GetListName (System.ComponentModel.PropertyDescriptor[] listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetListName(class System.ComponentModel.PropertyDescriptor[] listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetListName (listAccessors As PropertyDescriptor()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetListName(cli::array &lt;System::ComponentModel::PropertyDescriptor ^&gt; ^ listAccessors);" />
      <MemberSignature Language="F#" Value="abstract member GetListName : System.ComponentModel.PropertyDescriptor[] -&gt; string" Usage="iTypedList.GetListName listAccessors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.ComponentModel.PropertyDescriptor[]" />
      </Parameters>
      <Docs>
        <param name="listAccessors">Tablica <see cref="T:System.ComponentModel.PropertyDescriptor" /> obiektów, dla której zwracana jest nazwa listy. Może to być <see langword="null" />.</param>
        <summary>Zwraca nazwę listy.</summary>
        <returns>Nazwa listy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana tylko w strukturze czasu projektowania i przez przestarzałą <xref:System.Windows.Forms.DataGrid> kontrolkę.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.ComponentModel.ITypedList.GetListName%2A> jak zaimplementować metodę. Aby zapoznać się z pełną listą [kodu, zobacz How to: Zaimplementuj Interfejs](~/docs/framework/winforms/how-to-implement-the-itypedlist-interface.md)ITypedList.  
  
 [!code-csharp[System.ComponentModel.ITypedList#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.ITypedList/CS/SortableBindingList.cs#4)]
 [!code-vb[System.ComponentModel.ITypedList#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.ITypedList/VB/SortableBindingList.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.BindingList`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/834cc15c-50bc-4a8b-a610-313d6a217357">Instrukcje: Implementowanie interfejsu ITypedList</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c3826d8e-ea25-4ad4-a669-45bfb19192aa">Powiązywanie danych formularzy systemu Windows</related>
      </Docs>
    </Member>
  </Members>
</Type>
