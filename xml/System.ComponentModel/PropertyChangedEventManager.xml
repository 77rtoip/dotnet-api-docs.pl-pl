<Type Name="PropertyChangedEventManager" FullName="System.ComponentModel.PropertyChangedEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cbaadc8b341aeedf9f91b32653d7d05a5e4caee4" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69346136" /></Metadata><TypeSignature Language="C#" Value="public class PropertyChangedEventManager : System.Windows.WeakEventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyChangedEventManager extends System.Windows.WeakEventManager" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.PropertyChangedEventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyChangedEventManager&#xA;Inherits WeakEventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyChangedEventManager : System::Windows::WeakEventManager" />
  <TypeSignature Language="F#" Value="type PropertyChangedEventManager = class&#xA;    inherit WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="cf572-101">Zapewnia implementację, aby można było użyć wzorca "słaby detektor zdarzeń" w celu dołączenia detektorów <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> dla zdarzenia. <see cref="T:System.Windows.WeakEventManager" /></span><span class="sxs-lookup"><span data-stu-id="cf572-101">Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf572-102">Aby można było odbiorniki w tym wzorcu, obiekty odbiornika muszą implementować <xref:System.Windows.IWeakEventListener>.</span><span class="sxs-lookup"><span data-stu-id="cf572-102">In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>.</span></span> <span data-ttu-id="cf572-103">Nie trzeba implementować <xref:System.Windows.IWeakEventListener> na klasie, która jest źródłem zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="cf572-103">You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(class System.ComponentModel.INotifyPropertyChanged source, class System.EventHandler`1&lt;class System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddHandler (source As INotifyPropertyChanged, handler As EventHandler(Of PropertyChangedEventArgs), propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddHandler(System::ComponentModel::INotifyPropertyChanged ^ source, EventHandler&lt;System::ComponentModel::PropertyChangedEventArgs ^&gt; ^ handler, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member AddHandler : System.ComponentModel.INotifyPropertyChanged * EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.AddHandler (source, handler, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt;" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="propertyName" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="cf572-104">Obiekt źródłowy, który wywołuje <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="cf572-104">The source object that the raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span></span></param>
        <param name="handler"><span data-ttu-id="cf572-105">Delegat, który obsługuje <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="cf572-105">The delegate that handles the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span></span></param>
        <param name="propertyName"><span data-ttu-id="cf572-106">Nazwa właściwości, która istnieje, na <paramref name="source" /> podstawie której nasłuchuje zmian.</span><span class="sxs-lookup"><span data-stu-id="cf572-106">The name of the property that exists on <paramref name="source" /> upon which to listen for changes.</span></span> <span data-ttu-id="cf572-107">Ustaw na <see cref="F:System.String.Empty" /> , aby wskazać Właściwość "any".</span><span class="sxs-lookup"><span data-stu-id="cf572-107">Set to <see cref="F:System.String.Empty" /> to indicate "any property".</span></span></param>
        <summary><span data-ttu-id="cf572-108">Dodaje określony program obsługi zdarzeń, który jest wywoływany, gdy określone źródło <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> zgłasza zdarzenie dla określonej właściwości.</span><span class="sxs-lookup"><span data-stu-id="cf572-108">Adds the specified event handler, which is called when specified source raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event for the specified property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf572-109">Użyj tej metody, aby określić procedurę obsługi zdarzeń, która ma być używana do subskrybowania <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="cf572-109">Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.</span></span> <span data-ttu-id="cf572-110">W przypadku korzystania z tej metody obiekt odbiornika nie musi implementować <xref:System.Windows.IWeakEventListener> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cf572-110">When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf572-111"><paramref name="handler" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="cf572-111"><paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cf572-112">Skojarzono więcej niż jedną metodę <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="cf572-112">More than one method is associated with <paramref name="handler" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddListener">
      <MemberSignature Language="C#" Value="public static void AddListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddListener(class System.ComponentModel.INotifyPropertyChanged source, class System.Windows.IWeakEventListener listener, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddListener (source As INotifyPropertyChanged, listener As IWeakEventListener, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddListener(System::ComponentModel::INotifyPropertyChanged ^ source, System::Windows::IWeakEventListener ^ listener, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member AddListener : System.ComponentModel.INotifyPropertyChanged * System.Windows.IWeakEventListener * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.AddListener (source, listener, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="cf572-113">Obiekt ze zdarzeniem.</span><span class="sxs-lookup"><span data-stu-id="cf572-113">The object with the event.</span></span></param>
        <param name="listener"><span data-ttu-id="cf572-114">Obiekt, który ma zostać dodany jako odbiornik.</span><span class="sxs-lookup"><span data-stu-id="cf572-114">The object to add as a listener.</span></span></param>
        <param name="propertyName"><span data-ttu-id="cf572-115">Nazwa właściwości, która istnieje, na <paramref name="source" /> podstawie której nasłuchuje zmian.</span><span class="sxs-lookup"><span data-stu-id="cf572-115">The name of the property that exists on <paramref name="source" /> upon which to listen for changes.</span></span> <span data-ttu-id="cf572-116">Ustaw na <see cref="F:System.String.Empty" /> , aby wskazać Właściwość "any".</span><span class="sxs-lookup"><span data-stu-id="cf572-116">Set to <see cref="F:System.String.Empty" /> to indicate "any property".</span></span></param>
        <summary><span data-ttu-id="cf572-117">Dodaje określony odbiornik do listy odbiorników w określonym źródle.</span><span class="sxs-lookup"><span data-stu-id="cf572-117">Adds the specified listener to the list of listeners on the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="propertyChangedEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf572-118">Zwraca nowy obiekt, który zawiera detektory do <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="cf572-118">Returns a new object to contain listeners to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span></span></summary>
        <returns><span data-ttu-id="cf572-119">Nowy obiekt, który będzie zawierać detektory <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> dla zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="cf572-119">A new object to contain listeners to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected override bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="override this.Purge : obj * obj * bool -&gt; bool" Usage="propertyChangedEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="cf572-120">Obiekt źródłowy, z którego mają zostać usunięte wszystkie odbiorniki.</span><span class="sxs-lookup"><span data-stu-id="cf572-120">Source object to remove all listeners from.</span></span></param>
        <param name="data"><span data-ttu-id="cf572-121">Dane do przeczyszczenia.</span><span class="sxs-lookup"><span data-stu-id="cf572-121">The data to purge.</span></span> <span data-ttu-id="cf572-122">Jest to oczekiwane <see cref="T:System.Collections.Specialized.HybridDictionary" />.</span><span class="sxs-lookup"><span data-stu-id="cf572-122">This is expected to be a <see cref="T:System.Collections.Specialized.HybridDictionary" />.</span></span></param>
        <param name="purgeAll"><span data-ttu-id="cf572-123"><see langword="true" /> Ustaw, aby zatrzymać nasłuchiwanie i całkowicie usunąć wszystkie dane.</span><span class="sxs-lookup"><span data-stu-id="cf572-123">Set to <see langword="true" /> to stop listening and to completely remove all data.</span></span></param>
        <summary><span data-ttu-id="cf572-124">Usuwa detektory, które nie są już aktywne z danych dla podanego źródła.</span><span class="sxs-lookup"><span data-stu-id="cf572-124">Removes listeners that are no longer active from the data for the provided source.</span></span></summary>
        <returns><span data-ttu-id="cf572-125"><see langword="true" />Jeśli niektóre wpisy zostały usunięte; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="cf572-125"><see langword="true" /> if some entries were removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(class System.ComponentModel.INotifyPropertyChanged source, class System.EventHandler`1&lt;class System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveHandler (source As INotifyPropertyChanged, handler As EventHandler(Of PropertyChangedEventArgs), propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveHandler(System::ComponentModel::INotifyPropertyChanged ^ source, EventHandler&lt;System::ComponentModel::PropertyChangedEventArgs ^&gt; ^ handler, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member RemoveHandler : System.ComponentModel.INotifyPropertyChanged * EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.RemoveHandler (source, handler, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt;" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="propertyName" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="cf572-126">Obiekt źródłowy, który wywołuje <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="cf572-126">The source object that the raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span></span></param>
        <param name="handler"><span data-ttu-id="cf572-127">Delegat, który obsługuje <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="cf572-127">The delegate that handles the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</span></span></param>
        <param name="propertyName"><span data-ttu-id="cf572-128">Nazwa właściwości, która istnieje, na <paramref name="source" /> której należy przerwać nasłuchiwanie zmian.</span><span class="sxs-lookup"><span data-stu-id="cf572-128">The name of the property that exists on <paramref name="source" /> upon which to stop listening for changes.</span></span> <span data-ttu-id="cf572-129">Ustaw na <see cref="F:System.String.Empty" /> , aby wskazać Właściwość "any".</span><span class="sxs-lookup"><span data-stu-id="cf572-129">Set to <see cref="F:System.String.Empty" /> to indicate "any property".</span></span></param>
        <summary><span data-ttu-id="cf572-130">Usuwa określony program obsługi zdarzeń z określonego źródła.</span><span class="sxs-lookup"><span data-stu-id="cf572-130">Removes the specified event handler from the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf572-131"><paramref name="handler" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="cf572-131"><paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cf572-132">Skojarzono więcej niż jedną metodę <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="cf572-132">More than one method is associated with <paramref name="handler" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveListener">
      <MemberSignature Language="C#" Value="public static void RemoveListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveListener(class System.ComponentModel.INotifyPropertyChanged source, class System.Windows.IWeakEventListener listener, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveListener (source As INotifyPropertyChanged, listener As IWeakEventListener, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveListener(System::ComponentModel::INotifyPropertyChanged ^ source, System::Windows::IWeakEventListener ^ listener, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member RemoveListener : System.ComponentModel.INotifyPropertyChanged * System.Windows.IWeakEventListener * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.RemoveListener (source, listener, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="cf572-133">Obiekt, z którego ma zostać usunięty odbiornik.</span><span class="sxs-lookup"><span data-stu-id="cf572-133">The object to remove the listener from.</span></span></param>
        <param name="listener"><span data-ttu-id="cf572-134">Odbiornik do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="cf572-134">The listener to remove.</span></span></param>
        <param name="propertyName"><span data-ttu-id="cf572-135">Nazwa właściwości, która istnieje, na <paramref name="source" /> której należy przerwać nasłuchiwanie zmian.</span><span class="sxs-lookup"><span data-stu-id="cf572-135">The name of the property that exists on <paramref name="source" /> upon which to stop listening for changes.</span></span> <span data-ttu-id="cf572-136">Ustaw na <see cref="F:System.String.Empty" /> , aby wskazać Właściwość "any".</span><span class="sxs-lookup"><span data-stu-id="cf572-136">Set to <see cref="F:System.String.Empty" /> to indicate "any property".</span></span></param>
        <summary><span data-ttu-id="cf572-137">Usuwa określony odbiornik z listy odbiorników z podanego źródła.</span><span class="sxs-lookup"><span data-stu-id="cf572-137">Removes the specified listener from the list of listeners on the provided source.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="override this.StartListening : obj -&gt; unit" Usage="propertyChangedEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="cf572-138">Obiekt, na którym ma zostać rozpoczęte <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />nasłuchiwanie.</span><span class="sxs-lookup"><span data-stu-id="cf572-138">The object on which to start listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span></span></param>
        <summary><span data-ttu-id="cf572-139">Rozpoczyna nasłuchiwanie <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> zdarzenia dla podanego źródła.</span><span class="sxs-lookup"><span data-stu-id="cf572-139">Begins listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf572-140">Nie określa właściwości; po rozpoczęciu pracy Menedżera zdarzeń dla wszystkich właściwości źródła będzie <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> włączone powiadomienie.</span><span class="sxs-lookup"><span data-stu-id="cf572-140">This does not specify a property; once the event manager is started, all properties on the source will have <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notification enabled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="override this.StopListening : obj -&gt; unit" Usage="propertyChangedEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="cf572-141">Obiekt źródłowy, na którym ma zostać zatrzymane <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />nasłuchiwanie.</span><span class="sxs-lookup"><span data-stu-id="cf572-141">The source object on which to stop listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</span></span></param>
        <summary><span data-ttu-id="cf572-142">Kończy nasłuchiwanie <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> zdarzenia w podanym źródle.</span><span class="sxs-lookup"><span data-stu-id="cf572-142">Stops listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
  </Members>
</Type>
