<Type Name="IListSource" FullName="System.ComponentModel.IListSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dbda5244b3e932b00233133a63e648b9d0521216" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36702691" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IListSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IListSource" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.IListSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface IListSource" />
  <TypeSignature Language="C++ CLI" Value="public interface class IListSource" />
  <TypeSignature Language="F#" Value="type IListSource = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataSourceListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Forms.Design.DataSourceConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia funkcje do obiektu, aby powrócić do listy, która może być powiązana ze źródłem danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj używają tego interfejsu do powrócić do listy, która może być powiązana ze źródłem danych z obiektu, który nie implementuje <xref:System.Collections.IList> samej siebie.  
  
 Powiązanie danych może mieć miejsce, albo w czasie wykonywania, lub w projektancie, ale istnieją reguły dla każdego. W czasie wykonywania można powiązać z danymi w jedną z następujących czynności:  
  
-   <xref:System.Array>  
  
-   Realizator z <xref:System.Collections.IList>, o ile implementujący ma silnie typizowaną <xref:System.Collections.IList.Item%2A> właściwości (to znaczy <xref:System.Type> ma jakąkolwiek inną <xref:System.Object>). Można to zrobić przez domyślną implementację elementu <xref:System.Collections.IList.Item%2A> prywatnych. Jeśli chcesz utworzyć <xref:System.Collections.IList> następujący reguły silnie typizowaną kolekcją, powinien pochodzić od <xref:System.Collections.CollectionBase>.  
  
-   Realizator z <xref:System.ComponentModel.ITypedList>.  
  
 W projektancie, można zainicjować powiązania <xref:System.ComponentModel.Component> obiektów, wykonując te same zasady stosowania.  
  
> [!NOTE]
>  Implementacje z <xref:System.ComponentModel.IListSource> może zwrócić <xref:System.Collections.IList> zawierający kolekcję <xref:System.Collections.IList> obiektów.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.ComponentModel.IListSource> interfejsu. Składnik o nazwie `EmployeeListSource` przedstawia <xref:System.Collections.IList> dla powiązania danych z zastosowaniem <xref:System.ComponentModel.IListSource.GetList%2A> metody. Listy pełnego kodu, zobacz [porady: Implementowanie interfejsu IListSource](~/docs/framework/winforms/how-to-implement-the-ilistsource-interface.md).  
  
 [!code-csharp[System.ComponentModel.IListSource#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.IListSource/CS/EmployeeListSource.cs#1)]
 [!code-vb[System.ComponentModel.IListSource#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.IListSource/VB/EmployeeListSource.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.IListSource" />
    <altmember cref="T:System.ComponentModel.ITypedList" />
    <altmember cref="T:System.ComponentModel.BindingList`1" />
    <altmember cref="T:System.ComponentModel.IBindingList" />
    <altmember cref="T:System.Collections.CollectionBase" />
  </Docs>
  <Members>
    <Member MemberName="ContainsListCollection">
      <MemberSignature Language="C#" Value="public bool ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainsListCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsListCollection : bool" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja jest kolekcją <see cref="T:System.Collections.IList" /> obiektów.</summary>
        <value>
          <see langword="true" /> Jeśli kolekcja jest kolekcją <see cref="T:System.Collections.IList" /> obiekty; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą tej właściwości w <xref:System.Data.DataSet> zwraca `true` ponieważ <xref:System.Data.DataSet> klasa zawiera kolekcją kolekcji. Za pomocą tej właściwości w <xref:System.Data.DataTable> zwraca `false` ponieważ <xref:System.Data.DataTable> klasa zawiera kolekcję obiektów.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.ComponentModel.IListSource> interfejsu. Składnik o nazwie `EmployeeListSource` wskazuje, że zawiera on <xref:System.Collections.IList> dla powiązania danych, przywracając `false` z <xref:System.ComponentModel.IListSource.ContainsListCollection%2A> metody. Listy pełnego kodu, zobacz [porady: Implementowanie interfejsu IListSource](~/docs/framework/winforms/how-to-implement-the-ilistsource-interface.md).  
  
 [!code-csharp[System.ComponentModel.IListSource#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.IListSource/CS/EmployeeListSource.cs#3)]
 [!code-vb[System.ComponentModel.IListSource#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.IListSource/VB/EmployeeListSource.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
        <altmember cref="T:System.ComponentModel.ITypedList" />
        <altmember cref="T:System.ComponentModel.BindingList`1" />
        <altmember cref="T:System.ComponentModel.IBindingList" />
      </Docs>
    </Member>
    <Member MemberName="GetList">
      <MemberSignature Language="C#" Value="public System.Collections.IList GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IListSource.GetList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IList ^ GetList();" />
      <MemberSignature Language="F#" Value="abstract member GetList : unit -&gt; System.Collections.IList" Usage="iListSource.GetList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.Collections.IList" /> który może być powiązana ze źródłem danych z obiektu, który nie implementuje <see cref="T:System.Collections.IList" /> samej siebie.</summary>
        <returns>
          <see cref="T:System.Collections.IList" /> Który może być powiązana ze źródłem danych z obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.ComponentModel.IListSource> interfejsu. Składnik o nazwie `EmployeeListSource` przedstawia <xref:System.Collections.IList> dla powiązania danych z zastosowaniem <xref:System.ComponentModel.IListSource.GetList%2A> metody. Listy pełnego kodu, zobacz [porady: Implementowanie interfejsu IListSource](~/docs/framework/winforms/how-to-implement-the-ilistsource-interface.md).  
  
 [!code-csharp[System.ComponentModel.IListSource#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.IListSource/CS/EmployeeListSource.cs#4)]
 [!code-vb[System.ComponentModel.IListSource#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.IListSource/VB/EmployeeListSource.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
        <altmember cref="T:System.ComponentModel.ITypedList" />
        <altmember cref="T:System.ComponentModel.BindingList`1" />
        <altmember cref="T:System.ComponentModel.IBindingList" />
      </Docs>
    </Member>
  </Members>
</Type>