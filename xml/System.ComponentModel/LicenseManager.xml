<Type Name="LicenseManager" FullName="System.ComponentModel.LicenseManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae5b5c8e7610715122fa900b07e8bc7f9439ad5f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36702483" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LicenseManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LicenseManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicenseManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LicenseManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class LicenseManager sealed" />
  <TypeSignature Language="F#" Value="type LicenseManager = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e8474-101">Udostępnia właściwości i metody, aby dodać licencję do składnika i zarządzania <see cref="T:System.ComponentModel.LicenseProvider" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e8474-101">Provides properties and methods to add a license to a component and to manage a <see cref="T:System.ComponentModel.LicenseProvider" />.</span>
      </span>
      <span data-ttu-id="e8474-102">Klasa ta nie może być dziedziczona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e8474-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-103"><xref:System.ComponentModel.LicenseManager> Klasy udostępnia następujące `static` właściwości: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> i <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</span><span class="sxs-lookup"><span data-stu-id="e8474-103">The <xref:System.ComponentModel.LicenseManager> class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</span></span> <span data-ttu-id="e8474-104">Ta klasa dostarcza także następujące `static` metody: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, i <xref:System.ComponentModel.LicenseManager.Validate%2A>.</span><span class="sxs-lookup"><span data-stu-id="e8474-104">The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.</span></span>  
  
 <span data-ttu-id="e8474-105">Podczas tworzenia składnika, który ma zostać licencji, należy wykonać następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="e8474-105">When you create a component that you want to license, you must do the following:</span></span>  
  
1.  <span data-ttu-id="e8474-106">Określ <xref:System.ComponentModel.LicenseProvider> przez oznaczenie składnika o <xref:System.ComponentModel.LicenseProviderAttribute>.</span><span class="sxs-lookup"><span data-stu-id="e8474-106">Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.</span></span>  
  
2.  <span data-ttu-id="e8474-107">Wywołanie <xref:System.ComponentModel.LicenseManager.Validate%2A> lub <xref:System.ComponentModel.LicenseManager.IsValid%2A> w Konstruktorze składnika.</span><span class="sxs-lookup"><span data-stu-id="e8474-107">Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component.</span></span> <span data-ttu-id="e8474-108"><xref:System.ComponentModel.LicenseManager.Validate%2A> zgłasza wyjątek <xref:System.ComponentModel.LicenseException> podczas próby utworzenia wystąpienia bez prawidłowej licencji.</span><span class="sxs-lookup"><span data-stu-id="e8474-108"><xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license.</span></span> <span data-ttu-id="e8474-109"><xref:System.ComponentModel.LicenseManager.IsValid%2A> nie zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="e8474-109"><xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.</span></span>  
  
3.  <span data-ttu-id="e8474-110">Wywołanie <xref:System.ComponentModel.License.Dispose%2A> na licencji, który został udzielony, gdy składnik jest usunięty lub sfinalizowany.</span><span class="sxs-lookup"><span data-stu-id="e8474-110">Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.</span></span>  
  
 <span data-ttu-id="e8474-111">Aby uzyskać więcej informacji dotyczących licencji, zobacz [porady: składniki licencji i formanty](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span><span class="sxs-lookup"><span data-stu-id="e8474-111">For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8474-112">Poniższy przykład kodu tworzy licencjonowanego formantu przy użyciu <xref:System.ComponentModel.LicenseManager.Validate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e8474-112">The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method.</span></span> <span data-ttu-id="e8474-113">Używa <xref:System.ComponentModel.LicenseProvider> wykonywane przez <xref:System.ComponentModel.LicFileLicenseProvider> klasy.</span><span class="sxs-lookup"><span data-stu-id="e8474-113">It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.</span></span>  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.License" />
    <altmember cref="T:System.ComponentModel.LicenseContext" />
    <altmember cref="T:System.ComponentModel.LicenseException" />
    <altmember cref="T:System.ComponentModel.LicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
    <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateWithContext">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e8474-114">Tworzy wystąpienie typu obiektu z kontekstem licencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-114">Creates an instance of an object type with a license context.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext);" />
      <MemberSignature Language="F#" Value="static member CreateWithContext : Type * System.ComponentModel.LicenseContext -&gt; obj" Usage="System.ComponentModel.LicenseManager.CreateWithContext (type, creationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="e8474-115">A <see cref="T:System.Type" /> reprezentujący typ do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-115">A <see cref="T:System.Type" /> that represents the type to create.</span>
          </span>
        </param>
        <param name="creationContext">
          <span data-ttu-id="e8474-116">A <see cref="T:System.ComponentModel.LicenseContext" /> określający, jeśli używasz wystąpienia licencjonowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-116">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8474-117">Tworzy wystąpienie określonego typu w danym kontekście, w którym możesz użyć wystąpienia licencjonowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-117">Creates an instance of the specified type, given a context in which you can use the licensed instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e8474-118">Wystąpienia określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-118">An instance of the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-119"><xref:System.ComponentModel.LicenseContext> Można określić jako `creationContext` parametr jest używany jako <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> przez cały okres istnienia to <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="e8474-119">The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="e8474-120"><xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> Metody blokuje inne wątki <xref:System.AppDomain> modyfikowanie <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, dzięki czemu <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> będzie działać jako operacją niepodzielną.</span><span class="sxs-lookup"><span data-stu-id="e8474-120">The <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="e8474-121">Aby uzyskać dostęp do elementów członkowskich klasy prywatnych i metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-121">for access to private class members and metadata.</span>
          </span>
          <span data-ttu-id="e8474-122">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-122">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member CreateWithContext : Type * System.ComponentModel.LicenseContext * obj[] -&gt; obj" Usage="System.ComponentModel.LicenseManager.CreateWithContext (type, creationContext, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="e8474-123">A <see cref="T:System.Type" /> reprezentujący typ do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-123">A <see cref="T:System.Type" /> that represents the type to create.</span>
          </span>
        </param>
        <param name="creationContext">
          <span data-ttu-id="e8474-124">A <see cref="T:System.ComponentModel.LicenseContext" /> określający, jeśli używasz wystąpienia licencjonowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-124">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="e8474-125">Tablica typu <see cref="T:System.Object" /> reprezentujący argumenty typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-125">An array of type <see cref="T:System.Object" /> that represents the arguments for the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8474-126">Tworzy wystąpienie określonego typu z określonymi argumentami, w danym kontekście, w którym możesz użyć wystąpienia licencjonowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-126">Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e8474-127">Wystąpienia określonego typu z podanej tablicy argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-127">An instance of the specified type with the given array of arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-128"><xref:System.ComponentModel.LicenseContext> Można określić jako `creationContext` parametr jest używany jako <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> przez cały okres istnienia to <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="e8474-128">The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="e8474-129">Ta metoda umożliwia blokowanie inne wątki <xref:System.AppDomain> modyfikowanie <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, dzięki czemu <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> będzie działać jako operacją niepodzielną.</span><span class="sxs-lookup"><span data-stu-id="e8474-129">This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseContext CurrentContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ComponentModel.LicenseContext CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentContext As LicenseContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseContext ^ CurrentContext { System::ComponentModel::LicenseContext ^ get(); void set(System::ComponentModel::LicenseContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentContext : System.ComponentModel.LicenseContext with get, set" Usage="System.ComponentModel.LicenseManager.CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e8474-130">Pobiera lub ustawia bieżący <see cref="T:System.ComponentModel.LicenseContext" />, który określa, że jeśli używasz obiektu licencjonowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-130">Gets or sets the current <see cref="T:System.ComponentModel.LicenseContext" />, which specifies when you can use the licensed object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e8474-131">A <see cref="T:System.ComponentModel.LicenseContext" /> określający, jeśli używasz obiektu licencjonowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-131">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-132">Gdy użytkownik zażąda prawidłową <xref:System.ComponentModel.License>, użytkownik musi udzielić kontekst, w którym <xref:System.ComponentModel.License> jest nieprawidłowe <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="e8474-132">When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e8474-133"><xref:System.ComponentModel.LicenseContext> Zwróconych przez to właściwość powinien zostać przekazany do wszystkich <xref:System.ComponentModel.LicenseProvider> klasy.</span><span class="sxs-lookup"><span data-stu-id="e8474-133">The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e8474-134">
            <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> Właściwość jest obecnie zablokowany i nie można zmienić.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-134">The <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> property is currently locked and cannot be changed.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsLicensed">
      <MemberSignature Language="C#" Value="public static bool IsLicensed (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLicensed(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLicensed(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsLicensed : Type -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsLicensed type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="e8474-135">
            <see cref="T:System.Type" /> Można znaleźć prawidłowej licencji dla.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-135">The <see cref="T:System.Type" /> to find a valid license for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8474-136">Zwraca, czy dany typ ma prawidłową licencję.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-136">Returns whether the given type has a valid license.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e8474-137">
            <see langword="true" /> Jeśli dany typ jest licencjonowany; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-137">
              <see langword="true" /> if the given type is licensed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsValid">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e8474-138">Określa, czy można przydzielić prawidłowej licencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-138">Determines whether a valid license can be granted.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsValid : Type -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsValid type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="e8474-139">A <see cref="T:System.Type" /> reprezentujący typ obiektu, który żąda <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-139">A <see cref="T:System.Type" /> that represents the type of object that requests the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8474-140">Określa, czy dla określonego typu można przydzielić prawidłowej licencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-140">Determines whether a valid license can be granted for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e8474-141">
            <see langword="true" /> Jeśli można przydzielić prawidłowej licencji; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-141">
              <see langword="true" /> if a valid license can be granted; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-142"><xref:System.ComponentModel.LicenseManager.IsValid%2A> Metoda zwraca `true` podczas tego typu nie ma licencji lub licencja jest udzielana i licencja jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="e8474-142">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the type is either not licensed, or is licensed and the license is valid.</span></span>  
  
 <span data-ttu-id="e8474-143">Ta metoda nie zgłasza <xref:System.ComponentModel.LicenseException> po nie może przydzielić prawidłowej <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="e8474-143">This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="e8474-144"><xref:System.ComponentModel.LicenseManager.Validate%2A> Metoda zgłasza wyjątków.</span><span class="sxs-lookup"><span data-stu-id="e8474-144">The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type, object instance, [out] class System.ComponentModel.License&amp; license) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type, System::Object ^ instance, [Runtime::InteropServices::Out] System::ComponentModel::License ^ % license);" />
      <MemberSignature Language="F#" Value="static member IsValid : Type * obj *  -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsValid (type, instance, license)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="license" Type="System.ComponentModel.License&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="e8474-145">A <see cref="T:System.Type" /> reprezentujący typ obiektu, który żąda licencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-145">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span>
          </span>
        </param>
        <param name="instance">
          <span data-ttu-id="e8474-146">Obiekt określonego typu lub typu pochodnego z określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-146">An object of the specified type or a type derived from the specified type.</span>
          </span>
        </param>
        <param name="license">
          <span data-ttu-id="e8474-147">A <see cref="T:System.ComponentModel.License" /> czyli prawidłowej licencji lub <see langword="null" /> , jeśli nie można przydzielić prawidłowej licencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-147">A <see cref="T:System.ComponentModel.License" /> that is a valid license, or <see langword="null" /> if a valid license cannot be granted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8474-148">Określa, czy dla określonego wystąpienia tego typu można przydzielić prawidłowej licencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-148">Determines whether a valid license can be granted for the specified instance of the type.</span>
          </span>
          <span data-ttu-id="e8474-149">Ta metoda tworzy prawidłowy <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-149">This method creates a valid <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e8474-150">
            <see langword="true" /> Jeśli jest to prawidłowy <see cref="T:System.ComponentModel.License" /> może być przyznany; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-150">
              <see langword="true" /> if a valid <see cref="T:System.ComponentModel.License" /> can be granted; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-151"><xref:System.ComponentModel.LicenseManager.IsValid%2A> Metoda zwraca `true` podczas `type` parametru nie ma licencji lub gdy jest licencjonowana i `license` parametr jest prawidłowy.</span><span class="sxs-lookup"><span data-stu-id="e8474-151">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid.</span></span>  
  
 <span data-ttu-id="e8474-152">Ta metoda nie zgłasza <xref:System.ComponentModel.LicenseException> po nie może przydzielić prawidłowej <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="e8474-152">This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="e8474-153"><xref:System.ComponentModel.LicenseManager.Validate%2A> Metoda zgłasza wyjątków.</span><span class="sxs-lookup"><span data-stu-id="e8474-153">The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.</span></span>  
  
 <span data-ttu-id="e8474-154">Jeśli `license` parametr nie jest `null` po tym wywołaniu obiektu pytania o <xref:System.ComponentModel.License> musi dysponować licencji przez wywołanie metody <xref:System.ComponentModel.License.Dispose%2A> metody, gdy obiekt jest usunięty z lub sfinalizowany.</span><span class="sxs-lookup"><span data-stu-id="e8474-154">If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="LockContext">
      <MemberSignature Language="C#" Value="public static void LockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LockContext(System::Object ^ contextUser);" />
      <MemberSignature Language="F#" Value="static member LockContext : obj -&gt; unit" Usage="System.ComponentModel.LicenseManager.LockContext contextUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser">
          <span data-ttu-id="e8474-155">Obiekt, którego bieżącego kontekstu, które chcesz zablokować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-155">The object whose current context you want to lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8474-156">Zapobiega zmian do bieżącego <see cref="T:System.ComponentModel.LicenseContext" /> danego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-156">Prevents changes being made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of the given object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-157">Użyj <xref:System.ComponentModel.LicenseContext> uzyskanie <xref:System.ComponentModel.License> obiektu.</span><span class="sxs-lookup"><span data-stu-id="e8474-157">Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object.</span></span> <span data-ttu-id="e8474-158">Ta metoda umożliwia zablokowanie <xref:System.ComponentModel.LicenseContext>, zapobieganie <xref:System.ComponentModel.License> z pobierania.</span><span class="sxs-lookup"><span data-stu-id="e8474-158">This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e8474-159">Kontekst jest już zablokowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-159">The context is already locked.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnlockContext">
      <MemberSignature Language="C#" Value="public static void UnlockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnlockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnlockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnlockContext(System::Object ^ contextUser);" />
      <MemberSignature Language="F#" Value="static member UnlockContext : obj -&gt; unit" Usage="System.ComponentModel.LicenseManager.UnlockContext contextUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser">
          <span data-ttu-id="e8474-160">Obiekt, którego bieżącego kontekstu chcesz odblokować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-160">The object whose current context you want to unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8474-161">Zezwala na zmiany wprowadzane do bieżącego <see cref="T:System.ComponentModel.LicenseContext" /> danego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-161">Allows changes to be made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of the given object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-162">Użyj <xref:System.ComponentModel.LicenseContext> uzyskanie <xref:System.ComponentModel.License> obiektu.</span><span class="sxs-lookup"><span data-stu-id="e8474-162">Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object.</span></span> <span data-ttu-id="e8474-163">Ta metoda umożliwia odblokowanie <xref:System.ComponentModel.LicenseContext>, dzięki czemu <xref:System.ComponentModel.License> do pobrania.</span><span class="sxs-lookup"><span data-stu-id="e8474-163">This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e8474-164">
            <paramref name="contextUser" /> reprezentuje użytkownika innego niż określona w poprzednie wywołanie <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-164">
              <paramref name="contextUser" /> represents a different user than the one specified in a previous call to <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UsageMode">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseUsageMode UsageMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ComponentModel.LicenseUsageMode UsageMode" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.UsageMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UsageMode As LicenseUsageMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseUsageMode UsageMode { System::ComponentModel::LicenseUsageMode get(); };" />
      <MemberSignature Language="F#" Value="member this.UsageMode : System.ComponentModel.LicenseUsageMode" Usage="System.ComponentModel.LicenseManager.UsageMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseUsageMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e8474-165">Pobiera <see cref="T:System.ComponentModel.LicenseUsageMode" /> określającej, jeśli używasz obiektu licencjonowane dla <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-165">Gets the <see cref="T:System.ComponentModel.LicenseUsageMode" /> which specifies when you can use the licensed object for the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e8474-166">Jeden z <see cref="T:System.ComponentModel.LicenseUsageMode" /> wartości, jak określono w <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-166">One of the <see cref="T:System.ComponentModel.LicenseUsageMode" /> values, as specified in the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-167">Jeśli ta właściwość nie może znaleźć <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> wartości, zwraca <xref:System.ComponentModel.LicenseUsageMode.Runtime>.</span><span class="sxs-lookup"><span data-stu-id="e8474-167">If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode.Runtime>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.LicenseManager.CurrentContext" />
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e8474-168">Określa, czy można udzielić licencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-168">Determines whether a license can be granted.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Validate(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Validate : Type -&gt; unit" Usage="System.ComponentModel.LicenseManager.Validate type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="e8474-169">A <see cref="T:System.Type" /> reprezentujący typ obiektu, który żąda licencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-169">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8474-170">Określa, czy może zostać przydzielony licencji dla określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-170">Determines whether a license can be granted for the specified type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-171">Ta metoda zgłasza <xref:System.ComponentModel.LicenseException> po prawidłowym <xref:System.ComponentModel.License> nie można udzielić.</span><span class="sxs-lookup"><span data-stu-id="e8474-171">This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted.</span></span> <span data-ttu-id="e8474-172"><xref:System.ComponentModel.LicenseManager.IsValid%2A> — Metoda nie zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="e8474-172">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException">
          <span data-ttu-id="e8474-173">A <see cref="T:System.ComponentModel.License" /> nie można udzielić.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-173">A <see cref="T:System.ComponentModel.License" /> cannot be granted.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.License Validate (Type type, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.License Validate(class System.Type type, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::License ^ Validate(Type ^ type, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Validate : Type * obj -&gt; System.ComponentModel.License" Usage="System.ComponentModel.LicenseManager.Validate (type, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="e8474-174">A <see cref="T:System.Type" /> reprezentujący typ obiektu, który żąda licencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-174">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span>
          </span>
        </param>
        <param name="instance">
          <span data-ttu-id="e8474-175">
            <see cref="T:System.Object" /> Określonego typu lub typu pochodnego od określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-175">An <see cref="T:System.Object" /> of the specified type or a type derived from the specified type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e8474-176">Określa, czy licencji można otrzymać wystąpienia określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-176">Determines whether a license can be granted for the instance of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e8474-177">Prawidłowy <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-177">A valid <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8474-178">Ta metoda zgłasza <xref:System.ComponentModel.LicenseException> po prawidłowym <xref:System.ComponentModel.License> nie można udzielić.</span><span class="sxs-lookup"><span data-stu-id="e8474-178">This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted.</span></span> <span data-ttu-id="e8474-179"><xref:System.ComponentModel.LicenseManager.IsValid%2A> — Metoda nie zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="e8474-179">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.</span></span>  
  
 <span data-ttu-id="e8474-180">Wszystkie obiekty z prośbą o <xref:System.ComponentModel.License> musi dysponować licencji przez wywołanie metody <xref:System.ComponentModel.License.Dispose%2A> metody, gdy obiekt jest usunięty z lub sfinalizowany.</span><span class="sxs-lookup"><span data-stu-id="e8474-180">All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException">
          <span data-ttu-id="e8474-181">Typ jest licencjonowana, ale <see cref="T:System.ComponentModel.License" /> nie można udzielić.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8474-181">The type is licensed, but a <see cref="T:System.ComponentModel.License" /> cannot be granted.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
  </Members>
</Type>