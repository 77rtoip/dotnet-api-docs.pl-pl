<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeConverter.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac529784c7bb8db50596e86f55caea973624c84e3d4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29784c7bb8db50596e86f55caea973624c84e3d4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.</source>
          <target state="translated">Umożliwia ujednoliconego konwersji typów wartości do innych typów, a także do uzyskiwania dostępu do wartości domyślnych i podrzędnych.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The most common type of converter is one that converts to and from a text representation.</source>
          <target state="translated">Najczęściej spotykanym typem konwertera jest taki, który konwertuje do i z reprezentacji tekstowej.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The type converter for a class is bound to the class with a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>.</source>
          <target state="translated">Konwerter typu klasy jest powiązany z klasy z <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Unless this attribute is overridden, all classes that inherit from this class use the same type converter as the base class.</source>
          <target state="translated">Jeśli ten atrybut nie zostanie zastąpiona, wszystkie klasy, które dziedziczą z tej klasy używania tego samego typu jako klasy podstawowej.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For general type system purposes, do not access a type converter directly.</source>
          <target state="translated">Do celów system typu ogólnego nie konwertera typów bezpośredni dostęp.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Instead, access the appropriate converter by using <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>.</source>
          <target state="translated">Zamiast tego dostępu przy użyciu odpowiedniego konwertera <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For more information, see the code examples provided.</source>
          <target state="translated">Aby uzyskać więcej informacji zobacz przykładowy kod podany.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> For XAML purposes, a XAML processor searches for the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> directly, instead of going through <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Uwaga<ept id="p1">**</ept> do celów XAML procesora XAML wyszukuje <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> bezpośrednio, zamiast pośrednictwa <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For cases where you do want a <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> instance from code, or where you create a shared instance in WPF resources, it is acceptable to construct it directly without referencing <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> or other reflection and type system support.</source>
          <target state="translated">W przypadkach, w którym ma <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> wystąpienia z kodu lub której utworzono wystąpienie udostępnione na platformie WPF zasobów, jest możliwość utworzenia go bezpośrednio, bez odwołania do <ph id="ph2">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> lub inny system odbicie i typ obsługi.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Classes derived from <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> are often referenced as part of how a XAML processor converts an attribute or initialization text value from markup (which is inherently a string) and generates an object for a run-time representation.</source>
          <target state="translated">Klasy wyprowadzone z <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> są często określany jako część jak procesor XAML konwertuje wartość atrybutu lub inicjowania znaczników (która jest z założenia ciągu) i generuje obiekt do reprezentacji czasu wykonywania.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Custom type authors that intend to support a type conversion behavior for XAML typically implement a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class that supports their own unique <ph id="ph2">`ConvertFrom`</ph> behavior from a string.</source>
          <target state="translated">Implementowanie autorów typu niestandardowego, które mają być zwykle obsługuje zachowanie konwersji typu dla XAML <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> klasy, która obsługuje własny unikatowy <ph id="ph2">`ConvertFrom`</ph> zachowanie z ciągu.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>This behavior enables type conversion from the string provided as a XAML attribute value and provides a XAML processor with the support needed to create an object from the string, so that the object can be produced in a parsed object graph.</source>
          <target state="translated">To zachowanie umożliwia konwersji typu z podanego ciągu jako wartość atrybutu XAML i udostępnia procesora XAML z obsługą potrzebne do utworzenia obiektu z ciągu, tak, aby obiekt można wyprodukować na wykresie obiektu przeanalizowany.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Custom types or members of custom types are indicated by applying <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> to the definitions, with the attribute referencing the custom <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> implementation.</source>
          <target state="translated">Niestandardowe typy lub elementy członkowskie typów niestandardowych są wskazywane przez stosowanie <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> do definicji z atrybutem odwołuje się do niestandardowego <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For more information, see <bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>typy konwerterów dla przeglądu XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The following code example shows how to create an instance of a type converter and bind it to a class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak utworzyć wystąpienia typu konwertera i powiązać go z klasy.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The class implementing the converter, <ph id="ph1">`MyClassConverter`</ph>, must inherit from the <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">Klasa implementacji konwertera <ph id="ph1">`MyClassConverter`</ph>, musi dziedziczyć z <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>When you have a property that has an enumeration, check to see whether an enumeration value is valid before setting the property.</source>
          <target state="translated">Gdy właściwość, która ma wyliczenie, sprawdź, czy przed ustawieniem właściwości jest prawidłową wartością wyliczenia.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The next code example requires that an enumeration called <ph id="ph1">`MyPropertyEnum`</ph> has been declared.</source>
          <target state="translated">W następnym przykładzie kodu wymaga, aby wyliczenie o nazwie <ph id="ph1">`MyPropertyEnum`</ph> został zadeklarowany.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Another common type converter usage is to convert an object to a string.</source>
          <target state="translated">Inny wspólnej użycia konwertera typu jest aby przekonwertować obiekt na ciąg.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>The following code example prints out the name of the <ph id="ph1">&lt;xref:System.Drawing.Color&gt;</ph> stored in the variable <ph id="ph2">`c`</ph>.</source>
          <target state="translated">Poniższy przykład kodu do drukowania nazwę <ph id="ph1">&lt;xref:System.Drawing.Color&gt;</ph> przechowywana w zmiennej <ph id="ph2">`c`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>You can also use a type converter to convert a value from its name, as shown in the next code example.</source>
          <target state="translated">Umożliwia także konwertera typów można przekonwertować wartości na podstawie jego nazwy, jak pokazano w następnym przykładzie kodu.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>In the following code example, you can use a type converter to print out the set of standard values that the object supports.</source>
          <target state="translated">W poniższym przykładzie kodu można użyć konwertera typów wydrukować zestaw standardowych wartości, które obsługuje obiektu.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Inherit from <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> to implement your own conversion requirements.</source>
          <target state="translated">Dziedzicz <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> do zaimplementowania wymagań konwersji.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>When you inherit from this class, you can override the following methods:</source>
          <target state="translated">Przy dziedziczeniu z tej klasy można zastąpić następujących metod:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>To support custom type conversion, override the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)" /&gt;</ph>, and <ph id="ph4">&lt;see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)" /&gt;</ph> methods.</source>
          <target state="translated">Aby obsługiwać konwersji typu niestandardowego, należy zastąpić <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)" /&gt;</ph>, i <ph id="ph4">&lt;see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>To convert types that must re-create the object to change its value, override the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported" /&gt;</ph> methods.</source>
          <target state="translated">Aby dokonać konwersji typów, które należy ponownie utworzyć obiekt, aby zmienić wartość, należy zastąpić <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> i <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>To convert types that support properties, override the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetPropertiesSupported" /&gt;</ph> methods.</source>
          <target state="translated">Aby dokonać konwersji typów, które obsługują właściwości, należy zastąpić <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> i <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetPropertiesSupported" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>If the class you are converting does not have properties, and you need to implement properties, you can use the <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /&gt;</ph> class as a base for implementing the property descriptors.</source>
          <target state="translated">Jeśli klasa konwertowania nie ma właściwości oraz należy wdrożyć właściwości, można użyć <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /&gt;</ph> klasy jako podstawa Implementowanie deskryptorów właściwości.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /&gt;</ph>, you must override the <ph id="ph2">&lt;see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /&gt;</ph> methods.</source>
          <target state="translated">Przy dziedziczeniu z <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /&gt;</ph>, konieczne jest przesłonięcie <ph id="ph2">&lt;see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /&gt;</ph> i <ph id="ph3">&lt;see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>To convert types that support standard values, override the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> methods.</source>
          <target state="translated">Aby dokonać konwersji typów, które obsługują standard wartości, należy zastąpić <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported" /&gt;</ph> i <ph id="ph4">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Your derived type might be marked as <ph id="ph1">&lt;see langword="internal" /&gt;</ph> or <ph id="ph2">&lt;see langword="private" /&gt;</ph>, but an instance of your type can be created with the <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph> class.</source>
          <target state="translated">Z typu pochodnego może być oznaczona jako <ph id="ph1">&lt;see langword="internal" /&gt;</ph> lub <ph id="ph2">&lt;see langword="private" /&gt;</ph>, ale wystąpienie tego typu mogą być tworzone za pomocą <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeDescriptor" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Do not write insecure code by assuming the caller is trusted.</source>
          <target state="translated">Nie zapisuj niezabezpieczonego kodu przejmując wywołującego jest zaufany.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>Assume instead that callers might create instances of your type in partial trust.</source>
          <target state="translated">Załóżmy zamiast wywołań może utworzyć wystąpienia danego typu w częściowej relacji zaufania.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.TypeConverter">
          <source>For more information about type converters for general (non-XAML) purposes, see <bpt id="p1">[</bpt>How to: Implement a Type Converter<ept id="p1">](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56)</ept> or <bpt id="p2">[</bpt>Generalized Type Conversion<ept id="p2">](http://msdn.microsoft.com/library/49253ae6-7657-4810-82ab-1176a6feeada)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat typy konwerterów dla celów ogólne (z systemem innym niż XAML), zobacz <bpt id="p1">[</bpt>porady: implementacji konwertera typów<ept id="p1">](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56)</ept> lub <bpt id="p2">[</bpt>uogólniony konwersji typu<ept id="p2">](http://msdn.microsoft.com/library/49253ae6-7657-4810-82ab-1176a6feeada)</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether this converter can convert an object of one type to the type of this converter.</source>
          <target state="translated">Zwraca czy ten konwerter można przekonwertować jednego typu obiektu na typ tego konwertera.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type you want to convert from.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący chcesz konwertować z typu.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source>Returns whether this converter can convert an object of the given type to the type of this converter.</source>
          <target state="translated">Zwraca czy ten konwerter można konwertować obiekt danego typu na typ tego konwertera.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this converter can perform the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ten konwerter można dokonać konwersji; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
          <source>It never returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Nigdy nie zwraca <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type you want to convert from.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący chcesz konwertować z typu.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</source>
          <target state="translated">Zwraca czy ten konwerter można konwertować obiekt danego typu na typ tego konwertera, używając określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this converter can perform the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ten konwerter można dokonać konwersji; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>As implemented in this class, this method returns <ph id="ph1">`false`</ph>, unless <ph id="ph2">`sourceType`</ph> is an <ph id="ph3">&lt;xref:System.ComponentModel.Design.Serialization.InstanceDescriptor&gt;</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zwraca <ph id="ph1">`false`</ph>, chyba że <ph id="ph2">`sourceType`</ph> jest <ph id="ph3">&lt;xref:System.ComponentModel.Design.Serialization.InstanceDescriptor&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Override this method to provide your own conversion requirements.</source>
          <target state="translated">Przesłonić tę metodę w celu zapewnienia wymagań konwersji.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">&lt;see langword="null" /&gt;</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether this converter can convert the object to the specified type.</source>
          <target state="translated">Zwraca czy ten konwerter można przekonwertować obiektu określonego typu.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type you want to convert to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący typ, który ma zostać przekonwertowany na.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
          <source>Returns whether this converter can convert the object to the specified type.</source>
          <target state="translated">Zwraca czy ten konwerter można przekonwertować obiektu określonego typu.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this converter can perform the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ten konwerter można dokonać konwersji; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
          <source>If <ph id="ph1">`destinationType`</ph> is a string, the default implementation of <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A&gt;</ph> always returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`destinationType`</ph> jest ciągiem Domyślna implementacja <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A&gt;</ph> zawsze zwraca <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type you want to convert to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący typ, który ma zostać przekonwertowany na.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Returns whether this converter can convert the object to the specified type, using the specified context.</source>
          <target state="translated">Zwraca czy ten konwerter przekonwertować obiekt na określony typ, używając określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this converter can perform the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli ten konwerter można dokonać konwersji; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>If <ph id="ph1">`destinationType`</ph> is a string, the default implementation of <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A&gt;</ph> always returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`destinationType`</ph> jest ciągiem Domyślna implementacja <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A&gt;</ph> zawsze zwraca <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
          <source>Override this method to provide your own conversion requirements.</source>
          <target state="translated">Przesłonić tę metodę w celu zapewnienia wymagań konwersji.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the given value to the type of this converter.</source>
          <target state="translated">Konwertuje podaną wartość do typu tego konwertera.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
          <source>Converts the given value to the type of this converter.</source>
          <target state="translated">Konwertuje podaną wartość do typu tego konwertera.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący wartość przekonwertowana.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> to use as the current culture.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> Do użycia jako bieżącej kultury.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Converts the given object to the type of this converter, using the specified context and culture information.</source>
          <target state="translated">Konwertuje dany obiekt typu tego konwertera, przy użyciu określonego kontekstu i kultury informacji.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący wartość przekonwertowana.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Custom type authors that intend to support a type conversion behavior for XAML typically implement a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class that supports <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> behavior from a string.</source>
          <target state="translated">Implementowanie autorów typu niestandardowego, które mają być zwykle obsługuje zachowanie konwersji typu dla XAML <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> klasy, która obsługuje <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> zachowanie z ciągu.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>This behavior enables type conversion from the string provided as a XAML attribute value and provides a XAML processor with the support needed to create an object from the string, so that the object can be produced in a parsed object graph.</source>
          <target state="translated">To zachowanie umożliwia konwersji typu z podanego ciągu jako wartość atrybutu XAML i udostępnia procesora XAML z obsługą potrzebne do utworzenia obiektu z ciągu, tak, aby obiekt można wyprodukować na wykresie obiektu przeanalizowany.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Custom types or members of custom types are indicated by applying <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> to the definitions, with the attribute referencing the custom <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> implementation.</source>
          <target state="translated">Niestandardowe typy lub elementy członkowskie typów niestandardowych są wskazywane przez stosowanie <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> do definicji z atrybutem odwołuje się do niestandardowego <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>For XAML purposes, you do not typically provide branching implementations based on <ph id="ph1">`culture`</ph>.</source>
          <target state="translated">Do celów XAML, zwykle niepodania rozgałęziania implementacje na podstawie <ph id="ph1">`culture`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>This is because XAML is precompiled in a development environment context, and culture-specific information for runtime XAML is not relevant for XAML type conversion.</source>
          <target state="translated">To dlatego XAML została wstępnie skompilowana w kontekście środowisko rozwoju i informacje specyficzne dla kultury dla środowiska uruchomieniowego języka XAML nie jest odpowiednia do konwersji typu XAML.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>typy konwerterów dla przeglądu XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Override this method to provide your own conversion requirements.</source>
          <target state="translated">Przesłonić tę metodę w celu zapewnienia wymagań konwersji.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">&lt;see langword="null" /&gt;</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>For implementation patterns for type converters that are used to support XAML and custom types, see <bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</source>
          <target state="translated">Implementacja wzorców konwertery typu, które są używane do obsługi języka XAML i niestandardowe typy, zobacz <bpt id="p1">[</bpt>typy konwerterów dla przeglądu XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the value to a type of this converter, using the invariant culture.</source>
          <target state="translated">Konwertuje wartość na typ tego konwertera, użyta Niezmienna kultura.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>Converts the given string to the type of this converter, using the invariant culture.</source>
          <target state="translated">Konwertuje dany ciąg znaków na typ tego konwertera, użyta Niezmienna kultura.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący skonwertowany tekstu.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Domyślna implementacja zawsze zwraca <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Converts the given string to the type of this converter, using the invariant culture and the specified context.</source>
          <target state="translated">Konwertuje dany ciąg znaków na typ tego konwertera, przy użyciu Niezmienna kultura i określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący skonwertowany tekstu.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An exception is raised if the string cannot be converted into the appropriate object.</source>
          <target state="translated">Zgłoszony wyjątek, jeśli nie można przekonwertować ciągu odpowiedni obiekt.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Domyślna implementacja zawsze zwraca <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the specified text to an object.</source>
          <target state="translated">Konwertuje określony tekst do obiektu.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>The text representation of the object to convert.</source>
          <target state="translated">Reprezentacja tekstowa typu obiektu do skonwertowania.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>Converts the specified text to an object.</source>
          <target state="translated">Konwertuje określony tekst do obiektu.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący skonwertowany tekstu.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Domyślna implementacja zawsze zwraca <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>For an example of this function, see the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">Na przykład tej funkcji, zobacz <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
          <source>The string cannot be converted into the appropriate object.</source>
          <target state="translated">Nie można przekonwertować ciągu na odpowiedni obiekt.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Converts the given text to an object, using the specified context.</source>
          <target state="translated">Konwertuje tekst danego obiektu, przy użyciu określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący skonwertowany tekstu.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>An exception is raised if the string cannot be converted into the appropriate object.</source>
          <target state="translated">Zgłoszony wyjątek, jeśli nie można przekonwertować ciągu odpowiedni obiekt.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Domyślna implementacja zawsze zwraca <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is passed, the current culture is assumed.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;see langword="null" /&gt;</ph> jest przekazywany bieżącego zakłada, że kultury.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>Converts the given text to an object, using the specified context and culture information.</source>
          <target state="translated">Konwertuje tekst danego obiektu, przy użyciu określonego kontekstu i kultury informacji.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted text.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący skonwertowany tekstu.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>An exception is raised if the string cannot be converted into the appropriate object.</source>
          <target state="translated">Zgłoszony wyjątek, jeśli nie można przekonwertować ciągu odpowiedni obiekt.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Domyślna implementacja zawsze zwraca <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the given value object to the specified type.</source>
          <target state="translated">Konwertuje obiekt podanej wartości do określonego typu.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to convert the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Przekonwertować <bpt id="p1">&lt;c&gt;</bpt>wartość<ept id="p1">&lt;/c&gt;</ept> parametru.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>Converts the given value object to the specified type, using the arguments.</source>
          <target state="translated">Konwertuje obiekt podanej wartości na określony typ, na podstawie podanych argumentów.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący wartość przekonwertowana.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The most common type to convert to and from is a string object.</source>
          <target state="translated">Najczęściej spotykanym typem do przekonwertowania do i z jest obiektem ciągu.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>This implementation calls <ph id="ph1">&lt;xref:System.Object.ToString%2A&gt;</ph> on the object, if the object is valid and if the destination type is a string.</source>
          <target state="translated">Ta implementacja wywołuje <ph id="ph1">&lt;xref:System.Object.ToString%2A&gt;</ph> dla obiektu, jeśli obiekt jest prawidłowy, a jeśli typ docelowy jest ciągiem.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;paramref name="destinationType" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destinationType" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is passed, the current culture is assumed.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;see langword="null" /&gt;</ph> jest przekazywany bieżącego zakłada, że kultury.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to convert the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> Przekonwertować <bpt id="p1">&lt;c&gt;</bpt>wartość<ept id="p1">&lt;/c&gt;</ept> parametru.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Converts the given value object to the specified type, using the specified context and culture information.</source>
          <target state="translated">Konwertuje obiekt podanej wartości na określony typ przy użyciu określonego kontekstu i kultury informacji.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący wartość przekonwertowana.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The most common types to convert are to and from a string object.</source>
          <target state="translated">Najbardziej typowych przekonwertować są do i z obiektem ciągu.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>This implementation calls <ph id="ph1">&lt;xref:System.Object.ToString%2A&gt;</ph> on the object if the object is valid and if the destination type is a string.</source>
          <target state="translated">Ta implementacja wywołuje <ph id="ph1">&lt;xref:System.Object.ToString%2A&gt;</ph> obiektu, jeśli obiekt jest prawidłowy, a jeśli typ docelowy jest ciągiem.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Custom type authors that intend to support a type conversion behavior for XAML typically implement a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class that supports <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> behavior from a string.</source>
          <target state="translated">Implementowanie autorów typu niestandardowego, które mają być zwykle obsługuje zachowanie konwersji typu dla XAML <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> klasy, która obsługuje <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> zachowanie z ciągu.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>These type converters might also implement <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A&gt;</ph> to support serialization back to XAML.</source>
          <target state="translated">Te typy konwerterów może także implementować <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A&gt;</ph> do obsługi serializacji do języka XAML.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Some XAML serialization scenarios cannot be adequately addressed with <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> alone.</source>
          <target state="translated">Niektóre scenariusze serializacji XAML nie może być zaadresowana odpowiednio z <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> samodzielnie.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>In these cases, it may be necessary to also define a <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> that handles the serialization cases that would otherwise be handled by <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A&gt;</ph>.</source>
          <target state="translated">W takich przypadkach może być konieczne również definiować <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> obsługująca przypadków serializacji, które mogłyby w przeciwnym razie będą obsługiwane przez <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;paramref name="destinationType" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destinationType" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>Override this method to provide your own conversion requirements.</source>
          <target state="translated">Przesłonić tę metodę w celu zapewnienia wymagań konwersji.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
          <source>For implementation patterns for type converters that are used to support XAML and custom types, see <bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</source>
          <target state="translated">Implementacja wzorców konwertery typu, które są używane do obsługi języka XAML i niestandardowe typy, zobacz <bpt id="p1">[</bpt>typy konwerterów dla przeglądu XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the specified value to a culture-invariant string representation.</source>
          <target state="translated">Konwertuje określoną wartość do reprezentacji w postaci ciągu niezmiennej kultury.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>Converts the specified value to a culture-invariant string representation.</source>
          <target state="translated">Konwertuje określoną wartość do reprezentacji w postaci ciągu niezmiennej kultury.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> reprezentujący wartość przekonwertowana.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>The <ph id="ph1">`context`</ph> parameter can be used to extract additional information about the environment from which this converter is being invoked.</source>
          <target state="translated"><ph id="ph1">`context`</ph> Parametru można wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>This can be <ph id="ph1">`null`</ph>, so always check.</source>
          <target state="translated">Może to być <ph id="ph1">`null`</ph>, dlatego należy zawsze sprawdzić.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">W zależności od implementacji programu formatującego wartości może być możliwe do przekazania do programu formatującego wartości do ponownego utworzenia wystąpienia obiektu zwracany ciąg.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Converts the specified value to a culture-invariant string representation, using the specified context.</source>
          <target state="translated">Konwertuje określoną wartość do reprezentacji w postaci ciągu niezmiennej kultury, używając określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents the converted value.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> reprezentujący wartość przekonwertowana.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">W zależności od implementacji programu formatującego wartości może być możliwe do przekazania do programu formatującego wartości do ponownego utworzenia wystąpienia obiektu zwracany ciąg.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Converts the specified value to a string representation.</source>
          <target state="translated">Konwertuje określoną wartość do reprezentacji w postaci ciągu.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>Converts the specified value to a string representation.</source>
          <target state="translated">Konwertuje określoną wartość do reprezentacji w postaci ciągu.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący wartość przekonwertowana.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">W zależności od implementacji programu formatującego wartości może być możliwe do przekazania do programu formatującego wartości do ponownego utworzenia wystąpienia obiektu zwracany ciąg.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>For an example on this function, see the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">Na przykład dla tej funkcji, zobacz <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Converts the given value to a string representation, using the given context.</source>
          <target state="translated">Konwertuje podaną wartość do reprezentacji ciągu w danym kontekście.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący wartość przekonwertowana.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">W zależności od implementacji programu formatującego wartości może być możliwe do przekazania do programu formatującego wartości do ponownego utworzenia wystąpienia obiektu zwracany ciąg.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is passed, the current culture is assumed.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;see langword="null" /&gt;</ph> jest przekazywany bieżącego zakłada, że kultury.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Converts the given value to a string representation, using the specified context and culture information.</source>
          <target state="translated">Konwertuje podaną wartość do reprezentacji w postaci ciągu, przy użyciu określonego kontekstu i kultury informacji.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the converted value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący wartość przekonwertowana.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</source>
          <target state="translated">W zależności od implementacji programu formatującego wartości może być możliwe do przekazania do programu formatującego wartości do ponownego utworzenia wystąpienia obiektu zwracany ciąg.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
          <source>The conversion cannot be performed.</source>
          <target state="translated">Nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Re-creates an <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> given a set of property values for the object.</source>
          <target state="translated">Ponownie tworzy <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> mając do dyspozycji zestaw wartości właściwości dla obiektu.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> that represents a dictionary of new property values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> Reprezentujący słownika nowej wartości właściwości.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>Re-creates an <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> given a set of property values for the object.</source>
          <target state="translated">Ponownie tworzy <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> mając do dyspozycji zestaw wartości właściwości dla obiektu.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> representing the given <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the object cannot be created.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący danego <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>, lub <ph id="ph3">&lt;see langword="null" /&gt;</ph> Jeśli nie można utworzyć obiektu.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>This method always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ta metoda zawsze zwraca <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>Use this method for objects that are immutable, but for which you want to provide changeable properties.</source>
          <target state="translated">Użyj tej metody dla obiektów, które są niezmienne, ale dla których chcesz podać modyfikowalne właściwości.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
          <source>The dictionary provided by the <ph id="ph1">`propertyValues`</ph> parameter has a series of name/value pairs, one for each property returned from <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.GetProperties%2A&gt;</ph>.</source>
          <target state="translated">Słownik dostarczonych przez <ph id="ph1">`propertyValues`</ph> parametru serii par nazwa/wartość, po jednej dla każdej właściwości zwrócił z <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.GetProperties%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> of new property values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> Nowej wartości właściwości.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Creates an instance of the type that this <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> is associated with, using the specified context, given a set of property values for the object.</source>
          <target state="translated">Tworzy wystąpienie tego typu, który to <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> jest skojarzony, używając określonego kontekstu, mając do dyspozycji zestaw wartości właściwości dla obiektu.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> representing the given <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the object cannot be created.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Reprezentujący danego <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>, lub <ph id="ph3">&lt;see langword="null" /&gt;</ph> Jeśli nie można utworzyć obiektu.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>This method always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ta metoda zawsze zwraca <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Use this method for objects that are immutable, but for which you want to provide changeable properties.</source>
          <target state="translated">Użyj tej metody dla obiektów, które są niezmienne, ale dla których chcesz podać modyfikowalne właściwości.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Override this method if the type you want to convert must re-create the object to change its value.</source>
          <target state="translated">Przesłania tę metodę, jeśli typ, który ma zostać przekonwertowany, należy ponownie utworzyć obiekt, aby zmienić jego wartość.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">&lt;see langword="null" /&gt;</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
          <source>The dictionary provided by the <ph id="ph1">&lt;paramref name="propertyValues" /&gt;</ph> parameter has a series of name/value pairs, one for each property returned from <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph>.</source>
          <target state="translated">Słownik dostarczonych przez <ph id="ph1">&lt;paramref name="propertyValues" /&gt;</ph> parametru serii par nazwa/wartość, po jednej dla każdej właściwości zwrócił z <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the object is not available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Aby dokonać konwersji, lub <ph id="ph2">&lt;see langword="null" /&gt;</ph> Jeśli obiekt nie jest dostępna.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
          <source>Returns an exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Zwraca wyjątek, aby zgłosić, gdy nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that represents the exception to throw when a conversion cannot be performed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> Reprezentujący wyjątek, który ma zostać zgłoszony, gdy nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
          <source>Automatically thrown by this method.</source>
          <target state="translated">Automatycznie generowane przez tę metodę.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to convert, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the object is not available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Aby dokonać konwersji, lub <ph id="ph2">&lt;see langword="null" /&gt;</ph> Jeśli obiekt nie jest dostępna.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the type the conversion was trying to convert to.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> reprezentujący typ konwersji próbował przekonwertować.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>Returns an exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Zwraca wyjątek, aby zgłosić, gdy nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that represents the exception to throw when a conversion cannot be performed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> Reprezentujący wyjątek, który ma zostać zgłoszony, gdy nie można wykonać konwersji.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <source>Automatically thrown by this method.</source>
          <target state="translated">Automatycznie generowane przez tę metodę.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether changing a value on this object requires a call to the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> method to create a new value.</source>
          <target state="translated">Zwraca czy zmiana wartości dla tego obiektu wymaga wywołania <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> metodę w celu utworzenia nowej wartości.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
          <source>Returns whether changing a value on this object requires a call to the <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> method to create a new value.</source>
          <target state="translated">Zwraca czy zmiana wartości dla tego obiektu wymaga wywołania <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> metodę w celu utworzenia nowej wartości.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if changing a property on this object requires a call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> to create a new value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli zmiana właściwości tego obiektu wymaga wywołania <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> do utworzenia nowej wartości; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns whether changing a value on this object requires a call to <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> to create a new value, using the specified context.</source>
          <target state="translated">Zwraca czy zmiana wartości dla tego obiektu wymaga wywołania <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> do utworzenia nowej wartości, używając określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if changing a property on this object requires a call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> to create a new value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli zmiana właściwości tego obiektu wymaga wywołania <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /&gt;</ph> do utworzenia nowej wartości; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert must re-create the object to change its value.</source>
          <target state="translated">Przesłania tę metodę, jeśli typ, który ma zostać przekonwertowany, należy ponownie utworzyć obiekt, aby zmienić jego wartość.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">&lt;see langword="null" /&gt;</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns a collection of properties for the type of array specified by the value parameter.</source>
          <target state="translated">Zwraca kolekcję właściwości dla typu tablicy określona przez parametr wartości.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that specifies the type of array for which to get properties.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Określająca typ tablicy, dla którego można pobrać właściwości.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>Returns a collection of properties for the type of array specified by the value parameter.</source>
          <target state="translated">Zwraca kolekcję właściwości dla typu tablicy określona przez parametr wartości.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> with the properties that are exposed for this data type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there are no properties.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> z właściwościami, które są dostępne dla tego typu danych lub <ph id="ph2">&lt;see langword="null" /&gt;</ph> , jeśli nie ma żadnych właściwości.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>By default, a type does not return properties.</source>
          <target state="translated">Domyślnie typu nie zwraca właściwości.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
          <source>An easy implementation of this method can call <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.GetProperties%2A&gt;</ph> for the correct data type.</source>
          <target state="translated">Łatwe implementacja tej metody można wywołać <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.GetProperties%2A&gt;</ph> dla typu danych.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that specifies the type of array for which to get properties.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Określająca typ tablicy, dla którego można pobrać właściwości.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Returns a collection of properties for the type of array specified by the value parameter, using the specified context.</source>
          <target state="translated">Zwraca kolekcję właściwości dla typu tablicy określonej przez parametr wartość, przy użyciu określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> with the properties that are exposed for this data type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there are no properties.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> z właściwościami, które są dostępne dla tego typu danych lub <ph id="ph2">&lt;see langword="null" /&gt;</ph> , jeśli nie ma żadnych właściwości.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>By default, a type does not return properties.</source>
          <target state="translated">Domyślnie typu nie zwraca właściwości.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An easy implementation of this method can call <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.GetProperties%2A&gt;</ph> for the correct data type.</source>
          <target state="translated">Łatwe implementacja tej metody można wywołać <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor.GetProperties%2A&gt;</ph> dla typu danych.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that specifies the type of array for which to get properties.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Określająca typ tablicy, dla którego można pobrać właściwości.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> that is used as a filter.</source>
          <target state="translated">Tablica typu <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> używany jako filtr.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</source>
          <target state="translated">Zwraca kolekcję właściwości dla typu tablicy określonej przez parametr wartość, przy użyciu określonego kontekstu i atrybutów.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> with the properties that are exposed for this data type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there are no properties.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> z właściwościami, które są dostępne dla tego typu danych lub <ph id="ph2">&lt;see langword="null" /&gt;</ph> , jeśli nie ma żadnych właściwości.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>As implemented in this class, this method always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Override this method if the type you want to convert supports properties.</source>
          <target state="translated">Należy przesłonić tę metodę, jeśli typ, który ma zostać przekonwertowany obsługuje właściwości.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">&lt;see langword="null" /&gt;</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>The attributes array is used to filter the array.</source>
          <target state="translated">Tablica atrybutów jest używane do filtrowania tablicy.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>The attributes can have a mix of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph> objects.</source>
          <target state="translated">Atrybuty mogą mieć różnych <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> i <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>Filtering is defined by the following rules:</source>
          <target state="translated">Filtrowanie jest definiowana za pomocą następujących reguł:</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is treated as a wildcard; it matches a property that has the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> in its set of attributes.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> jest traktowana jako symbol wieloznaczny; odpowiada właściwości, która ma <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> w jego zestaw atrybutów.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>If a property does not have an <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> of the same class, the property is not included in the returned array.</source>
          <target state="translated">Jeśli nie ma właściwości <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> do tej samej klasy właściwość nie jest objęta zwróconej tablicy.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>If the attribute is an instance of <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>, the property must be an exact match or it is not included in the returned array.</source>
          <target state="translated">Jeśli ten atrybut jest wystąpieniem <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>, właściwość musi być w pełni zgodne lub nie znajduje się w zwracanych tablicy.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
          <source>If an <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> instance is specified and it is the default property, it is included in the returned array even if there is no instance of the <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph> in the property.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> zostało określone wystąpienie i jest właściwością domyślną, nawet jeśli dostępny jest wystąpienie nie zostało uwzględnione w zwracana tablica <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph> we właściwości.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether this object supports properties.</source>
          <target state="translated">Zwraca czy ten obiekt obsługuje właściwości.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
          <source>Returns whether this object supports properties.</source>
          <target state="translated">Zwraca czy ten obiekt obsługuje właściwości.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> should be called to find the properties of this object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> powinien być wywołany, aby znaleźć właściwości tego obiektu; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns whether this object supports properties, using the specified context.</source>
          <target state="translated">Zwraca czy ten obiekt obsługuje właściwości, używając określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> should be called to find the properties of this object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /&gt;</ph> powinien być wywołany, aby znaleźć właściwości tego obiektu; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert supports properties.</source>
          <target state="translated">Należy przesłonić tę metodę, jeśli typ, który ma zostać przekonwertowany obsługuje właściwości.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">&lt;see langword="null" /&gt;</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns a collection of standard values for the data type this type converter is designed for.</source>
          <target state="translated">Zwraca kolekcję wartości domyślnych dla tego konwertera typu jest przeznaczona dla typu danych.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues">
          <source>Returns a collection of standard values from the default context for the data type this type converter is designed for.</source>
          <target state="translated">Zwraca kolekcję standardowego wartości z kontekstu domyślnego dla tego konwertera typu jest przeznaczona dla typu danych.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> containing a standard set of valid values, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the data type does not support a standard set of values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> zawierający zestaw standardowych prawidłowych wartości lub <ph id="ph2">&lt;see langword="null" /&gt;</ph> Jeśli typem danych nie obsługuje standardowy zestaw wartości.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValues">
          <source>As implemented in this class, this method always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu, który może służyć do wyodrębnienia dodatkowe informacje o środowisku, w którym ten konwerter jest wywoływany.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter or properties of this parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Tego parametru lub właściwości tego parametru może być <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</source>
          <target state="translated">Zwraca kolekcję wartości domyślnych dla tego konwertera typu zaprojektowano pod kątem udostępniane z kontekstem formatu typu danych.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> that holds a standard set of valid values, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the data type does not support a standard set of values.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> który zawiera standardowy zestaw prawidłowych wartości lub <ph id="ph2">&lt;see langword="null" /&gt;</ph> Jeśli typem danych nie obsługuje standardowy zestaw wartości.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>, this method always returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Zgodnie z implementacją w <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>, ta metoda zawsze zwraca <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>For an example on this function, see the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">Na przykład dla tej funkcji, zobacz <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert supports standard values.</source>
          <target state="translated">Należy przesłonić tę metodę, jeśli typ, który ma zostać przekonwertowany obsługuje standardowe wartości.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether the collection of standard values returned from <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exclusive list.</source>
          <target state="translated">Zwraca czy zbiór standardowych wartości zwracanych z <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> jest wyłączną listę.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>Returns whether the collection of standard values returned from <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exclusive list.</source>
          <target state="translated">Zwraca czy zbiór standardowych wartości zwracanych z <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> jest wyłączną listę.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> returned from <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exhaustive list of possible values; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if other values are possible.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> zwrócony z <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> jest to pełna lista możliwych wartości. <ph id="ph4">&lt;see langword="false" /&gt;</ph> Jeśli inne wartości są możliwe.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>If the list is exclusive, such as in an enumeration data type, then no other values are valid.</source>
          <target state="translated">Jeśli lista jest wyłączne, takie jak typ danych wyliczenia, nie inne wartości są prawidłowe.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>If the list is not exclusive, then other valid values might exist in addition to the list of standard values that the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> method provides.</source>
          <target state="translated">Jeśli lista nie jest wyłączne, inne prawidłowe wartości może istnieć oprócz listy standard wartości <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> udostępnia metody.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
          <source>If the values are exclusive, the list returned by <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> should not allow these values to be edited.</source>
          <target state="translated">Jeśli wartości są wyłączne, listy zwrócony przez <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> nie należy zezwalać te wartości można edytowane.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns whether the collection of standard values returned from <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exclusive list of possible values, using the specified context.</source>
          <target state="translated">Zwraca czy zbiór standardowych wartości zwracanych z <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> jest wyłączną listę możliwych wartości, używając określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> returned from <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> is an exhaustive list of possible values; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if other values are possible.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /&gt;</ph> zwrócony z <ph id="ph3">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> jest to pełna lista możliwych wartości. <ph id="ph4">&lt;see langword="false" /&gt;</ph> Jeśli inne wartości są możliwe.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>If the list is exclusive, such as in an enumeration data type, then no other values are valid.</source>
          <target state="translated">Jeśli lista jest wyłączne, takie jak typ danych wyliczenia, nie inne wartości są prawidłowe.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>If the list is not exclusive, then other valid values might exist in addition to the list of standard values that the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> method provides.</source>
          <target state="translated">Jeśli lista nie jest wyłączne, inne prawidłowe wartości może istnieć oprócz listy standard wartości <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> udostępnia metody.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>If the values are exclusive, the list returned by <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> should not allow these values to be edited.</source>
          <target state="translated">Jeśli wartości są wyłączne, listy zwrócony przez <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.GetStandardValues%2A&gt;</ph> nie należy zezwalać te wartości można edytowane.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert supports standard values.</source>
          <target state="translated">Należy przesłonić tę metodę, jeśli typ, który ma zostać przekonwertowany obsługuje standardowe wartości.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>Use the <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;paramref name="context" /&gt;</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">&lt;see langword="null" /&gt;</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
          <source>Also, properties on the context object can return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether this object supports a standard set of values that can be picked from a list.</source>
          <target state="translated">Zwraca czy ten obiekt obsługuje standardowy zestaw wartości, które mogą być pobierane z listy.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
          <source>Returns whether this object supports a standard set of values that can be picked from a list.</source>
          <target state="translated">Zwraca czy ten obiekt obsługuje standardowy zestaw wartości, które mogą być pobierane z listy.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> should be called to find a common set of values the object supports; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> powinien być wywołany, aby znaleźć wspólny zbiór wartości, które obsługuje obiektu; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</source>
          <target state="translated">Zwraca czy ten obiekt obsługuje standardowy zestaw wartości, które mogą być pobierane z listy, używając określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> should be called to find a common set of values the object supports; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /&gt;</ph> powinien być wywołany, aby znaleźć wspólny zbiór wartości, które obsługuje obiektu; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>As implemented in this class, this method always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Zgodnie z implementacją tej klasy, ta metoda zawsze zwraca <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
          <source>Override this method if the type you want to convert supports standard values.</source>
          <target state="translated">Należy przesłonić tę metodę, jeśli typ, który ma zostać przekonwertowany obsługuje standardowe wartości.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.TypeConverter">
          <source>Returns whether the given value object is valid for this type.</source>
          <target state="translated">Zwraca czy obiekt dana wartość jest nieprawidłowa dla tego typu.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>The object to test for validity.</source>
          <target state="translated">Obiekt, aby sprawdzić poprawność.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>Returns whether the given value object is valid for this type.</source>
          <target state="translated">Zwraca czy obiekt dana wartość jest nieprawidłowa dla tego typu.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified value is valid for this object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli określona wartość jest nieprawidłowa dla tego obiektu. w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>Starting in <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> method catches exceptions from the <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> methods.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> metody przechwytuje wyjątki od <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> i <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>If the input value type causes <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> to return <ph id="ph2">`false`</ph>, or if the input value causes <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> to raise an exception, the <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> method returns <ph id="ph5">`false`</ph>.</source>
          <target state="translated">Jeśli powoduje, że typ wartości wejściowej <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> do zwrócenia <ph id="ph2">`false`</ph>, lub jeśli powoduje, że wartość wejściowa <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> Aby zgłosić wyjątek, <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> metoda zwraca <ph id="ph5">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>To enable the legacy behavior, insert the following lines into the configuration file of the application, for example, application1.exe.config.</source>
          <target state="translated">Aby włączyć starsze zachowanie, Wstaw następujące wiersze do pliku konfiguracji aplikacji, na przykład application1.exe.config.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>Override this method if the type you want to convert supports standard values that can be validated.</source>
          <target state="translated">Należy przesłonić tę metodę, jeśli typ, który ma zostać przekonwertowany obsługuje standardowe wartości, które mogą być sprawdzone.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> method is used to validate a value within the type rather than to determine if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> can be converted to the given type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> Metoda służy do sprawdzania poprawności wartości w ramach typu, a nie można określić, czy <ph id="ph2">&lt;paramref name="value" /&gt;</ph> można przekonwertować danego typu.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>For example, <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> can be used to determine if a given value is valid for an enumeration type.</source>
          <target state="translated">Na przykład <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)" /&gt;</ph> może służyć do określenia, czy dana wartość jest nieprawidłowa dla typu wyliczenia.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>For an example, see <ph id="ph1">&lt;see cref="T:System.ComponentModel.EnumConverter" /&gt;</ph>.</source>
          <target state="translated">Na przykład zobacz <ph id="ph1">&lt;see cref="T:System.ComponentModel.EnumConverter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
          <source>You can write your own <bpt id="p1">&lt;c&gt;</bpt>WillConvertSucceed<ept id="p1">&lt;/c&gt;</ept> method by wrapping the <ph id="ph1">&lt;see cref="Overload:System.ComponentModel.TypeConverter.ConvertTo" /&gt;</ph> and <ph id="ph2">&lt;see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /&gt;</ph> methods in exception blocks.</source>
          <target state="translated">Można napisać własny <bpt id="p1">&lt;c&gt;</bpt>WillConvertSucceed<ept id="p1">&lt;/c&gt;</ept> metody zawijania <ph id="ph1">&lt;see cref="Overload:System.ComponentModel.TypeConverter.ConvertTo" /&gt;</ph> i <ph id="ph2">&lt;see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /&gt;</ph> metody w blokach wyjątku.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> that provides a format context.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt;</ph> Zapewnia kontekstu formatu.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to test for validity.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Do sprawdzenia poprawności.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Returns whether the given value object is valid for this type and for the specified context.</source>
          <target state="translated">Zwraca czy obiekt dana wartość jest nieprawidłowa dla tego typu, jak i dla określonego kontekstu.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified value is valid for this object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli określona wartość jest nieprawidłowa dla tego obiektu. w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Use the <ph id="ph1">`context`</ph> parameter to extract additional information about the environment from which this converter is invoked.</source>
          <target state="translated">Użyj <ph id="ph1">`context`</ph> parametr, aby wyodrębnić dodatkowe informacje o środowisku, z którego jest wywoływany tego konwertera.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>This parameter can be <ph id="ph1">`null`</ph>, so always check it.</source>
          <target state="translated">Ten parametr może być <ph id="ph1">`null`</ph>, więc zawsze sprawdź go.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Also, properties on the context object can return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ponadto może zwrócić właściwości obiektu context <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Starting in <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> method catches exceptions from the <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> methods.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> metody przechwytuje wyjątki od <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> i <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>If the input value type causes <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> to return <ph id="ph2">`false`</ph>, or if the input value causes <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> to raise an exception, the <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> method returns <ph id="ph5">`false`</ph>.</source>
          <target state="translated">Jeśli powoduje, że typ wartości wejściowej <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> do zwrócenia <ph id="ph2">`false`</ph>, lub jeśli powoduje, że wartość wejściowa <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph> Aby zgłosić wyjątek, <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter.IsValid%2A&gt;</ph> metoda zwraca <ph id="ph5">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>To enable the legacy behavior, insert the following lines into the configuration file of the application, for example, application1.exe.config.</source>
          <target state="translated">Aby włączyć starsze zachowanie, Wstaw następujące wiersze do pliku konfiguracji aplikacji, na przykład application1.exe.config.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>For an example of this function, see the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class.</source>
          <target state="translated">Na przykład tej funkcji, zobacz <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>Override this method if the type you want to convert supports standard values that can be validated.</source>
          <target state="translated">Należy przesłonić tę metodę, jeśli typ, który ma zostać przekonwertowany obsługuje standardowe wartości, które mogą być sprawdzone.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)" /&gt;</ph> method is used to validate a value within the type rather than to determine if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> can be converted to the given type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)" /&gt;</ph> Metoda służy do sprawdzania poprawności wartości w ramach typu, a nie można określić, czy <ph id="ph2">&lt;paramref name="value" /&gt;</ph> można przekonwertować danego typu.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>For example, <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)" /&gt;</ph> can be used to determine if a given value is valid for an enumeration type.</source>
          <target state="translated">Na przykład <ph id="ph1">&lt;see cref="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)" /&gt;</ph> może służyć do określenia, czy dana wartość jest nieprawidłowa dla typu wyliczenia.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
          <source>For an example, see <ph id="ph1">&lt;see cref="T:System.ComponentModel.EnumConverter" /&gt;</ph>.</source>
          <target state="translated">Na przykład zobacz <ph id="ph1">&lt;see cref="T:System.ComponentModel.EnumConverter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> that has the properties to sort.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> mający właściwości do sortowania.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>An array of names in the order you want the properties to appear in the collection.</source>
          <target state="translated">Tablicę nazw w kolejności, które mają właściwości, które mają być widoczne w kolekcji.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>Sorts a collection of properties.</source>
          <target state="translated">Sortuje zbiór właściwości.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> that contains the sorted properties.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.ComponentModel.PropertyDescriptorCollection" /&gt;</ph> zawierający właściwości posortowane.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>All properties in the collection that are not already in the array of names are added alphabetically to the end.</source>
          <target state="translated">Wszystkie właściwości w kolekcji, które nie znajdują się już w tablicy nazw są dodawane alfabetycznie na końcu.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
          <source>If the <ph id="ph1">`names`</ph> parameter is an empty array or <ph id="ph2">`null`</ph>, all the properties in the collection are sorted alphabetically.</source>
          <target state="translated">Jeśli <ph id="ph1">`names`</ph> parametr ma pustą tablicę lub <ph id="ph2">`null`</ph>, wszystkie właściwości w kolekcji są sortowane w kolejności alfabetycznej.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>