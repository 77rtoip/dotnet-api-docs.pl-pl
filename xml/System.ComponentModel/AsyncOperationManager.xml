<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8d1b155cf78b98814e10e0b058e967a3c5ef092" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36704868" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia zarządzanie współbieżności dla klas, które obsługują wywołań metod asynchronicznych. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli klasa należy podać asynchroniczne zachowanie zgodnie z [oparty na zdarzeniach asynchroniczny wzorzec — Przegląd](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), wystąpi szereg problemów z zarządzaniem współbieżności. Wśród nich jest wymaganie, aby upewnić się, że w wątku lub kontekstu, który jest odpowiedni dla modelu aplikacji są wywoływane programy obsługi zdarzeń (na przykład aplikacji formularzy systemu Windows, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] aplikacji, aplikacje konsoli i tak dalej). <xref:System.ComponentModel.AsyncOperationManager> Oferują wygodny sposób, aby utworzyć klasę, która jest uruchamiana prawidłowo wszystkich modeli aplikacji obsługiwanych przez [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 <xref:System.ComponentModel.AsyncOperationManager> Klasa ma jedną metodę <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, która zwraca <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> można śledzić czas trwania konkretne zadanie asynchroniczne. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Dla zadania może służyć do alertu klientów po zakończeniu zadania. Można go również używane publikowania aktualizacji postęp i wyniki przyrostowe bez przerywania operacji.  
  
 Aby uzyskać więcej informacji o implementacji klasy asynchroniczne, zobacz [implementacji wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, przy użyciu <xref:System.ComponentModel.AsyncOperationManager> klasy w celu utworzenia klasy, która obsługuje asynchroniczne operacje dla dowolnego modelu aplikacji. Widoczny jest sposób Implementowanie klasy, który umożliwia sprawdzenie, liczbę, aby określić, czy jest ono zapisują. Obliczona w ten sposób może być czasochłonne, więc odbywa się w oddzielnym wątku. Raporty z postępów, wyniki przyrostowych i uzupełniania powiadomienia są obsługiwane przez <xref:System.ComponentModel.AsyncOperation> klasy, która zapewnia, że obsługi zdarzeń klienckich są nazywane na właściwy thread lub context.  
  
 Listy pełnego kodu, zobacz [porady: implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Listy pełnego kodu formularza klienta, zobacz [porady: implementacja klienta wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Obiekt używany do skojarzenia fragment stanu klienta, np. Identyfikator zadania z określonej operacji asynchronicznej.</param>
        <summary>Zwraca <see cref="T:System.ComponentModel.AsyncOperation" /> śledzenia w czasie trwania określonej operacji asynchronicznej.</summary>
        <returns>
          <see cref="T:System.ComponentModel.AsyncOperation" /> Czy służy do śledzenia w czasie trwania wywołanie metody asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> Metoda zwraca <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> służącego do śledzenia w czasie trwania określonej operacji asynchronicznych i alertów modelu aplikacji, po zakończeniu operacji. Można również użyć można opublikować aktualizacje postęp i wyniki przyrostowe bez przerywania wykonać operację. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Zostanie poprawnie organizowania tych wywołań do odpowiedniego wątku lub kontekst dla modelu aplikacji.  
  
 W przypadku zastosowania klasy obsługującego wzorzec asynchroniczny oparty na zdarzeniach, powinny wywoływać klasy <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> zawsze Twojej *MethodName* `Async` metoda jest wywoływana. Można użyć aplikacji klienckiej, która sprawia, że wywołania metody `userSuppliedState` parametr, aby jednoznacznie zidentyfikować każde wywołanie, aby rozróżnić zdarzenia wywoływane podczas wykonywania operacji asynchronicznej.  
  
> [!CAUTION]
>  Kod klienta Podaj unikatową wartość `userSuppliedState` parametru. Nieunikatowy identyfikatorów zadań może spowodować implementacji nieprawidłowo raportuje postęp i inne zdarzenia. Kod należy wyszukać identyfikator zadania nie jest unikatowa i zgłosić <xref:System.ArgumentException?displayProperty=nameWithType> po wykryciu jednego.  
  
 Należy śledzić kodu co <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> zwrócony przez <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> i używać obiektu w odpowiednich podstawowej operację asynchroniczną do publikowania aktualizacji i zakończyć operację. Ta śledzenia może być prosty jak przekazywanie <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> jako parametr między delegatów. W bardziej złożonych wzorów klasy może przechowywać Kolekcja <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> obiektów, dodawanie obiektów rozpoczęcie zadania i usunięcie ich, gdy zadania zostały ukończone lub anulowane. Takie podejście umożliwia Sprawdź, czy unikatowy `userSuppliedState` parametru wartości, a jest to metoda, należy użyć podczas pracy z klasami, które obsługują wiele współbieżnych wywołań.  
  
 Aby uzyskać więcej informacji o implementacji klasy asynchroniczne, zobacz [implementacji wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, za pomocą <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> metodę w celu utworzenia <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> śledzenia w czasie trwania operacji asynchronicznych. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.ComponentModel.AsyncOperationManager> klasy.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kontekst synchronizacji dla operacji asynchronicznej.</summary>
        <value>Kontekst synchronizacji dla operacji asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja jest implementacją bezwątkowy.  
  
 Wątek należy ustawić <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> właściwości `null` zwolnienia fabryki bezwątkowe po zakończeniu, w przeciwnym razie jego fabryki nigdy nie zostanie usunięte.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">do ustawiania kontekstu synchronizacji. Żądanie wartość: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Skojarzony stan:</permission>
      </Docs>
    </Member>
  </Members>
</Type>