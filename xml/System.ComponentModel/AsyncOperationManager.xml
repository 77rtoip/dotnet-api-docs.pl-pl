<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="30d7bc7b3f6c1ac988a337b54f3838d74495afe4" /><Meta Name="ms.sourcegitcommit" Value="3f21796619d6e69ad383c958cc013ce44c0678de" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/11/2019" /><Meta Name="ms.locfileid" Value="56069767" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia zarządzanie współbieżności dla klas, które obsługują wywołania metody asynchronicznej. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli klasa musi zapewnić zachowanie asynchroniczne zgodnie z opisem w [oparte na zdarzeniach asynchronicznych omówienie wzorca](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), będą napotykać szereg problemów z zarządzaniem współbieżności. Wśród nich jest wymaganie, aby upewnić się, że zdarzenia są wywoływane programy obsługi na wątku lub kontekstu, który jest odpowiedni dla modelu aplikacji (na przykład aplikacje Windows Forms, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] aplikacji, aplikacje konsoli i tak dalej). <xref:System.ComponentModel.AsyncOperationManager> Oferuje wygodny sposób, aby utworzyć klasę, która działa prawidłowo w ramach wszystkich modeli aplikacji obsługiwanych przez [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 <xref:System.ComponentModel.AsyncOperationManager> Klasa ma jedną metodę <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, co powoduje zwrócenie <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> można śledzić czas trwania określonego zadania asynchronicznego. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Dla zadania może służyć do klientów alertu, po zakończeniu zadania. Może również służyć do opublikowania postęp aktualizacji i wynikami przyrostowe bez przerywania operacji.  
  
 Aby uzyskać więcej informacji dotyczących implementowania klas asynchronicznych, zobacz [implementacja wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.ComponentModel.AsyncOperationManager> klasy, aby utworzyć klasę, która obsługuje asynchroniczne operacje dla dowolnego modelu aplikacji. Prezentuje sposób implementacji klasy, który umożliwia sprawdzenie numeru w celu ustalenia, czy jest zainicjowanie. To obliczenie może być czasochłonne, dzięki czemu odbywa się w oddzielnym wątku. Sprawozdania z postępu prac, wyniki przyrostowe i uzupełniania powiadomienia są obsługiwane przez <xref:System.ComponentModel.AsyncOperation> klasy, która gwarantuje, że klienta zdarzenia są wywoływane programy obsługi na wątku lub kontekstu.  
  
 Lista pełny kod znajduje się [jak: Implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Listę pełnego kodu formularza klienta, zobacz [jak: Implementacja klienta wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Implementacja wzorca asynchronicznego opartego na zdarzeniach</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Obiekt, który służy do kojarzenia element stanu klienta, takie jak identyfikator zadania, z określoną operacją asynchroniczną.</param>
        <summary>Zwraca <see cref="T:System.ComponentModel.AsyncOperation" /> do śledzenia czasu trwania określoną operacją asynchroniczną.</summary>
        <returns><see cref="T:System.ComponentModel.AsyncOperation" /> Służące do śledzenia czasu trwania wywołania metody asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> Metoda zwraca <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> używanego do śledzenia czasu trwania określoną operacją asynchroniczną i powiadamiał o modelu aplikacji po zakończeniu operacji. Można również użyć do opublikowania postęp aktualizacji i wynikami przyrostowe bez przerywania operacji. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Poprawnie będzie kierować te wywołania do odpowiedniego wątku lub kontekstu dla modelu aplikacji.  
  
 W przypadku zastosowania klasy, obsługującego wzorzec asynchroniczny oparty na zdarzeniach, powinny wywoływać klasy <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> każdorazowo swoje *MethodName* `Async` metoda jest wywoływana. Aplikacja kliencka, która sprawia, że wywołania metody można użyć `userSuppliedState` parametru, aby jednoznacznie identyfikują każdego wywołania w celu odróżnienia zdarzenia zgłaszane podczas wykonywania operacji asynchronicznej.  
  
> [!CAUTION]
>  Kod klienta należy podać unikatową wartość dla `userSuppliedState` parametru. Nieunikatowy identyfikatorów zadań może spowodować implementacji do raportowania postępu i inne zdarzenia niepoprawnie. Kod powinien należy wyszukać identyfikator zadania nie jest unikatowa i zgłosić <xref:System.ArgumentException?displayProperty=nameWithType> po wykryciu jednego.  
  
 Należy śledzić kodu co <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> zwrócone przez <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> i użycie obiektu w odpowiedniej podstawowych operacji asynchronicznej po aktualizacji i zakończyć operację. Ta śledzenia mogą być proste i polega na przekazywanie <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> jako parametr między delegatów. W bardziej zaawansowanych projektów, klasa może zachować kolekcję <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> obiekty, dodawanie obiektów, po uruchomieniu zadania i usunięcie ich, gdy zadanie jest ukończone lub anulowane. To podejście pozwala wyszukiwać unikatowy `userSuppliedState` parametru wartości i jest to metoda, należy używać podczas pracy z klasami, które obsługuje wiele równoczesnych wywołań.  
  
 Aby uzyskać więcej informacji dotyczących implementowania klas asynchronicznych, zobacz [implementacja wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> metodę w celu utworzenia <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> do śledzenia czasu trwania operacji asynchronicznych. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.ComponentModel.AsyncOperationManager> klasy.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Implementacja wzorca asynchronicznego opartego na zdarzeniach</related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kontekst synchronizacji dla operacji asynchronicznej.</summary>
        <value>Kontekst synchronizacji dla operacji asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja jest implementacją bezwątkowy.  
  
 Należy ustawić wątku <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> właściwość `null` zwolnić fabryki bezwątkowy po jej zakończeniu; w przeciwnym razie jego fabryki nigdy nie zostanie usunięte.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">do ustawiania kontekstu synchronizacji. Zapotrzebowanie wartość: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Skojarzony stan:</permission>
      </Docs>
    </Member>
  </Members>
</Type>