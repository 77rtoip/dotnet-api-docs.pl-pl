<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncOperationManager.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5606bfa8ffd9f758de42817a0e4e7eaf9e11c8260.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">606bfa8ffd9f758de42817a0e4e7eaf9e11c8260</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Provides concurrency management for classes that support asynchronous method calls.</source>
          <target state="translated">Umożliwia zarządzanie współbieżności dla klas, które obsługują wywołań metod asynchronicznych.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>This class cannot be inherited.</source>
          <target state="translated">Klasa ta nie może być dziedziczona.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>If your class needs to provide asynchronous behavior according to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you will encounter a number of concurrency management issues.</source>
          <target state="translated">Jeśli klasa należy podać asynchroniczne zachowanie zgodnie z <bpt id="p1">[</bpt>oparty na zdarzeniach asynchroniczny wzorzec — Przegląd<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, wystąpi szereg problemów z zarządzaniem współbieżności.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, <ph id="ph1">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> applications, console applications, and so on).</source>
          <target state="translated">Wśród nich jest wymaganie, aby upewnić się, że w wątku lub kontekstu, który jest odpowiedni dla modelu aplikacji są wywoływane programy obsługi zdarzeń (na przykład aplikacji formularzy systemu Windows, <ph id="ph1">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> aplikacji, aplikacje konsoli i tak dalej).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> provides a convenient way to create a class that runs properly under all application models supported by the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> Oferują wygodny sposób, aby utworzyć klasę, która jest uruchamiana prawidłowo wszystkich modeli aplikacji obsługiwanych przez <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class has one method, <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>, which returns an <ph id="ph3">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> that can be used to track the duration of a particular asynchronous task.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> Klasa ma jedną metodę <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>, która zwraca <ph id="ph3">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> można śledzić czas trwania konkretne zadanie asynchroniczne.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> for a task can be used to alert clients when a task completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> Dla zadania może służyć do alertu klientów po zakończeniu zadania.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>It can also be used to post progress updates and incremental results without terminating the operation.</source>
          <target state="translated">Można go również używane publikowania aktualizacji postęp i wyniki przyrostowe bez przerywania operacji.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji o implementacji klasy asynchroniczne, zobacz <bpt id="p1">[</bpt>implementacji wzorca asynchronicznego opartego na zdarzeniach<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class to create a class that supports asynchronous operations for any application model.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, przy użyciu <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> klasy w celu utworzenia klasy, która obsługuje asynchroniczne operacje dla dowolnego modelu aplikacji.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>It shows how to implement a class that tests a number to determine whether it is prime.</source>
          <target state="translated">Widoczny jest sposób Implementowanie klasy, który umożliwia sprawdzenie, liczbę, aby określić, czy jest ono zapisują.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>This calculation can be time consuming, so it is done on a separate thread.</source>
          <target state="translated">Obliczona w ten sposób może być czasochłonne, więc odbywa się w oddzielnym wątku.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Progress reports, incremental results, and completion notifications are handled by the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> class, which ensures that the client's event handlers are called on the proper thread or context.</source>
          <target state="translated">Raporty z postępów, wyniki przyrostowych i uzupełniania powiadomienia są obsługiwane przez <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> klasy, która zapewnia, że obsługi zdarzeń klienckich są nazywane na właściwy thread lub context.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For a full code listing, see <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</source>
          <target state="translated">Listy pełnego kodu, zobacz <bpt id="p1">[</bpt>porady: implementacja składnika obsługującego wzorzec asynchroniczny oparty na zdarzeniach<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For a full code listing of a client form, see <bpt id="p1">[</bpt>How to: Implement a Client of the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Listy pełnego kodu formularza klienta, zobacz <bpt id="p1">[</bpt>porady: implementacja klienta wzorca asynchronicznego opartego na zdarzeniach<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</source>
          <target state="translated">Obiekt używany do skojarzenia fragment stanu klienta, np. Identyfikator zadania z określonej operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> for tracking the duration of a particular asynchronous operation.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> śledzenia w czasie trwania określonej operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> that you can use to track the duration of an asynchronous method invocation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> Czy służy do śledzenia w czasie trwania wywołanie metody asynchronicznej.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> Metoda zwraca <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> służącego do śledzenia w czasie trwania określonej operacji asynchronicznych i alertów modelu aplikacji, po zakończeniu operacji.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>You can also use it to post progress updates and incremental results without terminating the operation.</source>
          <target state="translated">Można również użyć można opublikować aktualizacje postęp i wyniki przyrostowe bez przerywania wykonać operację.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> will correctly marshal these calls to the appropriate thread or context for the application model.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> Zostanie poprawnie organizowania tych wywołań do odpowiedniego wątku lub kontekst dla modelu aplikacji.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> each time your <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`Async`</ph> method is called.</source>
          <target state="translated">W przypadku zastosowania klasy obsługującego wzorzec asynchroniczny oparty na zdarzeniach, powinny wywoływać klasy <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> zawsze Twojej <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph2">`Async`</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The client application that makes calls to the method can use the <ph id="ph1">`userSuppliedState`</ph> parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</source>
          <target state="translated">Można użyć aplikacji klienckiej, która sprawia, że wywołania metody <ph id="ph1">`userSuppliedState`</ph> parametr, aby jednoznacznie zidentyfikować każde wywołanie, aby rozróżnić zdarzenia wywoływane podczas wykonywania operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Client code must provide a unique value for the <ph id="ph1">`userSuppliedState`</ph> parameter.</source>
          <target state="translated">Kod klienta Podaj unikatową wartość <ph id="ph1">`userSuppliedState`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</source>
          <target state="translated">Nieunikatowy identyfikatorów zadań może spowodować implementacji nieprawidłowo raportuje postęp i inne zdarzenia.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Your code should check for a non-unique task ID and throw an <ph id="ph1">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph> if one is detected.</source>
          <target state="translated">Kod należy wyszukać identyfikator zadania nie jest unikatowa i zgłosić <ph id="ph1">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph> po wykryciu jednego.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Your code should track every <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> returned by <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</source>
          <target state="translated">Należy śledzić kodu co <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> zwrócony przez <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> i używać obiektu w odpowiednich podstawowej operację asynchroniczną do publikowania aktualizacji i zakończyć operację.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This tracking can be as simple as passing the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> as a parameter among delegates.</source>
          <target state="translated">Ta śledzenia może być prosty jak przekazywanie <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> jako parametr między delegatów.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>In more sophisticated designs, your class can maintain a collection of <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</source>
          <target state="translated">W bardziej złożonych wzorów klasy może przechowywać Kolekcja <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> obiektów, dodawanie obiektów rozpoczęcie zadania i usunięcie ich, gdy zadania zostały ukończone lub anulowane.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This approach allows you to check for unique <ph id="ph1">`userSuppliedState`</ph> parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</source>
          <target state="translated">Takie podejście umożliwia Sprawdź, czy unikatowy <ph id="ph1">`userSuppliedState`</ph> parametru wartości, a jest to metoda, należy użyć podczas pracy z klasami, które obsługują wiele współbieżnych wywołań.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji o implementacji klasy asynchroniczne, zobacz <bpt id="p1">[</bpt>implementacji wzorca asynchronicznego opartego na zdarzeniach<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method to create an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> for tracking the duration of asynchronous operations.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, za pomocą <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> metodę w celu utworzenia <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> śledzenia w czasie trwania operacji asynchronicznych.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Gets or sets the synchronization context for the asynchronous operation.</source>
          <target state="translated">Pobiera lub ustawia kontekst synchronizacji dla operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>The synchronization context for the asynchronous operation.</source>
          <target state="translated">Kontekst synchronizacji dla operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>The default implementation is the free-threaded implementation.</source>
          <target state="translated">Domyślna implementacja jest implementacją bezwątkowy.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>A thread should set the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph> property to <ph id="ph2">`null`</ph> to release the free-threaded factory when it is done, or else its factory will never be disposed.</source>
          <target state="translated">Wątek należy ustawić <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph> właściwości <ph id="ph2">`null`</ph> zwolnienia fabryki bezwątkowe po zakończeniu, w przeciwnym razie jego fabryki nigdy nie zostanie usunięte.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>for setting the synchronization context.</source>
          <target state="translated">do ustawiania kontekstu synchronizacji.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Żądanie wartość: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Associated state:</source>
          <target state="translated">Skojarzony stan:</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>