<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7eb1e1e711dbbd07e6f3b1f7255b41610b4c4081" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69348209" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia zarządzanie współbieżnością dla klas, które obsługują wywołania metod asynchronicznych. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli klasa musi zapewnić zachowanie asynchroniczne zgodnie z [omówieniem asynchronicznego wzorca opartego](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)na zdarzeniach, wystąpią wiele problemów z zarządzaniem współbieżnością. Między tymi wymaganiami jest zapewnienie, że programy obsługi zdarzeń są wywoływane w wątku lub kontekście, który jest odpowiedni dla modelu aplikacji (na przykład Windows Forms aplikacje, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] aplikacje, aplikacje konsolowe itp.). Zapewnia wygodny sposób tworzenia klasy, która działa prawidłowo w ramach wszystkich modeli aplikacji obsługiwanych [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]przez. <xref:System.ComponentModel.AsyncOperationManager>  
  
 Klasa ma jedną metodę, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>która zwraca wartość <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> , która może służyć do śledzenia czasu trwania określonego zadania asynchronicznego. <xref:System.ComponentModel.AsyncOperationManager> Zadanie <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> dla zadania może służyć do wyzwalania alertów klientów po zakończeniu zadania. Może również służyć do publikowania aktualizacji postępu i przyrostowych wyników bez przerywania operacji.  
  
 Aby uzyskać więcej informacji na temat implementowania klas asynchronicznych, zobacz [implementowanie wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.ComponentModel.AsyncOperationManager> klasy do tworzenia klasy, która obsługuje operacje asynchroniczne dla dowolnego modelu aplikacji. Pokazuje, jak zaimplementować klasę, która testuje liczbę, aby określić, czy jest to podstawowa. To obliczenie może być czasochłonne, więc jest wykonywane w osobnym wątku. Raporty postępu, wyniki przyrostowe i powiadomienia o ukończeniu są obsługiwane przez <xref:System.ComponentModel.AsyncOperation> klasę, co gwarantuje, że procedury obsługi zdarzeń klienta są wywoływane w odpowiednim wątku lub kontekście.  
  
 Aby zapoznać się z pełną listą [kodu, zobacz How to: Implementacja składnika obsługującego wzorzec](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)asynchroniczny oparty na zdarzeniach. Aby zapoznać się z pełną listą kodu formularza klienta, [zobacz How to: Implementacja klienta wzorca](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)asynchronicznego opartego na zdarzeniach.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Implementacja wzorca asynchronicznego opartego na zdarzeniach</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Obiekt służący do kojarzenia stanu klienta, taki jak identyfikator zadania, z określoną operacją asynchroniczną.</param>
        <summary>Zwraca wartość <see cref="T:System.ComponentModel.AsyncOperation" /> służącą do śledzenia czasu trwania określonej operacji asynchronicznej.</summary>
        <returns><see cref="T:System.ComponentModel.AsyncOperation" /> , Którego można użyć do śledzenia czasu trwania wywołania metody asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> Metoda zwracametodę,którejmożnaużyćdośledzeniaczasutrwaniaokreślonejoperacjiasynchronicznejiostrzeganiamodeluaplikacji<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> po zakończeniu operacji. Można go również użyć do publikowania aktualizacji postępu i przyrostowych wyników bez przerywania operacji. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Program będzie poprawnie kierować te wywołania do odpowiedniego wątku lub kontekstu dla modelu aplikacji.  
  
 W przypadku zaimplementowania klasy obsługującej wzorzec asynchroniczny oparty na zdarzeniach Klasa powinna być <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> wywoływana za każdym razem, gdy wywoływana jest metoda *MethodName* `Async` . Aplikacja kliencka, która umożliwia wywoływanie metody, może użyć `userSuppliedState` parametru, aby jednoznacznie identyfikować każde wywołanie, więc w celu odróżnienia zdarzeń wywoływanych podczas wykonywania operacji asynchronicznej.  
  
> [!CAUTION]
>  Kod klienta musi podać unikatową wartość `userSuppliedState` parametru. Identyfikatory zadań inne niż unikatowe mogą spowodować nieprawidłowe Raportowanie postępu i innych zdarzeń przez implementację. Kod powinien sprawdzić, czy nie unikatowy identyfikator zadania i zgłosić <xref:System.ArgumentException?displayProperty=nameWithType> , jeśli został wykryty.  
  
 Kod powinien śledzić wszystkie <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> zwrócone przez <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> i używać obiektu w odpowiedniej wewnętrznej operacji asynchronicznej w celu opublikowania aktualizacji i zakończenia operacji. To śledzenie może być proste, ponieważ przekazuje <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> jako parametr między delegatami. W bardziej zaawansowane projekty Klasa może obsługiwać kolekcję <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> obiektów, Dodawanie obiektów podczas uruchamiania i usuwania zadań, gdy zadania są wykonywane lub anulowane. Takie podejście umożliwia sprawdzenie unikatowych `userSuppliedState` wartości parametrów i jest metodą, która ma być używana podczas pracy z klasami, które obsługują wiele współbieżnych wywołań.  
  
 Aby uzyskać więcej informacji na temat implementowania klas asynchronicznych, zobacz [implementowanie wzorca asynchronicznego opartego na zdarzeniach](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> metody do <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> śledzenia czasu trwania operacji asynchronicznych. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.ComponentModel.AsyncOperationManager> klasy.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Implementacja wzorca asynchronicznego opartego na zdarzeniach</related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Zarządzana wątkowość — najlepsze rozwiązania</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kontekst synchronizacji dla operacji asynchronicznej.</summary>
        <value>Kontekst synchronizacji dla operacji asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślną implementacją jest implementacja wielowątkowa.  
  
 Wątek powinien ustawić <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> `null` właściwość na, aby zwolnić fabrykę bezwątkową, gdy zostanie ona ukończona, lub w przeciwnym razie jej fabryka nigdy nie zostanie usunięta.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">do ustawiania kontekstu synchronizacji. Wartość żądania: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Stan skojarzony:</permission>
      </Docs>
    </Member>
  </Members>
</Type>
