<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BackgroundWorker.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e3100d5df8f298b733355b4ac8b472c23b7f225f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3100d5df8f298b733355b4ac8b472c23b7f225f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Executes an operation on a separate thread.</source>
          <target state="translated">Wykonuje operację w oddzielnym wątku.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class allows you to run an operation on a separate, dedicated thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> Klasa umożliwia uruchamianie operacji w oddzielnych, dedykowane wątku.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</source>
          <target state="translated">Czas operacji, takich jak pliki do pobrania i transakcji bazy danych może spowodować interfejsu użytkownika (UI) można wydawać, że przestała odpowiadać, gdy są one uruchomione.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>When you want a responsive UI and you are faced with long delays associated with such operations, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class provides a convenient solution.</source>
          <target state="translated">Gdy reakcje interfejsu użytkownika i muszą stawiać czoła o długie opóźnienia skojarzone z takich operacji <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasa stanowi wygodną rozwiązanie.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To execute a time-consuming operation in the background, create a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> and listen for events that report the progress of your operation and signal when your operation is finished.</source>
          <target state="translated">Aby wykonać czasochłonna operacja w tle, należy utworzyć <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> i nasłuchiwania zdarzeń raportujących postęp operacji i sygnału, po zakończeniu operacji.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>You can create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> programmatically or you can drag it onto your form from the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Toolbox<ept id="p2">**</ept>.</source>
          <target state="translated">Można utworzyć <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> programowo lub przeciągnij go do formularza z <bpt id="p1">**</bpt>składniki<ept id="p1">**</ept> karcie <bpt id="p2">**</bpt>przybornika<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>If you create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</source>
          <target state="translated">W przypadku utworzenia <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> w narzędziu Projektant dla formularzy systemu Windows będą wyświetlane na pasku składnika i jego właściwości, które będą wyświetlane w oknie właściwości.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To set up for a background operation, add an event handler for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event.</source>
          <target state="translated">Aby skonfigurować dla operacji w tle, Dodaj program obsługi zdarzeń dla <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Call your time-consuming operation in this event handler.</source>
          <target state="translated">W tej obsłudze zdarzeń, należy wywołać czasochłonna operacja.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To start the operation, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated">Aby uruchomić operację, należy wywołać <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To receive notifications of progress updates, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">Aby otrzymywać powiadomienia o aktualizacjach postępu, obsługi <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To receive a notification when the operation is completed, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event.</source>
          <target state="translated">Aby otrzymać powiadomienie, gdy operacja została wykonana, obsługi <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">Należy zachować ostrożność nie do modyfikowania obiektów interfejsu użytkownika w Twojej <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> obsługi zdarzeń.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> events.</source>
          <target state="translated">Zamiast tego komunikują się za pośrednictwem interfejsu użytkownika <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> i <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> zdarzenia.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events are not marshaled across <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> boundaries.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> zdarzenia nie są przekazywane przez <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> granic.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Do not use a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to perform multithreaded operations in more than one <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">Nie używaj <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> składnik do wykonywania operacji wielowątkowych w więcej niż jednym <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>If your background operation requires a parameter, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> with your parameter.</source>
          <target state="translated">Jeśli operacji w tle wymaga parametru, wywołanie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> z parametru.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Inside the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can extract the parameter from the <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Wewnątrz <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> program obsługi zdarzeń, można wyodrębnić parametru z <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>For more information about <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, see <bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, zobacz <bpt id="p1">[</bpt>porady: uruchamianie operacji w tle<ept id="p1">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following code example demonstrates the basics of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class for executing a time-consuming operation asynchronously.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano podstawy <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasy dla przetwarzania asynchronicznego czasochłonna operacja.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following illustration shows an example of the output.</source>
          <target state="translated">Na poniższej ilustracji przedstawiono przykład danych wyjściowych.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><bpt id="p1">![</bpt>BackgroundWorker simple example<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-simple.png "</bpt>BackgroundWorker simple example<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>BackgroundWorker — prosty przykład<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-simple.png "</bpt>prosty przykład BackgroundWorker<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To try this code, create a Windows Forms application.</source>
          <target state="translated">Aby wypróbować ten kod, tworzenie aplikacji formularzy systemu Windows.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Add a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control named <ph id="ph2">`resultLabel`</ph> and add two <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls named <ph id="ph4">`startAsyncButton`</ph> and <ph id="ph5">`cancelAsyncButton`</ph>.</source>
          <target state="translated">Dodaj <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> formantu o nazwie <ph id="ph2">`resultLabel`</ph> i dodać dwie <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> formantów <ph id="ph4">`startAsyncButton`</ph> i <ph id="ph5">`cancelAsyncButton`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Create <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handlers for both buttons.</source>
          <target state="translated">Utwórz <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> programy obsługi zdarzeń dla obu przycisków.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>From the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the Toolbox, add a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component named <ph id="ph2">`backgroundWorker1`</ph>.</source>
          <target state="translated">Z <bpt id="p1">**</bpt>składniki<ept id="p1">**</ept> karcie przybornika, Dodaj <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> składnika o nazwie <ph id="ph2">`backgroundWorker1`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Create <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>, and <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handlers for the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">Utwórz <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>, i <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> obsługi zdarzeń <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>In the code for the form, replace the existing code with the following code.</source>
          <target state="translated">W kodzie w formularzu należy zastąpić istniejący kod następującym kodem.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class for executing a time-consuming operation asynchronously.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasy dla przetwarzania asynchronicznego czasochłonna operacja.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following illustration shows an example of the output.</source>
          <target state="translated">Na poniższej ilustracji przedstawiono przykład danych wyjściowych.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><bpt id="p1">![</bpt>BackgroundWorker Fibonacci example<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-fibonacci.png "</bpt>BackgroundWorker Fibonacci example<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Przykład BackgroundWorker Fibonacci<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-fibonacci.png "</bpt>Fibonacci BackgroundWorker — przykład<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</source>
          <target state="translated">Operacja oblicza wybraną liczbę Fibonacci, raporty aktualizacje postępu jako przychody obliczeń i pozwala oczekujące obliczeń do anulowania.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.#ctor">
          <source>This constructor initializes a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">Ten konstruktor inicjuje <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>Requests cancellation of a pending background operation.</source>
          <target state="translated">Anulowanie operacji w tle oczekujących żądań.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> submits a request to terminate the pending background operation and sets the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> przesyła żądanie, aby zakończyć operację oczekujące tła i ustawia <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> właściwości <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>When you call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>, your worker method has an opportunity to stop its execution and exit.</source>
          <target state="translated">Podczas wywoływania <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>, metodę proces roboczy ma możliwość zatrzymania jej wykonanie i zakończenia.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>The worker code should periodically check the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to see if it has been set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Kod procesu roboczego należy okresowo sprawdzać <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> aby zobaczyć, jeśli została ona ustawiona jako właściwość <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Należy pamiętać, że kod w <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> obsługi zdarzeń może zakończyć pracy odbywa się żądanie anulowania, a Twoje pętli sondowania może nie <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> ustawiany <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">W takim przypadku <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flagę <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> w Twojej <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> nie będzie można ustawić programu obsługi zdarzeń <ph id="ph4">`true`</ph>, mimo że wysłano żądanie anulowania.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">Taka sytuacja jest nazywany <bpt id="p1">*</bpt>sytuację wyścigu<ept id="p1">*</ept> i jest typowe w programowaniu wielowątkowych.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat projektowania wielowątkowość problemów, zobacz <bpt id="p1">[</bpt>zarządzanych wątków najlepsze rozwiązania w zakresie<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to cancel an asynchronous ("background") operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> metodę, aby anulować operację asynchroniczną ("w tle").</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /&gt;</ph> jest <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>Gets a value indicating whether the application has requested cancellation of a background operation.</source>
          <target state="translated">Pobiera wartość wskazującą, czy aplikacja zażądała anulowania operacji w tle.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the application has requested cancellation of a background operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli aplikacja zażądała anulowania operacji w tle; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wartość domyślna to <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> is <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method has been called on the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> jest <ph id="ph2">`true`</ph>, a następnie <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> wywołano metodę <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>This property is meant for use by the worker thread, which should periodically check <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> and abort the background operation when it is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Ta właściwość jest przeznaczone do użytku przez wątek roboczy, który należy okresowo sprawdzać <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> i przerwania operacji w tle, gdy jest równa <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to query a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> about its cancellation state.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> właściwości zapytania <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> o jej stanie anulowania.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /&gt;</ph> is called.</source>
          <target state="translated">Występuje, gdy <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /&gt;</ph> jest wywoływana.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method.</source>
          <target state="translated">To zdarzenie jest wywoływane podczas wywoływania <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This is where you start the operation that performs the potentially time-consuming work.</source>
          <target state="translated">Jest to, gdzie uruchomić operacji, która wykonuje potencjalnie czasochłonne.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler should periodically check the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property value and abort the operation if it is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Kod w <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> obsługi zdarzeń należy okresowo sprawdzać <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> wartość właściwości i przerwania operacji, jeśli jest <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>When this occurs, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`true`</ph>, and the <ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph5">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph6">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will be set to <ph id="ph7">`true`</ph>.</source>
          <target state="translated">W takiej sytuacji można ustawić <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flagę <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> do <ph id="ph3">`true`</ph>i <ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flagę <ph id="ph5">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> w Twojej <ph id="ph6">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> zostanie ustawiony program obsługi zdarzeń <ph id="ph7">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Należy pamiętać, że kod w <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> obsługi zdarzeń może zakończyć pracy odbywa się żądanie anulowania, a Twoje pętli sondowania może nie <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> ustawiany <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">W takim przypadku <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flagę <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> w Twojej <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> nie będzie można ustawić programu obsługi zdarzeń <ph id="ph4">`true`</ph>, mimo że wysłano żądanie anulowania.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">Taka sytuacja jest nazywany <bpt id="p1">*</bpt>sytuację wyścigu<ept id="p1">*</ept> i jest typowe w programowaniu wielowątkowych.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat projektowania wielowątkowość problemów, zobacz <bpt id="p1">[</bpt>zarządzanych wątków najlepsze rozwiązania w zakresie<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If your operation produces a result, you can assign the result to the <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Jeśli operacja powstaje, można przypisać wynik, który ma <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This will be available to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler in the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">To będzie dostępna do <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> obsługi zdarzeń w <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If the operation raises an exception that your code does not handle, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> catches the exception and passes it into the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler, where it is exposed as the <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Jeśli operacja zgłasza wyjątek, który nie obsługuje kodu, <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> przechwytuje wyjątek i przekazuje je do <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> program obsługi zdarzeń, w którym jest ujawniona jako <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> właściwość <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If you are running under the Visual Studio debugger, the debugger will break at the point in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler where the unhandled exception was raised.</source>
          <target state="translated">Jeśli używasz w debugerze programu Visual Studio, w tym punkcie spowoduje przerwanie debugera <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> obsługi zdarzeń, na którym zgłoszono nieobsługiwany wyjątek.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If you have more than one <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, you should not reference any of them directly, as this would couple your <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler to a specific instance of <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">Jeśli masz więcej niż jeden <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, możesz powinien odwołuje się ich bezpośrednio, ponieważ spowoduje to połączenie Twojej <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> program obsługi zdarzeń do konkretnego wystąpienia <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Instead, you should access your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> by casting the <ph id="ph2">`sender`</ph> parameter in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">Zamiast tego należy uzyskać dostęp z <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> przez rzutowanie <ph id="ph2">`sender`</ph> parametru w Twojej <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> obsługi zdarzeń.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">Należy zachować ostrożność nie do modyfikowania obiektów interfejsu użytkownika w Twojej <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> obsługi zdarzeń.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events.</source>
          <target state="translated">Zamiast tego komunikują się za pośrednictwem interfejsu użytkownika <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> zdarzenia.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz <bpt id="p1">[</bpt>NIB: Korzystanie z zdarzenia<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event to start an asynchronous operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> zdarzeń, aby uruchomić operację asynchroniczną.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> is running an asynchronous operation.</source>
          <target state="translated">Pobiera wartość wskazującą czy <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> działa operację asynchroniczną.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> is running an asynchronous operation; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, jeśli <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> jest uruchomiona operacja asynchroniczna; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> starts an asynchronous operation when you call <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> Rozpoczyna operację asynchroniczną, podczas wywoływania <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.IsBusy%2A&gt;</ph> property to wait for completion of a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje sposób użycia <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.IsBusy%2A&gt;</ph> właściwość, aby czekać na zakończenie <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> operacji.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>This code example is part of a larger example described in <bpt id="p1">[</bpt>How to: Download a File in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu opisanego w <bpt id="p1">[</bpt>porady: pobieranie pliku w tle<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> Zawierający dane zdarzenia.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> event.</source>
          <target state="translated">Zgłasza <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> Zawierający dane zdarzenia.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Zgłasza <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>Obsługa i wywoływanie zdarzeń<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method to report the progress of an asynchronous operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> metody do raportu postępu operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">W przypadku przesłaniania <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> w klasie pochodnej, należy wywołać klasy podstawowej <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> metody, które zarejestrowane delegatów odbierać zdarzenia.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> Zawierający dane zdarzenia.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /&gt;</ph> event.</source>
          <target state="translated">Zgłasza <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>Obsługa i wywoływanie zdarzeń<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">W przypadku przesłaniania <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> w klasie pochodnej, należy wywołać klasy podstawowej <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> metody, które zarejestrowane delegatów odbierać zdarzenia.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /&gt;</ph> is called.</source>
          <target state="translated">Występuje, gdy <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /&gt;</ph> jest wywoływana.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method.</source>
          <target state="translated">To zdarzenie jest wywoływane podczas wywoływania <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz <bpt id="p1">[</bpt>NIB: Korzystanie z zdarzenia<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> zdarzeń do raportowania postępu operacji asynchronicznej dla użytkownika.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Zgłasza <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
          <target state="translated">Procent od 0 do 100, operacji w tle została zakończona.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Zgłasza <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">Jeśli potrzebujesz na raport dotyczący postępu operacji tła, należy wywołać <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> metodę, aby podnieść <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must be <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> Wartość właściwości musi być <ph id="ph2">`true`</ph>, lub <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> zgłosi <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
          <target state="translated">Jest można zapewnić znaczący sposób pomiaru postępu operacji tła jako procent całkowitej ukończenia zadania.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The call to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method is asynchronous and returns immediately.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> metody jest asynchroniczne i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event handler executes on the thread that created the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> Wykonuje program obsługi zdarzeń na wątek, który utworzył <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> metody do raportu postępu operacji asynchronicznej dla użytkownika.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> Właściwość jest ustawiona na <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
          <target state="translated">Procent od 0 do 100, operacji w tle została zakończona.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The state object passed to <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph>.</source>
          <target state="translated">Obiekt stanu przekazany do <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Zgłasza <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">Jeśli potrzebujesz na raport dotyczący postępu operacji tła, należy wywołać <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> metodę, aby podnieść <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> Wartość właściwości musi być <ph id="ph2">`true`</ph>, lub <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> zgłosi <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
          <target state="translated">Jest można zapewnić znaczący sposób pomiaru postępu operacji tła jako procent całkowitej ukończenia zadania.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> metody do raportu postępu operacji asynchronicznej dla użytkownika.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripProgressBar&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripProgressBar&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> Właściwość jest ustawiona na <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Starts execution of a background operation.</source>
          <target state="translated">Rozpoczyna się wykonanie operacji w tle.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>Starts execution of a background operation.</source>
          <target state="translated">Rozpoczyna się wykonanie operacji w tle.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> Metody przesyła żądanie rozpoczęcia operacji uruchamiane asynchronicznie.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
          <target state="translated">Gdy żądanie zostanie obsłużone, <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> zdarzenia, który z kolei rozpoczyna się wykonanie operacji w tle.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Jeśli operacji w tle jest już uruchomiona, wywoływania <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> ponownie zostanie podniesiony <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method to start an asynchronous operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> metodę, aby uruchomić operację asynchroniczną.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>It is part of a larger example described in <bpt id="p1">[</bpt>How to: Download a File in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</source>
          <target state="translated">Nie jest częścią większego przykładu opisanego w <bpt id="p1">[</bpt>porady: pobieranie pliku w tle<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> jest <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>A parameter for use by the background operation to be executed in the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> event handler.</source>
          <target state="translated">Parametr do użycia przez operacji w tle ma być wykonywana w <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> obsługi zdarzeń.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>Starts execution of a background operation.</source>
          <target state="translated">Rozpoczyna się wykonanie operacji w tle.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> Metody przesyła żądanie rozpoczęcia operacji uruchamiane asynchronicznie.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
          <target state="translated">Gdy żądanie zostanie obsłużone, <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> zdarzenia, który z kolei rozpoczyna się wykonanie operacji w tle.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>If your operation requires a parameter, you can provide it as the <ph id="ph1">`argument`</ph> parameter to <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated">Jeśli operacja wymaga parametru, możesz podać go jako <ph id="ph1">`argument`</ph> parametr <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Jeśli operacji w tle jest już uruchomiona, wywoływania <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> ponownie zostanie podniesiony <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method to start an asynchronous operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> metodę, aby uruchomić operację asynchroniczną.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> jest <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Occurs when the background operation has completed, has been canceled, or has raised an exception.</source>
          <target state="translated">Występuje, gdy operacji w tle została zakończona, została anulowana lub spowodował wyjątek.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This event is raised when the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler returns.</source>
          <target state="translated">To zdarzenie jest wywoływane podczas <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> zwraca program obsługi zdarzeń.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If the operation completes successfully and its result is assigned in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can access the result through the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Jeśli operacja zakończy się pomyślnie, a jego wynik jest przypisana w <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> program obsługi zdarzeń, są dostępne za pośrednictwem wyniku <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indicates that an exception was thrown by the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> Właściwość <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> wskazuje, że wystąpił wyjątek podczas operacji.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indicates whether a cancellation request was processed by the background operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> Właściwość <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> wskazuje, czy żądanie anulowania przetwarzania przez operacji w tle.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler detects a cancellation request by checking the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> flag and setting the <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph4">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> to <ph id="ph5">`true`</ph>, the <ph id="ph6">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph7">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> also will be set to <ph id="ph8">`true`</ph>.</source>
          <target state="translated">Jeśli kod w <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> obsługi zdarzeń wykrywa żądanie anulowania, sprawdzając <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> flagę i ustawienie <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flagę <ph id="ph4">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> do <ph id="ph5">`true`</ph>, <ph id="ph6">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flagę <ph id="ph7">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> również zostaną ustawione na <ph id="ph8">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Należy pamiętać, że kod w <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> obsługi zdarzeń może zakończyć pracy odbywa się żądanie anulowania, a Twoje pętli sondowania może nie <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> ustawiany <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">W takim przypadku <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flagę <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> w Twojej <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> nie będzie można ustawić programu obsługi zdarzeń <ph id="ph4">`true`</ph>, mimo że wysłano żądanie anulowania.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">Taka sytuacja jest nazywany <bpt id="p1">*</bpt>sytuację wyścigu<ept id="p1">*</ept> i jest typowe w programowaniu wielowątkowych.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat projektowania wielowątkowość problemów, zobacz <bpt id="p1">[</bpt>zarządzanych wątków najlepsze rozwiązania w zakresie<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler should always check the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType&gt;</ph> properties before accessing the <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Twoje <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> obsługi zdarzeń należy zawsze sprawdzić <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> i <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType&gt;</ph> właściwości przed uzyskaniem dostępu do <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If an exception was raised or if the operation was canceled, accessing the <ph id="ph1">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property raises an exception.</source>
          <target state="translated">Zgłoszono wyjątek lub operacja została anulowana, uzyskiwanie dostępu do <ph id="ph1">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> właściwości zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event to handle the result of an asynchronous operation.</source>
          <target state="translated">Poniższy przykład kodu pokazuje użycie <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> zdarzeń do obsługi wynik operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> can report progress updates.</source>
          <target state="translated">Pobiera lub ustawia wartość wskazującą czy <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> może zgłaszać aktualizacje postępu.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports progress updates; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> obsługuje postępu aktualizacje; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wartość domyślna to <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support progress updates.</source>
          <target state="translated">Ustaw <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> właściwości <ph id="ph2">`true`</ph> Jeśli chcesz <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> do obsługi aktualizacji w toku.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>When this property is <ph id="ph1">`true`</ph>, user code can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">Gdy ta właściwość jest <ph id="ph1">`true`</ph>, kod użytkownika może wywołać <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> metodę, aby podnieść <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports asynchronous cancellation.</source>
          <target state="translated">Pobiera lub ustawia wartość wskazującą czy <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> obsługuje anulowanie asynchroniczne.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports cancellation; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> obsługuje anulowanie; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wartość domyślna to <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support cancellation.</source>
          <target state="translated">Ustaw <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> właściwości <ph id="ph2">`true`</ph> Jeśli chcesz <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> do anulowania obsługi.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>When this property is <ph id="ph1">`true`</ph>, you can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to interrupt a background operation.</source>
          <target state="translated">Gdy ta właściwość jest <ph id="ph1">`true`</ph>, można wywołać <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> metody przerwania operacji w tle.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>