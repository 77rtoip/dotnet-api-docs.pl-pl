<Type Name="PersistenceParticipant" FullName="System.Activities.Persistence.PersistenceParticipant">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eff49a6fa1166e060b136d9a92c0e0256da30449" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69324788" /></Metadata><TypeSignature Language="C#" Value="public abstract class PersistenceParticipant" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceParticipant extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Persistence.PersistenceParticipant" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceParticipant" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceParticipant abstract" />
  <TypeSignature Language="F#" Value="type PersistenceParticipant = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ta klasa umożliwia jednocześnie <see cref="T:System.Activities.WorkflowApplication" /> i <see cref="T:System.ServiceModel.WorkflowServiceHost" /> uczestnictwo w procesie trwałości. Uczestnik trwałości pochodzi z <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> klasy <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> lub klasy <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> (Klasa pochodna klasy), implementuje metody abstrakcyjne, a następnie Dodaj wystąpienie klasy jako rozszerzenie wystąpienia przepływu pracy. <see cref="T:System.Activities.WorkflowApplication" /> I<see cref="T:System.ServiceModel.WorkflowServiceHost" /> poszukaj takich rozszerzeń podczas utrwalania wystąpienia i Wywołaj odpowiednie metody w odpowiednim czasie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Host wykonuje następujące czynności (lub etapy) w przypadku utrwalania wystąpienia:  
  
1.  Zbiera wartości, które mają zostać utrwalone.  
  
2.  Mapuje pola monolitycznych wartości strukturalnych na poszczególne wartości.  
  
3.  <xref:System.Activities.DurableInstancing.SaveWorkflowCommand> Wystawia dostawcę trwałości.  
  
4.  Wykonuje operacje we/wy w ramach transakcji trwałości.  
  
 Host kończy etap przed rozpoczęciem następnego etapu. Na przykład podczas utrwalania Host zbiera wartości ze wszystkich uczestników trwałości przed przejściem do drugiego etapu. Na drugim etapie host dostarcza wszystkie wartości zebrane w pierwszym etapie do wszystkich uczestników trwałości w drugim etapie dla mapowania. Na trzecim etapie host udostępnia wszystkie zebrane wartości w pierwszym i drugim etapie do dostawcy trwałości podczas wywoływania <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>. Następnie w czwartym etapie host udostępnia wszystkie zebrane wartości wszystkim uczestnikom operacji we/wy w ramach transakcji trwałości.  
  
 Host wykonuje następujące etapy podczas ładowania wystąpienia trwałości:  
  
1.  Wystawia <xref:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand> dostawcę trwałości i.<xref:System.Activities.DurableInstancing.LoadWorkflowCommand>  
  
2.  Wykonuje operacje we/wy w ramach transakcji trwałości.  
  
3.  Publikuje załadowane wartości.  
  
 Na najwyższym poziomie rozszerzenia wystąpienia przepływu pracy, które pochodzą od <xref:System.Activities.Persistence.PersistenceParticipant> klasy mogą uczestniczyć w pierwszym (zbieraniu) i drugim (mapie) etapów procesu utrwalania, a trzeci etap (Publikuj) procesu ładowania.  Rozszerzenia wystąpienia przepływu pracy pochodzące z klasy PersistenceIOParticipant mogą dodatkowo uczestniczyć w czwartym etapie procesu utrwalania i drugim etapie procesu ładowania (we/wy).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje Tworzenie klasy, która pochodzi od <xref:System.Activities.Persistence.PersistenceParticipant>. Ten przykład pochodzi z przykładu [procesu zatrudniania](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) .  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceParticipant();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje wystąpienie <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje Tworzenie klasy, która pochodzi od <xref:System.Activities.Persistence.PersistenceParticipant>. Ten przykład pochodzi z przykładu [procesu zatrudniania](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) .  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectValues">
      <MemberSignature Language="C#" Value="protected virtual void CollectValues (out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CollectValues([out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; readWriteValues, [out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CollectValues (ByRef readWriteValues As IDictionary(Of XName, Object), ByRef writeOnlyValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CollectValues([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % readWriteValues, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member CollectValues :  *  -&gt; unit&#xA;override this.CollectValues :  *  -&gt; unit" Usage="persistenceParticipant.CollectValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" RefType="out" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Wartości odczytu i zapisu, które mają zostać utrwalone.</param>
        <param name="writeOnlyValues">Wartości tylko do zapisu, które mają zostać utrwalone.</param>
        <summary>Host wywołuje tę metodę na niestandardowym uczestniku trwałości, aby zbierać wartości odczytu i zapisu oraz wartości tylko do zapisu, które mają zostać utrwalone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku pakietów hosta wartości odczytu i zapisu w pierwszym słowniku <xref:System.Runtime.DurableInstancing.InstanceValue> jako obiekty <xref:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData*> kolekcji oraz pakiety z wartościami tylko do zapisu w drugim słowniku jako <xref:System.Runtime.DurableInstancing.InstanceValue> obiekty z <xref:System.Runtime.DurableInstancing.InstanceValueOptions.Optional> ustawioną <xref:System.Runtime.DurableInstancing.InstanceValueOptions.WriteOnly> flagą i. Aby uzyskać więcej informacji, zobacz <xref:System.Runtime.DurableInstancing.InstanceValueOptions>.  
  
> [!IMPORTANT]
>  Każda wartość udostępniona przez implementacje <xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A> we wszystkich uczestnikach trwałości w jednym odcinku trwałości musi mieć unikatowy XName.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie CollectValues w klasie, która pochodzi od <xref:System.Activities.Persistence.PersistenceParticipant>. Ten przykład pochodzi z przykładu [uczestników trwałości](~/docs/framework/windows-workflow-foundation/persistence-participants.md) .  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; MapValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; MapValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MapValues (readWriteValues As IDictionary(Of XName, Object), writeOnlyValues As IDictionary(Of XName, Object)) As IDictionary(Of XName, Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ MapValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;&#xA;override this.MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;" Usage="persistenceParticipant.MapValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Wartości odczytu i zapisu, które mają zostać utrwalone.</param>
        <param name="writeOnlyValues">Wartości tylko do zapisu, które mają zostać utrwalone.</param>
        <summary>Host wywołuje tę metodę po wykonaniu operacji, zbierając wartości z pierwszego etapu. Host przekazuje dwa słowniki tylko do odczytu wartości zebranych ze wszystkich uczestników trwałości podczas pierwszego etapu (CollectValues) do tej metody mapowania. Host dodaje wartości w słowniku zwracanym przez tę metodę do kolekcji wartości tylko do zapisu.</summary>
        <returns>Słownik zawierający dodatkowe wartości tylko do zapisu, które mają zostać utrwalone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda wartość dostarczona przez implementacje wszystkich <xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A> metod we wszystkich uczestnikach trwałości, w tym wszystkich wartości zebranych w pierwszym etapie (etap CollectValues), musi mieć unikatowy XName.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie MapValues w klasie, która pochodzi od <xref:System.Activities.Persistence.PersistenceParticipant>. Ten przykład pochodzi z przykładowego [procesu zakupów firmy](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) .  
  
 [!code-csharp[wfs_PurchaseProcess#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/xmlpersistenceparticipant.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishValues">
      <MemberSignature Language="C#" Value="protected virtual void PublishValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PublishValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PublishValues (readWriteValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PublishValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues);" />
      <MemberSignature Language="F#" Value="abstract member PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit&#xA;override this.PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit" Usage="persistenceParticipant.PublishValues readWriteValues" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Wartości odczytu i zapisu, które zostały załadowane z magazynu trwałości. Ten słownik odnosi się do słownika wartości odczytu i zapisu utrwalonych w ostatnim odcinku trwałości.</param>
        <summary>Host wywołuje tę metodę i przekazuje wszystkie załadowane wartości w <see cref="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData" /> kolekcji (wypełnione <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> przez lub <see cref="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand" />) jako parametr słownika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie PublishValues w klasie, która pochodzi od <xref:System.Activities.Persistence.PersistenceParticipant>. Ten przykład pochodzi z przykładu [uczestników trwałości](~/docs/framework/windows-workflow-foundation/persistence-participants.md) .  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
