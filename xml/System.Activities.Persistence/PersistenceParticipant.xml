<Type Name="PersistenceParticipant" FullName="System.Activities.Persistence.PersistenceParticipant">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8d7c75dc0fd110e2ed3fd606b8610133c2cf51d8" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32087907" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PersistenceParticipant" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceParticipant extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Persistence.PersistenceParticipant" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceParticipant" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceParticipant abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ta klasa umożliwia zarówno <see cref="T:System.Activities.WorkflowApplication" /> i <see cref="T:System.ServiceModel.WorkflowServiceHost" /> do udziału w procesie trwałości. Uczestnika trwałości pochodną <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> klasy lub <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> klasy (klasy z <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> klasy), zaimplementowano metody abstrakcyjne, a następnie dodaj wystąpienia klasy jako rozszerzenie wystąpienia przepływu pracy. <see cref="T:System.Activities.WorkflowApplication" /> i <see cref="T:System.ServiceModel.WorkflowServiceHost" /> wyglądać dla tych rozszerzeń po trwałym wystąpienia i wywołania metod odpowiednie w odpowiednim czasie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Host wykonuje następujące czynności (lub etapy) po trwałym wystąpienie:  
  
1.  Zbiera wartości utrwalenia.  
  
2.  Mapuje pola wbudowanymi strukturalnych wartości do poszczególnych wartości.  
  
3.  Problemy z <xref:System.Activities.DurableInstancing.SaveWorkflowCommand> dostawcy trwałości.  
  
4.  Wykonuje operacje We/Wy w obrębie transakcji trwałości.  
  
 Host wykonuje etap przed rozpoczęciem kolejnego etapu. Na przykład gdy utrwalanie hosta zbiera wartości od uczestników trwałości przed przejściem do drugiego etapu. W drugim etapie hosta zawiera wszystkie wartości zebranych podczas pierwszego etapu dla wszystkich uczestników trwałości w drugim etapie mapowania. W trzecim etapie hosta zawiera wszystkie zebrane wartości w pierwszego i drugiego etapu dostawcy trwałości podczas wywoływania <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>. Następnie w czwartym etapie hosta zawiera wszystkie zebrane wartości dla wszystkich uczestników we/wy trwałości w obrębie transakcji trwałości.  
  
 Podczas ładowania wystąpienia trwałości, host wykonuje następujące etapy:  
  
1.  Problemy z <xref:System.Activities.DurableInstancing.LoadWorkflowCommand> i <xref:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand> dostawcy trwałości.  
  
2.  Wykonuje operacje We/Wy w obrębie transakcji trwałości.  
  
3.  Publikuje załadować wartości.  
  
 Na najwyższym poziomie, przepływu pracy wystąpienia rozszerzenia wyprowadzonych z <xref:System.Activities.Persistence.PersistenceParticipant> klasy mogą uczestniczyć w pierwszym (zbieranie) i drugie (Map) etapów procesu utrwalanie i trzeciego etapu (Publikuj) proces ładowania.  Wyprowadzanie z klas PersistenceIOParticipant rozszerzeń wystąpienia przepływu pracy Ponadto mogą uczestniczyć w czwartym etapie procesu utrwalanie i drugi etap procesu ładowania (We/Wy).  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano Tworzenie klasy, która pochodzi z <xref:System.Activities.Persistence.PersistenceParticipant>. W tym przykładzie pochodzi z [zatrudnienia procesu](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) próbki.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceParticipant();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje wystąpienie klasy <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie kodu pokazano Tworzenie klasy, która pochodzi z <xref:System.Activities.Persistence.PersistenceParticipant>. W tym przykładzie pochodzi z [zatrudnienia procesu](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) próbki.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectValues">
      <MemberSignature Language="C#" Value="protected virtual void CollectValues (out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CollectValues([out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; readWriteValues, [out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CollectValues (ByRef readWriteValues As IDictionary(Of XName, Object), ByRef writeOnlyValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CollectValues([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % readWriteValues, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % writeOnlyValues);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Wartości odczytu i zapisu do utrwalone.</param>
        <param name="writeOnlyValues">Tylko do zapisu wartości do utrwalone.</param>
        <summary>Host wywołuje tę metodę w uczestnika trwałości niestandardowych do zbierania wartości odczytu i zapisu i tylko do zapisu wartości, utrwalenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Host pakietów odczytu i zapisu wartości w słowniku pierwszy jako <xref:System.Runtime.DurableInstancing.InstanceValue> obiektów <xref:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData*> kolekcji i pakietów tylko do zapisu wartości w słowniku drugi jako <xref:System.Runtime.DurableInstancing.InstanceValue> obiekty z <xref:System.Runtime.DurableInstancing.InstanceValueOptions.Optional> i <xref:System.Runtime.DurableInstancing.InstanceValueOptions.WriteOnly> flagi zestawu. Aby uzyskać więcej informacji, zobacz <xref:System.Runtime.DurableInstancing.InstanceValueOptions>.  
  
> [!IMPORTANT]
>  Wartości dostarczone przez implementacje <xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A> we wszystkich uczestników trwałości w obrębie jednego trwałości epizodu musi mieć unikatowy XName.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, za pomocą obiektu CollectValues w klasie, która jest pochodną <xref:System.Activities.Persistence.PersistenceParticipant>. W tym przykładzie pochodzi z [uczestników trwałości](~/docs/framework/windows-workflow-foundation/persistence-participants.md) próbki.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; MapValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; MapValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MapValues (readWriteValues As IDictionary(Of XName, Object), writeOnlyValues As IDictionary(Of XName, Object)) As IDictionary(Of XName, Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ MapValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ writeOnlyValues);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Wartości odczytu i zapisu do utrwalone.</param>
        <param name="writeOnlyValues">Tylko do zapisu wartości do utrwalone.</param>
        <summary>Host wywołuje tę metodę po zakończeniu ze zbieraniem danych dotyczących wartości podczas pierwszego etapu. Host przekazuje dwa słowniki tylko do odczytu wartości, które go zbierane z wszystkich uczestników trwałości podczas pierwszego etapu (obiektu CollectValues etap) do tej metody dla mapowania. Dodaje wartości w słowniku zwracane przez tę metodę do kolekcji tylko do zapisu wartości.</summary>
        <returns>Słownik zawierający dodatkowe wartości utrwalenia tylko do zapisu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartości dostarczone przez implementacje wszystkich <xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A> metody we wszystkich uczestników trwałości, w tym wszystkie wartości zebranych podczas pierwszego etapu (obiektu CollectValues etap) muszą mieć unikatowe XName.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, za pomocą obiektu MapValues w klasie, która jest pochodną <xref:System.Activities.Persistence.PersistenceParticipant>. W tym przykładzie pochodzi z [firmowej procesu zakupu](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) próbki.  
  
 [!code-csharp[wfs_PurchaseProcess#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/xmlpersistenceparticipant.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishValues">
      <MemberSignature Language="C#" Value="protected virtual void PublishValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PublishValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PublishValues (readWriteValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PublishValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Wartości odczytu i zapisu, które zostały załadowane w sklepie trwałości. Ten słownik odpowiada słownik odczytu i zapisu wartości utrwalone w najnowszych epizodu trwałości.</param>
        <summary>Host wywołuje tę metodę i przekazuje wszystkie wartości załadowany w <see cref="P:System.Activities.Persistence.SaveWorkflowCommand.InstanceData" /> kolekcji (przez <see cref="T:System.Activities.Persistence.LoadWorkflowCommand" /> lub <see cref="T:System.Activities.Persistence.LoadWorkflowByInstanceKeyCommand" />) jako parametr słownika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie kodu pokazano, przy użyciu PublishValues w klasie, która jest pochodną <xref:System.Activities.Persistence.PersistenceParticipant>. W tym przykładzie pochodzi z [uczestników trwałości](~/docs/framework/windows-workflow-foundation/persistence-participants.md) próbki.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>