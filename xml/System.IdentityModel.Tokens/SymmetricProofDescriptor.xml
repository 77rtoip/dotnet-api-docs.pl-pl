<Type Name="SymmetricProofDescriptor" FullName="System.IdentityModel.Tokens.SymmetricProofDescriptor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61b7b4d8188756da14f649c20e9b9df1355ead6e" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52612542" /></Metadata><TypeSignature Language="C#" Value="public class SymmetricProofDescriptor : System.IdentityModel.Tokens.ProofDescriptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SymmetricProofDescriptor extends System.IdentityModel.Tokens.ProofDescriptor" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" />
  <TypeSignature Language="VB.NET" Value="Public Class SymmetricProofDescriptor&#xA;Inherits ProofDescriptor" />
  <TypeSignature Language="C++ CLI" Value="public ref class SymmetricProofDescriptor : System::IdentityModel::Tokens::ProofDescriptor" />
  <TypeSignature Language="F#" Value="type SymmetricProofDescriptor = class&#xA;    inherit ProofDescriptor" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Tokens.ProofDescriptor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ta klasa może służyć do wystawiania token na podstawie klucza symetrycznego.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymmetricProofDescriptor (System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetWrappingCredentials As EncryptingCredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymmetricProofDescriptor(System::IdentityModel::Tokens::EncryptingCredentials ^ targetWrappingCredentials);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SymmetricProofDescriptor : System.IdentityModel.Tokens.EncryptingCredentials -&gt; System.IdentityModel.Tokens.SymmetricProofDescriptor" Usage="new System.IdentityModel.Tokens.SymmetricProofDescriptor targetWrappingCredentials" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
      </Parameters>
      <Docs>
        <param name="targetWrappingCredentials"><see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> Ma być używany.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> klasy przy użyciu określonych poświadczeń szyfrowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego konstruktora, jeśli chcesz, aby usługi STS, aby użyć określonego <xref:System.IdentityModel.Tokens.EncryptingCredentials>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymmetricProofDescriptor (byte[] key, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key, class System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte(), targetWrappingCredentials As EncryptingCredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymmetricProofDescriptor(cli::array &lt;System::Byte&gt; ^ key, System::IdentityModel::Tokens::EncryptingCredentials ^ targetWrappingCredentials);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SymmetricProofDescriptor : byte[] * System.IdentityModel.Tokens.EncryptingCredentials -&gt; System.IdentityModel.Tokens.SymmetricProofDescriptor" Usage="new System.IdentityModel.Tokens.SymmetricProofDescriptor (key, targetWrappingCredentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
        <Parameter Name="targetWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
      </Parameters>
      <Docs>
        <param name="key">Klucz symetryczny, który jest używana wewnątrz wystawiony token.</param>
        <param name="targetWrappingCredentials">Klucz szyfrowania poświadczeń dla jednostki uzależnionej.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> klasy przy użyciu określonego materiału klucza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz, aby usługi STS, aby użyć określonego klucza bajtów, należy użyć tego konstruktora. Dzieje się tak, gdy klient wysyła entropii, a Usługa STS może użyć ich jako klucz dla wystawiony token.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySizeInBits, class System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySizeInBits As Integer, targetWrappingCredentials As EncryptingCredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymmetricProofDescriptor(int keySizeInBits, System::IdentityModel::Tokens::EncryptingCredentials ^ targetWrappingCredentials);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SymmetricProofDescriptor : int * System.IdentityModel.Tokens.EncryptingCredentials -&gt; System.IdentityModel.Tokens.SymmetricProofDescriptor" Usage="new System.IdentityModel.Tokens.SymmetricProofDescriptor (keySizeInBits, targetWrappingCredentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySizeInBits" Type="System.Int32" />
        <Parameter Name="targetWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
      </Parameters>
      <Docs>
        <param name="keySizeInBits">Rozmiar klucza symetrycznego.</param>
        <param name="targetWrappingCredentials">Klucz szyfrowania poświadczeń dla elementu docelowego żądania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> klasy przy użyciu automatycznego generowania klucza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz, aby usługi STS, aby automatycznie wygenerować klucz za pomocą generator liczb losowych i przesłać go w token potwierdzenia jako binarnego wpisu tajnego, należy użyć tego konstruktora.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySizeInBits, class System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, class System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySizeInBits As Integer, targetWrappingCredentials As EncryptingCredentials, requestorWrappingCredentials As EncryptingCredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymmetricProofDescriptor(int keySizeInBits, System::IdentityModel::Tokens::EncryptingCredentials ^ targetWrappingCredentials, System::IdentityModel::Tokens::EncryptingCredentials ^ requestorWrappingCredentials);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SymmetricProofDescriptor : int * System.IdentityModel.Tokens.EncryptingCredentials * System.IdentityModel.Tokens.EncryptingCredentials -&gt; System.IdentityModel.Tokens.SymmetricProofDescriptor" Usage="new System.IdentityModel.Tokens.SymmetricProofDescriptor (keySizeInBits, targetWrappingCredentials, requestorWrappingCredentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySizeInBits" Type="System.Int32" />
        <Parameter Name="targetWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
        <Parameter Name="requestorWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
      </Parameters>
      <Docs>
        <param name="keySizeInBits">Rozmiar klucza symetrycznego.</param>
        <param name="targetWrappingCredentials">Klucz szyfrowania poświadczeń dla elementu docelowego żądania.</param>
        <param name="requestorWrappingCredentials">Klucz szyfrowania poświadczeń do osoby zgłaszającej żądanie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> klasy przy użyciu automatycznego generowania klucza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz, aby usługi STS do automatycznego wygenerowania klucza i wysłać je w token potwierdzenia jako zaszyfrowany klucz, należy użyć tego konstruktora. Za pomocą tego konstruktora, może być objętych dwa przypadki:  
  
1.  Klient wysyła entropii, ale serwer odrzuca go.  
  
2.  Klient nie wysyła entropii, więc entropii serwera jest używany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keySizeInBits" /> jest mniejsza niż lub równy zeru.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, byte[] sourceEntropy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySizeInBits, class System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, class System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, unsigned int8[] sourceEntropy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySizeInBits As Integer, targetWrappingCredentials As EncryptingCredentials, requestorWrappingCredentials As EncryptingCredentials, sourceEntropy As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymmetricProofDescriptor(int keySizeInBits, System::IdentityModel::Tokens::EncryptingCredentials ^ targetWrappingCredentials, System::IdentityModel::Tokens::EncryptingCredentials ^ requestorWrappingCredentials, cli::array &lt;System::Byte&gt; ^ sourceEntropy);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SymmetricProofDescriptor : int * System.IdentityModel.Tokens.EncryptingCredentials * System.IdentityModel.Tokens.EncryptingCredentials * byte[] -&gt; System.IdentityModel.Tokens.SymmetricProofDescriptor" Usage="new System.IdentityModel.Tokens.SymmetricProofDescriptor (keySizeInBits, targetWrappingCredentials, requestorWrappingCredentials, sourceEntropy)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySizeInBits" Type="System.Int32" />
        <Parameter Name="targetWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
        <Parameter Name="requestorWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
        <Parameter Name="sourceEntropy" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="keySizeInBits">Rozmiar klucza symetrycznego.</param>
        <param name="targetWrappingCredentials">Klucz szyfrowania poświadczeń dla elementu docelowego żądania.</param>
        <param name="requestorWrappingCredentials">Szyfrowanie poświadczeń dla obiektu żądającego, używany do szyfrowania entropii lub token potwierdzenia.</param>
        <param name="sourceEntropy">Entropia żądającego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> klasy używany do wysyłania połączone entropii.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz wysłać entropii połączone, należy użyć tego konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceEntropy" /> jest <see langword="null" /> lub pusta tablica.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keySize" /> jest mniejsza niż zero.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, string encryptWith);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySizeInBits, class System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, class System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, string encryptWith) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySizeInBits As Integer, targetWrappingCredentials As EncryptingCredentials, requestorWrappingCredentials As EncryptingCredentials, encryptWith As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymmetricProofDescriptor(int keySizeInBits, System::IdentityModel::Tokens::EncryptingCredentials ^ targetWrappingCredentials, System::IdentityModel::Tokens::EncryptingCredentials ^ requestorWrappingCredentials, System::String ^ encryptWith);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SymmetricProofDescriptor : int * System.IdentityModel.Tokens.EncryptingCredentials * System.IdentityModel.Tokens.EncryptingCredentials * string -&gt; System.IdentityModel.Tokens.SymmetricProofDescriptor" Usage="new System.IdentityModel.Tokens.SymmetricProofDescriptor (keySizeInBits, targetWrappingCredentials, requestorWrappingCredentials, encryptWith)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySizeInBits" Type="System.Int32" />
        <Parameter Name="targetWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
        <Parameter Name="requestorWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
        <Parameter Name="encryptWith" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keySizeInBits">Rozmiar klucza symetrycznego.</param>
        <param name="targetWrappingCredentials">Klucz szyfrowania poświadczeń dla jednostki uzależnionej.</param>
        <param name="requestorWrappingCredentials">Klucz szyfrowania poświadczeń do osoby zgłaszającej żądanie.</param>
        <param name="encryptWith">Algorytm (URI) określona w <see langword="&lt;EncryptWith&gt;" /> element RST.</param>
        <summary>Automatyczne generowanie STS klucza i wysłać je w token potwierdzenia jako zaszyfrowany klucz, należy użyć tego konstruktora. Dwa przypadki są objęte usługą 1 tutaj. Klient wysyła entropii, ale serwer odrzuca on 2. Klient Wyślij entropii, nie tak po prostu użyj entropii serwera</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `encryptWith` jest algorytm DES, klucz może nie być słabe klucza DES.  
  
 Jeśli chcesz, aby usługi STS do automatycznego wygenerowania klucza i wysłać je w token potwierdzenia jako zaszyfrowany klucz, należy użyć tego konstruktora. Za pomocą tego konstruktora, może być objętych dwa przypadki:  
  
1.  Klient wysyła entropii, ale serwer odrzuca go.  
  
2.  Klient nie wysyła entropii, więc entropii serwera jest używany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keySizeInBits" /> jest mniejsza niż lub równy zeru.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, byte[] sourceEntropy, string encryptWith);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySizeInBits, class System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, class System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, unsigned int8[] sourceEntropy, string encryptWith) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySizeInBits As Integer, targetWrappingCredentials As EncryptingCredentials, requestorWrappingCredentials As EncryptingCredentials, sourceEntropy As Byte(), encryptWith As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SymmetricProofDescriptor(int keySizeInBits, System::IdentityModel::Tokens::EncryptingCredentials ^ targetWrappingCredentials, System::IdentityModel::Tokens::EncryptingCredentials ^ requestorWrappingCredentials, cli::array &lt;System::Byte&gt; ^ sourceEntropy, System::String ^ encryptWith);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SymmetricProofDescriptor : int * System.IdentityModel.Tokens.EncryptingCredentials * System.IdentityModel.Tokens.EncryptingCredentials * byte[] * string -&gt; System.IdentityModel.Tokens.SymmetricProofDescriptor" Usage="new System.IdentityModel.Tokens.SymmetricProofDescriptor (keySizeInBits, targetWrappingCredentials, requestorWrappingCredentials, sourceEntropy, encryptWith)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySizeInBits" Type="System.Int32" />
        <Parameter Name="targetWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
        <Parameter Name="requestorWrappingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
        <Parameter Name="sourceEntropy" Type="System.Byte[]" />
        <Parameter Name="encryptWith" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keySizeInBits">Rozmiar klucza symetrycznego.</param>
        <param name="targetWrappingCredentials">Szyfrowanie poświadczeń dla jednostki uzależnionej używany do szyfrowania klucza we właściwości identyfikatora SecurityKeyIdentifier.</param>
        <param name="requestorWrappingCredentials">Szyfrowanie poświadczeń dla obiektu żądającego, używany do szyfrowania entropii lub token potwierdzenia.</param>
        <param name="sourceEntropy">Entropia żądającego.</param>
        <param name="encryptWith">Identyfikator URI algorytmu służące do szyfrowania klucza weryfikacji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> klasy używany do wysyłania połączone entropii.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wysłać entropii połączone za pomocą tego konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keySizeInBits" /> jest mniejsza niż lub równy zeru.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceEntropy" /> jest <see langword="null" /> lub pusta tablica.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyTo">
      <MemberSignature Language="C#" Value="public override void ApplyTo (System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ApplyTo(class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ApplyTo (response As RequestSecurityTokenResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ApplyTo(System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ response);" />
      <MemberSignature Language="F#" Value="override this.ApplyTo : System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse -&gt; unit" Usage="symmetricProofDescriptor.ApplyTo response" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="response" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />
      </Parameters>
      <Docs>
        <param name="response">RSTR, do którego należy zastosować dowód deskryptora.</param>
        <summary>Modyfikuje RSTR określonego, zgodnie z ustawieniami w tym dowód deskryptora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawia odpowiednie artefakty, takie jak żądany token potwierdzenia wewnątrz RSTR, w zależności od zawartości wewnątrz wystąpienia dowód deskryptora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="response" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeyBytes">
      <MemberSignature Language="C#" Value="public byte[] GetKeyBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetKeyBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKeyBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetKeyBytes();" />
      <MemberSignature Language="F#" Value="member this.GetKeyBytes : unit -&gt; byte[]" Usage="symmetricProofDescriptor.GetKeyBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera materiału klucza.</summary>
        <returns>Tablica bajtów, która zawiera materiał klucza.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSourceEntropy">
      <MemberSignature Language="C#" Value="protected byte[] GetSourceEntropy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance unsigned int8[] GetSourceEntropy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetSourceEntropy () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Byte&gt; ^ GetSourceEntropy();" />
      <MemberSignature Language="F#" Value="member this.GetSourceEntropy : unit -&gt; byte[]" Usage="symmetricProofDescriptor.GetSourceEntropy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera entropii źródła w zwykły bajtów.</summary>
        <returns>Tablica bajtów, która zawiera entropii źródła.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetEntropy">
      <MemberSignature Language="C#" Value="protected byte[] GetTargetEntropy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance unsigned int8[] GetTargetEntropy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetTargetEntropy () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Byte&gt; ^ GetTargetEntropy();" />
      <MemberSignature Language="F#" Value="member this.GetTargetEntropy : unit -&gt; byte[]" Usage="symmetricProofDescriptor.GetTargetEntropy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera entropii docelowego w zwykły bajtów</summary>
        <returns>Tablica bajtów, która zawiera entropii docelowego.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyIdentifier">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Tokens.SecurityKeyIdentifier KeyIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityKeyIdentifier KeyIdentifier" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property KeyIdentifier As SecurityKeyIdentifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::IdentityModel::Tokens::SecurityKeyIdentifier ^ KeyIdentifier { System::IdentityModel::Tokens::SecurityKeyIdentifier ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyIdentifier : System.IdentityModel.Tokens.SecurityKeyIdentifier" Usage="System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator klucza, który może służyć wewnątrz wystawiony token do definiowania klucza. Zazwyczaj jest binarnego wpisu tajnego lub zaszyfrowany klucz;</summary>
        <value>Identyfikator klucza.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestorEncryptingCredentials">
      <MemberSignature Language="C#" Value="protected System.IdentityModel.Tokens.EncryptingCredentials RequestorEncryptingCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.EncryptingCredentials RequestorEncryptingCredentials" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RequestorEncryptingCredentials As EncryptingCredentials" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::IdentityModel::Tokens::EncryptingCredentials ^ RequestorEncryptingCredentials { System::IdentityModel::Tokens::EncryptingCredentials ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestorEncryptingCredentials : System.IdentityModel.Tokens.EncryptingCredentials" Usage="System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.EncryptingCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt żądający szyfrowania poświadczeń, które mogą być używane do szyfrowania żądany token potwierdzenia lub entropii w odpowiedzi.</summary>
        <value>Żądającego szyfrowania poświadczeń.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetEncryptingCredentials">
      <MemberSignature Language="C#" Value="protected System.IdentityModel.Tokens.EncryptingCredentials TargetEncryptingCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.EncryptingCredentials TargetEncryptingCredentials" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property TargetEncryptingCredentials As EncryptingCredentials" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::IdentityModel::Tokens::EncryptingCredentials ^ TargetEncryptingCredentials { System::IdentityModel::Tokens::EncryptingCredentials ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetEncryptingCredentials : System.IdentityModel.Tokens.EncryptingCredentials" Usage="System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.EncryptingCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera jednostkę uzależnioną szyfrowania poświadczeń, które mogą być używane do szyfrowania zabezpieczeń żądanego tokenu w odpowiedzi.</summary>
        <value>Uzależnionej szyfrowania poświadczeń.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>