<Type Name="SecurityToken" FullName="System.IdentityModel.Tokens.SecurityToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3a9697fc510c8fdec3027f328dae94a414bcae80" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36556852" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SecurityToken" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityToken extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityToken" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityToken" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityToken abstract" />
  <TypeSignature Language="F#" Value="type SecurityToken = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje klasę podstawową używaną do zaimplementowania wszystkich tokenów zabezpieczających.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tokenu zabezpieczającego udostępniające poświadczenia uwierzytelniania lub do ochrony wiadomości.  
  
 Tokenu zabezpieczającego można używać do udostępniające poświadczenia uwierzytelniania, materiał kluczy kryptograficznych, lub, w przypadku tokenu zabezpieczającego wydanego przez usługę tokenu zabezpieczającego (STS), zbiór oświadczenia dotyczące tematu. Wszystkie tokeny zabezpieczające pochodzi od <xref:System.IdentityModel.Tokens.SecurityToken> klasy.  
  
 Począwszy od platformy .NET 4.5, Windows Identity Foundation (WIF) zostało pełni zintegrowane programu .NET Framework i klasy udostępnianych przez WIF są preferowaną metodą programu obsługi tokenów zabezpieczających w kodzie. W WIF, tokeny zabezpieczające są serializacji i deserializacji do i z ich XML reprezentacja i są weryfikowane przy użyciu klasy pochodzące od <xref:System.IdentityModel.Tokens.SecurityTokenHandler> klasy podstawowej. Sprawdzanie poprawności tokenu obejmuje nie tylko zapewnia, że token jest prawidłowy, ale również zwracanie <xref:System.Security.Claims.ClaimsIdentity> wystąpienia z tokenu, który może być używana w podejmowaniu decyzji dotyczących uwierzytelniania i autoryzacji. <xref:System.Security.Claims.ClaimsIdentity> Jest tworzony przez implementację programu obsługi tokenów <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metody z oświadczeń zawartych w tokenie jako również od oświadczenia, które są wewnętrzne do tokenu typu samej siebie.  
  
 WIF jest dostarczany z pomocy technicznej dla następujących typów tokeny zabezpieczające:  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na potwierdzenia języka SAML 2.0. Ten typ tokenu jest zwykle wystawiony przez usługę tokenu zabezpieczającego w odpowiedzi WS-Trust lub WS-Federation zabezpieczeń żądania tokenu (RST).  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na potwierdzenia 1.1 SAML. Ten typ tokenu jest zwykle wystawiony przez usługę tokenu zabezpieczającego w odpowiedzi WS-Trust lub WS-Federation zabezpieczeń żądania tokenu (RST).  
  
-   <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken> i <xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken>: reprezentuje token zabezpieczający, który jest oparty na bilet Kerberos, który jest odebranych lub wysłanych wiadomości SOAP  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na klucz, który jest tworzony przy użyciu algorytmu RSA.  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityToken>: Reprezentuje token zabezpieczający, który zawiera informacje o sesji.  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityToken>: Reprezentuje tokenu zabezpieczającego, który jest oparty na nazwę użytkownika i hasło.  
  
-   <xref:System.IdentityModel.Tokens.WindowsSecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na tożsamość konta domeny lub użytkownika systemu Windows.  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na certyfikat X.509.  
  
-   <xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na certyfikat X.509, który jest zamapowany na użytkownika domeny systemu Windows lub komputera lokalnego konta użytkownika.  
  
 Dwie inne zabezpieczeń tokenu klasy <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken> i <xref:System.IdentityModel.Tokens.EncryptedSecurityToken>, może służyć do obsługi ogólnych przypadków.  
  
 Ogólnie rzecz biorąc zabezpieczeń tokeny dzielą się na trzy główne kategorie:  
  
-   Tokeny przenoszenia lub odwołać kryptograficznych klucza materiału. Na przykład <xref:System.IdentityModel.Tokens.RsaSecurityToken> i <xref:System.IdentityModel.Tokens.X509SecurityToken> typy są często używane w tym celu.  
  
-   Tokeny reprezentujących poświadczenia dla użytkowników, którzy już uwierzytelniony. Na przykład <xref:System.IdentityModel.Tokens.UserNameSecurityToken>, <xref:System.IdentityModel.Tokens.WindowsSecurityToken>, a w przypadku użytkownik uwierzytelniony przy użyciu certyfikatu, <xref:System.IdentityModel.Tokens.X509SecurityToken> typów.  
  
-   Tokeny wystawione przez usługę tokenu zabezpieczającego (STS) w odpowiedzi na żądania tokenu zabezpieczeń, za pomocą protokołu WS-Trust lub protokołu WS-Federation. Zwykle są one zwracane w `wst:RequestSecurityTokenResponse` XML fragment. <xref:System.IdentityModel.Tokens.Saml2SecurityToken> i <xref:System.IdentityModel.Tokens.SamlSecurityToken> typy są najczęściej używane do reprezentowania tych tokenów.  
  
 Specjalny typ tokenu <xref:System.IdentityModel.Tokens.SessionSecurityToken>, zawiera informacje potrzebne do odtworzenia podmiot zabezpieczeń, korzystając z sesji w scenariuszach aktywnych lub pasywnych.  
  
 Dodawanie funkcji do istniejących typów tokenu może pochodzić od określonego typu i jego skojarzony program obsługi tokenów do obsługi nowych elementów, które dodajesz do tokenu. Aby dodać obsługę nowych typów tokenów, może pochodzi bezpośrednio z <xref:System.IdentityModel.Tokens.SecurityToken> klasy. Po wykonaniu tej czynności należy również utworzyć klasę programu obsługi tokenów przez wynikających z <xref:System.IdentityModel.Tokens.SecurityTokenHandler> klasy. W zależności od tego, jaki ma być używany token, konieczne może być tworzenie niestandardowego programu rozpoznawania nazw tokenów przy wynikających z <xref:System.IdentityModel.Tokens.IssuerTokenResolver> klasy także jedno lub więcej typów klauzuli identyfikatora klucza niestandardowego przez pochodny <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> klasy.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.IdentityModel.Tokens.SecurityToken> tematy są pobierane z `Custom Token` próbki. W tym przykładzie przedstawiono klas niestandardowych, które umożliwiają przetwarzania tokenów sieci Web proste (SWT). Obejmuje on implementacja `SimpleWebToken` klasy i `SimpleWebTokenHandler` klasy, a także innych klas, które obsługują SWT tokenów. Uzyskać informacji dotyczących tego przykładu i inne przykłady, które są dostępne dla WIF i o tym, gdzie można je pobrać zobacz [indeksu przykładowy kod WIF](~/docs/framework/security/wif-code-sample-index.md). Poniższy kod przedstawia implementację `SimpleWebToken` klasy. Ta klasa rozszerza <xref:System.IdentityModel.Tokens.SecurityToken>.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Konieczne jest przesłonięcie <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" />, <see cref="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys" />, <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" />, i <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> właściwości. <see cref="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1" />, <see cref="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1" />, <see cref="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />, I <see cref="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" /> wszystkie metody obsługuje identyfikatorów klucza typu <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />. Musi zastępować te metody do obsługi innych typów Identyfikator klucza w klasie pochodnej.</para>
    </block>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
    <altmember cref="T:System.IdentityModel.Tokens.IssuerTokenResolver" />
    <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityToken ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityToken();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Wywoływane przez konstruktorów w klasach pochodnych zainicjować <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCreateKeyIdentifierClause&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual bool CanCreateKeyIdentifierClause&lt;T&gt; () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCreateKeyIdentifierClause&lt;(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanCreateKeyIdentifierClause(Of T As SecurityKeyIdentifierClause) () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::IdentityModel::Tokens::SecurityKeyIdentifierClause virtual bool CanCreateKeyIdentifierClause();" />
      <MemberSignature Language="F#" Value="abstract member CanCreateKeyIdentifierClause : unit -&gt; bool (requires 'T :&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause)&#xA;override this.CanCreateKeyIdentifierClause : unit -&gt; bool (requires 'T :&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" Usage="securityToken.CanCreateKeyIdentifierClause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> , który określa identyfikator klucza do utworzenia.</typeparam>
        <summary>Pobiera wartość wskazującą, czy ten token zabezpieczający jest możliwe tworzenie określonego identyfikatora klucza.</summary>
        <returns>
          <see langword="true" /> gdy <paramref name="T" /> jest typu <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause%2A> metodę, aby określić, czy token zabezpieczający można utworzyć określonego identyfikatora klucza. Aby utworzyć połączenie identyfikatora klucza <xref:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause%2A> metody.  
  
 Domyślna implementacja obsługuje klauzul identyfikatora klucza typu <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1" />
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="CreateKeyIdentifierClause&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T CreateKeyIdentifierClause&lt;T&gt; () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T CreateKeyIdentifierClause&lt;(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateKeyIdentifierClause(Of T As SecurityKeyIdentifierClause) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::IdentityModel::Tokens::SecurityKeyIdentifierClause virtual T CreateKeyIdentifierClause();" />
      <MemberSignature Language="F#" Value="abstract member CreateKeyIdentifierClause : unit -&gt; 'T (requires 'T :&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause)&#xA;override this.CreateKeyIdentifierClause : unit -&gt; 'T (requires 'T :&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" Usage="securityToken.CreateKeyIdentifierClause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> , który określa identyfikator klucza do utworzenia.</typeparam>
        <summary>Tworzy klauzuli określonego identyfikatora klucza.</summary>
        <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> czyli klauzuli identyfikatora klucza dla tokenu zabezpieczającego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause%2A> metodę, aby określić, czy token zabezpieczający można utworzyć określonego identyfikatora klucza. Aby utworzyć połączenie identyfikatora klucza <xref:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause%2A> metody.  
  
 Domyślna implementacja obsługuje klauzul identyfikatora klucza typu <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>. Jeśli w klauzuli identyfikatora klucza typu <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause> nie można utworzyć, <xref:System.NotSupportedException> jest generowany.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1" />
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public abstract string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.Id" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.IdentityModel.Tokens.SecurityToken.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera unikatowy identyfikator tokenu zabezpieczającego.</summary>
        <value>Unikatowy identyfikator tokenu zabezpieczającego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj podczas serializacji tokenu zabezpieczającego w formacie XML, `Id` atrybutu dla tokenu zabezpieczeń jest ustawiony na wartość <xref:System.IdentityModel.Tokens.SecurityToken.Id%2A> właściwości.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.IdentityModel.Tokens.SecurityToken> tematy są pobierane z `Custom Token` próbki. W tym przykładzie przedstawiono klas niestandardowych, które umożliwiają przetwarzania tokenów sieci Web proste (SWT). Obejmuje on implementacja `SimpleWebToken` klasy i `SimpleWebTokenHandler` klasy, a także innych klas, które obsługują SWT tokenów. Uzyskać informacji dotyczących tego przykładu i inne przykłady, które są dostępne dla WIF i o tym, gdzie można je pobrać zobacz [indeksu przykładowy kod WIF](~/docs/framework/security/wif-code-sample-index.md). Poniższy kod przedstawia zastąpienia z <xref:System.IdentityModel.Tokens.SecurityToken.Id%2A> właściwości.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Konieczne jest przesłonięcie <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MatchesKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool MatchesKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MatchesKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchesKeyIdentifierClause (keyIdentifierClause As SecurityKeyIdentifierClause) As Boolean" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MatchesKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public virtual bool MatchesKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MatchesKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchesKeyIdentifierClause (skiClause As SecurityKeyIdentifierClause) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MatchesKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ skiClause);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member MatchesKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool&#xA;override this.MatchesKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool" Usage="securityToken.MatchesKeyIdentifierClause skiClause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="skiClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">To be added.</param>
        <param name="skiClause">To be added.</param>
        <summary>Zwraca wartość wskazującą, czy identyfikator klucza dla tego wystąpienia można rozwiązać do określonego identyfikatora klucza.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="keyIdentifierClause" /> jest <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> i ma ten sam Unikatowy identyfikator jako <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" /> właściwość; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja obsługuje klauzul identyfikatora klucza typu <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="ResolveKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveKeyIdentifierClause (keyIdentifierClause As SecurityKeyIdentifierClause) As SecurityKey" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKey ^ ResolveKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveKeyIdentifierClause (skiClause As SecurityKeyIdentifierClause) As SecurityKey" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKey ^ ResolveKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ skiClause);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ResolveKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; System.IdentityModel.Tokens.SecurityKey&#xA;override this.ResolveKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; System.IdentityModel.Tokens.SecurityKey" Usage="securityToken.ResolveKeyIdentifierClause skiClause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="skiClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">To be added.</param>
        <param name="skiClause">To be added.</param>
        <summary>Pobiera klucz dla klauzuli określonego identyfikatora klucza.</summary>
        <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> reprezentujący klucza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause%2A> Wywołania metody <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> określenie, czy klauzula określonego identyfikatora klucza jest taka sama, jak to wystąpienie.  
  
 Domyślna implementacja zwraca pierwszy element <xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A> kolekcji, jeśli kolekcja nie jest pusty i <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> zwraca `true`; w przeciwnym razie zwraca `null`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Przy dziedziczeniu z <see cref="T:System.IdentityModel.Tokens.SecurityToken" />i wdrożenie <see cref="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" /> — metoda i <paramref name="keyIdentifierClause" /> nie można rozpoznać, zwróć <see langword="null" />. Nie być zgłaszany wyjątek z <see cref="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" /> metody.</para>
        </block>
        <altmember cref="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="SecurityKeys">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt; SecurityKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Tokens.SecurityKey&gt; SecurityKeys" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SecurityKeys As ReadOnlyCollection(Of SecurityKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Tokens::SecurityKey ^&gt; ^ SecurityKeys { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Tokens::SecurityKey ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityKeys : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt;" Usage="System.IdentityModel.Tokens.SecurityToken.SecurityKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera klucze kryptograficzne skojarzone z tokenu zabezpieczającego.</summary>
        <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> typu <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> zawierający zestaw kluczy skojarzone z tokenu zabezpieczającego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A> właściwość umożliwiająca ustawienie kluczy kryptograficznych ten token zabezpieczający chronić tokeny lub komunikatu protokołu SOAP. Klucze można używać między innymi do cyfrowego podpisywania lub szyfrowania tokenów lub wiadomości SOAP.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.IdentityModel.Tokens.SecurityToken> tematy są pobierane z `Custom Token` próbki. W tym przykładzie przedstawiono klas niestandardowych, które umożliwiają przetwarzania tokenów sieci Web proste (SWT). Obejmuje on implementacja `SimpleWebToken` klasy i `SimpleWebTokenHandler` klasy, a także innych klas, które obsługują SWT tokenów. Uzyskać informacji dotyczących tego przykładu i inne przykłady, które są dostępne dla WIF i o tym, gdzie można je pobrać zobacz [indeksu przykładowy kod WIF](~/docs/framework/security/wif-code-sample-index.md). Poniższy kod przedstawia zastąpienia z <xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A> właściwości.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Konieczne jest przesłonięcie <see cref="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ValidFrom">
      <MemberSignature Language="C#" Value="public abstract DateTime ValidFrom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidFrom" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ValidFrom As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property DateTime ValidFrom { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidFrom : DateTime" Usage="System.IdentityModel.Tokens.SecurityToken.ValidFrom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pierwszy moment w czasie, w którym ten token zabezpieczający jest nieprawidłowy.</summary>
        <value>A <see cref="T:System.DateTime" /> reprezentujący moment w czasie, w którym ten token zabezpieczający najpierw jest prawidłowy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> i <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> właściwości, aby ustalić okres czasu, w którym <xref:System.IdentityModel.Tokens.SecurityToken> token jest prawidłowy. <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> i <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> właściwości reprezentują czasie imię i nazwisko w czasie, w której token zabezpieczający jest nieprawidłowy, odpowiednio.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.IdentityModel.Tokens.SecurityToken> tematy są pobierane z `Custom Token` próbki. W tym przykładzie przedstawiono klas niestandardowych, które umożliwiają przetwarzania tokenów sieci Web proste (SWT). Obejmuje on implementacja `SimpleWebToken` klasy i `SimpleWebTokenHandler` klasy, a także innych klas, które obsługują SWT tokenów. Uzyskać informacji dotyczących tego przykładu i inne przykłady, które są dostępne dla WIF i o tym, gdzie można je pobrać zobacz [indeksu przykładowy kod WIF](~/docs/framework/security/wif-code-sample-index.md). Poniższy kod przedstawia zastąpienia z <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> właściwości.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#6)]  
[!code-csharp[WifCustomTokenST#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Konieczne jest przesłonięcie <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ValidTo">
      <MemberSignature Language="C#" Value="public abstract DateTime ValidTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidTo" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ValidTo As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property DateTime ValidTo { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidTo : DateTime" Usage="System.IdentityModel.Tokens.SecurityToken.ValidTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ostatnią błyskawiczne w czasie, w którym ten token zabezpieczający jest nieprawidłowy.</summary>
        <value>A <see cref="T:System.DateTime" /> reprezentujący ostatnią błyskawiczne w czasie, w którym ten token zabezpieczający jest nieprawidłowy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> i <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> właściwości, aby ustalić okres czasu, w którym <xref:System.IdentityModel.Tokens.SecurityToken> token jest prawidłowy. <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> i <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> właściwości reprezentują czasie imię i nazwisko w czasie, w której token zabezpieczający jest nieprawidłowy, odpowiednio.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.IdentityModel.Tokens.SecurityToken> tematy są pobierane z `Custom Token` próbki. W tym przykładzie przedstawiono klas niestandardowych, które umożliwiają przetwarzania tokenów sieci Web proste (SWT). Obejmuje on implementacja `SimpleWebToken` klasy i `SimpleWebTokenHandler` klasy, a także innych klas, które obsługują SWT tokenów. Uzyskać informacji dotyczących tego przykładu i inne przykłady, które są dostępne dla WIF i o tym, gdzie można je pobrać zobacz [indeksu przykładowy kod WIF](~/docs/framework/security/wif-code-sample-index.md). Poniższy kod przedstawia zastąpienia z <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> właściwości.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#7)]  
[!code-csharp[WifCustomTokenST#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Konieczne jest przesłonięcie <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>