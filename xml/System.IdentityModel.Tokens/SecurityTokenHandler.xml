<Type Name="SecurityTokenHandler" FullName="System.IdentityModel.Tokens.SecurityTokenHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="150d892884e4958b20bdde55fc1889994ef6ee77" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52604881" /></Metadata><TypeSignature Language="C#" Value="public abstract class SecurityTokenHandler : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenHandler extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityTokenHandler&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityTokenHandler abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type SecurityTokenHandler = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Abstrakcyjna klasa bazowa dla programy obsługi tokenów zabezpieczających.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> Klasa to klasa podstawowa, z których wszystkie security pochodzi programy obsługi tokenów. Programu obsługi tokenów zabezpieczających jest odpowiedzialny za:  
  
-   Sprawdzanie poprawności tokenów zabezpieczających (<xref:System.IdentityModel.Tokens.SecurityToken>) tego typu jest przeznaczona do przetworzenia i pakowania oświadczeń zawartych w tokenie do <xref:System.Security.Claims.ClaimsIdentity> obiektu.  
  
-   Serializacja i deserializacja tokenów zabezpieczeń tego typu, który jest przeznaczony do przetwarzania.  
  
-   Serializacja i deserializacja klauzul identyfikatora klucza (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) odwołujące się do tokenów tego typu jest przeznaczony do przetwarzania do i z `<wsse:SecurityTokenReference>` elementów.  
  
-   Tworzenie tokeny zabezpieczające od <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> obiekt przekazany przez implementacje <xref:System.IdentityModel.SecurityTokenService> klasy.  
  
-   Tworzenie klauzul identyfikatora klucza z tokenu zabezpieczającego implementacji <xref:System.IdentityModel.SecurityTokenService> klasy.  
  
 Windows Identity Foundation (WIF) jest gotowa następujące programy obsługi tokenów zabezpieczających:  
  
-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  
  
 Większość z tych klas uwidocznić dodatkowe elementy członkowskie, które implementują funkcje, które są specyficzne dla przetwarzania tokenów, dla których zaprojektowano w klasie. W wielu przypadkach może być lepszym rozwiązaniem klasy pochodnej z jednego z tych klas, a nie bezpośrednio z <xref:System.IdentityModel.Tokens.SecurityTokenHandler> klasy.  
  
 Można dodać lub usunąć z kolekcji programu obsługi tokenów, określając programu obsługi tokenów zabezpieczających [ &lt;Dodaj&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md), lub [ &lt;wyczyść&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md) elementy w obszarze [ &lt;securityTokenHandlers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) elementu w pliku konfiguracji. <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> Obiekt, który zawiera ustawienia konfiguracji dla kolekcji program obsługi jest możliwy za pośrednictwem <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> właściwość i kolekcja programów obsługi, które należy programu obsługi tokenów jest możliwy z <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> właściwości. Można zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> metody w celu przetworzenia dowolne elementy konfiguracji niestandardowej, która przyjmuje programu obsługi.  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> Klasa udostępnia kilka innych właściwości i metod. W zależności od funkcji, na które użytkownik chce zaimplementować mogą zastąpić niektóre lub wszystkie z tych składowych.  
  
 Konieczne jest przesłonięcie <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> właściwości i <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> metody w celu zapewnienia infrastruktury programu WIF, informacje o rodzaju token zabezpieczający, który jest klasy przeznaczone do przetwarzania.  
  
 Sprawdzanie poprawności, serializacja i deserializacja funkcja jest dostępna za pośrednictwem właściwości lub metody, które wskazują, czy program obsługi może wykonywać konkretną funkcję w połączeniu z metody lub metody, które implementują funkcjonalność. Poniższa lista par właściwości lub metody, które wskazują funkcji za pomocą metod, które implementują tę funkcję:  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> Właściwości i <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metoda: weryfikuje token, a następnie umieszcza oświadczeń zawartych w tokenie do <xref:System.Security.Claims.ClaimsIdentity>.  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> Właściwości i <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> metody: Token serializacji.  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> Metod i <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> metody: Token deserializacji.  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> Metody i <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> metoda: deserializacja klauzul identyfikatora klucza.  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> Metody i <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> metoda: serializacji klauzuli identyfikatora klucza.  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> i <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> metody są wywoływane z potoku we wdrożeniach <xref:System.IdentityModel.SecurityTokenService> klasy.  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> Metoda jest wywoływana przez infrastrukturę programu WIF, aby ustalić, czy określony token Odebrano już. Domyślnie ta metoda zwraca `false`, co oznacza, że token nie już została odebrana. Można zastąpić metody i zapewnić logikę wykrywania powtórzonym tokenów.  
  
   
  
## Examples  
 Przykłady kodu we wszystkich <xref:System.IdentityModel.Tokens.SecurityTokenHandler> tematy są pobierane z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md). Następujący kod XML przedstawiono sposób dodawania programu obsługi tokenów SWT do kolekcji programy obsługi tokenów.  
  
```xml  
<system.identityModel>  
  <identityConfiguration saveBootstrapContext="true">  
    <issuerTokenResolver type="SimpleWebToken.CustomIssuerTokenResolver, SimpleWebToken">  
      <AddAudienceKeyPair  symmetricKey="wAVkldQiFypTQ+kdNdGWCYCHRcee8XmXxOvgmak8vSY=" audience="http://localhost:19851/" />  
    </issuerTokenResolver>  
    <issuerNameRegistry type="RelyingParty.TrustedIssuerNameRegistry, RelyingParty"/>  
    <audienceUris>  
      <add value="http://localhost:19851/"/>  
    </audienceUris>  
    <securityTokenHandlers>  
      <add type="SimpleWebToken.SimpleWebTokenHandler, SimpleWebToken" />  
    </securityTokenHandlers>  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityToken" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />
    <altmember cref="T:System.IdentityModel.SecurityTokenService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityTokenHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Metoda wywoływana z konstruktorów w klasach pochodnych można zainicjować <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadKeyIdentifierClause (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Umieszczony w elemencie początkowym odczytującego XML. Czytnik nie powinny być zaawansowane przez tę metodę.</param>
        <summary>Zwraca wartość, która wskazuje, czy XML element odwołuje się podany czytnik XML klauzuli identyfikatora klucza, który może być zdeserializowany przez to wystąpienie.</summary>
        <returns><see langword="true" /> Jeśli <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> metoda może odczytać element; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja zwraca `false` do wskazania, że nie można odczytać klauzuli identyfikatora klucza.  
  
 Klasa pochodna sprawdza, czy element, który czytnik odwołuje się do w celu ustalenia, czy wystąpienie może wykonywać deserializację klauzuli identyfikatora klucza. Zazwyczaj jest to osiągane poprzez wywołanie <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType> metody z odpowiednich ciągów elementu i przestrzeni nazw określony. Jeśli zastąpisz <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, konieczne jest również przesłonięcie <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> metodę, aby zapewnić logikę w celu wykonania deserializacji klauzuli identyfikatora klucza.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość wskazującą, czy określony token może być zdeserializowany jako token typu przetwarzanych przez to wystąpienie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (tokenString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : string -&gt; bool&#xA;override this.CanReadToken : string -&gt; bool" Usage="securityTokenHandler.CanReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">Token ciągu do odczytu.</param>
        <summary>Zwraca wartość wskazującą, czy określony ciąg może być zdeserializowany jako token typu przetwarzanych przez to wystąpienie.</summary>
        <returns><see langword="true" /> Jeśli <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> metoda może odczytać element; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca zawsze wartość domyślną implementację `false`.  
  
 Jeśli zastąpienie tej metody należy również zmienić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> metodę, aby zapewnić logikę do deserializacji tokenu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadToken : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Umieszczony w elemencie początkowym odczytującego XML. Czytnik nie powinny być zaawansowane przez tę metodę.</param>
        <summary>Zwraca wartość wskazującą, czy element XML odwołuje się podany czytnik XML mogą być odczytywane jako token typu przetwarzanych przez to wystąpienie.</summary>
        <returns><see langword="true" /> Jeśli <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> metoda może odczytać element; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca zawsze wartość domyślną implementację `false`.  
  
 Klasa pochodna sprawdza, czy element, który czytnik odwołuje się do celu ustalenia, czy wystąpienie może wykonywać deserializację tokenu zabezpieczającego. Zazwyczaj jest to osiągane poprzez wywołanie <xref:System.Xml.XmlReader.IsStartElement%2A> metody z odpowiednich ciągów elementu i przestrzeni nazw określony. Jeśli zastąpisz <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, konieczne jest również przesłonięcie <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> metody lub <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> metodę, aby zapewnić logikę w celu wykonania deserializacji klauzuli identyfikatora klucza.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> metodę pozwala ustalić, czy token może zostać odczytany przez program obsługi. Kod jest pobierana z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public virtual bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanValidateToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanValidateToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanValidateToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy program obsługi wspiera sprawdzania poprawności tokenów zabezpieczających.</summary>
        <value><see langword="true" /> Jeśli klasa jest zdolny do weryfikacji tokenów zabezpieczeń. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zaimplementować weryfikacji w klasie pochodnej, należy zastąpić tę właściwość, aby zwrócić `true` i zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodę, aby zaimplementować logikę weryfikacji.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> właściwości, aby wskazać, że niestandardowe procedury obsługi sprawdzania poprawności tokenów. Kod jest pobierana z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanWriteKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanWriteKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool&#xA;override this.CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool" Usage="securityTokenHandler.CanWriteKeyIdentifierClause securityKeyIdentifierClause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="securityKeyIdentifierClause">Klauzuli identyfikatora klucza do sprawdzenia.</param>
        <summary>Zwraca wartość wskazującą, czy klauzuli identyfikatora klucza określonego może być serializowany przez to wystąpienie.</summary>
        <returns><see langword="true" /> Jeśli w klauzuli identyfikatora klucza może być serializowany; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca zawsze wartość domyślną implementację `false`.  
  
 Jeśli zastąpisz <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, konieczne jest również przesłonięcie <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> metodę, aby zapewnić logikę do serializacji klauzuli identyfikatora klucza.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWriteToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWriteToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy program obsługi może wykonywać serializację tokenów zabezpieczających.</summary>
        <value><see langword="true" /> Jeśli klasa jest do serializacji tokenów. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zaimplementować serializacji w klasie pochodnej, należy zastąpić tę właściwość, aby zwrócić `true` i zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> metody służące do implementacji logiki serializacji.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> właściwości, aby wskazać, że niestandardowy program obsługi może wykonywać serializację tokenów. Kod jest pobierana z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberSignature Language="VB.NET" Value="Public Property Configuration As SecurityTokenHandlerConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ Configuration { System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ get(); void set(System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Configuration : System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration with get, set" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> obiekt, który udostępnia konfigurację dla bieżącego wystąpienia.</summary>
        <value>Obiekt konfiguracji dla bieżącego wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> Właściwość jest zwykle ustawiana przez infrastrukturę konfiguracji z [ &lt;securityTokenHandlerConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) elementu w pliku konfiguracyjnym aplikacji — podczas uruchamiania.  
  
 W klasach pochodnych należy użyć <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> właściwości ustawień konfiguracji dostępu, na przykład rejestru nazwy dostawcy do użycia w <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metody są dostępne z <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType> własności obiektu konfiguracji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainingCollection">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainingCollection As SecurityTokenHandlerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ ContainingCollection { System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainingCollection : System.IdentityModel.Tokens.SecurityTokenHandlerCollection" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję programu obsługi tokenów, który zawiera bieżącego wystąpienia.</summary>
        <value>Kolekcja programu obsługi tokenów, która zawiera bieżące wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po dodaniu programu obsługi tokenów do <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> wystąpienie, właściwość ta jest automatycznie ustawiona.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenReference">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference (System.IdentityModel.Tokens.SecurityToken token, bool attached);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference(class System.IdentityModel.Tokens.SecurityToken token, bool attached) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSecurityTokenReference (token As SecurityToken, attached As Boolean) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ CreateSecurityTokenReference(System::IdentityModel::Tokens::SecurityToken ^ token, bool attached);" />
      <MemberSignature Language="F#" Value="abstract member CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.CreateSecurityTokenReference (token, attached)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="attached" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token">Token, dla którego ma zostać utworzony odwołania.</param>
        <param name="attached"><see langword="true" /> Jeśli powinny zostać utworzone odwołanie dołączonych; <see langword="false" /> Jeśli niedołączone odniesienia powinien zostać utworzony.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej tworzy odwołania do tokenu zabezpieczeń dla tokenów przetwarzane przez tę klasę. Ta metoda jest zazwyczaj wywoływana przez usługę tokenu zabezpieczającego (STS).</summary>
        <returns>Klauzuli identyfikatora klucza, który odwołuje się do określonego tokenu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ta metoda wyrzuca <xref:System.NotImplementedException> wyjątku.  
  
 Klasy pochodne przesłonić tę metodę, aby zwrócić klauzuli identyfikatora klucza (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) można utworzyć `<wsse:SecurityTokenReference>` elementu dla określonego tokenu.  
  
 Wywoływane z implementacjami <xref:System.IdentityModel.SecurityTokenService> klasy.  
  
 Zazwyczaj <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> nie trzeba było używać innych niż podczas tworzenia usługi tokenów zabezpieczeń niestandardowych. Po powrocie tokenu zabezpieczającego z usługi tokenu zabezpieczającego tokenu zabezpieczeń zawiera odwołania do tokenów zabezpieczających dołączone i odłączone. Dołączone odwołania odnoszą się do tokenów zabezpieczających, które są zawarte w nagłówku zabezpieczeń komunikatu protokołu SOAP i odwołania niedołączone odwoływać się tokeny zabezpieczające, które nie są uwzględniane w nagłówku zabezpieczeń komunikatu protokołu SOAP. Te odwołania potwierdzają zazwyczaj autentyczności tokenu zabezpieczeń.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> metodą tworzenia klauzuli identyfikatora klucza z określonego tokenu. Kod jest pobierana z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken CreateToken(class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ CreateToken(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberSignature Language="F#" Value="abstract member CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.CreateToken tokenDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor">Deskryptor token zabezpieczeń z którego ma zostać utworzony token. Właściwości deskryptora tokenu są ustawiane przed wywołaniem tej metody.</param>
        <summary>Po przesłonięciu w klasie pochodnej tworzy token zabezpieczający, przy użyciu określonego deskryptora tokenu. Ta metoda jest wywoływana przez usługę tokenu zabezpieczającego (STS).</summary>
        <returns>Token zabezpieczający, który odpowiada właściwości deskryptora tokenu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ta metoda wyrzuca <xref:System.NotImplementedException> wyjątku.  
  
 Wywoływane z implementacjami <xref:System.IdentityModel.SecurityTokenService> klasy.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> metodę, aby utworzyć i zwracają token z tokenu deskryptora. Kod jest pobierana z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectReplayedToken">
      <MemberSignature Language="C#" Value="protected virtual void DetectReplayedToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetectReplayedToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DetectReplayedToken (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DetectReplayedToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.DetectReplayedToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">Token do sprawdzania powtarzania.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, zgłasza wyjątek, jeśli określony token zostanie wykryte jako jest odtwarzany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja nic nie robi.  
  
 Klasy pochodne powinny zgłaszać <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> Jeśli token został już użyty.  
  
 Windows Identity Foundation (WIF) zapewnia <xref:System.IdentityModel.Tokens.TokenReplayCache> klasy, z której powtarzanie pamięci podręczne mogą być uzyskane i [ &lt;tokenReplayCache&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md) element konfiguracji, który może służyć do konfigurowania Powtarzanie pamięci podręcznej używane przez programy obsługi tokenów w aplikacji; Jednakże dokładna implementację programu <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> metoda zależy od Projektant klasy pochodnej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public abstract string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTokenTypeIdentifiers () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ GetTokenTypeIdentifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetTokenTypeIdentifiers : unit -&gt; string[]" Usage="securityTokenHandler.GetTokenTypeIdentifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej, zwraca zbiór identyfikatorów URI, które są używane w żądaniach wysyłanych do identyfikowania token typu przetwarzane w klasie pochodnej.</summary>
        <returns>Zestaw identyfikatorów URI, które identyfikują typ tokenu, który obsługuje ten program obsługi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Type> Tokenu przetwarzanych przez bieżące wystąpienie jest dostępny za pośrednictwem <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> właściwości. <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> Metoda zwraca zbiór dopuszczalnych identyfikatorów, które mogą być używane w wiadomościach do odwoływania się do typu tokenu. Na przykład wartość identyfikatora URI używane w `<wst:TokenType>` pod `<wst:RequestSecurityToken>` element, aby zażądać określonego rodzaju token (reprezentowane przez <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType> właściwości w modelu obiektu).  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> metodę, aby zwracać typ tokenu identyfikatory niestandardowy token. Kod jest pobierana z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#17](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#17)]  
[!code-csharp[WifRcCustomToken#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="securityTokenHandler.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Elementy XML konfiguracji. Każdy węzeł na liście jest typu <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, ładuje niestandardowej konfiguracji z pliku XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> Metoda jest wywoływana przez infrastrukturę konfiguracji. Gdy ta metoda jest wywoływana, `nodelist` będzie zawierać elementów podrzędnych najwyższego poziomu programu obsługi tokenów [ &lt;Dodaj&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) elementu z pliku konfiguracji. Każdy z nich z kolei może zawierać, atrybutów lub elementów podrzędnych w zależności od schematu konfiguracji, jaką zdefiniujesz dla klasy pochodnej.  
  
 Domyślna implementacja zwraca <xref:System.NotImplementedException>. Zastępuje tę metodę w klasie pochodnej umożliwiające inicjowania programu obsługi tokenów zabezpieczeń z pliku konfiguracji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadKeyIdentifierClause (reader As XmlReader) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ ReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.ReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Czytnik XML umieszczony w elemencie początkowym XML jako zdeserializowany do klauzuli identyfikatora klucza.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, deserializuje XML odwołuje się podany czytnik XML klauzuli identyfikatora klucza, który odwołuje się do tokenu przetwarzane w klasie pochodnej.</summary>
        <returns>Klauzuli identyfikatora klucza, która została przeprowadzona z pliku XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ta metoda wyrzuca <xref:System.NotImplementedException> wyjątku.  
  
 Zastępuje tę metodę, aby zapewnić logikę w celu wykonania deserializacji klauzuli identyfikatora klucza z pliku XML. Jeśli zastąpienie tej metody należy również zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej, deserializuje określony plik XML do tokenu typu przetwarzane w klasie pochodnej.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (tokenString As String) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">Ciąg, który ma zostać przeprowadzona.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, deserializuje określony ciąg tokenu typu przetwarzane w klasie pochodnej.</summary>
        <returns>Token zabezpieczający, który został przeprowadzona od określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-method-note](~/includes/untrusted-data-method-note.md)]
  
 Domyślnie ta metoda wyrzuca <xref:System.NotImplementedException> wyjątku.  
  
 Zastąpienie tej metody oferują funkcje, które może wykonywać deserializację tokenu zabezpieczającego z ciągu. Jeśli zastąpisz tej metody należy również zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Czytnik XML umieszczony w elemencie początkowym tokenu.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, deserializuje XML odwołuje się określona czytnika XML do tokenu typu przetwarzane w klasie pochodnej.</summary>
        <returns>Token zabezpieczający, który został przeprowadzona z pliku XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-method-note](~/includes/untrusted-data-method-note.md)]
  
 Domyślnie ta metoda wyrzuca <xref:System.NotImplementedException> wyjątku.  
  
 Zastępuje tę metodę, aby zapewnić logikę do deserializacji tokenu zabezpieczającego z pliku XML. Jeśli zastąpienie tej metody należy również zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> metody. Zazwyczaj w klasach pochodnych, jeśli metoda nie można deserializować token z przywoływanego pliku XML wyniku weryfikacji zgłasza wyjątek <xref:System.Xml.XmlException>.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> metodę w celu odczytania niestandardowy token z określonego czytnika XML. Kod jest pobierana z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#7)]  
[!code-csharp[WifRcCustomToken#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#8)]  
[!code-csharp[WifRcCustomToken#14](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken (reader, tokenResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">Czytnik XML umieszczony w elemencie początkowym tokenu.</param>
        <param name="tokenResolver">Program rozpoznawania tokenów zawierający tokeny out-of-band i pamięci podręcznej.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, deserializuje XML odwołuje się określona czytnika XML do tokenu typu przetwarzane w klasie pochodnej przy użyciu określonego program rozpoznawania tokenów.</summary>
        <returns>Token zabezpieczający, który został przeprowadzona z pliku XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-method-note](~/includes/untrusted-data-method-note.md)]
  
 Domyślna implementacja ignoruje `tokenResolver` parametru i delegatów wywołanie <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> metody.  
  
 Zastępuje tę metodę, aby zapewnić logikę do deserializacji tokenu zabezpieczającego z pliku XML. Jeśli zastąpienie tej metody należy również zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> metody. Zazwyczaj w klasach pochodnych, jeśli metoda nie można deserializować token z przywoływanego pliku XML wyniku weryfikacji zgłasza wyjątek <xref:System.Xml.XmlException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public abstract Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TokenType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ TokenType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : Type" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej pobiera rodzaju token zabezpieczający, który jest przetwarzany przez to wystąpienie.</summary>
        <value>Typ token zabezpieczający, który jest przetwarzany przez to wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy przesłonić tę właściwość w klasach pochodnych i zwracać <xref:System.Type> tokenu zabezpieczającego (<xref:System.IdentityModel.Tokens.SecurityToken>) przetworzony w klasie pochodnej.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> właściwości do zwrócenia <xref:System.Type> tokenów zabezpieczających, które są przetwarzane przez niestandardowy program obsługi. Kod jest pobierana z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#18](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationFailure">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationFailure (System.IdentityModel.Tokens.SecurityToken token, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationFailure(class System.IdentityModel.Tokens.SecurityToken token, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationFailure (token As SecurityToken, errorMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationFailure(System::IdentityModel::Tokens::SecurityToken ^ token, System::String ^ errorMessage);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationFailure : System.IdentityModel.Tokens.SecurityToken * string -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationFailure (token, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">Token zabezpieczający, który jest weryfikowany.</param>
        <param name="errorMessage">Wiadomość do zapisu do śledzenia.</param>
        <summary>Śledzi zdarzenia błędów podczas walidacji tokenów zabezpieczających, gdy śledzenie jest włączone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powinna być wywoływana z <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metody, gdy weryfikacja tokenu nie powiodło się.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationSuccess">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationSuccess (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationSuccess(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationSuccess (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationSuccess(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationSuccess : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationSuccess token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">Token, który został zweryfikowany.</param>
        <summary>Śledzi pomyślnej weryfikacji zdarzenia tokenów zabezpieczeń, gdy śledzenie jest włączone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powinna być wywoływana z <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metoda po token został pomyślnie zweryfikowany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateToken (token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;&#xA;override this.ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;" Usage="securityTokenHandler.ValidateToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">Token do sprawdzania poprawności.</param>
        <summary>Po przesłonięciu w klasie pochodnej weryfikuje token zabezpieczeń określone. Token musi być typu przetwarzane w klasie pochodnej.</summary>
        <returns>Tożsamości zawartych w tokenie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ta metoda wyrzuca <xref:System.NotImplementedException> wyjątku.  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> Metoda jest wywoływana przez infrastrukturę do sprawdzania poprawności i wyodrębniania oświadczeń z tokenu zabezpieczającego po deserializacji. Te oświadczenia są zwracane w kolekcji <xref:System.Security.Claims.ClaimsIdentity> obiektów zwróconych przez metodę. W typowych przypadkach ta kolekcja będzie zawierać jedną tożsamość.  
  
 W klasach pochodnych, sprawdzanie poprawności zwykle obejmują sprawdzanie odbiorców, określone w tokenie względem odbiorców, identyfikatorów URI określonego w <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType> własności obiektu konfiguracji programu obsługi tokenów, które są określone w <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> właściwości. Te identyfikatory URI są zazwyczaj ustawiane w pliku konfiguracji w ramach [ &lt;audienceUris&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md) elementu. Jeśli nie można zweryfikować odbiorców, <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> należy zgłosić wyjątek.  
  
 Podczas przetwarzania tokenu, wystawca zazwyczaj sprawdzania poprawności, przekazując emitenta tokenu do jednego z <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> metod <xref:System.IdentityModel.Tokens.IssuerNameRegistry> obiekt, który jest skonfigurowany do obsługi za pomocą <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> właściwości. Rejestru nazwy wystawcy jest zazwyczaj skonfigurowany, za pośrednictwem [ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) elementu w pliku konfiguracji. <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> Zwraca nazwę wystawcy. Ta nazwa powinna być używana do ustawiania <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType> właściwość oświadczeń zawartych w tokenie. Jeśli rejestru nazwy wystawcy nie zawiera wpis dla tokenu wystawcy <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> zwraca `null`. W tym przypadku <xref:System.IdentityModel.Tokens.SecurityTokenException> jest zazwyczaj zgłaszany w klasach pochodnych, ale to zachowanie zależy od Projektant klasy.  
  
   
  
## Examples  
 Poniższy kod przedstawia nadpisanie <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodę programu obsługi tokenów zabezpieczających przetwarzający tokenów proste sieci web (SWT). Kod jest pobierana z `CustomToken` próbki. Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#9](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#9)]  
  
 Poniższy kod przedstawia `CreateClaims` metody, która jest wywoływana z zastępowania metody <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metody w poprzednim przykładzie. Ta metoda zwraca <xref:System.Security.Claims.ClaimsIdentity> obiekt, który jest tworzony na podstawie oświadczenia w tokenie. Kod jest pobierana z `CustomToken` próbki. Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#15](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#15)]  
  
 Poniższy kod przedstawia `ValidateSignature` metody, która jest wywoływana z zastępowania metody <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodę programu obsługi tokenów web proste. Ta metoda sprawdza podpis tokenu, korzystając ze skonfigurowanym ustawieniem <xref:System.IdentityModel.Tokens.IssuerTokenResolver>. Kod jest pobierana z `CustomToken` próbki. Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#12](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#12)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 Poniższy kod przedstawia `ValidateAudience` metody, która jest wywoływana z zastępowania metody <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodę programu obsługi tokenów web proste. Ta metoda sprawdza odbiorców zawartych w tokenie względem odbiorców identyfikatory URI, które zostały określone w konfiguracji. Kod jest pobierana z `CustomToken` próbki. Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#13](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual void WriteKeyIdentifierClause (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteKeyIdentifierClause(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteKeyIdentifierClause(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit&#xA;override this.WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit" Usage="securityTokenHandler.WriteKeyIdentifierClause (writer, securityKeyIdentifierClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="writer">Modułu zapisujący XML.</param>
        <param name="securityKeyIdentifierClause">Klauzuli identyfikatora klucza do serializacji.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, serializuje klauzuli identyfikatora klucza określonego do pliku XML. Klauzuli identyfikatora klucza musi być typu, obsługiwane w klasie pochodnej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ta metoda wyrzuca <xref:System.NotImplementedException> wyjątku.  
  
 Zastępuje tę metodę, aby zapewnić logikę do serializacji klauzuli identyfikatora klucza do pliku XML. Jeśli zastąpienie tej metody należy również zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej, serializuje token zabezpieczeń określone. Token musi być typu przetwarzane w klasie pochodnej.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual string WriteToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string WriteToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteToken (token As SecurityToken) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ WriteToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string&#xA;override this.WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string" Usage="securityTokenHandler.WriteToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">Token do zserializowania.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, serializuje token zabezpieczeń określone na ciąg. Token musi być typu przetwarzane w klasie pochodnej.</summary>
        <returns>Zserializowany token.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ta metoda wyrzuca <xref:System.NotImplementedException> wyjątku.  
  
 Zastępuje tę metodę, aby zapewnić logikę do serializacji XML tokenu zabezpieczającego. Jeśli zastąpienie tej metody należy również zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteToken(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.WriteToken (writer, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer">Modułu zapisujący XML.</param>
        <param name="token">Token do zserializowania.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, serializuje token zabezpieczeń określone do pliku XML. Token musi być typu przetwarzane w klasie pochodnej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ta metoda wyrzuca <xref:System.NotImplementedException> wyjątku.  
  
 Zastępuje tę metodę, aby zapewnić logikę do serializacji XML tokenu zabezpieczającego. Jeśli zastąpienie tej metody należy również zastąpić <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> właściwości.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> metodę, aby serializować niestandardowy token. Kod jest pobierana z `Custom Token` próbki. W tym przykładzie przedstawiono niestandardowych klas, które umożliwiają przetwarzanie tokenów sieci Web proste (SWT). Aby uzyskać informacji na temat tego przykładu i inne przykłady, które są dostępne dla programu WIF i gdzie można je pobrać, zobacz [Indeks przykładów kodu programu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#10](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#10)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>