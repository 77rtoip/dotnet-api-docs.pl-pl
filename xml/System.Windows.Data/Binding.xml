<Type Name="Binding" FullName="System.Windows.Data.Binding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a39f70f0d554de6fd2dea4e198fa15f050241385" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36365357" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Binding : System.Windows.Data.BindingBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Windows.Data.BindingBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding&#xA;Inherits BindingBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding : System::Windows::Data::BindingBase" />
  <TypeSignature Language="F#" Value="type Binding = class&#xA;    inherit BindingBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Data.BindingBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia ogólne do definicji powiązania, który jest połączony właściwości obiektów docelowych powiązania (zazwyczaj elementy WPF) i dowolnego źródła danych (na przykład bazę danych, plik XML lub dowolnego obiektu, który zawiera dane).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] Powiązanie danych zapewnia prosty i spójny sposób dla aplikacji przedstawić i interakcji z danymi. Powiązanie danych pozwala na synchronizowanie wartości właściwości z dwóch różnych obiektów.  
  
 Aby ustanowić powiązanie, użyj <xref:System.Windows.Data.Binding> klasy lub jednej z klas, które dziedziczą <xref:System.Windows.Data.BindingBase>. Niezależnie od tego, jak obiekt powiązania i rodzaj źródła danych, każdego powiązania jest zgodna z modelem zilustrowane na poniższym rysunku.  
  
 ![Diagram podstawowego powiązania danych](~/add/media/databindingmostbasic.png "diagram podstawowego powiązania danych")  
  
 Na rysunku pokazano następujące podstawowe [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] pojęcia dotyczące powiązania danych.  
  
-   Każdego powiązania ma zwykle te cztery składniki: powiązania obiektu docelowego, właściwość target, źródle powiązania i <xref:System.Windows.Data.Binding.Path%2A> wartości w źródle powiązania do użycia. Na przykład, jeśli chcesz powiązać zawartość <xref:System.Windows.Controls.TextBox> do właściwości Name obiektu pracownika, obiekt docelowy jest <xref:System.Windows.Controls.TextBox>, właściwość docelowa jest <xref:System.Windows.Controls.TextBox.Text%2A> właściwości, wartość używana jest nazwa i obiekt źródłowy jest pracownika obiekt.  
  
-   Właściwość target musi być właściwością zależności. Oznacza to również, że nie można powiązać pola. Większość właściwości <xref:System.Windows.UIElement> obiekty są właściwości zależności i większość właściwości zależności, z wyjątkiem sieci tylko do odczytu, obsługuje powiązanie danych domyślnie. (Tylko <xref:System.Windows.DependencyObject> typów można zdefiniować właściwości zależności i wszystkie <xref:System.Windows.UIElement> obiektów pochodzi od <xref:System.Windows.DependencyObject>.)  
  
-   Mimo że nie jest określona na ilustracji, należy zauważyć, że powiązania obiektu źródłowego nie jest ograniczona do niestandardowego jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] obiektu. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Powiązanie danych obsługuje dane w postaci [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] obiektów i [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]. Aby podać kilka przykładów, może być źródle powiązania <xref:System.Windows.UIElement>, dowolnego obiektu listy [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] obiektu, z którym skojarzony jest [!INCLUDE[TLA#tla_adonet](~/includes/tlasharptla-adonet-md.md)] danych lub usługi sieci Web lub element XmlNode, który zawiera z [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] danych.  
  
 Użyj <xref:System.Windows.Data.Binding.Mode%2A> właściwość, aby określić kierunek przepływu danych. Aby wykryć zmiany źródła w-lub dwukierunkowo, źródło musi implementować mechanizm powiadamiania Zmień odpowiednie właściwości takich jak <xref:System.ComponentModel.INotifyPropertyChanged>. Na przykład zobacz [porady: Implementowanie powiadomienia o zmianie właściwości](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md). <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> Właściwość określa czas źródła aktualizacji. Aby uzyskać więcej informacji, zobacz "Podstawowe dane powiązanie pojęcia" w [omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object property="{Binding  declaration}"/>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *Deklaracja*  
 Zero lub więcej klauzule atrybutu przypisania rozdzielonych przecinkami (,). Aby uzyskać więcej informacji, zobacz [powiązanie — rozszerzenie znaczników](~/docs/framework/wpf/advanced/binding-markup-extension.md) lub [powiązanie Przegląd deklaracji](~/docs/framework/wpf/data/binding-declarations-overview.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.MultiBinding" />
    <altmember cref="T:System.Windows.Data.PriorityBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Data.Binding" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Data.Binding" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Windows.Data.Binding : string -&gt; System.Windows.Data.Binding" Usage="new System.Windows.Data.Binding path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Pierwszy <see cref="P:System.Windows.Data.Binding.Path" /> dla wiązania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Data.Binding" /> klasy ze ścieżką początkowej.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="T:System.Windows.UIElement" /> Lub <see cref="T:System.Windows.ContentElement" /> nasłuchującą na zdarzenie.</param>
        <param name="handler">Program obsługi do dodania.</param>
        <summary>Dodaje obsługę <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> dołączone zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje użycie dołączone zdarzenie [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="T:System.Windows.UIElement" /> Lub <see cref="T:System.Windows.ContentElement" /> nasłuchującą na zdarzenie.</param>
        <param name="handler">Program obsługi do dodania.</param>
        <summary>Dodaje obsługę <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> dołączone zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje użycie dołączone zdarzenie [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj with get, set" Usage="System.Windows.Data.Binding.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nieprzezroczyste dane przekazane do dyspozytora danych asynchronicznych.</summary>
        <value>Dane przekazywane do dyspozytora danych asynchronicznych.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Data.Binding.IsAsync" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
      </Docs>
    </Member>
    <Member MemberName="BindsDirectlyToSource">
      <MemberSignature Language="C#" Value="public bool BindsDirectlyToSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsDirectlyToSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsDirectlyToSource As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsDirectlyToSource { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsDirectlyToSource : bool with get, set" Usage="System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy do oceny <see cref="P:System.Windows.Data.Binding.Path" /> względem elementu danych lub <see cref="T:System.Windows.Data.DataSourceProvider" /> obiektu.</summary>
        <value>
          <see langword="false" /> Aby obliczyć ścieżki względem elementu danych. w przeciwnym razie <see langword="true" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalne zachowanie (Jeśli ta właściwość jest `false`) zawiera specjalne traktowanie <xref:System.Windows.Data.DataSourceProvider> obiektów. W takim przypadku ocenia aparat wiązania <xref:System.Windows.Data.Binding.Path%2A> względem obiektu uzyskane z <xref:System.Windows.Data.DataSourceProvider.Data%2A> właściwości. Ponadto powiązania nasłuchuje <xref:System.Windows.Data.DataSourceProvider.DataChanged> zdarzenia i odpowiednio reaguje. Ustawienie tej właściwości na `true` zastąpienia tego zachowania i pozwala na powiązanie dostępu do właściwości <xref:System.Windows.Data.DataSourceProvider> samego obiektu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.ObjectDataProvider" />
        <altmember cref="T:System.Windows.Data.XmlDataProvider" />
      </Docs>
    </Member>
    <Member MemberName="Converter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.IValueConverter Converter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.IValueConverter Converter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Converter" />
      <MemberSignature Language="VB.NET" Value="Public Property Converter As IValueConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::IValueConverter ^ Converter { System::Windows::Data::IValueConverter ^ get(); void set(System::Windows::Data::IValueConverter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Converter : System.Windows.Data.IValueConverter with get, set" Usage="System.Windows.Data.Binding.Converter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.IValueConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia konwerter do użycia.</summary>
        <value>Wartości typu <see cref="T:System.Windows.Data.IValueConverter" />. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązanie niejawnie wykorzystuje konwerter domyślny, który próbuje przeprowadzić konwersji typu wartości źródła z wartością docelową. Jeśli nie można dokonać konwersji, zwraca konwerter domyślne `null`.  
  
 Jeśli chcesz skojarzyć z powiązaniem konwertera niestandardowej wartości, należy utworzyć klasę, która implementuje <xref:System.Windows.Data.IValueConverter> interfejsu i podaj implementacji dla <xref:System.Windows.Data.IValueConverter.Convert%2A> i <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> metody. Konwertery wartości można zmiana typu danych, tłumaczenia kultury szczegóły, takie jak zestawy znaków lub zmodyfikuj inne aspekty ich prezentacji. Przykłady typowych konwersji scenariuszy, zobacz "Konwersja danych" w [omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="xamlAttributeUsage_Converter"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object Converter="myConverter"/>  
```  
  
<a name="xamlValues_Converter"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *myConverter*  
 Odwołanie do klasy, która implementuje zasobów <xref:System.Windows.Data.IValueConverter> interfejsu, który zawiera implementacje <xref:System.Windows.Data.IValueConverter.Convert%2A> i <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> metody. Aby odwołać się do konwerter wartości, należy użyć [StaticResource — rozszerzenie znaczników](~/docs/framework/wpf/advanced/staticresource-markup-extension.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConverterCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConverterCulture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConverterCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterCulture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Data.Binding.ConverterCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kulturę, w której ma zostać oszacowana konwerter.</summary>
        <value>Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta właściwość nie jest ustawiona, aparat wiązania używa `Language` właściwości powiązania obiektu docelowego. W [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] to domyślne "en-us" lub dziedziczy wartości z elementem głównym (lub dowolnego elementu) strony, jeśli został jawnie zdefiniowany.  
  
 Aby uzyskać informacje o konwersji danych, zobacz sekcję Konwersja danych w [omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterParameter">
      <MemberSignature Language="C#" Value="public object ConverterParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConverterParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ConverterParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterParameter : obj with get, set" Usage="System.Windows.Data.Binding.ConverterParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia parametr do przekazania do <see cref="P:System.Windows.Data.Binding.Converter" />.</summary>
        <value>Parametr do przekazania do <see cref="P:System.Windows.Data.Binding.Converter" />. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Windows.Data.Binding.ConverterParameter%2A> właściwości w celu określenia, jak przekonwertować obiektu.  Ta właściwość przekazuje informacje dodatkowe konwerter, który jest używany w powiązaniu.  Po określeniu <xref:System.Windows.Data.Binding.ConverterParameter%2A>, wartość jest przekazywana do <xref:System.Windows.Data.IValueConverter.Convert%2A> i <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> metod jako `parameter` parametru.  
  
 Na przykład zobacz [jak: utworzyć wartość oparta na z powiązane elementy listy](~/docs/framework/wpf/data/how-to-produce-a-value-based-on-a-list-of-bound-items.md). Ten przykład przedstawia implementację <xref:System.Windows.Data.IMultiValueConverter> , ale nadal stosuje się użycia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNothing">
      <MemberSignature Language="C#" Value="public static readonly object DoNothing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DoNothing" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.DoNothing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DoNothing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ DoNothing;" />
      <MemberSignature Language="F#" Value=" staticval mutable DoNothing : obj" Usage="System.Windows.Data.Binding.DoNothing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Używane jako wartości zwracane nakazać aparat wiązania nie do wykonywania dowolnych akcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość powiązania źródła lub konwertera może zwrócić <xref:System.Windows.Data.Binding.DoNothing?displayProperty=nameWithType> nakazać aparat wiązania nie do wykonywania dowolnych akcji. Na przykład, aby poinstruować aparat wiązania nie można przenieść wartość docelowa powiązania nie, aby przejść do następnej <xref:System.Windows.Data.Binding> w <xref:System.Windows.Data.PriorityBinding>, lub nie należy używać `FallBackValue` lub wartość domyślną.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Windows.Data.Binding.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę elementu ma być używana jako obiekt źródłowy powiązania.</summary>
        <value>Wartość <see langword="Name" /> właściwości lub [x: Name Directive](~/docs/framework/xaml-services/x-name-directive.md) elementu zainteresowań. Elementy w kodzie może dotyczyć tylko wtedy, gdy są one zarejestrowane do odpowiedniego <see cref="T:System.Windows.NameScope" /> za pośrednictwem <see langword="RegisterName" />. Aby uzyskać więcej informacji zobacz [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest przydatna, jeśli chcesz powiązać z właściwością innego elementu w aplikacji. Na przykład, jeśli chcesz użyć <xref:System.Windows.Controls.Slider> mogą kontrolować jego wysokość formantem w aplikacji lub jeśli chcesz powiązać <xref:System.Windows.Controls.ContentControl.Content%2A> kontroli w celu <xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> właściwości użytkownika <xref:System.Windows.Controls.ListBox> formantu.  
  
 Domyślnie powiązania dziedziczą kontekstu danych, określonej przez `DataContext` właściwości, jeśli została ustawiona. Jednak <xref:System.Windows.Data.Binding.ElementName%2A> właściwość jest jednym ze sposobów jawne można ustawić źródła <xref:System.Windows.Data.Binding> i zastąpić kontekstu danych dziedziczone. Aby uzyskać więcej informacji, zobacz [porady: Określanie powiązania źródła](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 <xref:System.Windows.Data.Binding.Source%2A> i <xref:System.Windows.Data.Binding.RelativeSource%2A> właściwości <xref:System.Windows.Data.Binding> klasy umożliwiają także ustawić źródło wiązania jawnie. Jednak tylko jeden z trzech właściwości <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, i <xref:System.Windows.Data.Binding.RelativeSource%2A>, powiązanie zestawu dla każdego powinny być lub może wystąpić konflikt. Ta właściwość zgłasza wyjątek, jeśli występuje konflikt powiązania źródła.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlNamespaceManager GetXmlNamespaceManager(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetXmlNamespaceManager (target As DependencyObject) As XmlNamespaceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlNamespaceManager ^ GetXmlNamespaceManager(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member GetXmlNamespaceManager : System.Windows.DependencyObject -&gt; System.Xml.XmlNamespaceManager" Usage="System.Windows.Data.Binding.GetXmlNamespaceManager target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNamespaceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">Obiekt, z którego można pobrać informacji dotyczących przestrzeni nazw.</param>
        <summary>Zwraca [! Obiekt menedżera przestrzeni nazw include[TLA#tla_xml](~/includes/tlasharptla-XML-MD.MD)] używany przez powiązanie dołączonych do określonego obiektu.</summary>
        <returns>Zwrócony obiekt używany do wyświetlania [! INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-XML-MD.MD)] obszary nazw, które odnoszą się do powiązania w elemencie przekazany obiekt. Ten obiekt powinien być rzutowany jako <see cref="T:System.Xml.XmlNamespaceManager" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje użycie dołączona właściwość <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> dołączona właściwość.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] przestrzeń nazw menedżerów dotyczą tylko wtedy, gdy danych powiązanie pochodzi z [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] źródle powiązania (<xref:System.Windows.Data.XmlDataProvider> obiektu).  
  
 Jeśli Menedżer przestrzeni nazw nie została specjalnie zastosowana podczas tworzenia oryginalnego źródła danych lub następnie wywołując <xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A> w powiązaniu, to ta metoda zwróci `null`.  
  
 Ta metoda zawsze zwraca `null` Jeśli dane źródłowe powiązania nie jest [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)].  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" /> Parametr nie może być <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IndexerName">
      <MemberSignature Language="C#" Value="public const string IndexerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IndexerName" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.IndexerName" />
      <MemberSignature Language="VB.NET" Value="Public Const IndexerName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ IndexerName;" />
      <MemberSignature Language="F#" Value="val mutable IndexerName : string" Usage="System.Windows.Data.Binding.IndexerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Używane jako <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName" /> z <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> aby wskazać, że właściwości indeksatora została zmieniona.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public bool IsAsync { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAsync As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAsync { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool with get, set" Usage="System.Windows.Data.Binding.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Windows.Data.Binding" /> należy pobrać i ustaw wartości asynchronicznie.</summary>
        <value>Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Data.Binding.IsAsync%2A> właściwości podczas `get` akcesor właściwości źródła powiązania może zająć dużo czasu. Przykładem jest właściwością obrazu z `get` dostępu, który pobiera z sieci Web. Ustawienie <xref:System.Windows.Data.Binding.IsAsync%2A> do `true` pozwala uniknąć blokuje [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] podczas pobierania występuje.  
  
 Podczas oczekiwania na odebranie wartość, raporty powiązania <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, jeśli jest dostępny, lub wartość domyślną powiązania właściwość target.  
  
 Jednak nie powinien zawierać wiele scenariuszy, w którym należy użyć <xref:System.Windows.Data.Binding.IsAsync%2A> właściwości. [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] Wytyczne zaleca się definiowania właściwości, które są rzędów wolniej niż zestaw pól. Podczas tworzenia klasy należy wziąć pod uwagę bardzo wolno obchodzenia poza `get` metody dostępu i buforowania wyniku. Aby uzyskać więcej informacji, zobacz [NIB: Wybieranie między właściwości i metody](http://msdn.microsoft.com/library/55825e8f-7e2e-448a-9505-7217cc91b1af).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.AsyncState" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.BindingMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As BindingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingMode Mode { System::Windows::Data::BindingMode get(); void set(System::Windows::Data::BindingMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Windows.Data.BindingMode with get, set" Usage="System.Windows.Data.Binding.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która wskazuje kierunek przepływu danych w powiązaniu.</summary>
        <value>Jeden z <see cref="T:System.Windows.Data.BindingMode" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Data.BindingMode.Default" />, który zwraca wartość trybu powiązanie domyślnej właściwości zależności docelowych. Jednak wartością domyślną jest różny dla każdej właściwości zależności. Ogólnie rzecz biorąc właściwości formantu można edytować użytkownika, takich jak te pola tekstowe i pola wyboru domyślnie dwukierunkowego powiązania, podczas gdy inne właściwości domyślnie powiązania jednokierunkowe.  Programowy sposób określenia, czy właściwość zależności wiąże- lub dwukierunkowo domyślnie jest można pobrać metadanych właściwości modelu przy użyciu właściwości <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> , a następnie sprawdź wartość logiczna <see cref="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" /> właściwości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do obsługi <xref:System.Windows.Data.BindingMode.OneWay> i <xref:System.Windows.Data.BindingMode.TwoWay> powiązań, danych musi implementować <xref:System.ComponentModel.INotifyPropertyChanged>. Aby uzyskać więcej informacji, zobacz [porady: Implementowanie powiadomienia o zmianie właściwości](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md).  
  
 Dla <xref:System.Windows.Data.BindingMode.TwoWay> lub <xref:System.Windows.Data.BindingMode.OneWayToSource> powiązań, docelowe do źródło aktualizacji można kontrolować przez ustawienie <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> właściwości. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>.  
  
 Aby uzyskać więcej informacji o powiązanie różnych trybach, zobacz [omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnSourceUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnSourceUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnSourceUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnSourceUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnSourceUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnSourceUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy podnieść <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> zdarzenie, gdy wartość jest przenoszona z cel wiązania ze źródłem powiązania.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> zdarzenia powinien być wywoływany, gdy wartość powiązania źródła jest aktualizowana, a w przeciwnym razie wartość <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnTargetUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnTargetUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnTargetUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnTargetUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnTargetUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnTargetUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy podnieść <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> zdarzenie, gdy wartość jest przenoszone z źródle powiązania cel wiązania.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> zdarzenia powinien być wywoływany, gdy wartość docelowa powiązania jest aktualizowana, a w przeciwnym razie wartość <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnValidationError">
      <MemberSignature Language="C#" Value="public bool NotifyOnValidationError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnValidationError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnValidationError : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy podnieść <see cref="E:System.Windows.Controls.Validation.Error" /> dołączone zdarzenia powiązanego obiektu.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="E:System.Windows.Controls.Validation.Error" /> zgłoszono na powiązany obiekt, w przypadku błędu sprawdzania poprawności podczas aktualizacji źródła; w przeciwnym razie wartość powinna być dołączone zdarzenie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ma powiązanie <xref:System.Windows.Data.Binding.ValidationRules%2A> skojarzonych z nim, aparat wiązania sprawdza każdej reguły każdej aktualizacji przesyła wartość właściwości docelowa do właściwości source. Jeśli reguła unieważnia wartość, tworzy aparat wiązania <xref:System.Windows.Controls.ValidationError> obiektu i dodaje go do <xref:System.Windows.Controls.Validation>.<xref:System.Windows.Controls.Validation.Errors%2A> Kolekcja powiązany obiekt. Gdy <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> właściwość nie jest pusta, <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=nameWithType> dołączona właściwość obiektu ma ustawioną `true`. Jeśli <xref:System.Windows.Data.Binding.NotifyOnValidationError%2A> właściwości <xref:System.Windows.Data.Binding> ma ustawioną wartość `true`, a następnie wywołuje aparat wiązania <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> dołączone zdarzenia dla obiekt.  
  
 Szczegółowe omówienie procesu weryfikacji, zobacz sekcję sprawdzanie poprawności danych w [omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyPath Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyPath Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As PropertyPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyPath ^ Path { System::Windows::PropertyPath ^ get(); void set(System::Windows::PropertyPath ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : System.Windows.PropertyPath with get, set" Usage="System.Windows.Data.Binding.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę do powiązania właściwości source.</summary>
        <value>Ścieżka do źródła powiązania. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdego powiązania ma zwykle te cztery składniki: powiązania obiektu docelowego, właściwość target źródle powiązania i ścieżkę do wartości w źródle powiązania do użycia. Aby uzyskać więcej informacji dotyczących tych pojęć powiązania danych, zobacz [omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 Użyj <xref:System.Windows.Data.Binding.Path%2A> właściwości w celu określenia wartości źródła Aby powiązać:  
  
-   Ogólnie rzecz biorąc <xref:System.Windows.Data.Binding.Path%2A> wartość właściwości jest nazwa właściwości obiektu źródłowego do użycia dla powiązania, takich jak `Path=PropertyName`.  
  
-   Można określić właściwości podrzędne właściwości składniowym podobnie jak w języku C#. Na przykład klauzuli `Path=ShoppingCart.Order` ustawia powiązanie podwłaściwości `Order` obiektu lub właściwości `ShoppingCart`.  
  
-   Aby powiązać dołączona właściwość, umieść nawiasy dołączona właściwość. Na przykład, aby powiązać dołączona właściwość <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>, składnia jest `Path=(DockPanel.Dock)`.  
  
-   Indeksatory właściwości można określić w nawiasach kwadratowych po nazwie właściwości, w których stosowane jest indeksatora. Na przykład klauzuli `Path=ShoppingCart[0]` ustawia powiązanie do indeksu, który odpowiada jak z właściwości wewnętrznego indeksowania obsługuje literału ciągu "0". Wiele indeksatorów również są obsługiwane.  
  
-   Indeksatory i właściwości mogą być wymieszane `Path` klauzuli, np. `Path=ShoppingCart.ShippingInfo[MailingAddress,Street].`  
  
-   Wewnątrz indeksatory może mieć wiele parametrów indeksatora rozdzielonych przecinkami (,). Można określić typ każdego parametru w nawiasach. Na przykład można mieć `Path="[(sys:Int32)42,(sys:Int32)24]"`, gdzie `sys` jest mapowany na `System` przestrzeni nazw.  
  
-   Jeśli źródło jest widokiem kolekcji, z ukośnikiem (/) można określić bieżącego elementu. Na przykład klauzuli `Path=/` ustawia powiązanie do bieżącego elementu w widoku. Gdy źródło jest kolekcją, ta składnia określa bieżący element domyślny widok kolekcji.  
  
-   Nazwy właściwości i ukośniki można łączyć przechodzenia przez właściwości, które są kolekcjami. Na przykład `Path=/Offices/ManagerName` Określa bieżący element kolekcji źródłowej, który zawiera `Offices` właściwość, która również jest kolekcją. Jego bieżący element jest obiekt, który zawiera `ManagerName` właściwości.  
  
-   Opcjonalnie ścieżka kropki (.) można powiązać z bieżącego źródła. Na przykład `Text="{Binding}"` jest odpowiednikiem `Text="{Binding Path=.}"`.  
  
 Informacje na temat ścieżki składni, zobacz [powiązanie Przegląd deklaracji](~/docs/framework/wpf/data/binding-declarations-overview.md) lub [składnia PropertyPath XAML](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
 Aby uzyskać [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] powiązań, zobacz <xref:System.Windows.Data.Binding.XPath%2A> właściwości.  
  
 Aby powiązać całego obiektu, nie trzeba określić <xref:System.Windows.Data.Binding.Path%2A> właściwości. Aby uzyskać więcej informacji, zobacz "Określanie ścieżki do wartości" w [omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono wyzwalacz styl, który tworzy <xref:System.Windows.Controls.ToolTip> aby raporty komunikat o błędzie weryfikacji. Wartości metody ustawiającej wiąże się z zawartością błąd bieżącego <xref:System.Windows.Controls.TextBox> ( <xref:System.Windows.Controls.TextBox> przy użyciu stylu) przy użyciu <xref:System.Windows.Data.Binding.RelativeSource%2A> właściwości. Aby uzyskać więcej informacji, w tym przykładzie, zobacz [porady: Implementowanie powiązanie weryfikacji](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelativeSource">
      <MemberSignature Language="C#" Value="public System.Windows.Data.RelativeSource RelativeSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.RelativeSource RelativeSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.RelativeSource" />
      <MemberSignature Language="VB.NET" Value="Public Property RelativeSource As RelativeSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::RelativeSource ^ RelativeSource { System::Windows::Data::RelativeSource ^ get(); void set(System::Windows::Data::RelativeSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RelativeSource : System.Windows.Data.RelativeSource with get, set" Usage="System.Windows.Data.Binding.RelativeSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia źródło powiązania przez określenie jego lokalizacji względnej wobec położenie obiektu docelowego powiązania.</summary>
        <value>A <see cref="T:System.Windows.Data.RelativeSource" /> określenie względne położenie źródło powiązania, aby użyć obiektu. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest często używana do powiązania jednej właściwości obiektu do innej właściwości tego samego obiektu lub aby zdefiniować powiązanie w stylu lub szablonie.  
  
 Domyślnie powiązania dziedziczą kontekstu danych, określonej przez `DataContext` właściwości, jeśli została ustawiona. Jednak <xref:System.Windows.Data.Binding.RelativeSource%2A> właściwość jest jednym ze sposobów jawne można ustawić źródła <xref:System.Windows.Data.Binding> i zastąpić kontekstu danych dziedziczone. Aby uzyskać więcej informacji, zobacz [porady: Określanie powiązania źródła](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> i <xref:System.Windows.Data.Binding.Source%2A?displayProperty=nameWithType> właściwości umożliwia również ustawić źródło wiązania jawnie. Jednak tylko jeden z trzech właściwości <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, i <xref:System.Windows.Data.Binding.RelativeSource%2A>, powiązanie zestawu dla każdego powinny być lub może wystąpić konflikt. Ta właściwość zgłasza wyjątek, jeśli występuje konflikt powiązania źródła.  
  
 Aby uzyskać [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] informacji, zobacz [RelativeSource MarkupExtension](~/docs/framework/wpf/advanced/relativesource-markupextension.md).  
    
## Examples  
 W poniższym przykładzie przedstawiono wyzwalacz styl, który tworzy <xref:System.Windows.Controls.ToolTip> aby raporty komunikat o błędzie weryfikacji. Wartości metody ustawiającej wiąże się z zawartością błąd bieżącego <xref:System.Windows.Controls.TextBox> ( <xref:System.Windows.Controls.TextBox> przy użyciu stylu) przy użyciu <xref:System.Windows.Data.Binding.RelativeSource%2A> właściwości. Aby uzyskać więcej informacji, w tym przykładzie, zobacz [porady: Implementowanie powiązanie weryfikacji](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 Aby wyświetlić pełny przykład, zobacz [powiązania przykładowych weryfikacji](http://go.microsoft.com/fwlink/?LinkID=159972).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Source" />
      </Docs>
    </Member>
    <Member MemberName="RemoveSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="T:System.Windows.UIElement" /> Lub <see cref="T:System.Windows.ContentElement" /> nasłuchującą na zdarzenie.</param>
        <param name="handler">Program obsługi do usunięcia.</param>
        <summary>Usuwa obsługi dla <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> dołączone zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje użycie dołączone zdarzenie [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="T:System.Windows.UIElement" /> Lub <see cref="T:System.Windows.ContentElement" /> nasłuchującą na zdarzenie.</param>
        <param name="handler">Program obsługi do usunięcia.</param>
        <summary>Usuwa obsługi dla <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> dołączone zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje użycie dołączone zdarzenie [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetXmlNamespaceManager(class System.Windows.DependencyObject target, class System.Xml.XmlNamespaceManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetXmlNamespaceManager (target As DependencyObject, value As XmlNamespaceManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetXmlNamespaceManager(System::Windows::DependencyObject ^ target, System::Xml::XmlNamespaceManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetXmlNamespaceManager : System.Windows.DependencyObject * System.Xml.XmlNamespaceManager -&gt; unit" Usage="System.Windows.Data.Binding.SetXmlNamespaceManager (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Xml.XmlNamespaceManager" />
      </Parameters>
      <Docs>
        <param name="target">Obiekt, z którego można pobrać informacji dotyczących przestrzeni nazw.</param>
        <param name="value">
          <see cref="T:System.Xml.XmlNamespaceManager" /> Można użyć do oceny przestrzeni nazw w elemencie przekazany.</param>
        <summary>Ustawia obiekt menedżera przestrzeni nazw używany przez powiązanie dołączony do udostępnionego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje użycie dołączona właściwość <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> dołączona właściwość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializePath">
      <MemberSignature Language="C#" Value="public bool ShouldSerializePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializePath" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializePath () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializePath();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializePath : unit -&gt; bool" Usage="binding.ShouldSerializePath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, czy <see cref="P:System.Windows.Data.Binding.Path" /> powinien zostać utrwalony właściwości.</summary>
        <returns>
          <see langword="true" /> Jeśli wartość właściwości została zmieniona z domyślnego; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To `ShouldSerialize` metody jest dostępne, ponieważ <xref:System.Windows.Data.Binding.Path%2A> właściwość nie ma wartości domyślnej proste. Ta metoda wskazuje, czy właściwość zmienił się z jej wartości domyślnej. Zwykle wywołuje tę metodę Jeśli opracowujesz albo projektanta dla <xref:System.Windows.Data.Binding> lub tworzenie własnych Dołączanie formantu <xref:System.Windows.Data.Binding>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSource">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeSource" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeSource () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeSource();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeSource : unit -&gt; bool" Usage="binding.ShouldSerializeSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, czy <see cref="P:System.Windows.Data.Binding.Source" /> powinien zostać utrwalony właściwości.</summary>
        <returns>
          <see langword="true" /> Jeśli wartość właściwości została zmieniona z domyślnego; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To `ShouldSerialize` metody jest dostępne, ponieważ <xref:System.Windows.Data.Binding.Source%2A> właściwość nie ma wartości domyślnej proste. Ta metoda wskazuje, czy właściwość zmienił się z jej wartości domyślnej. Zwykle wywołuje tę metodę Jeśli opracowujesz albo projektanta dla <xref:System.Windows.Data.Binding> lub tworzenie własnych Dołączanie formantu <xref:System.Windows.Data.Binding>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValidationRules">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeValidationRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeValidationRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeValidationRules () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeValidationRules();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeValidationRules : unit -&gt; bool" Usage="binding.ShouldSerializeValidationRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, czy <see cref="P:System.Windows.Data.Binding.ValidationRules" /> powinien zostać utrwalony właściwości.</summary>
        <returns>
          <see langword="true" /> Jeśli wartość właściwości została zmieniona z domyślnego; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To `ShouldSerialize` metody jest dostępne, ponieważ <xref:System.Windows.Data.Binding.ValidationRules%2A> właściwość nie ma wartości domyślnej proste. Ta metoda wskazuje, czy właściwość zmienił się z jej wartości domyślnej. Zwykle wywołuje tę metodę Jeśli opracowujesz albo projektanta dla <xref:System.Windows.Data.Binding> lub tworzenie własnych Dołączanie formantu <xref:System.Windows.Data.Binding>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public object Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Source { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : obj with get, set" Usage="System.Windows.Data.Binding.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt do użycia jako źródło powiązania.</summary>
        <value>Obiekt do użycia jako źródło powiązania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie powiązania dziedziczą kontekstu danych, określonej przez `DataContext` właściwości, jeśli została ustawiona. Jednak <xref:System.Windows.Data.Binding.Source%2A> właściwość jest jednym ze sposobów jawne można ustawić źródła <xref:System.Windows.Data.Binding> i zastąpić kontekstu danych dziedziczone. Jeśli nie potrzebujesz funkcji ustalenia zakresu w kilka właściwości, które dziedziczą z tego samego kontekstu danych, możesz użyć <xref:System.Windows.Data.Binding.Source%2A> właściwości zamiast `DataContext` właściwości.  
  
 <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> i <xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=nameWithType> właściwości umożliwia również ustawić źródło wiązania jawnie. Jednak tylko jeden z trzech właściwości <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, i <xref:System.Windows.Data.Binding.RelativeSource%2A>, powiązanie zestawu dla każdego powinny być lub może wystąpić konflikt. Ta właściwość zgłasza wyjątek, jeśli występuje konflikt powiązania źródła.  
  
 Aby wyczyścić tę właściwość, ustaw ją na <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType>.  
  
<a name="xamlAttributeUsage_Source"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object Source="object"/>  
```  
  
<a name="xamlValues_Source"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *object*  
 Istniejący obiekt. Aby odwołać się do istniejącego obiektu, należy użyć [StaticResource — rozszerzenie znaczników](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Person` obiektu z właściwością ciągu o nazwie `PersonName` zdefiniowanego w `SDKSample` przestrzeni nazw, jak przedstawiono na pierwszy wyróżniony wiersz. W wyróżnionych wiersz, który zawiera `<src>` elementu, tworzy `Person` obiekt z `PersonName` wartość właściwości `Joe`. Jest to wykonywane w `Resources` sekcji i przypisaniu `x:Key`.  
  
 [!code-xaml[BindingInstantiation](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml?highlight=4,9,37)]  
  
 Wyróżniony wiersz, który zawiera `<TextBlock>` elementy pokazano, jak chcesz powiązać `PersonName` właściwości. W związku z tym <xref:System.Windows.Controls.TextBlock> formant jest widoczny na wartość "Jan".  
  
 W poniższym przykładzie <xref:System.Windows.Data.Binding.Source%2A> wartości <xref:System.Windows.Data.Binding> obiekty są ustawione na `static` właściwości <xref:System.Windows.Application.Current%2A?displayProperty=nameWithType>:  
  
 [!code-xaml[DataBindingLab#ComboBoxMultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/AddProductWindow.xaml#comboboxmultibinding)]  
  
 Na przykład pełna, zobacz [pokaz powiązania danych](http://go.microsoft.com/fwlink/?LinkID=163703).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" Usage="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SourceUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SourceUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SourceUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SourceUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> dołączone zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" Usage="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TargetUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TargetUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> dołączone zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceExceptionFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceExceptionFilter As UpdateSourceExceptionFilterCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceExceptionFilterCallback ^ UpdateSourceExceptionFilter { System::Windows::Data::UpdateSourceExceptionFilterCallback ^ get(); void set(System::Windows::Data::UpdateSourceExceptionFilterCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceExceptionFilter : System.Windows.Data.UpdateSourceExceptionFilterCallback with get, set" Usage="System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceExceptionFilterCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia program obsługi, używanego w celu zapewnienia niestandardowej logiki do obsługi wyjątków, które aparat wiązania napotka podczas aktualizacji wiążąca wartość źródła. Dotyczy to tylko jeśli został skojarzony <see cref="T:System.Windows.Controls.ExceptionValidationRule" /> z wiązania.</summary>
        <value>Metoda, która zapewnia niestandardowej logiki do obsługi wyjątków, które aparat wiązania napotka podczas aktualizacji wiążąca wartość źródła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ExceptionValidationRule> Reguła wbudowanych weryfikacji sprawdza, czy wyjątki zgłaszane podczas aktualizacji powiązania właściwości source. Jeśli został skojarzony <xref:System.Windows.Controls.ExceptionValidationRule> z Twojej <xref:System.Windows.Data.Binding> obiektu, ta właściwość służy ustawić programu obsługi w celu zapewnienia niestandardowej logiki do obsługi tych wyjątków. Jeśli <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> nie jest określona w <xref:System.Windows.Data.Binding>, tworzy aparat wiązania <xref:System.Windows.Controls.ValidationError> z wyjątkiem i dodaje go do <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> kolekcji elementu powiązania.  
  
   
  
## Examples  
 <xref:System.Windows.Controls.TextBox.Text%2A> Właściwości następujące <xref:System.Windows.Controls.TextBox> jest powiązany z danymi właściwości source `Age3` jest typu `int`. <xref:System.Windows.Controls.ExceptionValidationRule> Sprawdza, czy wyjątki, które są generowane podczas aktualizacji właściwości source (na przykład gdy użytkownik wprowadzi wartość, której nie można przekonwertować na liczbę całkowitą).  
  
 [!code-xaml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 Możesz podać niestandardowej logiki do obsługi tych wyjątków. Poniższy przykład przedstawia użycie <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> właściwości można ustawić <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  
  
 [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 Poniżej przedstawiono przykład stosowania <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  
  
 [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> Można także wrócić `null`, wyjątek, lub <xref:System.Windows.Controls.ValidationError>. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  
  
 Pełny przykład, zobacz [powiązania przykładowych weryfikacji](http://go.microsoft.com/fwlink/?LinkID=159972).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger UpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która określa czas powiązania źródła aktualizacji.</summary>
        <value>Jeden z <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />, która zwraca wartość domyślna <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> wartość właściwości zależności docelowych. Jednak jest wartością domyślną dla większości właściwości zależności <see cref="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged" />, podczas gdy <see cref="P:System.Windows.Controls.TextBox.Text" /> właściwość ma wartość domyślną równą <see cref="F:System.Windows.Data.UpdateSourceTrigger.LostFocus" />.  Programowy sposób określić domyślny <see cref="P:System.Windows.Data.Binding.UpdateSourceTrigger" /> wartość właściwości zależności jest można pobrać metadanych właściwości modelu przy użyciu właściwości <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> , a następnie sprawdź wartość <see cref="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" /> właściwości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązania, które są <xref:System.Windows.Data.BindingMode.TwoWay> lub <xref:System.Windows.Data.BindingMode.OneWayToSource> nasłuchiwania zmian we właściwości docelowej i obejmie ich źródła. Jest to nazywane aktualizowanie źródła. Zazwyczaj te aktualizacje się tak zdarzyć przy każdej zmianie właściwości target. To działa poprawnie dla pola wyboru i inne formanty prostego, ale zwykle nie jest odpowiedni dla pól tekstowych. Aktualizowanie po każdym naciśnięciu klawisza może obniżyć wydajność i odrzuca użytkownika to zwykle możliwość backspace i napraw błędy przed zatwierdzeniem do nowej wartości. W związku z tym domyślna <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> wartość <xref:System.Windows.Controls.TextBox.Text%2A> właściwość jest <xref:System.Windows.Data.UpdateSourceTrigger.LostFocus> i nie <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>.  
  
 Jeśli ustawisz <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> do wartości <xref:System.Windows.Data.UpdateSourceTrigger.Explicit>, należy wywołać <xref:System.Windows.Data.BindingExpression.UpdateSource%2A> metody lub zmiany nie zostaną przeniesione wstecz do źródła.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Mode" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy dołączać <see cref="T:System.Windows.Controls.DataErrorValidationRule" />.</summary>
        <value>
          <see langword="true" /> Aby uwzględnić <see cref="T:System.Windows.Controls.DataErrorValidationRule" />; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości stanowi alternatywę dla przy użyciu <xref:System.Windows.Controls.DataErrorValidationRule> element jawnie. <xref:System.Windows.Controls.DataErrorValidationRule> Jest sprawdza, czy błędy, które są generowane przez reguły poprawności wbudowanych <xref:System.ComponentModel.IDataErrorInfo> implementacji obiektu źródłowego. Jeśli występuje błąd, tworzy aparat wiązania <xref:System.Windows.Controls.ValidationError> z powodu błędu i dodaje go do <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> kolekcji elementu powiązania. Brak błąd czyści tej opinii sprawdzania poprawności, chyba że inna reguła zgłasza problem sprawdzania poprawności.  
  
 <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> wprowadzono w programie .NET Framework w wersji 3.5.  Aby uzyskać więcej informacji, zobacz [wersje programu .NET Framework i zależności](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.ComponentModel.IDataErrorInfo> i <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> do sprawdzania poprawności danych wejściowych użytkownika w <xref:System.Windows.Controls.TextBox>. W pierwszym przykładzie jest tworzony typ danych, który implementuje <xref:System.ComponentModel.IDataErrorInfo> może raportować błędy sprawdzania poprawności.  
  
 [!code-csharp[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#idataerrorinfodata)]
 [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#idataerrorinfodata)]  
  
 Poniższy przykład wiąże `Age` właściwości <xref:System.Windows.Controls.TextBox> i ustawia <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> do `true` na <xref:System.Windows.Data.Binding>.  Gdy użytkownik wprowadzi wartość jest nieprawidłowa, czerwonym obramowaniem pojawia się w <xref:System.Windows.Controls.TextBox> i <xref:System.Windows.Controls.ToolTip> raporty komunikat o błędzie.  
  
 [!code-xaml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#idataerrorinfoxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnExceptions">
      <MemberSignature Language="C#" Value="public bool ValidatesOnExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnExceptions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnExceptions : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy dołączać <see cref="T:System.Windows.Controls.ExceptionValidationRule" />.</summary>
        <value>
          <see langword="true" /> Aby uwzględnić <see cref="T:System.Windows.Controls.ExceptionValidationRule" />; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości stanowi alternatywę dla przy użyciu <xref:System.Windows.Controls.ExceptionValidationRule> element jawnie. <xref:System.Windows.Controls.ExceptionValidationRule> Reguła wbudowanych weryfikacji sprawdza, czy wyjątki, które są generowane podczas aktualizacji właściwości source. Jeśli jest zgłaszany wyjątek, aparat wiązania tworzy <xref:System.Windows.Controls.ValidationError> z wyjątkiem i dodaje go do <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> kolekcji elementu powiązania. Brak błąd czyści tej opinii sprawdzania poprawności, chyba że inna reguła zgłasza problem sprawdzania poprawności.  
  
 <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> wprowadzono w programie .NET Framework w wersji 3.5.  Aby uzyskać więcej informacji, zobacz [wersje programu .NET Framework i zależności](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
   
  
## Examples  
 W poniższych przykładach użyto <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> do sprawdzania poprawności danych wejściowych użytkownika w <xref:System.Windows.Controls.TextBox>. W pierwszym przykładzie jest tworzony typ danych, który zgłasza wyjątek podczas `Age` właściwość jest ustawiona na nieprawidłową właściwość.  
  
 [!code-csharp[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#throwexceptiondata)]
 [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#throwexceptiondata)]  
  
 Poniższy przykład wiąże `Age` właściwości <xref:System.Windows.Controls.TextBox> i ustawia <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> do `true` na <xref:System.Windows.Data.Binding>. Gdy użytkownik wprowadzi wartość jest nieprawidłowa, czerwonym obramowaniem pojawia się w <xref:System.Windows.Controls.TextBox> i <xref:System.Windows.Controls.ToolTip> raporty komunikat o błędzie.  
  
 [!code-xaml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#throwexceptionxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnNotifyDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnNotifyDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnNotifyDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnNotifyDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnNotifyDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy dołączać <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />.</summary>
        <value>
          <see langword="true" /> Aby uwzględnić <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors%2A> jest `true`, powiązanie wyszukuje i raportowanie błędów, które zostały wygenerowane przez źródło danych, który implementuje <xref:System.ComponentModel.INotifyDataErrorInfo>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt; ValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.ValidationRule&gt; ValidationRules" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationRules As Collection(Of ValidationRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ ValidationRules { System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidationRules : System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;" Usage="System.Windows.Data.Binding.ValidationRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję reguł sprawdzania poprawności danych wejściowych użytkownika.</summary>
        <value>Kolekcja <see cref="T:System.Windows.Controls.ValidationRule" /> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Modelu powiązania danych umożliwia kojarzenie <xref:System.Windows.Data.Binding.ValidationRules%2A> z Twojej <xref:System.Windows.Data.Binding> lub <xref:System.Windows.Data.MultiBinding> obiektu. Można utworzyć reguły niestandardowe pochodny <xref:System.Windows.Controls.ValidationRule> klasy i wdrażanie <xref:System.Windows.Controls.ValidationRule.Validate%2A> metody, lub można użyć wbudowanej <xref:System.Windows.Controls.ExceptionValidationRule>, która unieważnia wartość, jeśli istnieją wyjątki podczas aktualizacji źródła.  
  
 Aparat wiązania sprawdza każdego <xref:System.Windows.Controls.ValidationRule> skojarzony z powiązaniem wartości wejściowej (wartość właściwości docelowa powiązanie) zawsze jest przenoszona do powiązania właściwości source. Szczegółowe omówienie procesu weryfikacji, zobacz sekcję sprawdzanie poprawności danych w [omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
> [!NOTE]
>  Tej właściwości można ustawić w [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] tylko przy użyciu składni kolekcji pokazano lub uzyskiwania dostępu do obiektu kolekcji i przy użyciu jego różnych metod, takich jak `Add`. Właściwości dostępu do obiektu kolekcji jest tylko do odczytu, w kolekcji jest do odczytu / zapisu.  
  
<a name="xamlPropertyElementUsage_ValidationRules"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.ValidationRules>  
    oneOrMoreValidationRules  
  </object.ValidationRules>  
</object>  
  
```  
  
<a name="xamlValues_ValidationRules"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreValidationRules*  
 Co najmniej jeden <xref:System.Windows.Controls.ValidationRule> obiektów. Można użyć <xref:System.Windows.Controls.ExceptionValidationRule> klasy lub tworzenie niestandardowych reguł przez podklasy <xref:System.Windows.Controls.ValidationRule> klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Validation" />
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManager">
      <MemberSignature Language="C#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="ILAsm" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XmlNamespaceManager" />
      <MemberSignature Language="VB.NET" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="F#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" Usage="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty XmlNamespaceManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly XmlNamespaceManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ XmlNamespaceManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable XmlNamespaceManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Data.Binding.XmlNamespaceManager" /> dołączona właściwość.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Windows.Data.Binding.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see langword="XPath" /> zapytanie zwracające wartość na [! Źródło powiązania include[TLA#tla_xml](~/includes/tlasharptla-XML-MD.MD)] do użycia.</summary>
        <value>
          <see langword="XPath" /> Zapytania. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy źródło powiązania jest [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] danych zamiast [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] obiektu <xref:System.Windows.Data.Binding.XPath%2A> właściwość jest używana zamiast <xref:System.Windows.Data.Binding.Path%2A> właściwość, aby wskazać ścieżkę do wartości w źródle powiązania do użycia.  
  
 Przez ustawienie <xref:System.Windows.Data.Binding.XPath%2A> właściwości, które tworzysz `XPath` zapytanie, aby wybrać węzeł lub kolekcja węzłów (<xref:System.Xml.XmlElement?displayProperty=nameWithType> i <xref:System.Xml.XmlAttribute?displayProperty=nameWithType> zarówno pochodzi od <xref:System.Xml.XmlNode?displayProperty=nameWithType>). <xref:System.Xml.XmlNode?displayProperty=nameWithType> jest [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] obiektu, co oznacza, że można powiązać jej właściwości, za pomocą <xref:System.Windows.Data.Binding.Path%2A> właściwości.  
  
 <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> Dojścia metody `XPath` wyrażenia z <xref:System.Windows.Data.Binding.XPath%2A> właściwości. `XPath` funkcje nie są obsługiwane. Dla `XPath` wyrażenie informacji, zobacz <xref:System.Xml.XmlNode.SelectNodes%2A> dokumentacja i przykłady podane w sekcji przykładu.  
  
 LINQ do obiektów XML <xref:System.Xml.Linq.XDocument> i <xref:System.Xml.Linq.XElement> nie używaj `XPath`. Aby uzyskać więcej informacji, zobacz [porady: powiązanie klasy XDocument, klasy XElement lub LINQ dla wyników zapytania XML](~/docs/framework/wpf/data/how-to-bind-to-xdocument-xelement-or-linq-for-xml-query-results.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>