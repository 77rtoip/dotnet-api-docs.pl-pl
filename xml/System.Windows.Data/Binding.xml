<Type Name="Binding" FullName="System.Windows.Data.Binding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9a22d563cf90b2854a6bf8d729f1b8114d9c9b46" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69211135" /></Metadata><TypeSignature Language="C#" Value="public class Binding : System.Windows.Data.BindingBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Windows.Data.BindingBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding&#xA;Inherits BindingBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding : System::Windows::Data::BindingBase" />
  <TypeSignature Language="F#" Value="type Binding = class&#xA;    inherit BindingBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Data.BindingBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia wysoki poziom dostępu do definicji powiązania, który łączy właściwości obiektów docelowych powiązań (zazwyczaj elementy WPF) i wszystkie źródła danych (na przykład bazy danych, pliku XML lub dowolnego obiektu, który zawiera dane).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]powiązanie danych zapewnia prosty i spójny sposób, w jaki aplikacje mogą być obecne i współpracujące z danymi. Powiązanie danych umożliwia synchronizowanie wartości właściwości dwóch różnych obiektów.  
  
 Aby ustanowić powiązanie, użyj <xref:System.Windows.Data.Binding> klasy lub jednej z innych klas, które dziedziczą. <xref:System.Windows.Data.BindingBase> Niezależnie od tego, który obiekt jest powiązany, i istoty źródła danych, każde powiązanie następuje po modelu zilustrowanym na poniższej ilustracji.  
  
 ![Podstawowy diagram powiązań danych] (~/add/media/databindingmostbasic.png "Podstawowy diagram powiązań danych")  
  
 Na rysunku przedstawiono następujące podstawowe [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] koncepcje dotyczące powiązań danych.  
  
-   Każde powiązanie zwykle zawiera te cztery składniki: obiekt docelowy powiązania, właściwość docelowa, Źródło powiązania i a <xref:System.Windows.Data.Binding.Path%2A> do wartości w źródle powiązania do użycia. Na przykład jeśli chcesz powiązać zawartość elementu <xref:System.Windows.Controls.TextBox> z właściwością nazwa obiektu Employee, obiektem docelowym <xref:System.Windows.Controls.TextBox>jest, właściwość target jest <xref:System.Windows.Controls.TextBox.Text%2A> właściwością, wartość, która ma zostać użyta, jest nazwą, a obiekt źródłowy jest pracownikiem Stream.  
  
-   Właściwość Target musi być właściwością zależności. Oznacza to również, że nie można powiązać pola. Większość właściwości <xref:System.Windows.UIElement> obiektów to właściwości zależności i większość właściwości zależności, z wyjątkiem tych, które domyślnie obsługują powiązanie danych. (Tylko <xref:System.Windows.DependencyObject> typy mogą definiować właściwości zależności i wszystkie <xref:System.Windows.UIElement> obiekty pochodne od <xref:System.Windows.DependencyObject>.)  
  
-   Chociaż nie jest określony na rysunku, należy zauważyć, że obiekt źródłowy powiązania nie jest ograniczony do obiektu niestandardowego [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] . [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]powiązanie danych obsługuje dane w postaci [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] obiektów i. [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] Aby udostępnić przykłady, <xref:System.Windows.UIElement>źródłem powiązań może być dowolny obiekt listy [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] , obiekt skojarzony z [!INCLUDE[TLA#tla_adonet](~/includes/tlasharptla-adonet-md.md)] danymi lub [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] usługami sieci Web lub element XmlNode, który zawiera dane.  
  
 Użyj właściwości <xref:System.Windows.Data.Binding.Mode%2A> , aby określić kierunek przepływu danych. Aby wykrywać zmiany źródła w ramach powiązań jednokierunkowych lub dwukierunkowych, Źródło musi zaimplementować odpowiedni mechanizm powiadamiania o zmianach <xref:System.ComponentModel.INotifyPropertyChanged>właściwości, taki jak. Aby zapoznać się z przykładem, zobacz [How to: Zaimplementuj powiadomienie o](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md)zmianie właściwości. <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> Właściwość określa chronometraż aktualizacji źródła. Aby uzyskać więcej informacji, zobacz "podstawowe pojęcia dotyczące powiązań danych" w temacie [powiązanie danych — omówienie](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object property="{Binding  declaration}"/>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oświadczeń*  
 Zero lub więcej klauzule przypisania atrybutu oddzielone przecinkami (,). Aby uzyskać więcej informacji, zobacz [powiązanie znaczników rozszerzenia](~/docs/framework/wpf/advanced/binding-markup-extension.md) lub [deklaracji powiązań](~/docs/framework/wpf/data/binding-declarations-overview.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.MultiBinding" />
    <altmember cref="T:System.Windows.Data.PriorityBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Data.Binding" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Data.Binding" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Windows.Data.Binding : string -&gt; System.Windows.Data.Binding" Usage="new System.Windows.Data.Binding path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Początkowa <see cref="P:System.Windows.Data.Binding.Path" /> dla powiązania.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Data.Binding" /> klasy z początkową ścieżką.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="T:System.Windows.UIElement" /> Lub<see cref="T:System.Windows.ContentElement" /> który nasłuchuje na zdarzeniu.</param>
        <param name="handler">Procedura obsługi do dodania.</param>
        <summary>Dodaje procedurę obsługi dla <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> dołączonego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje dołączone użycie zdarzeń w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="T:System.Windows.UIElement" /> Lub<see cref="T:System.Windows.ContentElement" /> który nasłuchuje na zdarzeniu.</param>
        <param name="handler">Procedura obsługi do dodania.</param>
        <summary>Dodaje procedurę obsługi dla <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> dołączonego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje dołączone użycie zdarzeń w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj with get, set" Usage="System.Windows.Data.Binding.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia dane nieprzezroczyste przesyłane do asynchronicznego dyspozytora danych.</summary>
        <value>Dane przesłane do asynchronicznego dyspozytora danych.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Data.Binding.IsAsync" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
      </Docs>
    </Member>
    <Member MemberName="BindsDirectlyToSource">
      <MemberSignature Language="C#" Value="public bool BindsDirectlyToSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsDirectlyToSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsDirectlyToSource As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsDirectlyToSource { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsDirectlyToSource : bool with get, set" Usage="System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy należy oszacować <see cref="P:System.Windows.Data.Binding.Path" /> względem elementu danych <see cref="T:System.Windows.Data.DataSourceProvider" /> czy obiektu.</summary>
        <value><see langword="false" />Aby oszacować ścieżkę względną do samego elementu danych; w przeciwnym razie. <see langword="true" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalne zachowanie (gdy ta właściwość jest `false`) zawiera specjalne <xref:System.Windows.Data.DataSourceProvider> traktowanie obiektów. W takim przypadku aparat powiązań oblicza <xref:System.Windows.Data.Binding.Path%2A> względem obiektu uzyskanego <xref:System.Windows.Data.DataSourceProvider.Data%2A> ze właściwości. Ponadto powiązanie nasłuchuje <xref:System.Windows.Data.DataSourceProvider.DataChanged> zdarzenia i reaguje odpowiednio. Ustawienie tej właściwości w `true` celu zastąpienia tego zachowania i nadaje powiązania dostęp do właściwości <xref:System.Windows.Data.DataSourceProvider> samego obiektu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.ObjectDataProvider" />
        <altmember cref="T:System.Windows.Data.XmlDataProvider" />
      </Docs>
    </Member>
    <Member MemberName="Converter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.IValueConverter Converter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.IValueConverter Converter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Converter" />
      <MemberSignature Language="VB.NET" Value="Public Property Converter As IValueConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::IValueConverter ^ Converter { System::Windows::Data::IValueConverter ^ get(); void set(System::Windows::Data::IValueConverter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Converter : System.Windows.Data.IValueConverter with get, set" Usage="System.Windows.Data.Binding.Converter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.IValueConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia konwerter do użycia.</summary>
        <value>Wartość typu <see cref="T:System.Windows.Data.IValueConverter" />. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązanie niejawnie używa domyślnego konwertera, który próbuje wykonać konwersję typu między wartością źródłową a wartością docelową. Jeśli nie można wykonać konwersji, domyślny konwerter zwraca wartość `null`.  
  
 Jeśli chcesz skojarzyć niestandardowy konwerter wartości z powiązaniem, należy utworzyć klasę implementującą <xref:System.Windows.Data.IValueConverter> implementacje interfejsu i dostarczania <xref:System.Windows.Data.IValueConverter.Convert%2A> dla metod i <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> . Konwertery wartości mogą zmieniać dane z jednego typu na inny, przetłumaczyć między kulturowe szczegóły, takie jak zestawy znaków, lub zmodyfikować inne aspekty prezentacji. Przykłady typowych scenariuszy konwersji można znaleźć w temacie "Konwersja danych" w [omówieniu powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="xamlAttributeUsage_Converter"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object Converter="myConverter"/>  
```  
  
<a name="xamlValues_Converter"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *myConverter*  
 Odwołanie do zasobu klasy, która implementuje <xref:System.Windows.Data.IValueConverter> interfejs, który obejmuje implementacje <xref:System.Windows.Data.IValueConverter.Convert%2A> metod i <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> . Aby odwołać się do konwertera wartości, użyj [rozszerzenia znacznika StaticResource](~/docs/framework/wpf/advanced/staticresource-markup-extension.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConverterCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConverterCulture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConverterCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterCulture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Data.Binding.ConverterCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kulturę, w której ma zostać obliczony konwerter.</summary>
        <value>Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta właściwość nie zostanie ustawiona, aparat powiązania używa `Language` właściwości obiektu docelowego powiązania. W [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] tych wartościach domyślnych wartość "en-us" lub "dziedziczona" jest wartością z elementu głównego (lub dowolnego elementu) strony, jeśli został on jawnie ustawiony.  
  
 Informacje o konwersji danych znajdują się w sekcji konwersja danych w temacie [Informacje o powiązaniu danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterParameter">
      <MemberSignature Language="C#" Value="public object ConverterParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConverterParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ConverterParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterParameter : obj with get, set" Usage="System.Windows.Data.Binding.ConverterParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia parametr, który ma zostać przekazany <see cref="P:System.Windows.Data.Binding.Converter" />do.</summary>
        <value>Parametr, który ma zostać przekazany <see cref="P:System.Windows.Data.Binding.Converter" />do. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć właściwości, <xref:System.Windows.Data.Binding.ConverterParameter%2A> aby określić sposób konwersji obiektu.  Ta właściwość przekazuje dodatkowe informacje do konwertera, który jest używany w powiązaniu.  Po określeniu <xref:System.Windows.Data.Binding.ConverterParameter%2A>, wartość jest przenoszona <xref:System.Windows.Data.IValueConverter.Convert%2A> do metod i <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> jako `parameter` parametr.  
  
 Aby zapoznać się z przykładem, zobacz [How to: Tworzenie wartości na podstawie listy powiązanych elementów](~/docs/framework/wpf/data/how-to-produce-a-value-based-on-a-list-of-bound-items.md). W tym przykładzie przedstawiono implementację <xref:System.Windows.Data.IMultiValueConverter> , ale nadal stosuje się użycie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNothing">
      <MemberSignature Language="C#" Value="public static readonly object DoNothing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DoNothing" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.DoNothing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DoNothing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ DoNothing;" />
      <MemberSignature Language="F#" Value=" staticval mutable DoNothing : obj" Usage="System.Windows.Data.Binding.DoNothing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Używane jako wartość zwracana do nakazuje aparatowi powiązania, aby nie wykonywał żadnej akcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość źródła powiązania lub konwerter może wrócić <xref:System.Windows.Data.Binding.DoNothing?displayProperty=nameWithType> , aby poinstruować aparat powiązań, aby nie wykonywał żadnej akcji. Na przykład, aby nakazać aparatowi powiązania, aby nie przekazywać wartości do celu powiązania, nie należy przechodzić do <xref:System.Windows.Data.Binding> następnego <xref:System.Windows.Data.PriorityBinding>w `FallBackValue` lub nie używać wartości domyślnej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Windows.Data.Binding.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę elementu, który ma być używany jako obiekt źródłowy powiązania.</summary>
        <value>Wartość <see langword="Name" /> właściwości lub [dyrektywa x:Name](~/docs/framework/xaml-services/x-name-directive.md) elementu zainteresowania. Można odwoływać się do elementów w kodzie tylko wtedy, gdy są one zarejestrowane <see cref="T:System.Windows.NameScope" /> w <see langword="RegisterName" />odpowiedniej usłudze. Aby uzyskać więcej informacji, zobacz [WPF XAML Zakresy nazw WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest przydatna, gdy chcesz powiązać z właściwością innego elementu w aplikacji. Na przykład, <xref:System.Windows.Controls.Slider> Jeśli chcesz użyć elementu, aby kontrolować wysokość innej kontrolki w aplikacji, lub jeśli chcesz <xref:System.Windows.Controls.ContentControl.Content%2A> powiązać formant <xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> z właściwością <xref:System.Windows.Controls.ListBox> kontrolki.  
  
 Domyślnie powiązania dziedziczą kontekst danych określony przez `DataContext` właściwość, jeśli został on ustawiony. Właściwość jest jednak jednym ze sposobów, w której można jawnie ustawić źródło <xref:System.Windows.Data.Binding> i zastąpić Dziedziczony kontekst danych. <xref:System.Windows.Data.Binding.ElementName%2A> Aby uzyskać więcej informacji, zobacz [jak: Określ źródło](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)powiązania.  
  
 Właściwości <xref:System.Windows.Data.Binding.Source%2A> i<xref:System.Windows.Data.Binding.RelativeSource%2A> klasy umożliwiają również jawne ustawienie źródła powiązania. <xref:System.Windows.Data.Binding> Jednak dla każdego powiązania należy określić tylko jedną z <xref:System.Windows.Data.Binding.ElementName%2A>trzech <xref:System.Windows.Data.Binding.Source%2A>właściwości, <xref:System.Windows.Data.Binding.RelativeSource%2A>,, i, lub może wystąpić konflikt. Ta właściwość zgłasza wyjątek, jeśli występuje konflikt źródła powiązania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlNamespaceManager GetXmlNamespaceManager(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetXmlNamespaceManager (target As DependencyObject) As XmlNamespaceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlNamespaceManager ^ GetXmlNamespaceManager(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member GetXmlNamespaceManager : System.Windows.DependencyObject -&gt; System.Xml.XmlNamespaceManager" Usage="System.Windows.Data.Binding.GetXmlNamespaceManager target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNamespaceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">Obiekt, z którego mają zostać pobrane informacje o przestrzeni nazw.</param>
        <summary>Zwraca obiekt Menedżera przestrzeni nazw używany przez powiązanie dołączone do określonego obiektu. [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]</summary>
        <returns>Zwrócony obiekt używany do wyświetlania [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] przestrzeni nazw, które odnoszą się do powiązania w przekazanym elemencie obiektu. Ten obiekt powinien być rzutowany <see cref="T:System.Xml.XmlNamespaceManager" />jako.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje użycie dołączonej właściwości dla <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> dołączonej właściwości.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]Menedżerowie przestrzeni nazw mają zastosowanie tylko wtedy, gdy dane w powiązaniu [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] pochodzą ze źródła<xref:System.Windows.Data.XmlDataProvider> powiązania (obiektu).  
  
 Jeśli Menedżer przestrzeni nazw nie został jawnie zastosowany w pierwotnym tworzeniu źródła danych lub przez wywołanie <xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A> powiązania, ta metoda `null`zwróci wartość.  
  
 Ta metoda zawsze zwraca `null` wartość, jeśli dane powiązane z powiązaniem nie [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]są.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr nie może być <see langword="null" />. <paramref name="target" /></exception>
      </Docs>
    </Member>
    <Member MemberName="IndexerName">
      <MemberSignature Language="C#" Value="public const string IndexerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IndexerName" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.IndexerName" />
      <MemberSignature Language="VB.NET" Value="Public Const IndexerName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ IndexerName;" />
      <MemberSignature Language="F#" Value="val mutable IndexerName : string" Usage="System.Windows.Data.Binding.IndexerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Używane jako <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName" /> <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> do wskazywania, że Właściwość indeksatora została zmieniona.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public bool IsAsync { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAsync As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAsync { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool with get, set" Usage="System.Windows.Data.Binding.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Windows.Data.Binding" /> powinny pobierać i ustawiać wartości asynchroniczne.</summary>
        <value>Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Windows.Data.Binding.IsAsync%2A> , `get` gdy akcesor właściwości źródła powiązania może trwać długo. Przykładem jest właściwość obrazu z `get` metodą dostępu pobieraną z sieci Web. Ustawienie <xref:System.Windows.Data.Binding.IsAsync%2A> zapobiegające zablokowaniu [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] podczas pobierania. `true`  
  
 Podczas oczekiwania na nadejście wartości powiązanie zgłasza <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, jeśli jest dostępne, lub wartość domyślną właściwości target powiązania.  
  
 Nie powinno jednak być wielu scenariuszy, w których należy użyć <xref:System.Windows.Data.Binding.IsAsync%2A> właściwości. [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] Wytyczne zaleca się przed zdefiniowaniem właściwości, które są zamówieniami wielkości wolniej niż zestaw pól. Podczas tworzenia klasy należy rozważyć obsługę bardzo wolnych operacji poza `get` akcesorem i przeprowadzenie buforowania wyniku.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.AsyncState" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.BindingMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As BindingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingMode Mode { System::Windows::Data::BindingMode get(); void set(System::Windows::Data::BindingMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Windows.Data.BindingMode with get, set" Usage="System.Windows.Data.Binding.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą kierunek przepływu danych w powiązaniu.</summary>
        <value>Jedna z <see cref="T:System.Windows.Data.BindingMode" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Data.BindingMode.Default" />, która zwraca domyślny tryb powiązania dla docelowej właściwości zależności. Jednak wartość domyślna jest różna dla każdej właściwości zależności. Ogólnie rzecz biorąc, edytowane przez użytkownika właściwości kontrolki, takie jak pola tekstowe i pola wyboru, domyślnie do powiązań dwukierunkowych, a większość innych właściwości domyślnie to powiązania jednokierunkowe.  
  
Programistyczny sposób, aby określić, czy właściwość zależności jest domyślnie wiążąca lub dwukierunkowo, polega na pobieraniu metadanych właściwości przy użyciu <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> , a następnie sprawdzaniu wartości <see cref="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" /> logicznej właściwości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zapewnić <xref:System.Windows.Data.BindingMode.OneWay> obsługę <xref:System.Windows.Data.BindingMode.TwoWay> i powiązania, należy zaimplementować <xref:System.ComponentModel.INotifyPropertyChanged>dane bazowe. Aby uzyskać szczegółowe informacje [, zobacz How to: Zaimplementuj powiadomienie o](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md)zmianie właściwości.  
  
 W <xref:System.Windows.Data.BindingMode.TwoWay> przypadku <xref:System.Windows.Data.BindingMode.OneWayToSource> powiązań lub można kontrolować aktualizacje elementu docelowego do <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> źródła przez ustawienie właściwości. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>.  
  
 Aby uzyskać więcej informacji na temat różnych trybów powiązań, zobacz temat [powiązanie danych — omówienie](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnSourceUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnSourceUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnSourceUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnSourceUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnSourceUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnSourceUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> zdarzenie ma zostać zgłoszone po przeniesieniu wartości z celu powiązania do źródła powiązania.</summary>
        <value><see langword="true" />Jeśli zdarzenie powinno być zgłaszane, gdy wartość źródła powiązania zostanie zaktualizowana; <see langword="false" />w przeciwnym razie. <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnTargetUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnTargetUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnTargetUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnTargetUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnTargetUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnTargetUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> zdarzenie ma zostać zgłoszone po przeniesieniu wartości ze źródła powiązania do celu powiązania.</summary>
        <value><see langword="true" />Jeśli zdarzenie powinno być zgłaszane, gdy wartość docelowa powiązania zostanie zaktualizowana; <see langword="false" />w przeciwnym razie. <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnValidationError">
      <MemberSignature Language="C#" Value="public bool NotifyOnValidationError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnValidationError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnValidationError : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zdarzenie <see cref="E:System.Windows.Controls.Validation.Error" /> dołączone ma zostać zgłoszone w obiekcie powiązanym.</summary>
        <value><see langword="true" />Jeśli dołączone zdarzenie powinno zostać zgłoszone względem obiektu powiązanego, gdy wystąpi błąd walidacji podczas aktualizacji źródła; <see langword="false" />w przeciwnym razie. <see cref="E:System.Windows.Controls.Validation.Error" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli powiązanie zostało <xref:System.Windows.Data.Binding.ValidationRules%2A> skojarzone z nim, aparat powiązań sprawdza każdą regułę przy każdej operacji przesyłania wartości właściwości docelowej do właściwości source. Jeśli reguła unieważnia wartość, aparat powiązań tworzy <xref:System.Windows.Controls.ValidationError> obiekt i dodaje go <xref:System.Windows.Controls.Validation>do.<xref:System.Windows.Controls.Validation.Errors%2A> Kolekcja powiązanego obiektu. Gdy właściwość nie jest pusta <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=nameWithType> , dołączona właściwość obiektu jest ustawiona na `true`. <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> `true` <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> Jeśli właściwość jest<xref:System.Windows.Data.Binding> ustawiona na, aparat powiązań wywołuje dołączone zdarzenie w obiekcie. <xref:System.Windows.Data.Binding.NotifyOnValidationError%2A>  
  
 Aby zapoznać się ze szczegółową omówieniem procesu weryfikacji, zobacz sekcję walidacja danych w artykule [Omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyPath Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyPath Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As PropertyPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyPath ^ Path { System::Windows::PropertyPath ^ get(); void set(System::Windows::PropertyPath ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : System.Windows.PropertyPath with get, set" Usage="System.Windows.Data.Binding.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę do właściwości źródła powiązania.</summary>
        <value>Ścieżka do źródła powiązania. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde powiązanie ma zwykle te cztery składniki: obiekt docelowy powiązania, właściwość docelowa, Źródło powiązania i ścieżka do wartości w źródle powiązania do użycia. Aby uzyskać więcej informacji na temat tych koncepcji powiązań danych, zobacz temat [powiązanie danych — omówienie](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 <xref:System.Windows.Data.Binding.Path%2A> Użyj właściwości, aby określić wartość źródłową, z którą chcesz powiązać:  
  
-   W najprostszym przypadku <xref:System.Windows.Data.Binding.Path%2A> wartość właściwości jest nazwą właściwości obiektu źródłowego, który ma być używany dla powiązania, na przykład `Path=PropertyName`.  
  
-   Podwłaściwości właściwości można określić za pomocą składni podobnej do tej, która została użyta w C#. Na przykład klauzula `Path=ShoppingCart.Order` ustawia powiązanie z podwłaściwością `Order` obiektu lub właściwości `ShoppingCart`.  
  
-   Aby powiązać z dołączoną właściwością, Umieść nawiasy wokół dołączonej właściwości. Na przykład, aby powiązać z dołączoną właściwością <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>, składnia ma `Path=(DockPanel.Dock)`wartość.  
  
-   Indeksatory właściwości można określić w nawiasach kwadratowych po nazwie właściwości, w której zastosowano indeksator. Na przykład klauzula `Path=ShoppingCart[0]` ustawia powiązanie z indeksem, który odnosi się do tego, jak wewnętrzna indeksowanie właściwości obsługuje ciąg literału "0". Obsługiwane są również wiele indeksatorów.  
  
-   Indeksatory i podwłaściwości mogą być mieszane w `Path` klauzuli, na przykład`Path=ShoppingCart.ShippingInfo[MailingAddress,Street].`  
  
-   Wewnątrz indeksatorów można mieć wiele parametrów indeksatora oddzielonych przecinkami (,). Typ każdego parametru można określić za pomocą nawiasów. Na przykład możesz mieć `Path="[(sys:Int32)42,(sys:Int32)24]"`, gdzie `sys` jest mapowany do `System` przestrzeni nazw.  
  
-   Gdy źródłem jest widok kolekcji, bieżący element można określić za pomocą ukośnika (/). Na przykład klauzula `Path=/` ustawia powiązanie z bieżącym elementem w widoku. Gdy źródłem jest kolekcja, ta składnia określa bieżący element domyślnego widoku kolekcji.  
  
-   Nazwy właściwości i ukośniki można łączyć z właściwościami przechodzenia, które są kolekcjami. Na przykład `Path=/Offices/ManagerName` określa bieżący element kolekcji źródłowej, który `Offices` zawiera właściwość, która jest również kolekcją. Jego bieżący element jest obiektem, który zawiera `ManagerName` właściwość.  
  
-   Opcjonalnie można użyć ścieżki kropki (.) w celu utworzenia powiązania z bieżącym źródłem. Na przykład `Text="{Binding}"` jest `Text="{Binding Path=.}"`równoważne.  
  
 Informacje o składni ścieżki znajdują się w temacie [Omówienie deklaracji powiązań](~/docs/framework/wpf/data/binding-declarations-overview.md) lub [składnia języka XAML PropertyPath](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
 W [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] przypadku powiązań, <xref:System.Windows.Data.Binding.XPath%2A> Zobacz właściwość.  
  
 Aby powiązać z całym obiektem, nie trzeba określać <xref:System.Windows.Data.Binding.Path%2A> właściwości. Aby uzyskać więcej informacji, zobacz sekcję "Określanie ścieżki do wartości" w temacie [powiązanie danych — omówienie](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje wyzwalacz stylu, który tworzy <xref:System.Windows.Controls.ToolTip> raport, który wyświetla komunikat o błędzie walidacji. Wartość metody ustawiającej wiąże się z zawartością błędu bieżącego <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.TextBox> (przy użyciu stylu) przy użyciu <xref:System.Windows.Data.Binding.RelativeSource%2A> właściwości. Aby uzyskać więcej informacji na temat tego przykładu, zobacz [How to: Implementowanie walidacji](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)powiązania.  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelativeSource">
      <MemberSignature Language="C#" Value="public System.Windows.Data.RelativeSource RelativeSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.RelativeSource RelativeSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.RelativeSource" />
      <MemberSignature Language="VB.NET" Value="Public Property RelativeSource As RelativeSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::RelativeSource ^ RelativeSource { System::Windows::Data::RelativeSource ^ get(); void set(System::Windows::Data::RelativeSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RelativeSource : System.Windows.Data.RelativeSource with get, set" Usage="System.Windows.Data.Binding.RelativeSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia źródło powiązania, określając jego lokalizację względem pozycji docelowej powiązania.</summary>
        <value><see cref="T:System.Windows.Data.RelativeSource" /> Obiekt określający względną lokalizację źródła powiązania do użycia. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest często używana do powiązania jednej właściwości obiektu z inną właściwością tego samego obiektu lub do definiowania powiązania w stylu lub szablonie.  
  
 Domyślnie powiązania dziedziczą kontekst danych określony przez `DataContext` właściwość, jeśli został on ustawiony. Właściwość jest jednak jednym ze sposobów, w której można jawnie ustawić źródło <xref:System.Windows.Data.Binding> i zastąpić Dziedziczony kontekst danych. <xref:System.Windows.Data.Binding.RelativeSource%2A> Aby uzyskać więcej informacji, zobacz [jak: Określ źródło](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)powiązania.  
  
 Właściwości <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> i<xref:System.Windows.Data.Binding.Source%2A?displayProperty=nameWithType> umożliwiają również jawne ustawienie źródła powiązania. Jednak dla każdego powiązania należy określić tylko jedną z <xref:System.Windows.Data.Binding.ElementName%2A>trzech <xref:System.Windows.Data.Binding.Source%2A>właściwości, <xref:System.Windows.Data.Binding.RelativeSource%2A>,, i, lub może wystąpić konflikt. Ta właściwość zgłasza wyjątek, jeśli występuje konflikt źródła powiązania.  
  
 Aby [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] uzyskać więcej informacji, zobacz [RelativeSource MarkupExtension](~/docs/framework/wpf/advanced/relativesource-markupextension.md).  
    
## Examples  
 Poniższy przykład pokazuje wyzwalacz stylu, który tworzy <xref:System.Windows.Controls.ToolTip> raport, który wyświetla komunikat o błędzie walidacji. Wartość metody ustawiającej wiąże się z zawartością błędu bieżącego <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.TextBox> (przy użyciu stylu) przy użyciu <xref:System.Windows.Data.Binding.RelativeSource%2A> właściwości. Aby uzyskać więcej informacji na temat tego przykładu, zobacz [How to: Implementowanie walidacji](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)powiązania.  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 Aby zapoznać się z pełnym przykładem, zobacz [przykładowe sprawdzanie poprawności powiązań](https://go.microsoft.com/fwlink/?LinkID=159972).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Source" />
      </Docs>
    </Member>
    <Member MemberName="RemoveSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="T:System.Windows.UIElement" /> Lub<see cref="T:System.Windows.ContentElement" /> który nasłuchuje na zdarzeniu.</param>
        <param name="handler">Procedura obsługi do usunięcia.</param>
        <summary>Usuwa procedurę obsługi dla <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> dołączonego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje dołączone użycie zdarzeń w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="T:System.Windows.UIElement" /> Lub<see cref="T:System.Windows.ContentElement" /> który nasłuchuje na zdarzeniu.</param>
        <param name="handler">Procedura obsługi do usunięcia.</param>
        <summary>Usuwa procedurę obsługi dla <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> dołączonego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje dołączone użycie zdarzeń w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetXmlNamespaceManager(class System.Windows.DependencyObject target, class System.Xml.XmlNamespaceManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetXmlNamespaceManager (target As DependencyObject, value As XmlNamespaceManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetXmlNamespaceManager(System::Windows::DependencyObject ^ target, System::Xml::XmlNamespaceManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetXmlNamespaceManager : System.Windows.DependencyObject * System.Xml.XmlNamespaceManager -&gt; unit" Usage="System.Windows.Data.Binding.SetXmlNamespaceManager (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Xml.XmlNamespaceManager" />
      </Parameters>
      <Docs>
        <param name="target">Obiekt, z którego mają zostać pobrane informacje o przestrzeni nazw.</param>
        <param name="value">Wartość <see cref="T:System.Xml.XmlNamespaceManager" /> do użycia dla oceny przestrzeni nazw w przekazanym elemencie.</param>
        <summary>Ustawia obiekt Menedżera przestrzeni nazw używany przez powiązanie dołączone do podanego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda obsługuje użycie dołączonej właściwości dla <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> dołączonej właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializePath">
      <MemberSignature Language="C#" Value="public bool ShouldSerializePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializePath" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializePath () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializePath();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializePath : unit -&gt; bool" Usage="binding.ShouldSerializePath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, <see cref="P:System.Windows.Data.Binding.Path" /> czy właściwość powinna być utrwalona.</summary>
        <returns><see langword="true" />Jeśli wartość właściwości została zmieniona z domyślną; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta `ShouldSerialize` Metoda jest dostępna, <xref:System.Windows.Data.Binding.Path%2A> ponieważ właściwość nie ma prostej wartości domyślnej. Ta metoda wskazuje, czy właściwość została zmieniona z wartości domyślnej. Ta metoda jest zazwyczaj wywoływana, jeśli tworzysz projektanta dla <xref:System.Windows.Data.Binding> lub opracowujesz własny formant, w którym znajduje <xref:System.Windows.Data.Binding>się.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSource">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeSource" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeSource () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeSource();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeSource : unit -&gt; bool" Usage="binding.ShouldSerializeSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, <see cref="P:System.Windows.Data.Binding.Source" /> czy właściwość powinna być utrwalona.</summary>
        <returns><see langword="true" />Jeśli wartość właściwości została zmieniona z domyślną; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta `ShouldSerialize` Metoda jest dostępna, <xref:System.Windows.Data.Binding.Source%2A> ponieważ właściwość nie ma prostej wartości domyślnej. Ta metoda wskazuje, czy właściwość została zmieniona z wartości domyślnej. Ta metoda jest zazwyczaj wywoływana, jeśli tworzysz projektanta dla <xref:System.Windows.Data.Binding> lub opracowujesz własny formant, w którym znajduje <xref:System.Windows.Data.Binding>się.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValidationRules">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeValidationRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeValidationRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeValidationRules () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeValidationRules();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeValidationRules : unit -&gt; bool" Usage="binding.ShouldSerializeValidationRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, <see cref="P:System.Windows.Data.Binding.ValidationRules" /> czy właściwość powinna być utrwalona.</summary>
        <returns><see langword="true" />Jeśli wartość właściwości została zmieniona z domyślną; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta `ShouldSerialize` Metoda jest dostępna, <xref:System.Windows.Data.Binding.ValidationRules%2A> ponieważ właściwość nie ma prostej wartości domyślnej. Ta metoda wskazuje, czy właściwość została zmieniona z wartości domyślnej. Ta metoda jest zazwyczaj wywoływana, jeśli tworzysz projektanta dla <xref:System.Windows.Data.Binding> lub opracowujesz własny formant, w którym znajduje <xref:System.Windows.Data.Binding>się.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public object Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Source { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : obj with get, set" Usage="System.Windows.Data.Binding.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt, który będzie używany jako źródło powiązania.</summary>
        <value>Obiekt, który ma być używany jako źródło powiązania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie powiązania dziedziczą kontekst danych określony przez `DataContext` właściwość, jeśli został on ustawiony. Właściwość jest jednak jednym ze sposobów, w której można jawnie ustawić źródło <xref:System.Windows.Data.Binding> i zastąpić Dziedziczony kontekst danych. <xref:System.Windows.Data.Binding.Source%2A> Jeśli nie potrzebujesz funkcji ustanawiania zakresu, w którym kilka właściwości dziedziczy ten sam kontekst danych, możesz użyć <xref:System.Windows.Data.Binding.Source%2A> właściwości zamiast `DataContext` właściwości.  
  
 Właściwości <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> i<xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=nameWithType> umożliwiają również jawne ustawienie źródła powiązania. Jednak dla każdego powiązania należy określić tylko jedną z <xref:System.Windows.Data.Binding.ElementName%2A>trzech <xref:System.Windows.Data.Binding.Source%2A>właściwości, <xref:System.Windows.Data.Binding.RelativeSource%2A>,, i, lub może wystąpić konflikt. Ta właściwość zgłasza wyjątek, jeśli występuje konflikt źródła powiązania.  
  
 Aby wyczyścić tę właściwość, ustaw ją na <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType>wartość.  
  
<a name="xamlAttributeUsage_Source"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object Source="object"/>  
```  
  
<a name="xamlValues_Source"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *object*  
 Istniejący obiekt. Aby odwołać się do istniejącego obiektu, użyj [rozszerzenia znacznika StaticResource](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano `Person` obiekt z właściwością ciągu o `PersonName` nazwie zdefiniowanej w `SDKSample` przestrzeni nazw, jak pierwszy wyróżniony wiersz ukazuje. `<src>` W wyróżnionym wierszu zawierającym element tworzy wystąpienie `Person` obiektu `Joe`z `PersonName` wartością właściwości. Jest to wykonywane w `Resources` sekcji i `x:Key`przypisane.  
  
 [!code-xaml[BindingInstantiation](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml?highlight=4,9,37)]  
  
 Wyróżniony wiersz zawierający `<TextBlock>` elementy pokazuje, jak powiązać `PersonName` z właściwością. W związku z tym <xref:System.Windows.Controls.TextBlock> kontrolka zostanie wyświetlona z wartością "Jan".  
  
 <xref:System.Windows.Data.Binding.Source%2A> W poniższym przykładzie <xref:System.Windows.Application.Current%2A?displayProperty=nameWithType>wartości <xref:System.Windows.Data.Binding> obiektów są ustawiane na Właściwość:`static`  
  
 [!code-xaml[DataBindingLab#ComboBoxMultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/AddProductWindow.xaml#comboboxmultibinding)]  
  
 Pełny przykład można znaleźć w sekcji [Demonstracja powiązania danych](https://go.microsoft.com/fwlink/?LinkID=163703).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" Usage="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Występuje, gdy wartość zostanie przetransferowana z celu powiązania do źródła powiązania, ale tylko dla powiązań z <see cref="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" /> wartością ustawioną na. <see langword="true" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_SourceUpdatedEvent"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Data.Binding.SourceUpdatedEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>, ograniczone do <xref:System.Windows.Data.DataTransferEventArgs>.|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="SourceUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SourceUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SourceUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SourceUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SourceUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.Data.Binding.SourceUpdated" /> Identyfikuje dołączone zdarzenie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" Usage="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Występuje, gdy wartość zostanie przetransferowana z źródła powiązania do elementu docelowego powiązania, ale tylko dla powiązań z <see cref="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" /> wartością ustawioną <see langword="true" />na.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TargetUpdatedEvent"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Data.Binding.TargetUpdatedEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>, ograniczone do <xref:System.Windows.Data.DataTransferEventArgs>.|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TargetUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TargetUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TargetUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.Data.Binding.TargetUpdated" /> Identyfikuje dołączone zdarzenie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceExceptionFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceExceptionFilter As UpdateSourceExceptionFilterCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceExceptionFilterCallback ^ UpdateSourceExceptionFilter { System::Windows::Data::UpdateSourceExceptionFilterCallback ^ get(); void set(System::Windows::Data::UpdateSourceExceptionFilterCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceExceptionFilter : System.Windows.Data.UpdateSourceExceptionFilterCallback with get, set" Usage="System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceExceptionFilterCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia procedurę obsługi, której można użyć, aby zapewnić niestandardową logikę obsługi wyjątków, które napotyka aparat powiązań podczas aktualizacji wartości źródłowej powiązania. Ma to zastosowanie tylko wtedy, gdy skojarzono <see cref="T:System.Windows.Controls.ExceptionValidationRule" /> z powiązaniem.</summary>
        <value>Metoda, która udostępnia logikę niestandardową do obsługi wyjątków, które aparat powiązania napotyka podczas aktualizacji wartości źródłowej powiązania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ExceptionValidationRule> Jest wbudowaną regułą walidacji, która sprawdza wyjątki zgłoszone podczas aktualizacji właściwości źródła powiązania. Jeśli masz skojarzoną <xref:System.Windows.Controls.ExceptionValidationRule> <xref:System.Windows.Data.Binding> z obiektem, możesz użyć tej właściwości, aby ustawić procedurę obsługi w celu zapewnienia logiki niestandardowej do obsługi tych wyjątków. Jeśli element nie <xref:System.Windows.Data.Binding> <xref:System.Windows.Controls.ValidationError> <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> jest określony w, aparat powiązań tworzy wyjątek z wyjątkiem i dodaje go do kolekcji powiązanego elementu. <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>  
  
   
  
## Examples  
 Właściwość poniżej <xref:System.Windows.Controls.TextBox> ma powiązane dane z właściwością `Age3` źródłową typu `int`. <xref:System.Windows.Controls.TextBox.Text%2A> <xref:System.Windows.Controls.ExceptionValidationRule> Sprawdza wyjątki, które są zgłaszane podczas aktualizacji właściwości źródłowej (na przykład gdy użytkownik wprowadzi wartość, której nie można przekonwertować na liczbę całkowitą).  
  
 [!code-xaml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 Możesz dostarczyć logikę niestandardową do obsługi tych wyjątków. Poniższy przykład pokazuje, <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> jak użyć właściwości do <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>ustawienia.  
  
 [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 Poniżej przedstawiono przykładową implementację <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>programu.  
  
 [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 Może również zwracać `null`, sam <xref:System.Windows.Controls.ValidationError>wyjątek lub. <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  
  
 Aby zapoznać się z kompletnym przykładem, zobacz [przykładowe sprawdzanie poprawności powiązań](https://go.microsoft.com/fwlink/?LinkID=159972).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger UpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą chronometraż aktualizacji źródła powiązań.</summary>
        <value>Jedna z <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> wartości. Wartością domyślną jest <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />, która zwraca wartość domyślną <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> właściwości zależności docelowej. Jednak wartość domyślna dla większości właściwości zależności to <see cref="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged" />, <see cref="P:System.Windows.Controls.TextBox.Text" /> natomiast Właściwość <see cref="F:System.Windows.Data.UpdateSourceTrigger.LostFocus" />ma wartość domyślną.  
  
Programistyczny sposób ustalania wartości domyślnej <see cref="P:System.Windows.Data.Binding.UpdateSourceTrigger" /> właściwości zależności to pobieranie metadanych właściwości przy użyciu <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> , a następnie <see cref="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" /> sprawdzanie wartości właściwości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązania, które <xref:System.Windows.Data.BindingMode.TwoWay> są <xref:System.Windows.Data.BindingMode.OneWayToSource> lub nasłuchują zmian we właściwości docelowej i propagują je z powrotem do źródła. Jest to nazywane aktualizacją źródła. Zazwyczaj te aktualizacje są wykonywane za każdym razem, gdy właściwość docelowa zostanie zmieniona. Jest to dokładne dla pól wyboru i innych formantów prostych, ale zazwyczaj nie jest to odpowiednie dla pól tekstowych. Aktualizacja po każdym naciśnięciu klawisza może spowodować obniżenie wydajności i odmówienia użytkownikowi zwykłej szansy problemu i naprawienia błędów pisowni przed zatwierdzeniem nowej wartości. W związku z tym <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> wartość <xref:System.Windows.Controls.TextBox.Text%2A> domyślna właściwości to <xref:System.Windows.Data.UpdateSourceTrigger.LostFocus> i nie <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>.  
  
 W przypadku ustawienia <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> wartości na <xref:System.Windows.Data.UpdateSourceTrigger.Explicit> <xref:System.Windows.Data.BindingExpression.UpdateSource%2A> , należy wywołać metodę lub zmiany nie zostaną propagowane do źródła.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Mode" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ma zostać uwzględniony <see cref="T:System.Windows.Controls.DataErrorValidationRule" />.</summary>
        <value><see langword="true" />Aby uwzględnić <see cref="T:System.Windows.Controls.DataErrorValidationRule" />; w przeciwnym razie <see langword="false" />,.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości stanowi alternatywę dla użycia <xref:System.Windows.Controls.DataErrorValidationRule> elementu jawnie. To wbudowana reguła walidacji, która sprawdza, czy występują błędy wywoływane <xref:System.ComponentModel.IDataErrorInfo> przez implementację obiektu źródłowego. <xref:System.Windows.Controls.DataErrorValidationRule> Jeśli wystąpi błąd, aparat powiązań tworzy <xref:System.Windows.Controls.ValidationError> z błędem i dodaje go <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> do kolekcji powiązanego elementu. Brak błędu czyści tę opinię weryfikacyjną, chyba że inna reguła zgłasza problem z walidacją.  
  
 <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A>wprowadzono w .NET Framework w wersji 3,5.  Aby uzyskać więcej informacji, zobacz [.NET Framework wersje i zależności](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
   
  
## Examples  
 Poniższe przykłady używają <xref:System.ComponentModel.IDataErrorInfo> i <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> do <xref:System.Windows.Controls.TextBox>sprawdzania poprawności danych wejściowych użytkownika w. Pierwszy przykład tworzy typ danych, który implementuje <xref:System.ComponentModel.IDataErrorInfo> w celu zgłaszania błędów walidacji.  
  
 [!code-csharp[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#idataerrorinfodata)]
 [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#idataerrorinfodata)]  
  
 Poniższy przykład tworzy powiązanie `Age` właściwości <xref:System.Windows.Controls.TextBox> z zestawami <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> `true` i w <xref:System.Windows.Data.Binding>.  Gdy użytkownik wprowadzi nieprawidłową wartość, w <xref:System.Windows.Controls.TextBox> oknie <xref:System.Windows.Controls.ToolTip> i zgłasza komunikat o błędzie pojawia się czerwone obramowanie.  
  
 [!code-xaml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#idataerrorinfoxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnExceptions">
      <MemberSignature Language="C#" Value="public bool ValidatesOnExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnExceptions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnExceptions : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ma zostać uwzględniony <see cref="T:System.Windows.Controls.ExceptionValidationRule" />.</summary>
        <value><see langword="true" />Aby uwzględnić <see cref="T:System.Windows.Controls.ExceptionValidationRule" />; w przeciwnym razie <see langword="false" />,.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości stanowi alternatywę dla użycia <xref:System.Windows.Controls.ExceptionValidationRule> elementu jawnie. <xref:System.Windows.Controls.ExceptionValidationRule> Jest wbudowaną regułą walidacji, która sprawdza wyjątki, które są zgłaszane podczas aktualizacji właściwości source. Jeśli wyjątek jest zgłaszany, aparat powiązań tworzy <xref:System.Windows.Controls.ValidationError> wyjątek i dodaje go <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> do kolekcji powiązanego elementu. Brak błędu czyści tę opinię weryfikacyjną, chyba że inna reguła zgłasza problem z walidacją.  
  
 <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A>wprowadzono w .NET Framework w wersji 3,5.  Aby uzyskać więcej informacji, zobacz [.NET Framework wersje i zależności](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
   
  
## Examples  
 W poniższych przykładach <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> użyto do sprawdzania poprawności danych wejściowych użytkownika w. <xref:System.Windows.Controls.TextBox> Pierwszy przykład tworzy typ danych, który zgłasza wyjątek, gdy `Age` właściwość jest ustawiona na nieprawidłową właściwość.  
  
 [!code-csharp[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#throwexceptiondata)]
 [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#throwexceptiondata)]  
  
 Poniższy przykład tworzy powiązanie `Age` właściwości <xref:System.Windows.Controls.TextBox> z zestawami <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> `true` i w <xref:System.Windows.Data.Binding>. Gdy użytkownik wprowadzi nieprawidłową wartość, w <xref:System.Windows.Controls.TextBox> oknie <xref:System.Windows.Controls.ToolTip> i zgłasza komunikat o błędzie pojawia się czerwone obramowanie.  
  
 [!code-xaml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#throwexceptionxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnNotifyDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnNotifyDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnNotifyDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnNotifyDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnNotifyDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ma zostać uwzględniony <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />.</summary>
        <value><see langword="true" />Aby uwzględnić <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />; w przeciwnym razie <see langword="false" />,. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors%2A> tak `true`jest, powiązanie sprawdza i raportuje błędy, które są zgłaszane przez źródło danych implementujące <xref:System.ComponentModel.INotifyDataErrorInfo>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt; ValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.ValidationRule&gt; ValidationRules" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationRules As Collection(Of ValidationRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ ValidationRules { System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidationRules : System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;" Usage="System.Windows.Data.Binding.ValidationRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję reguł, które sprawdzają poprawność danych wejściowych użytkownika.</summary>
        <value>Kolekcja <see cref="T:System.Windows.Controls.ValidationRule" /> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Model powiązania <xref:System.Windows.Data.Binding.ValidationRules%2A> <xref:System.Windows.Data.Binding> danych umożliwia skojarzenie z obiektem lub <xref:System.Windows.Data.MultiBinding>. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Możesz tworzyć reguły niestandardowe, wyprowadzając z <xref:System.Windows.Controls.ValidationRule> klasy i <xref:System.Windows.Controls.ValidationRule.Validate%2A> implementując metodę, lub <xref:System.Windows.Controls.ExceptionValidationRule>używając wbudowanego, który unieważnia wartość, jeśli występują wyjątki podczas aktualizacji źródła.  
  
 Aparat powiązań sprawdza każdy <xref:System.Windows.Controls.ValidationRule> skojarzony z powiązaniem za każdym razem, gdy wartość wejściowa (wartość właściwości docelowej powiązania) jest transferowana do właściwości source powiązania. Aby zapoznać się ze szczegółową omówieniem procesu weryfikacji, zobacz sekcję walidacja danych w artykule [Omówienie powiązania danych](~/docs/framework/wpf/data/data-binding-overview.md).  
  
> [!NOTE]
>  Tę właściwość można ustawić [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] tylko przy użyciu podanej składni kolekcji lub przez uzyskanie dostępu do obiektu kolekcji i użycie różnych metod, takich jak. `Add` Właściwość uzyskiwania dostępu do obiektu kolekcja jest tylko do odczytu, podczas gdy sama kolekcja jest do odczytu i zapisu.  
  
<a name="xamlPropertyElementUsage_ValidationRules"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.ValidationRules>  
    oneOrMoreValidationRules  
  </object.ValidationRules>  
</object>  
  
```  
  
<a name="xamlValues_ValidationRules"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreValidationRules*  
 Co najmniej jeden obiekt. <xref:System.Windows.Controls.ValidationRule> Można użyć <xref:System.Windows.Controls.ExceptionValidationRule> klasy lub utworzyć reguły niestandardowe przez podklasy <xref:System.Windows.Controls.ValidationRule> klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Validation" />
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManager">
      <MemberSignature Language="C#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="ILAsm" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XmlNamespaceManager" />
      <MemberSignature Language="VB.NET" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="F#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" Usage="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Xml.XmlNamespaceManager" /> używany do wykonywania zapytań obsługujących <see langword="XPath" /> przestrzeń nazw w powiązaniach XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta dołączona właściwość używa dziedziczenia wartości właściwości, co powoduje odtworzenie zachowania dziedziczenia przestrzeni nazw obecnego [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]w. Aby uzyskać szczegółowe informacje, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).  
  
<a name="dependencyPropertyInfo_XmlNamespaceManager"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Data.Binding.XmlNamespaceManagerProperty>|  
|Właściwości metadanych ustawione na`true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty XmlNamespaceManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly XmlNamespaceManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ XmlNamespaceManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable XmlNamespaceManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Data.Binding.XmlNamespaceManager" /> Identyfikuje załączoną właściwość.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Windows.Data.Binding.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see langword="XPath" /> zapytanie zwracające wartość [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] w źródle powiązania, które ma zostać użyte.</summary>
        <value><see langword="XPath" /> Zapytanie. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] źródłem powiązania jest dane zamiast [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] obiektu, <xref:System.Windows.Data.Binding.XPath%2A> właściwość jest używana zamiast <xref:System.Windows.Data.Binding.Path%2A> właściwości, aby wskazać ścieżkę do wartości w źródle powiązania do użycia.  
  
 Ustawiając <xref:System.Windows.Data.Binding.XPath%2A> właściwość, `XPath` tworzysz zapytanie w celu wybrania węzła lub kolekcji węzłów <xref:System.Xml.XmlNode?displayProperty=nameWithType>(<xref:System.Xml.XmlElement?displayProperty=nameWithType> i <xref:System.Xml.XmlAttribute?displayProperty=nameWithType> obu pochodnych). <xref:System.Xml.XmlNode?displayProperty=nameWithType>jest obiektem, co oznacza, że można powiązać ze swoimi właściwościami <xref:System.Windows.Data.Binding.Path%2A> przy użyciu właściwości. [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]  
  
 Metoda obsługuje wyrażenia z<xref:System.Windows.Data.Binding.XPath%2A>właściwości. `XPath` <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> `XPath`funkcje nie są obsługiwane. Informacje o <xref:System.Xml.XmlNode.SelectNodes%2A> wyrażeniach można znaleźć w dokumentacji i niektórych przykładach podanych w sekcji przykład. `XPath`  
  
 LINQ to XML obiektów <xref:System.Xml.Linq.XDocument> i <xref:System.Xml.Linq.XElement> nie należy ich `XPath`używać. Aby uzyskać szczegółowe informacje [, zobacz How to: Powiąż z wynikami](~/docs/framework/wpf/data/how-to-bind-to-xdocument-xelement-or-linq-for-xml-query-results.md)zapytania XDocument, XElement lub LINQ for XML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
