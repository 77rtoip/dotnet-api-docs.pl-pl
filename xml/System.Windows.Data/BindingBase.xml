<Type Name="BindingBase" FullName="System.Windows.Data.BindingBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6871bcc8808192513fe5930b08bd4db0522bbb17" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30700406" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class BindingBase : System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract BindingBase extends System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BindingBase&#xA;Inherits MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingBase abstract : System::Windows::Markup::MarkupExtension" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Markup.MarkupExtension</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Object))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje typowe cechy <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.PriorityBinding" />, i <see cref="T:System.Windows.Data.MultiBinding" /> klasy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ <xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=nameWithType> metody jest zapieczętowany, która pochodzi z klasy niestandardowego powiązania <xref:System.Windows.Data.BindingBase> nie będą działać poprawnie jako [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] — rozszerzenie znaczników.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BindingGroupName">
      <MemberSignature Language="C#" Value="public string BindingGroupName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BindingGroupName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.BindingGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroupName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BindingGroupName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę <see cref="T:System.Windows.Data.BindingGroup" /> do której należy to powiązanie.</summary>
        <value>Nazwa <see cref="T:System.Windows.Data.BindingGroup" /> do której należy to powiązanie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> nie zdefiniowano, należy powiązanie <xref:System.Windows.Data.BindingGroup> tylko wtedy, gdy źródło powiązania i <xref:System.Windows.FrameworkElement.DataContext%2A> elementu nadrzędnego, który ma <xref:System.Windows.Data.BindingGroup> są tego samego obiektu.  
  
 Jeśli <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> jest ustawiony na wartość powiązania należy <xref:System.Windows.Data.BindingGroup> jeśli są spełnione następujące warunki:  
  
-   <xref:System.Windows.Data.BindingGroup.Name%2A> z <xref:System.Windows.Data.BindingGroup> i <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> są takie same.  
  
-   <xref:System.Windows.Data.BindingGroup> Należy do elementu nadrzędnego elementu docelowego wiązania.  
  
 Jeśli <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> ustawiono `null`, powiązanie nigdy nie jest częścią <xref:System.Windows.Data.BindingGroup>.  
  
 Mogą zawierać powiązań, które mają źródła, która różni się od <xref:System.Windows.FrameworkElement.DataContext%2A> elementu nadrzędnego, który ma <xref:System.Windows.Data.BindingGroup> przez ustawienie <xref:System.Windows.Data.BindingGroup.Name%2A> z <xref:System.Windows.Data.BindingGroup> i <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> właściwości powiązanie z taką samą wartość.  Można wykluczyć powiązania, które mają tego samego źródła jako <xref:System.Windows.FrameworkElement.DataContext%2A> elementu nadrzędnego, który ma <xref:System.Windows.Data.BindingGroup> przez ustawienie <xref:System.Windows.Data.BindingGroup.Name%2A> z <xref:System.Windows.Data.BindingGroup> i <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> właściwości powiązania różne wartości.  
  
   
  
## Examples  
 Poniższe przykłady są częścią aplikacji, która sprawdza, czy użytkownik ma wartość właściwości dwa obiekty równe wartości. W pierwszym przykładzie jest tworzony dwa <xref:System.Windows.Controls.TextBox> formantów, z których każdy jest powiązany z innego źródła danych: powiązanie pierwszego <xref:System.Windows.Controls.TextBox> jest częścią <xref:System.Windows.Data.BindingGroup> ponieważ <xref:System.Windows.Controls.TextBox> dziedziczy <xref:System.Windows.FrameworkElement.DataContext%2A> i <xref:System.Windows.Data.BindingGroup> z jego nadrzędny <xref:System.Windows.Controls.StackPanel>  
  
 Powiązanie na drugiej stronie <xref:System.Windows.Controls.TextBox> jest częścią <xref:System.Windows.Data.BindingGroup> ponieważ <xref:System.Windows.Data.BindingGroup.Name%2A> z <xref:System.Windows.Data.BindingGroup> i <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> z <xref:System.Windows.Data.Binding> są ustawione na `bindingGroup`.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 W poniższym przykładzie przedstawiono <xref:System.Windows.Controls.ValidationRule> używającej w poprzednim przykładzie.  W <xref:System.Windows.Controls.ValidationRule.Validate%2A> metody przykładzie pobiera każdego obiektu źródłowego z <xref:System.Windows.Data.BindingGroup> i sprawdza, czy właściwości obiektów są takie same.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public int Delay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Delay" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.Delay" />
      <MemberSignature Language="VB.NET" Value="Public Property Delay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Delay { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ilość czasu (w milisekundach) oczekiwania przed zaktualizowaniem źródle powiązania po wartości na zmiany docelowego.</summary>
        <value>Ilość czasu (w milisekundach) oczekiwania przed zaktualizowaniem źródle powiązania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli używasz powiązanie do aktualizowania źródła powiązania przy każdej zmianie wartości właściwości w elemencie docelowym można skonfigurować ustawienie <xref:System.Windows.Data.Binding.Mode%2A> właściwości <xref:System.Windows.Data.BindingMode.TwoWay> i <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> do <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>.  W takiej sytuacji można użyć <xref:System.Windows.Data.BindingBase.Delay%2A> właściwości w celu określenia, czy powinno być opóźnienie między zmiany obiektu docelowego i po zaktualizowaniu źródła.  Jest to przydatne, gdy chcesz umożliwić użytkownikom na zmianę właściwości w obiekcie źródłowym, ale nie chcesz, aby każdej zmiany, które mają być natychmiast przekazane do źródła.  Na przykład załóżmy, że masz pola tekstowego, która jest powiązana z danymi dwukierunkowe do właściwości obiektu danych.  Gdy użytkownik zmieni wartość w polu tekstowym, źródło jest aktualizowana.  Aby włączyć w tym scenariuszu, należy ustawić <xref:System.Windows.Data.Binding.Mode%2A> właściwość <xref:System.Windows.Data.Binding> do <xref:System.Windows.Data.BindingMode.TwoWay> i <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> do <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>.  Aby zapobiec aktualizowania obiektu źródła z każdym naciśnięciu klawisza, ustaw <xref:System.Windows.Data.BindingBase.Delay%2A> właściwości rozsądną wartość spowodują powiązania do aktualizacji tylko, po upływie tego ilość czasu, ponieważ użytkownik zatrzymana, wpisując polecenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FallbackValue">
      <MemberSignature Language="C#" Value="public object FallbackValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FallbackValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.FallbackValue" />
      <MemberSignature Language="VB.NET" Value="Public Property FallbackValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FallbackValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość do użycia podczas wiązania nie może zwracać wartości.</summary>
        <value>Wartość domyślna to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązanie pomyślnie zwraca wartość, jeśli:  
  
1.  Ścieżka do źródła powiązanie rozpoznaje pomyślnie.  
  
2.  Konwerter wartości, jeśli istnieje, jest w stanie można przekonwertować wartości wynikowej.  
  
3.  Wartość wynikową jest prawidłowa dla właściwości docelowej (docelowy) powiązania.  
  
 Jeśli 1 i 2 zwraca <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType>, właściwość target ma ustawioną wartość <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, jeśli jest dostępny. W przypadku nie <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, zostanie użyta domyślna wartość właściwości docelowej.  
  
 Wartość <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType> nie jest uważana za pomyślnie wartości zwracanej.  
  
<a name="xamlTextUsage_FallbackValue"></a>   
## <a name="xaml-text-usage"></a>Użycie tekstu w języku XAML  
  
```  
<object FallbackValue="fallbackValue" />  
```  
  
 **- lub -**  
  
```  
<object>  
  <object.FallbackValue>  
    fallbackValue  
    </object.FallbackValue>  
</object>  
```  
  
<a name="xamlValues_FallbackValue"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *fallbackValue*  
 Atrybut lub obiektu wartości elementu tego samego typu jako właściwość target. Zobacz dokumentację tego typu dla XAML informacje o użyciu. Tego typu może może nie obsługiwać Składnia atrybutu dla wartości, lub mogą lub może nie obsługiwać składni elementu obiektu (co wymaga konstruktora domyślnego dla tego typu). Właściwości typu docelowego w związku z tym będzie miała wpływ składni, których używasz dla wartości <xref:System.Windows.Data.BindingBase.FallbackValue%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public override sealed object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Obiekt, który może zapewnić usługi rozszerzenia znaczników. Może być <see langword="null" />;</param>
        <summary>Zwraca obiekt, który powinien być ustawiony na właściwość którym to powiązanie i rozszerzenia są stosowane.</summary>
        <returns>Wartość można ustawić dla właściwości docelowej powiązania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja zapewnia obsługę podstawowa składnia dla powiązania za pośrednictwem [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] dla wszystkich klas pochodnych praktyczne (<xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, i <xref:System.Windows.Data.MultiBinding>).  
  
 <xref:System.Windows.Data.BindingBase> Powinien zwrócić wyrażenie obiektu, który jest wynikiem powiązanie klasy implementacja tej metody. Powiązanie właściwości polega na przeznaczonych dla danego <xref:System.Windows.DependencyProperty> na danym <xref:System.Windows.DependencyObject>. Te dwa rodzaje informacji są przekazywane przez wykonanie zapytania dotyczącego <xref:System.Windows.Markup.IProvideValueTarget> implementacji na `serviceProvider`, który [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] udostępnia czytnik podczas analizowania powiązania. Ta implementacja klasy podstawowej jest odpowiedzialny za sprawdzanie prawidłową <xref:System.Windows.DependencyProperty> i <xref:System.Windows.DependencyObject>. Jeśli zostaną one uznane rzeczywistego wykonania przekazujących wyrażenie powiązania zmniejsza do różnych klas pochodnych, zaimplementowanego przez wywołanie klasy podstawowej wewnętrzny metody abstrakcyjnej. W przeciwnym razie rozszerzenia zwraca samego obiektu powiązania. Zwracanie powiązania sam powoduje błąd niezgodności typów, ale nie powinno to nastąpić w normalnych okolicznościach.  
  
> [!IMPORTANT]
>  Ponieważ składnia wiązania za pomocą [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] zgodnie z implementacją w tej metody polega na zaimplementowanie przesłonięcia wewnętrznego i dlatego <xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=nameWithType> sam jest zapieczętowany, która pochodzi z klasy niestandardowego powiązania <xref:System.Windows.Data.BindingBase> nie będą działać poprawnie jako [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] — rozszerzenie znaczników.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeFallbackValue">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeFallbackValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeFallbackValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ShouldSerializeFallbackValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeFallbackValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeFallbackValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość wskazującą, czy procesy serializacji powinny serializować wartość <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> właściwości wystąpienia tej klasy.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> wartość właściwości powinny być serializowane; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTargetNullValue">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTargetNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTargetNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTargetNullValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTargetNullValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość wskazującą, czy <see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> właściwości powinny być serializowane.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> właściwość powinna być serializowane; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringFormat">
      <MemberSignature Language="C#" Value="public string StringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.StringFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property StringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ciąg, który określa sposób formatowania wiązanie, jeśli wyświetlana jest wartość powiązanej jako ciąg.</summary>
        <value>Ciąg, który określa sposób formatowania wiązanie, jeśli wyświetlana jest wartość powiązanej jako ciąg.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingBase.StringFormat%2A> można wstępnie zdefiniowane, złożonych lub niestandardowy ciąg formatu. Aby uzyskać więcej informacji na temat formaty ciągu, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 Jeśli ustawisz <xref:System.Windows.Data.Binding.Converter%2A> i <xref:System.Windows.Data.BindingBase.StringFormat%2A> właściwości, konwerter jest stosowany do wartości danych, a następnie <xref:System.Windows.Data.BindingBase.StringFormat%2A> została zastosowana.  
  
 Podczas ustawiania <xref:System.Windows.Data.BindingBase.StringFormat%2A> na <xref:System.Windows.Data.Binding> do formatu ciągu złożonego, można określić tylko jeden parametr.  
  
 Jeśli używasz <xref:System.Windows.Data.MultiBinding>, <xref:System.Windows.Data.BindingBase.StringFormat%2A> właściwość ma zastosowanie tylko wtedy, gdy jest ustawiona na <xref:System.Windows.Data.MultiBinding>.  Wartość <xref:System.Windows.Data.BindingBase.StringFormat%2A> na wszystkich podrzędnych ustawiono <xref:System.Windows.Data.Binding> obiektów jest ignorowana.  Liczba parametrów w formacie ciągu złożonego nie może przekraczać liczby podrzędnych <xref:System.Windows.Data.Binding> obiekty w <xref:System.Windows.Data.MultiBinding>.  
  
 Jeśli używasz <xref:System.Windows.Data.PriorityBinding>, można ustawić <xref:System.Windows.Data.BindingBase.StringFormat%2A> na <xref:System.Windows.Data.PriorityBinding>na obiekty podrzędne powiązanie lub oba.  Jeśli <xref:System.Windows.Data.BindingBase.StringFormat%2A> zestawu w elemencie podrzędnym powiązania, który jest stosuje się, że wartość jest używana.  Jeśli <xref:System.Windows.Data.BindingBase.StringFormat%2A> nie jest ustawiona na powiązanie podrzędne, która jest stosowana, <xref:System.Windows.Data.BindingBase.StringFormat%2A> z <xref:System.Windows.Data.PriorityBinding> jest stosowana, jeśli jest ustawiona.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Windows.Data.BindingBase.StringFormat%2A> właściwości można przekonwertować `Price`, która jest <xref:System.Double>, na ciąg, który reprezentuje walutę.  
  
 [!code-xaml[ContentStringSnippets#Binding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#binding)]  
  
 W poniższym przykładzie użyto <xref:System.Windows.Data.BindingBase.StringFormat%2A> właściwość <xref:System.Windows.Data.MultiBinding> do kompilacji ciąg, który zawiera `Description` i `Price` poszczególnych elementów w <xref:System.Windows.Controls.ListBox>.  
  
 [!code-xaml[ContentStringSnippets#MultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#multibinding)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetNullValue">
      <MemberSignature Language="C#" Value="public object TargetNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.TargetNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która jest używana w miejscu docelowym, jeśli znajduje się wartość źródła <see langword="null" />.</summary>
        <value>Wartość, która jest używana w celu, jeśli znajduje się wartość źródła <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_TargetNullValue"></a>   
## <a name="xaml-text-usage"></a>Użycie tekstu w języku XAML  
  
```  
<object TargetNullValue="nullValue" />  
```  
  
 **- lub -**  
  
```  
<object>  
  <object.TargetNullValue>  
    nullValue  
    </object.TargetNullValue>  
</object>  
```  
  
<a name="xamlValues_TargetNullValue"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *nullValue*  
 Atrybut lub obiektu wartości elementu tego samego typu jako właściwość target. Zobacz dokumentację tego typu dla XAML informacje o użyciu. Tego typu może może nie obsługiwać Składnia atrybutu dla wartości, lub mogą lub może nie obsługiwać składni elementu obiektu (co wymaga konstruktora domyślnego dla tego typu).  
  
   
  
## Examples  
 Poniższy przykład wiąże <xref:System.Windows.Controls.TextBox> do właściwości obiektu.  Jeśli właściwość jest `null`, <xref:System.Windows.Controls.TextBox> Wyświetla "Wprowadź ciąg."  
  
 [!code-xaml[BindingGroupSnippets#TargetNullValue](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#targetnullvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>