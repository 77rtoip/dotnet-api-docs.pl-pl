<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e4fe8cb7d8c552109655c14426cd5269ac176d49" /><Meta Name="ms.sourcegitcommit" Value="9802d4c6745a8ae514b26f144fb3969265b224ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/22/2018" /><Meta Name="ms.locfileid" Value="53751209" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="DateAndTime" /> Moduł zawiera procedury składowane i właściwości używane w operacjach daty i godziny.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, Pobierz bieżącą datę lub godzinę, wykonywać obliczenia daty, zwracają daty lub godziny, Ustaw daty lub godziny lub czas trwania procesu.  
  
   
  
## Examples  
 W tym przykładzie użyto `Today` właściwości do zwrócenia z bieżącą datą systemu.  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/dates-and-times-summary.md">Daty i godziny — Podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see langword="Date" /> zawierający wartości daty i godziny, do której dodano określony przedział czasu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> wartość wyliczenia lub wyrażenie ciągu reprezentujące przedział czasu, które chcesz dodać.</param>
        <param name="Number">Wymagana. Wyrażenie typu zmiennoprzecinkowego reprezentujący liczbę interwałów, które chcesz dodać. Może być dodatnia (Aby uzyskać wartości daty/godziny w przyszłości) lub ujemna (w celu uzyskania wartości daty/godziny w przeszłości). Może zawierać ułamkową część kiedy <paramref name="Interval" /> określa godziny, minut i sekund. Dla innych wartości parametru <paramref name="Interval" />wszelkie ułamkowe wchodzi w skład <paramref name="Number" /> jest ignorowana.</param>
        <param name="DateValue">Wymagana. Wyrażenie reprezentujący datę i godzinę, do którego ma zostać dodana interwału. <paramref name="DateValue" /> sam nie jest zmieniany w program wywołujący.</param>
        <summary>Zwraca wartość zawierającą wartość daty i godziny, do której dodano określony przedział czasu.</summary>
        <returns>Wartość zawierającą wartość daty i godziny, do której dodano określony przedział czasu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć `DateAdd` funkcję, aby dodawać lub odejmować określony przedział czasu od daty. Na przykład można obliczyć datę w ciągu 30 dni od dzisiaj lub czas 45 minut przed teraz.  
  
 Aby dodać dni `DateValue`, możesz użyć `DateInterval.Day`, `DateInterval.DayOfYear`, lub `DateInterval.Weekday`. Są one traktowane jako równoważne, ponieważ `DayOfYear` i `Weekday` nie są istotne interwałami.  
  
 `DateAdd` Funkcja nigdy nie zwraca nieprawidłową datę. Jeśli to konieczne, część dzień wynikowy Data jest pomniejszony do ostatniego dnia miesiąca wynikowy w wynikowej roku. Poniższy przykład dodaje miesiąc do 31 stycznia:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 W tym przykładzie `DateAdd` zwraca `#2/28/1995#`, a nie `#2/31/1995#`. Jeśli `DateValue` jest `#1/31/1996#`, funkcja zwraca `#2/29/1996#` ponieważ 1996 roku przestępnym.  
  
> [!NOTE]
>  `DateAdd` używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje podczas dodawania odstępach czasu. Na przykład można dodać ułamkowe liczbę dni, zaokrąglony do najbliższej milisekundy `Date` zmiennej w następujący sposób:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|String|Jednostka interwału czasu do dodania|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.DayOfYear`|t|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.Hour`|h|Godzina; zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Minute`|n|Minuta; zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Month`|m|Miesiąc; obcięty do wartości całkowitej|  
|`DateInterval.Quarter`|q|Kwartał; obcięty do wartości całkowitej|  
|`DateInterval.Second`|s|Sekundę; zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Weekday`|w|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.WeekOfYear`|ww|Tydzień; obcięty do wartości całkowitej|  
|`DateInterval.Year`|yyyy|Rok; obcięty do wartości całkowitej|  
  
   
  
## Examples  
 W tym przykładzie przyjmuje wartość typu date i przy użyciu `DateAdd` funkcji, wyświetla odpowiednią datę z określoną liczbę miesięcy w przyszłości.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> nie jest zwracała wartość do <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> nie jest prawidłowy.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Obliczona data jest przed 00:00:00 w dniu 1 stycznia rok, 1 lub nowszą niż 23:59:59 31 grudnia 9999 r.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> wartość wyliczenia lub wyrażenie ciągu reprezentujące przedział czasu, które chcesz dodać.</param>
        <param name="Number">Wymagana. Wyrażenie typu zmiennoprzecinkowego reprezentujący liczbę interwałów, które chcesz dodać. <paramref name="Number" /> może to być dodatnia (Aby uzyskać wartości daty/godziny w przyszłości) lub ujemna (w celu uzyskania wartości daty/godziny w przeszłości). Może zawierać ułamkową część kiedy <paramref name="Interval" /> określa godziny, minut i sekund. Dla innych wartości parametru <paramref name="Interval" />wszelkie ułamkowe wchodzi w skład <paramref name="Number" /> jest ignorowana.</param>
        <param name="DateValue">Wymagana. Wyrażenie reprezentujący datę i godzinę, do którego ma zostać dodana interwału. <paramref name="DateValue" /> sam nie jest zmieniany w program wywołujący.</param>
        <summary>Zwraca wartość zawierającą wartość daty i godziny, do której dodano określony przedział czasu.</summary>
        <returns>Wartość zawierającą wartość daty i godziny, do której dodano określony przedział czasu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć `DateAdd` funkcję, aby dodawać lub odejmować określony przedział czasu od daty. Na przykład można obliczyć datę w ciągu 30 dni od dzisiaj lub czas 45 minut przed teraz.  
  
 Aby dodać dni `DateValue`, możesz użyć `DateInterval.Day`, `DateInterval.DayOfYear`, lub `DateInterval.Weekday`. Są one traktowane jako równoważne, ponieważ `DayOfYear` i `Weekday` nie są istotne interwałami.  
  
 `DateAdd` Funkcja nigdy nie zwraca nieprawidłową datę. Jeśli to konieczne, część dzień wynikowy Data jest pomniejszony do ostatniego dnia miesiąca wynikowy w wynikowej roku. Poniższy przykład dodaje miesiąc do 31 stycznia:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 W tym przykładzie `DateAdd` zwraca `#2/28/1995#`, a nie `#2/31/1995#`. Jeśli `DateValue` jest `#1/31/1996#`, funkcja zwraca `#2/29/1996#` ponieważ 1996 roku przestępnym.  
  
> [!NOTE]
>  `DateAdd` używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje podczas dodawania odstępach czasu. Na przykład można dodać ułamkowe liczbę dni, zaokrąglony do najbliższej milisekundy `Date` zmiennej w następujący sposób:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|String|Jednostka interwału czasu do dodania|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.DayOfYear`|t|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.Hour`|h|Godzina; zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Minute`|n|Minuta; zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Month`|m|Miesiąc; obcięty do wartości całkowitej|  
|`DateInterval.Quarter`|q|Kwartał; obcięty do wartości całkowitej|  
|`DateInterval.Second`|s|Sekundę; zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Weekday`|w|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.WeekOfYear`|ww|Tydzień; obcięty do wartości całkowitej|  
|`DateInterval.Year`|yyyy|Rok; obcięty do wartości całkowitej|  
  
   
  
## Examples  
 W tym przykładzie przyjmuje wartość typu date i przy użyciu `DateAdd` funkcji, wyświetla odpowiednią datę z określoną liczbę miesięcy w przyszłości.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> nie jest zwracała wartość do <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> nie jest prawidłowy.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Obliczona data jest przed 00:00:00 w dniu 1 stycznia rok, 1 lub nowszą niż 23:59:59 31 grudnia 9999 r.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość określającą liczbę przedziałów czasu między dwiema <see langword="Date" /> wartości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> wartość wyliczenia lub wyrażenie ciągu reprezentujące przedział czasu, chcesz używać jako jednostka różnica między <paramref name="Date1" /> i <paramref name="Date2" />.</param>
        <param name="Date1">Wymagana. Pierwsza wartość daty/godziny, który chcesz użyć w obliczeniach.</param>
        <param name="Date2">Wymagana. Druga wartość daty/godziny, który chcesz użyć w obliczeniach.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> jest używany.</param>
        <param name="WeekOfYear">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> wyliczenia, która określa pierwszy tydzień roku. Jeśli nie zostanie określony, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> jest używany.</param>
        <summary>Zwraca wartość typu long określającą liczbę przedziałów czasu między dwiema <see langword="Date" /> wartości.</summary>
        <returns>Wartość typu long określającą liczbę przedziałów czasu między dwiema <see langword="Date" /> wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć `DateDiff` funkcję, aby określić, ile określonych interwałów czasu między dwiema wartościami daty/godziny. Na przykład, można na przykład `DateDiff` Aby obliczyć liczbę dni między dwiema datami lub liczbę tygodni od dnia dzisiejszego do końca roku.  
  
## <a name="behavior"></a>Zachowanie  
  
-   **Postępowanie z parametrami.** `DateDiff` odejmuje wartość `Date1` od wartości `Date2` do produkcji różnica. Żadna wartość nie jest zmieniany w program wywołujący.  
  
-   **Wartości zwracane.** Ponieważ `Date1` i `Date2` są `Date` typu danych posiadają wartości daty i godziny z dokładnością do 100-nanosekundowych impulsów na zegarze systemowym. Jednak `DateDiff` zawsze zwraca liczbę przedziałów czasu, jako `Long` wartość.  
  
     Jeśli `Date1` reprezentuje nowsze daty i czasu niż `Date2`, `DateDiff` zwraca wartość ujemną.  
  
-   **Dzień odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.DayOfYear`, jest ona traktowana taka sama jak `DateInterval.Day`, ponieważ `DayOfYear` nie jest znaczący jednostka interwału czasu.  
  
-   **Tydzień odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.WeekOfYear`, zwrócona wartość reprezentuje liczbę tygodni między pierwszy dzień tygodnia, zawierającego `Date1` i pierwszy dzień tygodnia zawierającego `Date2`. W poniższym przykładzie pokazano, jak daje różne wyniki z `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     W powyższym przykładzie `DateDiff` zwraca 0, aby `wD` ponieważ różnicę między dwiema datami jest mniejszy niż 7 dni, ale zwraca 1, aby `wY` ponieważ 7 dniowy różnicy pierwszych dni odpowiednich kalendarza tygodni.  
  
-   **Większe odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.Year`, zwracana wartość jest obliczana wyłącznie na podstawie roku części `Date1` i `Date2`. Podobnie wartość zwracana przez `DateInterval.Month` jest obliczana wyłącznie na podstawie części roku i miesiąca argumentów, a dla `DateInterval.Quarter` z kwartałów zawierający dwiema datami.  
  
     Na przykład podczas porównywania następnego roku, 1 stycznia do 31 grudnia `DateDiff` zwraca wartość 1, `DateInterval.Year`, `DateInterval.Quarter`, lub `DateInterval.Month`, nawet jeśli upłynął co najwyżej tylko jeden dzień.  
  
     Dla kultury, takie jak japoński, który ma wiele er `DateDiff` metoda nie zwraca różnicę w latach, jeśli różnica obejmuje co najmniej dwóch ery. Zamiast tego można obliczyć różnicę w wartości zwracanych przez <xref:System.DateTime.Year%2A> właściwości, jak pokazano w poniższym przykładzie: `date2.Year - date1.Year`.  
  
-   **Inne odstępach czasu.** Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje w znajdowaniu odstępach czasu. Na przykład, można użyć `Subtract` metody w jednym z jej przeciążona formularzy: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje <xref:System.TimeSpan> z `Date` zmiennej do zwrócenia innego `Date` wartości i <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje `Date` wartość Aby zwrócić <xref:System.TimeSpan>. Pozwala czas procesu, aby dowiedzieć się, liczby milisekund przyjmuje, co ilustruje poniższy przykład.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość ciągu|Jednostka różnicę czasu|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|„d”|Dzień|  
|`DateInterval.DayOfYear`|„y”|Dzień|  
|`DateInterval.Hour`|„h”|Godzina|  
|`DateInterval.Minute`|"n"|Minuta|  
|`DateInterval.Month`|„m”|Miesiąc|  
|`DateInterval.Quarter`|"q"|Kwartał|  
|`DateInterval.Second`|„s”|Sekunda|  
|`DateInterval.Weekday`|„w”|Tydzień|  
|`DateInterval.WeekOfYear`|"TT"|Tygodnia w kalendarzu|  
|`DateInterval.Year`|„yyyy”|Rok|  
  
 `DayOfWeek` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `WeekOfYear` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy tydzień pełną w nowym roku|  
  
   
  
## Examples  
 W tym przykładzie użyto `DateDiff` funkcję, aby wyświetlić liczbę dni między podaną datą a dzisiaj.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" />, lub <paramref name="DayofWeek" /> znajduje się poza zakresem.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> lub <paramref name="Date2" /> jest nieprawidłowego typu.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> wartość wyliczenia lub wyrażenie ciągu reprezentujące przedział czasu, chcesz używać jako jednostka różnica między <paramref name="Date1" /> i <paramref name="Date2" />.</param>
        <param name="Date1">Wymagana. Pierwsza wartość daty/godziny, który chcesz użyć w obliczeniach.</param>
        <param name="Date2">Wymagana. Druga wartość daty/godziny, który chcesz użyć w obliczeniach.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> jest używany.</param>
        <param name="WeekOfYear">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> wyliczenia, która określa pierwszy tydzień roku. Jeśli nie zostanie określony, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> jest używany.</param>
        <summary>Zwraca wartość typu long określającą liczbę przedziałów czasu między dwiema <see langword="Date" /> wartości.</summary>
        <returns>Wartość typu long określającą liczbę przedziałów czasu między dwiema <see langword="Date" /> wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć `DateDiff` funkcję, aby określić, ile określonych interwałów czasu między dwiema wartościami daty/godziny. Na przykład, można na przykład `DateDiff` Aby obliczyć liczbę dni między dwiema datami lub liczbę tygodni od dnia dzisiejszego do końca roku.  
  
## <a name="behavior"></a>Zachowanie  
  
-   **Postępowanie z parametrami.** `DateDiff` odejmuje wartość `Date1` od wartości `Date2` do produkcji różnica. Żadna wartość nie jest zmieniany w program wywołujący.  
  
-   **Wartości zwracane.** Ponieważ `Date1` i `Date2` są `Date` typu danych posiadają wartości daty i godziny z dokładnością do 100-nanosekundowych impulsów na zegarze systemowym. Jednak `DateDiff` zawsze zwraca liczbę przedziałów czasu, jako `Long` wartość.  
  
     Jeśli `Date1` reprezentuje nowsze daty i czasu niż `Date2`, `DateDiff` zwraca wartość ujemną.  
  
-   **Dzień odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.DayOfYear`, jest ona traktowana taka sama jak `DateInterval.Day`, ponieważ `DayOfYear` nie jest znaczący jednostka interwału czasu.  
  
-   **Tydzień odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.WeekOfYear`, zwrócona wartość reprezentuje liczbę tygodni między pierwszy dzień tygodnia, zawierającego `Date1` i pierwszy dzień tygodnia zawierającego `Date2`. W poniższym przykładzie pokazano, jak daje różne wyniki z `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     W powyższym przykładzie `DateDiff` zwraca 0, aby `wD` ponieważ różnicę między dwiema datami jest mniejszy niż 7 dni, ale zwraca 1, aby `wY` ponieważ 7 dniowy różnicy pierwszych dni odpowiednich kalendarza tygodni.  
  
-   **Większe odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.Year`, zwracana wartość jest obliczana wyłącznie na podstawie roku części `Date1` i `Date2`. Podobnie wartość zwracana przez `DateInterval.Month` jest obliczana wyłącznie na podstawie części roku i miesiąca argumentów, a dla `DateInterval.Quarter` z kwartałów zawierający dwiema datami.  
  
     Na przykład podczas porównywania następnego roku, 1 stycznia do 31 grudnia `DateDiff` zwraca wartość 1, `DateInterval.Year`, `DateInterval.Quarter`, lub `DateInterval.Month`, nawet jeśli upłynął co najwyżej tylko jeden dzień.  
  
     Dla kultury, takie jak japoński, który ma wiele er `DateDiff` metoda nie zwraca różnicę w latach, jeśli różnica obejmuje co najmniej dwóch ery. Zamiast tego można obliczyć różnicę w wartości zwracanych przez <xref:System.DateTime.Year%2A> właściwości, jak pokazano w poniższym przykładzie: `date2.Year - date1.Year`.  
  
-   **Inne odstępach czasu.** Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje w znajdowaniu odstępach czasu. Na przykład, można użyć `Subtract` metody w jednym z jej przeciążona formularzy: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje <xref:System.TimeSpan> z `Date` zmiennej do zwrócenia innego `Date` wartości i <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje `Date` wartość Aby zwrócić <xref:System.TimeSpan>. Pozwala czas procesu, aby dowiedzieć się, liczby milisekund przyjmuje, co ilustruje poniższy przykład.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość ciągu|Jednostka różnicę czasu|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|„d”|Dzień|  
|`DateInterval.DayOfYear`|„y”|Dzień|  
|`DateInterval.Hour`|„h”|Godzina|  
|`DateInterval.Minute`|"n"|Minuta|  
|`DateInterval.Month`|„m”|Miesiąc|  
|`DateInterval.Quarter`|"q"|Kwartał|  
|`DateInterval.Second`|„s”|Sekunda|  
|`DateInterval.Weekday`|„w”|Tydzień|  
|`DateInterval.WeekOfYear`|"TT"|Tygodnia w kalendarzu|  
|`DateInterval.Year`|„yyyy”|Rok|  
  
 `DayOfWeek` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `WeekOfYear` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy tydzień pełną w nowym roku|  
  
   
  
## Examples  
 W tym przykładzie użyto `DateDiff` funkcję, aby wyświetlić liczbę dni między podaną datą a dzisiaj.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" />, lub <paramref name="DayofWeek" /> znajduje się poza zakresem.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> lub <paramref name="Date2" /> jest nieprawidłowego typu.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość całkowitą zawierającą wskazany składnik danej <see langword="Date" /> wartość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> wartość wyliczenia lub wyrażenie ciągu reprezentujące część wartości daty/godziny mają być zwracane.</param>
        <param name="DateValue">Wymagana. <see langword="Date" /> Wartość, która ma zostać oceniona.</param>
        <param name="FirstDayOfWeekValue">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> jest używany.</param>
        <param name="FirstWeekOfYearValue">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> wyliczenia, która określa pierwszy tydzień roku. Jeśli nie zostanie określony, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> jest używany.</param>
        <summary>Zwraca wartość całkowitą zawierającą wskazany składnik danej <see langword="Date" /> wartość.</summary>
        <returns>Całkowitą zawierającą wskazany składnik danej <see langword="Date" /> wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć `DatePart` funkcję, aby ocenić wartości daty/godziny i zwracają określonego składnika. Na przykład, można na przykład `DatePart` do obliczania dzień tygodnia lub bieżącej godziny.  
  
 Jeśli wybierzesz `DateInterval.Weekday` dla `Interval` argument, zwrócona wartość jest zgodne z wartościami `FirstDayOfWeek` wyliczenia. Jeśli wybierzesz `DateInterval.WeekOfYear`, `DatePart` używa <xref:System.Globalization.Calendar> i <xref:System.Globalization.CultureInfo> klasy <xref:System.Globalization> przestrzeni nazw w celu określenia bieżących ustawień.  
  
 `FirstDayOfWeekValue` Argument ma wpływ na obliczenia, które używają `DateInterval.Weekday` i `DateInterval.WeekOfYear` `Interval` ustawienia. `FirstWeekOfYearValue` Argument ma wpływ na obliczenia, które określają `DateInterval.WeekOfYear` dla `Interval`.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje podczas pobierania części daty/godziny. Na przykład można uzyskać wartość pełną datę `Date` zmiennej z wartości godziny ustawiona na północ, w następujący sposób:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|String|Część wartości daty/godziny do zwrócenia|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Dzień miesiąca (1-31)|  
|`DateInterval.DayOfYear`|t|Dzień roku (od 1 do 366)|  
|`DateInterval.Hour`|h|Godzina|  
|`DateInterval.Minute`|n|Minuta|  
|`DateInterval.Month`|m|Miesiąc|  
|`DateInterval.Quarter`|q|Kwartał|  
|`DateInterval.Second`|s|Sekunda|  
|`DateInterval.Weekday`|w|Dzień tygodnia (od 1 do 7)|  
|`DateInterval.WeekOfYear`|ww|Tydzień roku (od 1 do 53)|  
|`DateInterval.Year`|yyyy|Rok|  
  
 `FirstDayOfWeekValue` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `FirstWeekOfYearValue` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy tydzień pełną w nowym roku|  
  
   
  
## Examples  
 W tym przykładzie przyjmuje wartość typu date i przy użyciu `DatePart` funkcji, wyświetla kwartał roku, w której występuje.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> nie jest prawidłowy.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> nie jest zwracała wartość do <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> wartość wyliczenia lub wyrażenie ciągu reprezentujące część wartości daty/godziny mają być zwracane.</param>
        <param name="DateValue">Wymagana. A <see langword="Date" /> wartość, która ma zostać oceniona.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> jest używany.</param>
        <param name="WeekOfYear">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> wyliczenia, która określa pierwszy tydzień roku. Jeśli nie zostanie określony, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> jest używany.</param>
        <summary>Zwraca wartość zawierającą określony składnik danej <see langword="Date" /> wartość.</summary>
        <returns>Całkowitą zawierającą wskazany składnik danej <see langword="Date" /> wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć `DatePart` funkcję, aby ocenić wartości daty/godziny i zwracają określonego składnika. Na przykład, można na przykład `DatePart` do obliczania dzień tygodnia lub bieżącej godziny.  
  
 Jeśli wybierzesz `DateInterval.Weekday` dla `Interval` argument, zwrócona wartość jest zgodne z wartościami `FirstDayOfWeek` wyliczenia. Jeśli wybierzesz `DateInterval.WeekOfYear`, `DatePart` używa <xref:System.Globalization.Calendar> i <xref:System.Globalization.CultureInfo> klasy <xref:System.Globalization> przestrzeni nazw w celu określenia bieżących ustawień.  
  
 `FirstDayOfWeekValue` Argument ma wpływ na obliczenia, które używają `DateInterval.Weekday` i `DateInterval.WeekOfYear` `Interval` ustawienia. `FirstWeekOfYearValue` Argument ma wpływ na obliczenia, które określają `DateInterval.WeekOfYear` dla `Interval`.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje podczas pobierania części daty/godziny. Na przykład można uzyskać wartość pełną datę `Date` zmiennej z wartości godziny ustawiona na północ, w następujący sposób:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|String|Część wartości daty/godziny do zwrócenia|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Dzień miesiąca (1-31)|  
|`DateInterval.DayOfYear`|t|Dzień roku (od 1 do 366)|  
|`DateInterval.Hour`|h|Godzina|  
|`DateInterval.Minute`|n|Minuta|  
|`DateInterval.Month`|m|Miesiąc|  
|`DateInterval.Quarter`|q|Kwartał|  
|`DateInterval.Second`|s|Sekunda|  
|`DateInterval.Weekday`|w|Dzień tygodnia (od 1 do 7)|  
|`DateInterval.WeekOfYear`|ww|Tydzień roku (od 1 do 53)|  
|`DateInterval.Year`|yyyy|Rok|  
  
 `FirstDayOfWeekValue` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `FirstWeekOfYearValue` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy tydzień pełną w nowym roku|  
  
   
  
## Examples  
 W tym przykładzie przyjmuje wartość typu date i przy użyciu `DatePart` funkcji, wyświetla kwartał roku, w której występuje.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> nie jest zwracała wartość do <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">Wymagana. Wyrażenie całkowite z zakresu od 1 do 9999. Jednak także akceptowane są wartości poniżej tego zakresu. Jeśli <paramref name="Year" /> to od 0 do 99, będzie interpretowany jako zwrócenia między 1930 i 2029, zgodnie z opisem w poniższej sekcji "Uwagi". Jeśli <paramref name="Year" /> jest mniejszy niż 1 jest odejmowany od bieżącego roku.</param>
        <param name="Month">Wymagana. Wyrażenie całkowite z zakresu od 1 do 12. Akceptowane są również wartości spoza tego zakresu. Wartość <paramref name="Month" /> jest przesunięty 1 i zastosowane do stycznia obliczeniowe roku. Innymi słowy (<paramref name="Month" /> - 1) jest dodawany do stycznia. Rok są przeliczane, jeśli to konieczne. Następujące wyniki pokazują, w tym celu: 
Jeśli <paramref name="Month" /> wynosi 1, wynik jest stycznia obliczeniowe roku.  
  
Jeśli <paramref name="Month" /> wynosi 0, wynik jest grudnia zeszłego roku.  
  
Jeśli <paramref name="Month" /> wynosi -1, wynik jest listopada zeszłego roku.  
  
Jeśli <paramref name="Month" /> 13, wynik jest stycznia następnego roku.</param>
        <param name="Day">Wymagana. Wyrażenie całkowite z zakresu od 1 do 31. Akceptowane są również wartości spoza tego zakresu. Wartość <paramref name="Day" /> jest przesunięty 1 i zastosowane do pierwszego dnia miesiąca obliczeniowych. Innymi słowy (<paramref name="Day" /> - 1) jest dodawana do pierwszego dnia miesiąca. Miesiąc i rok są ponownie obliczane, jeśli to konieczne. Następujące wyniki pokazują, w tym celu: 
Jeśli <paramref name="Day" /> wynosi 1, wynik jest pierwszy dzień miesiąca obliczeniowych.  
  
Jeśli <paramref name="Day" /> wynosi 0, wynik jest ostatni dzień poprzedniego miesiąca.  
  
Jeśli <paramref name="Day" /> wynosi -1, wynik jest przedostatni dzień poprzedniego miesiąca.  
  
Jeśli <paramref name="Day" /> jest koniec bieżącego miesiąca, wynik jest odpowiednie dnia następnego miesiąca. Na przykład jeśli <paramref name="Month" /> wynosi 4 i <paramref name="Day" /> 31, wynik jest 1 maja.</param>
        <summary>Zwraca <see langword="Date" /> reprezentującą określony rok, miesiąc i dzień, przy użyciu czasu jest przyjmowana północ (00: 00:00).</summary>
        <returns>A <see langword="Date" /> reprezentującą określony rok, miesiąc i dzień, przy użyciu czasu jest przyjmowana północ (00: 00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W obszarze Windows 98 lub Windows 2000 dwóch cyfr dla `Year` argument są interpretowane zgodnie z ustawieniami komputera użytkownika. Domyślne ustawienia są, że wartości z zakresu od 0 do 29 są interpretowane jako lat 2000 2029 i wartości od 30 do 99 są interpretowane jako lata 1930 1999. Dla wszystkich innych `Year` argumentów, użyj czterocyfrowy rok, na przykład 1924.  
  
 Wcześniejszych wersjach Windows interpretuj lat zgodnie z ustawieniami domyślnymi opisanych powyżej. Mieć pewność, że funkcja zwraca poprawnej wartości, należy użyć czterech cyfr `Year`.  
  
 W poniższym przykładzie pokazano ujemna, zero, a wartości dodatnie argumentu. W tym miejscu `DateSerial` funkcja zwraca `Date` reprezentującą dzień przed pierwszego dnia marca w roku 10 lat przed rokiem bieżącym; innymi słowy, ostatni dzień lutego dziesięć lat temu.  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 Jeśli `Month` lub `Day` przekracza jego normalny zakres, zostanie zastosowany do następnej większej jednostki zgodnie z potrzebami. Na przykład, jeśli określisz 32 dni, zostanie on oceniony jako jeden miesiąc, a także od jednej do czterech dni, w zależności od wartości `Month`. Jeśli `Year` jest większa niż 9999, czy którykolwiek z argumentów jest poza zakresem -2,147,483,648 do 2 147 483 647, <xref:System.ArgumentException> wystąpi błąd. Jeśli określona przez trzy argumenty Data jest starsza niż 00:00:00 w dniu 1 stycznia rok, 1 lub nowszą niż 23:59:59 31 grudnia 9999 <xref:System.ArgumentOutOfRangeException> wystąpi błąd.  
  
 `Date` Typ danych obejmuje składniki czasu. `DateSerial` Ustawia wszystkie te 0, więc zwracana wartość oznacza początek obliczony dzień.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje gromadząc `Date` wartość. Na przykład, można użyć jednej z przeciążonych <xref:System.DateTime.%23ctor%2A> konstruktory, aby wypełnić `Date` zmiennej przy użyciu kombinacji żądane składniki. Poniższy przykład ustawia `NewDateTime` do 6 maja 1978, jedna dziesiąta chwilę przed 8:30 w nocy:  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 W tym przykładzie użyto `DateSerial` funkcja zwraca datę określony rok, miesiąc i dzień.  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje ciąg reprezentujący aktualną datę ustawioną w systemie.</summary>
        <value>Zwraca lub konfiguruje ciąg reprezentujący aktualną datę ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` Zwraca datę systemową w formacie MM-dd rrrr, który używa skrócona nazwa miesiąca. Akceptowane formaty daty są M-d rrrr, M-d-y, M/d/rrrr i M/d/y. Ta zasada obowiązuje dla wszystkich ustawień regionalnych systemu, z wyjątkiem tych, które korzystają z zestawu znaków dwubajtowych (DBCS). Jeśli ustawienia regionalne systemu korzysta z zestawu znaków dwubajtowych, `DateString` zwraca datę systemową w formacie RRRR MM-dd. Ustawienia regionalne systemu są ustawiane przy użyciu **zegar, język i Region** pozycja **Panelu sterowania**.  
  
 **Uwaga** `DateString` właściwość zwraca daty systemowej tylko w formacie RRRR MM-dd dla `zh` (chiński uproszczony), `ko` (koreański) i `ja` ustawienia regionalne systemu (japoński), jeśli używasz języka Visual Basic w ramach Program Silverlight.  
  
 Do pobierania lub ustawiania bieżący czas systemowy jako `String`, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> właściwości.  
  
 Aby uzyskać bieżący system daty lub godziny w formacie ustawień regionalnych lub w niestandardowym formacie, należy podać <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> właściwość <xref:Microsoft.VisualBasic.Strings.Format%2A> funkcji, określając format daty/godziny wstępnie zdefiniowanych lub zdefiniowanych przez użytkownika. Poniższy przykład przedstawia to.  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 Dostęp z bieżącą datą systemu jako do `Date`, użyj <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie systemu daty lub godziny wymaga uprawnienie niezarządzanego kodu, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W poniższym przykładzie użyto `DateString` właściwość, aby wyświetlić bieżącą datą systemu.  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Nieprawidłowy format używany do ustawiania wartości <see cref="T:Microsoft.VisualBasic.DateAndTime.DateString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">Wymagana. ciąg reprezentujący wartość daty/godziny z zakresu od 00:00:00 w dniu 1 stycznia 1 roku do 23:59:59 31 grudnia 9999.</param>
        <summary>Zwraca <see langword="Date" /> zawierający informacje o dacie reprezentowane przez ciąg, z czasu jest przyjmowana północ (00: 00:00).</summary>
        <returns>Element <see langword="Date" /> zawierający informacje o dacie reprezentowane przez ciąg, z czasu jest przyjmowana północ (00: 00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `StringDate` zawiera tylko liczby z zakresu od 1 do 12 rozdzielonych separatorami prawidłową datę `DateValue` rozpoznaje kolejność dzień, miesiąc i rok zgodnie z formatu daty krótkiej, określonym w systemie. `DateValue` używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia. Można zastąpić przy użyciu formatu daty krótkiej, ustawiając <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> właściwość <xref:System.Globalization.DateTimeFormatInfo> klasy w <xref:System.Globalization> przestrzeni nazw.  
  
 `DateValue` rozpoznaje nazwy miesiąca w postaci długo skrócone i liczbowych. Na przykład oprócz rozpoznawaniu 1991-12/30 i 12/30/91 `DateValue` rozpoznaje również 30 grudnia 1991 i 30 grudnia 1991.  
  
 Jeśli rok `StringDate` zostanie pominięty, `DateValue` używa bieżącego roku od daty systemowej tego komputera.  
  
 Jeśli `StringDate` argument zawiera informacje o czasie `DateValue` nie ma w zwracanej wartości. Jednak jeśli `StringDate` zawiera nieprawidłowe informacje o godzinie, takie jak "89: 98" <xref:System.InvalidCastException> wystąpi błąd.  
  
   
  
## Examples  
 W tym przykładzie użyto `DateValue` funkcji do przekonwertowania ciągu na datę. Umożliwia także literałów dat bezpośrednio przypisać datę, która `Object` lub `Date` zmiennej, na przykład `oldDate = #2/12/69#`.  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringDate" /> zawiera nieprawidłowe informacje o godzinie.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagana. A <see langword="Date" /> wartości, z którego mają zostać wyodrębnione dnia.</param>
        <summary>Zwraca wartość całkowitą z zakresu od 1 do 31 reprezentującą dzień miesiąca.</summary>
        <returns>Wartość całkowitą z zakresu od 1 do 31 reprezentującą dzień miesiąca.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli używasz `Day` funkcji, trzeba go za pomocą `Microsoft.VisualBasic` przestrzeni nazw, ponieważ <xref:System.Windows.Forms> nazw definiuje <xref:System.Windows.Forms.Day> jako wyliczenie. W poniższym przykładzie przedstawiono sposób kwalifikacji `Day` pozwala usunąć tę niejednoznaczność:  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 Dzień miesiąca można również uzyskać, wywołując `DatePart` i określając `DateInterval.Day` dla *interwał* argumentu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Day` funkcję, aby uzyskać dzień miesiąca z określonej daty. W środowisku programistycznym literał daty jest wyświetlany w krótkich formatu standardowego (na przykład "02/12/1969") przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` jest kwalifikowana, w odróżnieniu od <xref:System.Windows.Forms.Day?displayProperty=nameWithType> wyliczenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Wymagana. A <see langword="Date" /> wartości, z którego mają zostać wyodrębnione godziny.</param>
        <summary>Zwraca wartość całkowitą z zakresu od 0 do 23 reprezentująca godzinę dnia.</summary>
        <returns>Wartość całkowitą z zakresu od 0 do 23 reprezentująca godzinę dnia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać godziny dnia, przez wywołanie metody `DatePart` i określając `DateInterval.Hour` dla `Interval` argumentu.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hour` funkcję, aby uzyskać godziny od określonego czasu. W środowisku programistycznym literał czasu jest wyświetlany w formacie krótkim czasie przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Wymagana. A <see langword="Date" /> wartości, z którego mają zostać wyodrębnione minuty.</param>
        <summary>Zwraca wartość całkowitą z zakresu od 0 do 59 reprezentującą minutę godziny.</summary>
        <returns>Wartość całkowitą z zakresu od 0 do 59 reprezentującą minutę godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać minuty, godziny, wywołując `DatePart` i określając `DateInterval.Minute` dla `Interval` argumentu.  
  
   
  
## Examples  
 W tym przykładzie użyto `Minute` funkcję, aby uzyskać minutę godziny od określonego czasu. W środowisku programistycznym literał czasu jest wyświetlany w formacie krótkim czasie przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagana. A <see langword="Date" /> wartości, z którego mają zostać wyodrębnione miesiąca.</param>
        <summary>Zwraca wartość całkowitą z zakresu od 1 do 12 reprezentująca miesiąc w roku.</summary>
        <returns>Wartość całkowitą z zakresu od 1 do 12 reprezentująca miesiąc w roku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Miesiąc roku można również uzyskać, wywołując `DatePart` i określając `DateInterval.Month` dla `Interval` argumentu.  
  
   
  
## Examples  
 W tym przykładzie użyto `Month` funkcję, aby uzyskać miesiąca z określonej daty. W środowisku programistycznym wyświetlania literał daty w formacie daty krótkiej przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">Wymagana. Liczbowe oznaczenie miesiąca z zakresu od 1 do 13; wartość 1 oznacza styczeń, a 12 wskazuje grudnia. Możesz użyć wartości 13, z kalendarza miesięcznego 13. Jeśli system jest przy użyciu kalendarza, 12-miesięcznego i <paramref name="Month" /> wynosi 13, <c>MonthName</c> zwraca pusty ciąg.</param>
        <param name="Abbreviate">Opcjonalna. <see langword="True" /> Aby skrócić nazwę miesiąca; w przeciwnym razie <see langword="False" />. Wartość domyślna to <see langword="False" />.</param>
        <summary>Zwraca ciąg zawierający nazwę określonego miesiąca.</summary>
        <returns>Ciąg zawierający nazwę określonego miesiąca.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg zwracany przez `MonthName` zależy nie tylko na podstawie argumentów wejściowych, ale także **Opcje regionalne** ustawień określonych w Windows **Panelu sterowania**.  
  
> [!NOTE]
>  `MonthName` używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
   
  
## Examples  
 W tym przykładzie użyto `MonthName` funkcję, aby określić nazwę miesiąca, to liczba całkowita, biorąc pod uwagę. Określa wartość logiczną czy pełna nazwa (`False`) lub skróconą nazwę (`True`) będą wyświetlane.  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Month" /> jest mniejsza niż 1 lub większa od 13.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca wartość, zawierający bieżącą datę i godzinę ustawioną w systemie.</summary>
        <value>Bieżącą datę i godzinę ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby ustawić daty systemowej, należy użyć <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> właściwości. Aby ustawić czas systemowy, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Now` właściwości do zwrócenia bieżącej systemowej daty i godziny.  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Wymagana. A <see langword="Date" /> wartości, z którego mają zostać wyodrębnione sekundy.</param>
        <summary>Zwraca wartość całkowitą z zakresu od 0 do 59 reprezentującą sekundę minuty.</summary>
        <returns>Wartość całkowitą z zakresu od 0 do 59 reprezentującą sekundę minuty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać sekundy, minuty, wywołując `DatePart` i określając `DateInterval.Second` dla `Interval` argumentu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Second` funkcję, aby uzyskać sekundę minuty od określonego czasu. W środowisku programistycznym literał czasu jest wyświetlany w formacie krótkim czasie przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="Date" /> wartość reprezentującą aktualną porę dnia ustawioną w systemie.</summary>
        <value>Zwraca lub ustawia <see langword="Date" /> wartość reprezentującą aktualną porę dnia ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` Typ danych obejmuje składniki daty. Gdy zwracany jest czas systemowy `TimeOfDay` Ustawia wszystkie 1, dlatego zwrócona wartość reprezentuje pierwszy dzień roku 1. Podczas ustawiania czas systemowy `TimeOfDay` ignoruje składniki daty.  
  
 Bieżący czas systemowy, jak dostęp do `String`, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> właściwości.  
  
 Aby pobrać lub ustawić bieżącą datą systemu, należy użyć <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie systemu daty lub godziny wymaga uprawnienie niezarządzanego kodu, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W tym przykładzie użyto `TimeOfDay` właściwość zwraca bieżący czas systemowy.  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca <see cref="T:System.Double" /> reprezentującą liczbę sekund, które upłynęły od północy.</summary>
        <value>Wartość reprezentującą liczbę sekund, które upłynęły od północy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Timer` Właściwość zwraca sekund i milisekund od północy najbardziej aktualne. Sekundy są integralną częścią wartości zwracanej, a liczba milisekund znajdują się w części ułamkowej.  
  
   
  
## Examples  
 W tym przykładzie użyto `Timer` właściwości, aby wstrzymać jej działanie. Może wykonywać inne procesy przetwarzania podczas wstrzymywania.  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 Należy zauważyć, że musi kwalifikować `Timer` właściwość o <xref:Microsoft.VisualBasic?displayProperty=nameWithType> przestrzeni nazw, ponieważ `Timer` jest również zdefiniowana klasa w <xref:System.Threading?displayProperty=nameWithType>, <xref:System.Timers?displayProperty=nameWithType>, i <xref:System.Windows.Forms?displayProperty=nameWithType> przestrzeni nazw.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">Wymagana. Wyrażenie całkowite z zakresu od 0 do 23. Akceptowane są również wartości spoza tego zakresu.</param>
        <param name="Minute">Wymagana. Wyrażenie całkowite z zakresu od 0 do 59. Akceptowane są również wartości spoza tego zakresu. Wartość <paramref name="Minute" /> jest dodawany do godziny obliczeniowe, więc wartość ujemną określa minut przed tej godziny.</param>
        <param name="Second">Wymagana. Wyrażenie całkowite z zakresu od 0 do 59. Akceptowane są również wartości spoza tego zakresu. Wartość <paramref name="Second" /> zostanie dodany do obliczeniowej minutę, więc ujemną wartość określa w sekundach przed tym minutę.</param>
        <summary>Zwraca <see langword="Date" /> reprezentującą określoną godzinę, minutę i sekundę, za pomocą przyjmowany 1 stycznia 1 rok.</summary>
        <returns>A <see langword="Date" /> reprezentującą określoną godzinę, minutę i sekundę, za pomocą przyjmowany 1 stycznia 1 rok.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższym przykładzie pokazano ujemna, zero, a wartości dodatnie argumentu. `TimeSerial` Funkcja zwraca godzinę reprezentujący 15 minut przed trzy godziny przed południe lub 8:45:00: 00.  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 Jeśli `Minute` lub `Second` przekracza jego normalny zakres, zostanie zastosowany do następnej większej jednostki zgodnie z potrzebami. Na przykład jeśli określisz 75 minut, jest obliczane co godzinę i 15 minut.  
  
 `TimeSerial` ogranicza łączną liczbę sekund modulo 86,400, czyli liczbę sekund w ciągu dnia. Dlatego zwracana godzina jest zawsze między 00:00:00 a 23:59:59.  
  
 `Date` Typ danych obejmuje składniki daty. `TimeSerial` Ustawia wszystkie te 1, dlatego zwrócona wartość reprezentuje pierwszy dzień roku 1. Jednak jeśli wartości argumentów spowoduje obliczony czas niż co 24 godziny, dnia jest podwyższana, gdy jest to konieczne. W poniższym przykładzie wartości `Hour` i `Minute` spowodować łączny czas dłuższy niż 24 godziny.  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 Jeśli wartości argumentów wynik ujemny czasu obliczeniowego, informacje o dacie jest ustawiona na 1/1/0001 i informacje o czasie jest dostosowywany należeć do zakresu od 00:00:00 a 23:59:59. Jednakże, jeśli czas obliczony wynosi mniej niż ujemna 24 godziny, <xref:System.ArgumentOutOfRangeException> wystąpi błąd.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime?displayProperty=nameWithType> struktury, jego metody zapewniają dodatkowe opcje gromadząc `Date` wartość. Na przykład, można użyć jednej z przeciążonych <xref:System.DateTime.%23ctor%2A> konstruktory, aby wypełnić `Date` zmiennej przy użyciu kombinacji żądane składniki. Poniższy przykład ustawia `newDateTime` do 6 maja 1978, jedna dziesiąta chwilę przed 8:30 w nocy:  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 W poniższym przykładzie użyto `TimeSerial` funkcja zwraca czas na określoną godzinę, minutę i sekundę.  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Argument jest poza zakresem -2,147,483,648 do 2 147 483 647</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Obliczony czas jest krótszy niż 24 godziny ujemna.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje ciąg reprezentujący aktualną porę dnia ustawioną w systemie.</summary>
        <value>Zwraca lub konfiguruje ciąg reprezentujący aktualną porę dnia ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` zawsze zwraca czas systemowy, jako "Ss", który jest w formacie 24-godzinnym. Ten format jest kultura we wszystkich kulturach, co oznacza, nie zmienia się nawet wtedy, gdy zmienisz **Opcje regionalne** w **Panelu sterowania**.  
  
 Aby pobrać lub ustawić bieżącą datą systemu jako `String`, użyj <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> właściwości.  
  
 Aby uzyskać bieżący system daty lub godziny w formacie ustawień regionalnych lub w niestandardowym formacie, należy podać <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> właściwość <xref:Microsoft.VisualBasic.Strings.Format%2A> funkcji, określając format daty/godziny wstępnie zdefiniowanych lub zdefiniowanych przez użytkownika. Poniższy przykład przedstawia to.  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 Bieżący czas systemowy, jak dostęp do `Date`, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie systemu daty lub godziny wymaga uprawnienie niezarządzanego kodu, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W tym przykładzie użyto `TimeString` właściwość, aby wyświetlić bieżący czas systemowy.  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Nieprawidłowy format używany do ustawiania wartości <see langword="TimeString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">Wymagana. Wyrażenie ciągu reprezentujące wartość daty/godziny z zakresu od 00:00:00 w dniu 1 stycznia 1 roku do 23:59:59 31 grudnia 9999 r.</param>
        <summary>Zwraca <see langword="Date" /> zawierający informacje o godzinie reprezentowane przez ciąg, przy użyciu informacji o dacie, ustawiona na 1 stycznia 1 rok.</summary>
        <returns>Element <see langword="Date" /> zawierający informacje o godzinie reprezentowane przez ciąg, przy użyciu informacji o dacie, ustawiona na 1 stycznia 1 rok.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz wprowadzić prawidłowe godziny za pomocą zegara 12-godzinny lub 24-godzinnym. Na przykład `"2:24 P.M."` i `"14:24"` są obie prawidłowe `StringTime` argumentów.  
  
 Jeśli `StringTime` argument zawiera informacje o dacie, `TimeValue` nie ma w zwracanej wartości. Jednak jeśli `StringTime` zawiera nieprawidłowe informacje o dacie, na przykład "stycznia 32" <xref:System.InvalidCastException> wystąpi błąd.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `TimeValue` funkcji do przekonwertowania ciągu na godzinę. Umożliwia także literałów dat bezpośrednie przypisywanie czas `Date` zmiennej.  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringTime" /> zawiera nieprawidłowe informacje o dacie.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="Date" /> wartość reprezentującą aktualną datę ustawioną w systemie.</summary>
        <value>Zwraca lub ustawia <see langword="Date" /> wartość reprezentującą aktualną datę ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` Typ danych obejmuje składniki czasu. Przy zwracaniu daty systemowej `Today` Ustawia wszystkie te 0, więc zwracana wartość oznacza północ (00: 00:00). Podczas ustawiania daty systemowej `Today` ignoruje składniki czasu.  
  
 Dostęp z bieżącą datą systemu jako do `String`, użyj <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> właściwości.  
  
 Aby pobrać lub ustawić bieżący czas systemowy, należy użyć <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie systemu daty lub godziny wymaga uprawnienie niezarządzanego kodu, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W tym przykładzie użyto `Today` właściwości do zwrócenia z bieżącą datą systemu.  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagana. A <see langword="Date" /> wartość, dla którego chcesz określić dzień tygodnia.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> jest używany.</param>
        <summary>Zwraca wartość całkowitą zawierającą liczbę reprezentującą dzień tygodnia.</summary>
        <returns>Wartość całkowitą zawierającą liczbę reprezentującą dzień tygodnia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwrócona przez obiekt `Weekday` funkcja odnosi się do wartości `FirstDayOfWeek` wyliczenie; czyli wartość 1 oznacza niedzielę i 7 wskazuje sobotę.  
  
> [!NOTE]
>  `Weekday` używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
 `DayOfWeek` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Weekday` funkcję, aby uzyskać dnia tygodnia z określonej daty.  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="DayOfWeek" /> jest mniejsza niż 0 lub więcej niż 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">Wymagana. Liczba całkowita. Liczbowe oznaczenie dnia tygodnia z zakresu od 1 do 7; wartość 1 oznacza pierwszy dzień tygodnia i 7 wskazuje ostatni dzień tygodnia. Tożsamości dni imię i nazwisko są zależne od ustawień <paramref name="FirstDayOfWeekValue" />.</param>
        <param name="Abbreviate">Opcjonalna. <see langword="Boolean" /> Wartość wskazująca, czy stosować skrót nazwy dnia tygodnia. Jeśli argument jest pominięty, wartość domyślna to <see langword="False" />, co oznacza, że nazwa dnia tygodnia nie jest skracana.</param>
        <param name="FirstDayOfWeekValue">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see langword="FirstDayOfWeek.System" /> jest używany.</param>
        <summary>Zwraca ciąg zawierający nazwę podanego dnia tygodnia.</summary>
        <returns>Ciąg zawierający nazwę podanego dnia tygodnia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg zwracany przez `WeekdayName` zależy nie tylko na podstawie argumentów wejściowych, ale także **Opcje regionalne** ustawień określonych w Windows **Panelu sterowania**.  
  
> [!NOTE]
>  `WeekdayName` używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
 `FirstDayOfWeekValue` Argument może mieć jedną z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w systemie ustawienia (ustawienie domyślne)|  
|`FirstDayOfWeek.Sunday`|1|Niedziela|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Weekday` funkcję, aby uzyskać dnia tygodnia z określonej daty, a następnie `WeekDayName` funkcję, aby uzyskać nazwę dnia tygodnia z odpowiadającą mu liczbę.  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Weekday" /> jest mniejsza niż 1 lub większa niż 7, lub <paramref name="FirstDayOfWeekValue" /> jest mniejszy niż 0 lub większy niż 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagana. A <see langword="Date" /> wartości, z którego mają zostać wyodrębnione roku.</param>
        <summary>Zwraca wartość całkowitą z zakresu od 1 do 9999 reprezentującą rok.</summary>
        <returns>Wartość całkowitą z zakresu od 1 do 9999 reprezentującą rok.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać roku, wywołując `DatePart` i określając `DateInterval.Year` dla `Interval` argumentu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Year` funkcję, aby uzyskać roku z określonej daty. W środowisku programistycznym wyświetlania literał daty w formacie daty krótkiej przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>