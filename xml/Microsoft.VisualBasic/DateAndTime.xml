<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4870e1d7c6e4d0f45956d92f828b79ffb634ac0e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317859" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="DateAndTime" /> Moduł zawiera procedury i właściwości używane w operacjach daty i godziny.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które pobierają bieżącą datę lub godzinę, wykonują obliczenia dat, zwracają datę lub godzinę, ustawiają datę lub godzinę lub czas trwania procesu.  
  
   
  
## Examples  
 Ten przykład używa właściwości `Today` , aby zwrócić bieżącą datę systemową.  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/dates-and-times-summary.md">Daty i godziny — Podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="Date" /> Zwraca wartość zawierającą wartość daty i godziny, do której został dodany określony przedział czasu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. Wartość <see cref="T:Microsoft.VisualBasic.DateInterval" /> wyliczenia lub wyrażenie ciągu reprezentujące przedział czasu, który ma zostać dodany.</param>
        <param name="Number">Wymagany. Wyrażenie zmiennoprzecinkowe reprezentujące liczbę interwałów, które mają zostać dodane. Może być dodatnie (Aby uzyskać wartości daty/godziny w przyszłości) lub ujemne (w celu uzyskania wartości daty/godziny w przeszłości). Może zawierać część ułamkową, gdy <paramref name="Interval" /> określa godziny, minuty lub sekundy. W przypadku innych wartości <paramref name="Interval" />, każda <paramref name="Number" /> część ułamkowa jest ignorowana.</param>
        <param name="DateValue">Wymagana. Wyrażenie reprezentujące datę i godzinę, do której ma zostać dodany interwał. <paramref name="DateValue" />sama nie jest zmieniana w programie wywołującym.</param>
        <summary>Zwraca wartość zawierającą wartość daty i godziny, do której został dodany określony przedział czasu.</summary>
        <returns>Wartość zawierająca wartość daty i godziny, do której został dodany określony przedział czasu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć funkcji, `DateAdd` aby dodać lub odjąć określony przedział czasu od daty. Na przykład można obliczyć datę 30 dni od dzisiaj lub godzinę do 45 minut przed teraz.  
  
 Aby dodać dni do `DateValue`, można użyć `DateInterval.Day`, `DateInterval.DayOfYear`lub `DateInterval.Weekday`. Są one traktowane jako równoważne, `DayOfYear` `Weekday` ponieważ nie są istotnymi przedziałami czasowymi.  
  
 `DateAdd` Funkcja nigdy nie zwraca nieprawidłowej daty. W razie potrzeby, część dnia daty będącej wynikiem jest korygowana w dół do ostatniego dnia miesiąca będącego wynikiem. Poniższy przykład dodaje jeden miesiąc do 31 stycznia:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 W tym przykładzie `DateAdd` zwraca `#2/28/1995#`, nie `#2/31/1995#`. Jeśli `DateValue` jest `#1/31/1996#`, zwraca`#2/29/1996#` , ponieważ 1996 to rok przestępny.  
  
> [!NOTE]
>  `DateAdd`używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartości domyślne <xref:System.Globalization.CultureInfo.CurrentCulture%2A> są określane przez ustawienia **Panelu sterowania** .  
  
 Ponieważ każda `Date` wartość jest obsługiwana <xref:System.DateTime> przez strukturę, jej metody zapewniają dodatkowe opcje w miarę dodawania przedziałów czasu. Na przykład można dodać ułamkową liczbę dni, zaokrągloną do najbliższej milisekundy, do `Date` zmiennej w następujący sposób:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|String|Jednostka interwału czasu do dodania|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.DayOfYear`|t|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.Hour`|h|Wydajność zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Minute`|n|Minutę zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Month`|m|Bieżącym obcięty do wartości całkowitej|  
|`DateInterval.Quarter`|q|Kwartale obcięty do wartości całkowitej|  
|`DateInterval.Second`|s|Drugi zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Weekday`|w|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.WeekOfYear`|ww|Ciągu obcięty do wartości całkowitej|  
|`DateInterval.Year`|yyyy|Czteroletniego obcięty do wartości całkowitej|  
  
   
  
## Examples  
 Ten przykład pobiera datę i, przy użyciu `DateAdd` funkcji, wyświetla odpowiadającą datę określoną liczbę miesięcy w przyszłości.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" />nie jest da do <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" />jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Obliczona Data jest wcześniejsza niż 00:00:00 1 stycznia roku 1 lub nowsza niż 23:59:59 31 grudnia 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagany. Wartość <see cref="T:Microsoft.VisualBasic.DateInterval" /> wyliczenia lub wyrażenie ciągu reprezentujące przedział czasu, który ma zostać dodany.</param>
        <param name="Number">Wymagane. Wyrażenie zmiennoprzecinkowe reprezentujące liczbę interwałów, które mają zostać dodane. <paramref name="Number" />może być dodatnie (Aby uzyskać wartości daty/godziny w przyszłości) lub ujemne (w celu uzyskania wartości daty/godziny w przeszłości). Może zawierać część ułamkową, gdy <paramref name="Interval" /> określa godziny, minuty lub sekundy. W przypadku innych wartości <paramref name="Interval" />, każda <paramref name="Number" /> część ułamkowa jest ignorowana.</param>
        <param name="DateValue">Wymagane. Wyrażenie reprezentujące datę i godzinę, do której ma zostać dodany interwał. <paramref name="DateValue" />sama nie jest zmieniana w programie wywołującym.</param>
        <summary>Zwraca wartość zawierającą wartość daty i godziny, do której został dodany określony przedział czasu.</summary>
        <returns>Wartość zawierająca wartość daty i godziny, do której został dodany określony przedział czasu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć funkcji, `DateAdd` aby dodać lub odjąć określony przedział czasu od daty. Na przykład można obliczyć datę 30 dni od dzisiaj lub godzinę do 45 minut przed teraz.  
  
 Aby dodać dni do `DateValue`, można użyć `DateInterval.Day`, `DateInterval.DayOfYear`lub `DateInterval.Weekday`. Są one traktowane jako równoważne, `DayOfYear` `Weekday` ponieważ nie są istotnymi przedziałami czasowymi.  
  
 `DateAdd` Funkcja nigdy nie zwraca nieprawidłowej daty. W razie potrzeby, część dnia daty będącej wynikiem jest korygowana w dół do ostatniego dnia miesiąca będącego wynikiem. Poniższy przykład dodaje jeden miesiąc do 31 stycznia:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 W tym przykładzie `DateAdd` zwraca `#2/28/1995#`, nie `#2/31/1995#`. Jeśli `DateValue` jest `#1/31/1996#`, zwraca`#2/29/1996#` , ponieważ 1996 to rok przestępny.  
  
> [!NOTE]
>  `DateAdd`używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartości domyślne <xref:System.Globalization.CultureInfo.CurrentCulture%2A> są określane przez ustawienia **Panelu sterowania** .  
  
 Ponieważ każda `Date` wartość jest obsługiwana <xref:System.DateTime> przez strukturę, jej metody zapewniają dodatkowe opcje w miarę dodawania przedziałów czasu. Na przykład można dodać ułamkową liczbę dni, zaokrągloną do najbliższej milisekundy, do `Date` zmiennej w następujący sposób:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|String|Jednostka interwału czasu do dodania|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.DayOfYear`|t|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.Hour`|h|Wydajność zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Minute`|n|Minutę zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Month`|m|Bieżącym obcięty do wartości całkowitej|  
|`DateInterval.Quarter`|q|Kwartale obcięty do wartości całkowitej|  
|`DateInterval.Second`|s|Drugi zaokrąglone do najbliższej milisekundy|  
|`DateInterval.Weekday`|w|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.WeekOfYear`|ww|Ciągu obcięty do wartości całkowitej|  
|`DateInterval.Year`|yyyy|Czteroletniego obcięty do wartości całkowitej|  
  
   
  
## Examples  
 Ten przykład pobiera datę i, przy użyciu `DateAdd` funkcji, wyświetla odpowiadającą datę określoną liczbę miesięcy w przyszłości.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" />nie jest da do <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" />jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Obliczona Data jest wcześniejsza niż 00:00:00 1 stycznia roku 1 lub nowsza niż 23:59:59 31 grudnia 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość określającą liczbę przedziałów czasu między dwiema <see langword="Date" /> wartościami.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagane. Wartość wyliczenia lub wyrażenie ciągu reprezentujące przedział czasu, który ma być używany jako jednostka różnicy między <paramref name="Date1" /> i <paramref name="Date2" />. <see cref="T:Microsoft.VisualBasic.DateInterval" /></param>
        <param name="Date1">Wymagane. Pierwsza wartość daty/godziny, która ma zostać użyta w obliczeniach.</param>
        <param name="Date2">Wymagana. Druga wartość daty/godziny, która ma zostać użyta w obliczeniach.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia określająca pierwszy dzień tygodnia. Jeśli nie zostanie określony <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> , jest używany.</param>
        <param name="WeekOfYear">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> wyliczenia, która określa pierwszy tydzień roku. Jeśli nie zostanie określony <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> , jest używany.</param>
        <summary>Zwraca wartość typu Long określającą liczbę przedziałów czasu między <see langword="Date" /> dwoma wartościami.</summary>
        <returns>Długa wartość określająca liczbę przedziałów czasu między dwoma <see langword="Date" /> wartościami.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć funkcji, `DateDiff` aby określić, ile określonych przedziałów czasu występuje między dwiema wartościami daty/godziny. Można na przykład użyć `DateDiff` , aby obliczyć liczbę dni między dwiema datami lub liczbę tygodni od dzisiaj do końca roku.  
  
## <a name="behavior"></a>Zachowanie  
  
-   **Traktowanie parametrów.** `DateDiff`odejmuje wartość `Date1` od `Date2` wartości, aby utworzyć różnicę. Żadna wartość nie jest zmieniana w programie wywołującym.  
  
-   **Wartości zwracane.** Ponieważ `Date1` i `Date2` są`Date` typu danych, zawierają wartości daty i godziny z dokładnością do 100-nanosekund taktów na czasomierz systemowy. Jednak zawsze zwraca liczbę przedziałów czasu `Long` jako wartość. `DateDiff`  
  
     Jeśli `Date1` reprezentuje późniejszą datę i godzinę niż `Date2`, `DateDiff` zwraca liczbę ujemną.  
  
-   **Interwały dni.** Jeśli `Interval` jest ustawiona na `DateInterval.DayOfYear`, jest traktowany tak samo jak `DateInterval.Day`, ponieważ `DayOfYear` nie jest to zrozumiała jednostka dla interwału czasu.  
  
-   **Interwały tygodnia.** Jeśli `Interval` jest ustawiona na `DateInterval.WeekOfYear`, wartość zwracana reprezentuje liczbę tygodni od pierwszego dnia tygodnia zawierającego `Date1` i pierwszy dzień tygodnia zawierający `Date2`. Poniższy przykład pokazuje, jak to daje różne wyniki z `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     W powyższym przykładzie `DateDiff` zwraca wartość 0 `wD` do, ponieważ różnica między tymi dwoma datami jest mniejsza niż siedem dni, ale zwraca wartość `wY` 1 do, ponieważ istnieje siedem-dniowa różnica między pierwszym dniem odpowiedniego kalendarza tygodni.  
  
-   **Dłuższe interwały.** Jeśli `Interval` jest ustawiona na `DateInterval.Year`, wartość zwracana jest obliczana wyłącznie `Date1` z części roku i `Date2`. Analogicznie, wartość zwracana dla `DateInterval.Month` jest obliczana wyłącznie od części roku i miesiąca argumentów `DateInterval.Quarter` oraz od kwartałów zawierających dwie daty.  
  
     Na przykład podczas porównywania 31 grudnia z 1 stycznia następnego roku, `DateDiff` zwraca 1 dla `DateInterval.Year`, `DateInterval.Quarter`lub `DateInterval.Month`, nawet jeśli tylko jeden dzień upłynął.  
  
     W przypadku kultur takich jak japoński, które mają wielokrotne `DateDiff` wymazywanie, metoda nie zwraca różnicy w latach, jeśli różnica obejmuje dwie lub więcej wymazanych. Zamiast tego można obliczyć różnicę wartości zwracanych przez <xref:System.DateTime.Year%2A> właściwość, jak pokazano w następującym przykładzie:. `date2.Year - date1.Year`  
  
-   **Inne interwały.** Ponieważ każda `Date` wartość jest obsługiwana <xref:System.DateTime> przez strukturę, jej metody zapewniają dodatkowe opcje w celu znalezienia przedziałów czasu. `Subtract` Na przykład można użyć metody w jednej z jej przeciążonych formularzy: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> `Date` odejmuje <xref:System.TimeSpan> od zmiennej, aby zwrócić kolejną `Date` wartość i <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje `Date` wartość do zwrócenia <xref:System.TimeSpan>. Można przetworzyć proces, aby dowiedzieć się, ile milisekund wykonuje, jak pokazano w poniższym przykładzie.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość ciągu|Różnica czasu|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|„d”|Dzień|  
|`DateInterval.DayOfYear`|„y”|Dzień|  
|`DateInterval.Hour`|„h”|Godzina|  
|`DateInterval.Minute`|Azotan|Minuta|  
|`DateInterval.Month`|„m”|Bieżącym|  
|`DateInterval.Quarter`|pytania|Kwartał|  
|`DateInterval.Second`|„s”|Sekunda|  
|`DateInterval.Weekday`|„w”|Ciągu|  
|`DateInterval.WeekOfYear`|ww|Tydzień kalendarzowy|  
|`DateInterval.Year`|„yyyy”|Rok|  
  
 `DayOfWeek` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `WeekOfYear` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy pełny tydzień w nowym roku|  
  
   
  
## Examples  
 Ten przykład używa funkcji `DateDiff` , aby wyświetlić liczbę dni między daną datą a datą dzisiejszą.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" />, lub <paramref name="DayofWeek" /> jest poza zakresem.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" />lub <paramref name="Date2" /> jest nieprawidłowym typem.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagane. Wartość wyliczenia lub wyrażenie ciągu reprezentujące przedział czasu, który ma być używany jako jednostka różnicy między <paramref name="Date1" /> i <paramref name="Date2" />. <see cref="T:Microsoft.VisualBasic.DateInterval" /></param>
        <param name="Date1">Wymagany. Pierwsza wartość daty/godziny, która ma zostać użyta w obliczeniach.</param>
        <param name="Date2">Wymagana. Druga wartość daty/godziny, która ma zostać użyta w obliczeniach.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia określająca pierwszy dzień tygodnia. Jeśli nie zostanie określony <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> , jest używany.</param>
        <param name="WeekOfYear">Opcjonalny. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> wyliczenia, która określa pierwszy tydzień roku. Jeśli nie zostanie określony <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> , jest używany.</param>
        <summary>Zwraca wartość typu Long określającą liczbę przedziałów czasu między <see langword="Date" /> dwoma wartościami.</summary>
        <returns>Długa wartość określająca liczbę przedziałów czasu między dwoma <see langword="Date" /> wartościami.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć funkcji, `DateDiff` aby określić, ile określonych przedziałów czasu występuje między dwiema wartościami daty/godziny. Można na przykład użyć `DateDiff` , aby obliczyć liczbę dni między dwiema datami lub liczbę tygodni od dzisiaj do końca roku.  
  
## <a name="behavior"></a>Zachowanie  
  
-   **Traktowanie parametrów.** `DateDiff`odejmuje wartość `Date1` od `Date2` wartości, aby utworzyć różnicę. Żadna wartość nie jest zmieniana w programie wywołującym.  
  
-   **Wartości zwracane.** Ponieważ `Date1` i `Date2` są`Date` typu danych, zawierają wartości daty i godziny z dokładnością do 100-nanosekund taktów na czasomierz systemowy. Jednak zawsze zwraca liczbę przedziałów czasu `Long` jako wartość. `DateDiff`  
  
     Jeśli `Date1` reprezentuje późniejszą datę i godzinę niż `Date2`, `DateDiff` zwraca liczbę ujemną.  
  
-   **Interwały dni.** Jeśli `Interval` jest ustawiona na `DateInterval.DayOfYear`, jest traktowany tak samo jak `DateInterval.Day`, ponieważ `DayOfYear` nie jest to zrozumiała jednostka dla interwału czasu.  
  
-   **Interwały tygodnia.** Jeśli `Interval` jest ustawiona na `DateInterval.WeekOfYear`, wartość zwracana reprezentuje liczbę tygodni od pierwszego dnia tygodnia zawierającego `Date1` i pierwszy dzień tygodnia zawierający `Date2`. Poniższy przykład pokazuje, jak to daje różne wyniki z `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     W powyższym przykładzie `DateDiff` zwraca wartość 0 `wD` do, ponieważ różnica między tymi dwoma datami jest mniejsza niż siedem dni, ale zwraca wartość `wY` 1 do, ponieważ istnieje siedem-dniowa różnica między pierwszym dniem odpowiedniego kalendarza tygodni.  
  
-   **Dłuższe interwały.** Jeśli `Interval` jest ustawiona na `DateInterval.Year`, wartość zwracana jest obliczana wyłącznie `Date1` z części roku i `Date2`. Analogicznie, wartość zwracana dla `DateInterval.Month` jest obliczana wyłącznie od części roku i miesiąca argumentów `DateInterval.Quarter` oraz od kwartałów zawierających dwie daty.  
  
     Na przykład podczas porównywania 31 grudnia z 1 stycznia następnego roku, `DateDiff` zwraca 1 dla `DateInterval.Year`, `DateInterval.Quarter`lub `DateInterval.Month`, nawet jeśli tylko jeden dzień upłynął.  
  
     W przypadku kultur takich jak japoński, które mają wielokrotne `DateDiff` wymazywanie, metoda nie zwraca różnicy w latach, jeśli różnica obejmuje dwie lub więcej wymazanych. Zamiast tego można obliczyć różnicę wartości zwracanych przez <xref:System.DateTime.Year%2A> właściwość, jak pokazano w następującym przykładzie:. `date2.Year - date1.Year`  
  
-   **Inne interwały.** Ponieważ każda `Date` wartość jest obsługiwana <xref:System.DateTime> przez strukturę, jej metody zapewniają dodatkowe opcje w celu znalezienia przedziałów czasu. `Subtract` Na przykład można użyć metody w jednej z jej przeciążonych formularzy: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> `Date` odejmuje <xref:System.TimeSpan> od zmiennej, aby zwrócić kolejną `Date` wartość i <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje `Date` wartość do zwrócenia <xref:System.TimeSpan>. Można przetworzyć proces, aby dowiedzieć się, ile milisekund wykonuje, jak pokazano w poniższym przykładzie.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość ciągu|Różnica czasu|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|„d”|Dzień|  
|`DateInterval.DayOfYear`|„y”|Dzień|  
|`DateInterval.Hour`|„h”|Godzina|  
|`DateInterval.Minute`|Azotan|Minuta|  
|`DateInterval.Month`|„m”|Bieżącym|  
|`DateInterval.Quarter`|pytania|Kwartał|  
|`DateInterval.Second`|„s”|Sekunda|  
|`DateInterval.Weekday`|„w”|Ciągu|  
|`DateInterval.WeekOfYear`|ww|Tydzień kalendarzowy|  
|`DateInterval.Year`|„yyyy”|Rok|  
  
 `DayOfWeek` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `WeekOfYear` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy pełny tydzień w nowym roku|  
  
   
  
## Examples  
 Ten przykład używa funkcji `DateDiff` , aby wyświetlić liczbę dni między daną datą a datą dzisiejszą.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" />, lub <paramref name="DayofWeek" /> jest poza zakresem.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" />lub <paramref name="Date2" /> jest nieprawidłowym typem.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczbę całkowitą zawierającą określony składnik danej <see langword="Date" /> wartości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagany. Wartość <see cref="T:Microsoft.VisualBasic.DateInterval" /> wyliczenia lub wyrażenie ciągu reprezentujące część wartości daty/godziny, która ma zostać zwrócona.</param>
        <param name="DateValue">Wymagany. <see langword="Date" /> Wartość, która ma zostać obliczona.</param>
        <param name="FirstDayOfWeekValue">Opcjonalny. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia określająca pierwszy dzień tygodnia. Jeśli nie zostanie określony <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> , jest używany.</param>
        <param name="FirstWeekOfYearValue">Opcjonalny. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> wyliczenia, która określa pierwszy tydzień roku. Jeśli nie zostanie określony <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> , jest używany.</param>
        <summary>Zwraca liczbę całkowitą zawierającą określony składnik danej <see langword="Date" /> wartości.</summary>
        <returns>Wartość całkowita zawierająca określony składnik danej <see langword="Date" /> wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć funkcji, `DatePart` aby oszacować wartość daty/godziny i zwrócić określony składnik. Na przykład możesz użyć `DatePart` , aby obliczyć dzień tygodnia lub bieżącą godzinę.  
  
 Jeśli wybierzesz `DateInterval.Weekday` `Interval` argument, zwrócona wartość będzie spójna `FirstDayOfWeek` z wartościami wyliczenia. W przypadku wybrania `DatePart` tej opcji <xref:System.Globalization.Calendar> `DateInterval.WeekOfYear`program <xref:System.Globalization.CultureInfo> używa klas <xref:System.Globalization> i przestrzeni nazw do określenia bieżących ustawień.  
  
 Argument ma wpływ na obliczenia, które `DateInterval.Weekday` używają `DateInterval.WeekOfYear` ustawień i `Interval`. `FirstDayOfWeekValue` Argument ma wpływ na obliczenia określane `DateInterval.WeekOfYear` przez `Interval`. `FirstWeekOfYearValue`  
  
 Ponieważ każda `Date` wartość jest obsługiwana <xref:System.DateTime> przez strukturę, jej metody zapewniają dodatkowe opcje pobierania części daty/godziny. Na przykład można uzyskać całą wartość `Date` daty zmiennej, a wartość czasu jest ustawiona na północy w następujący sposób:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|String|Część wartości daty/godziny do zwrócenia|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Dzień miesiąca (od 1 do 31)|  
|`DateInterval.DayOfYear`|t|Dzień roku (od 1 do 366)|  
|`DateInterval.Hour`|h|Godzina|  
|`DateInterval.Minute`|n|Minuta|  
|`DateInterval.Month`|m|Bieżącym|  
|`DateInterval.Quarter`|q|Kwartał|  
|`DateInterval.Second`|s|Sekunda|  
|`DateInterval.Weekday`|w|Dzień tygodnia (od 1 do 7)|  
|`DateInterval.WeekOfYear`|ww|Tydzień roku (od 1 do 53)|  
|`DateInterval.Year`|yyyy|Rok|  
  
 `FirstDayOfWeekValue` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `FirstWeekOfYearValue` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy pełny tydzień w nowym roku|  
  
   
  
## Examples  
 Ten przykład pobiera datę i, przy użyciu `DatePart` funkcji, wyświetla kwartał roku, w którym występuje.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" />jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" />nie jest da do <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. Wartość <see cref="T:Microsoft.VisualBasic.DateInterval" /> wyliczenia lub wyrażenie ciągu reprezentujące część wartości daty/godziny, która ma zostać zwrócona.</param>
        <param name="DateValue">Wymagana. <see langword="Date" /> Wartość, która ma zostać obliczona.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia określająca pierwszy dzień tygodnia. Jeśli nie zostanie określony <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> , jest używany.</param>
        <param name="WeekOfYear">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> wyliczenia, która określa pierwszy tydzień roku. Jeśli nie zostanie określony <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> , jest używany.</param>
        <summary>Zwraca wartość zawierającą określony składnik danej <see langword="Date" /> wartości.</summary>
        <returns>Wartość całkowita zawierająca określony składnik danej <see langword="Date" /> wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć funkcji, `DatePart` aby oszacować wartość daty/godziny i zwrócić określony składnik. Na przykład możesz użyć `DatePart` , aby obliczyć dzień tygodnia lub bieżącą godzinę.  
  
 Jeśli wybierzesz `DateInterval.Weekday` `Interval` argument, zwrócona wartość będzie spójna `FirstDayOfWeek` z wartościami wyliczenia. W przypadku wybrania `DatePart` tej opcji <xref:System.Globalization.Calendar> `DateInterval.WeekOfYear`program <xref:System.Globalization.CultureInfo> używa klas <xref:System.Globalization> i przestrzeni nazw do określenia bieżących ustawień.  
  
 Argument ma wpływ na obliczenia, które `DateInterval.Weekday` używają `DateInterval.WeekOfYear` ustawień i `Interval`. `FirstDayOfWeekValue` Argument ma wpływ na obliczenia określane `DateInterval.WeekOfYear` przez `Interval`. `FirstWeekOfYearValue`  
  
 Ponieważ każda `Date` wartość jest obsługiwana <xref:System.DateTime> przez strukturę, jej metody zapewniają dodatkowe opcje pobierania części daty/godziny. Na przykład można uzyskać całą wartość `Date` daty zmiennej, a wartość czasu jest ustawiona na północy w następujący sposób:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|String|Część wartości daty/godziny do zwrócenia|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Dzień miesiąca (od 1 do 31)|  
|`DateInterval.DayOfYear`|t|Dzień roku (od 1 do 366)|  
|`DateInterval.Hour`|h|Godzina|  
|`DateInterval.Minute`|n|Minuta|  
|`DateInterval.Month`|m|Bieżącym|  
|`DateInterval.Quarter`|q|Kwartał|  
|`DateInterval.Second`|s|Sekunda|  
|`DateInterval.Weekday`|w|Dzień tygodnia (od 1 do 7)|  
|`DateInterval.WeekOfYear`|ww|Tydzień roku (od 1 do 53)|  
|`DateInterval.Year`|yyyy|Rok|  
  
 `FirstDayOfWeekValue` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `FirstWeekOfYearValue` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy pełny tydzień w nowym roku|  
  
   
  
## Examples  
 Ten przykład pobiera datę i, przy użyciu `DatePart` funkcji, wyświetla kwartał roku, w którym występuje.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" />nie jest da do <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">Wymagana. Wyrażenie liczby całkowitej z zakresu od 1 do 9999. Jednak wartości poniżej tego zakresu są również akceptowane. Jeśli <paramref name="Year" /> ma wartość od 0 do 99, jest interpretowany jako z zakresu od 1930 do 2029, jak wyjaśniono w poniższej sekcji "uwagi". Jeśli <paramref name="Year" /> jest mniejsza niż 1, zostanie odjęta od bieżącego roku.</param>
        <param name="Month">Wymagana. Wyrażenie liczby całkowitej z zakresu od 1 do 12. Akceptowane są również wartości spoza tego zakresu. Wartość <paramref name="Month" /> jest przesunięta o 1 i zastosowana do stycznia obliczonego roku. Innymi słowy, (<paramref name="Month" /> -1) jest dodawany do stycznia. W razie potrzeby rok jest obliczany ponownie. Poniższe wyniki ilustrują ten efekt: 
Jeśli <paramref name="Month" /> wartość to 1, wynik to styczeń rok obliczony.  
  
Jeśli <paramref name="Month" /> jest równa 0, wynik jest grudnia w poprzednim roku.  
  
Jeśli <paramref name="Month" /> wartość to-1, wynik jest Listopad w poprzednim roku.  
  
Jeśli <paramref name="Month" /> wartość to 13, wynik to styczeń z następnego roku.</param>
        <param name="Day">Wymagana. Wyrażenie liczby całkowitej z zakresu od 1 do 31. Akceptowane są również wartości spoza tego zakresu. Wartość <paramref name="Day" /> jest przesunięta o 1 i zastosowana do pierwszego dnia obliczonego miesiąca. Innymi słowy do pierwszego miesiąca<paramref name="Day" /> jest dodawany (-1). W razie potrzeby jest ponownie obliczany miesiąc i rok. Poniższe wyniki ilustrują ten efekt: 
Jeśli <paramref name="Day" /> jest 1, wynikiem jest pierwszy dzień obliczonego miesiąca.  
  
Jeśli <paramref name="Day" /> wartość to 0, wynik jest ostatnim dniem poprzedniego miesiąca.  
  
Jeśli <paramref name="Day" /> wartość to-1, wynik jest przedostatni dzień poprzedniego miesiąca.  
  
Jeśli <paramref name="Day" /> jest poza końcem bieżącego miesiąca, wynik jest odpowiednim dniem następnego miesiąca. Na przykład jeśli <paramref name="Month" /> wartość to 4 i <paramref name="Day" /> wartość 31, wynik wynosi 1 maja.</param>
        <summary><see langword="Date" /> Zwraca wartość reprezentującą określony rok, miesiąc i dzień, z informacjami o czasie ustawionymi na północ (00:00:00).</summary>
        <returns><see langword="Date" /> Wartość reprezentująca określony rok, miesiąc i dzień, z informacjami o czasie ustawionymi na północ (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W systemie Windows 98 lub Windows 2000 dwucyfrowe lata dla `Year` argumentu są interpretowane na podstawie ustawień komputera zdefiniowanych przez użytkownika. Ustawienia domyślne to wartości z przewidzianych od 0 do 29 są interpretowane jako lata 2000-2029, a wartości z 30 do 99 są interpretowane jako lata 1930-1999. Dla wszystkich innych `Year` argumentów należy użyć czterech cyfr rok, na przykład 1924.  
  
 Wcześniejsze wersje systemu Windows interpretują lata dwucyfrowe zgodnie z opisanymi wcześniej wartościami domyślnymi. Aby upewnić się, że funkcja zwraca poprawną wartość, użyj czterech cyfr `Year`.  
  
 W poniższym przykładzie pokazano ujemną, zero i dodatnią wartość argumentu. W tym miejscu `Date` funkcja zwraca wartość reprezentującą dzień poprzedzający pierwszy dzień marca w roku 10 lat przed bieżącym rokiem; innymi słowy, ostatni dzień miesiąca, do dziesięciu lat temu. `DateSerial`  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 `Month` Jeśli lub `Day` przekroczy swój normalny zakres, zostanie ona zastosowana do kolejnej większej jednostki, zgodnie z potrzebami. Na przykład jeśli określisz 32 dni, będzie ona szacowana jako jeden miesiąc i od 1 do 4 dni, w zależności od wartości `Month`. Jeśli `Year` jest większa niż 9999, lub jeśli którykolwiek z argumentów znajduje się poza zakresem od 2 147 483 648 do 2 147 483 647 <xref:System.ArgumentException> , wystąpi błąd. Jeśli Data określona przez trzy argumenty ma wartość wcześniejszą niż 00:00:00 1 stycznia roku 1 lub późniejszą niż 23:59:59 31 grudnia 9999, <xref:System.ArgumentOutOfRangeException> wystąpi błąd.  
  
 Typ `Date` danych obejmuje składniki czasu. `DateSerial`ustawia wszystkie z nich na 0, dlatego zwracana wartość reprezentuje początek obliczonego dnia.  
  
 Ponieważ każda `Date` wartość jest obsługiwana <xref:System.DateTime> przez strukturę, jej metody zapewniają dodatkowe `Date` opcje w asemblerze wartości. Na przykład można użyć jednego z przeciążonych <xref:System.DateTime.%23ctor%2A> konstruktorów do `Date` wypełnienia zmiennej przy użyciu odpowiedniej kombinacji składników. Poniższy przykład ustawia `NewDateTime` do 6 maja 1978 w jednej dziesiątej sekundie przed 8:30:  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 Ten przykład używa funkcji `DateSerial` , aby zwrócić datę dla określonego roku, miesiąca i dnia.  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia wartość ciągu reprezentującą bieżącą datę ustawioną w systemie.</summary>
        <value>Zwraca lub ustawia wartość ciągu reprezentującą bieżącą datę ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString`Zwraca datę systemową w formacie MM-DD-RRRR, która używa skróconej nazwy miesiąca. Akceptowane formaty dat to M-d-rrrr, M-d-y, M/d/rrrr i M/d/y. Dotyczy to wszystkich ustawień regionalnych systemu, z wyjątkiem tych, które używają zestawu znaków dwubajtowych (DBCS). Jeśli ustawienia regionalne systemu używają dwubajtowego zestawu znaków, program `DateString` zwraca datę systemową w formacie RRRR-MM-DD. Ustawienia regionalne systemu są ustawiane za pomocą pozycji **zegar, język i region** w **Panelu sterowania**.  
  
 **Uwaga** Właściwość zwraca datę systemową tylko w formacie RRRR-MM-DD `zh` dla ustawień regionalnych systemu (chiński uproszczony) `ko` , (koreański) i `ja` (japoński) w przypadku uruchamiania Visual Basic w programie Silverlight. `DateString`  
  
 Aby uzyskać lub ustawić bieżącą godzinę systemową jako `String`, <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> Użyj właściwości.  
  
 Aby uzyskać bieżącą datę lub godzinę systemową w formacie ustawień regionalnych lub w niestandardowym formacie, podaj <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> Właściwość <xref:Microsoft.VisualBasic.Strings.Format%2A> do funkcji, określając wstępnie zdefiniowany lub zdefiniowany przez użytkownika format daty/godziny. Poniższy przykład ilustruje to.  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 Aby uzyskać dostęp do bieżącej daty systemu jako `Date`, <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> Użyj właściwości.  
  
> [!IMPORTANT]
>  Ustawienie daty lub godziny systemowej wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania. Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W poniższym przykładzie użyta `DateString` zostanie właściwość w celu wyświetlenia bieżącej daty systemowej.  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Nieprawidłowy format użyty do ustawienia wartości <see cref="T:Microsoft.VisualBasic.DateAndTime.DateString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">Wymagany. Wyrażenie ciągu reprezentujące wartość daty/godziny z 00:00:00 1 stycznia roku 1 do 23:59:59 31 grudnia 9999.</param>
        <summary><see langword="Date" /> Zwraca wartość zawierającą informacje o dacie reprezentowane przez ciąg, a informacje o czasie mają wartość północy (00:00:00).</summary>
        <returns><see langword="Date" /> Wartość zawierająca informacje o dacie reprezentowane przez ciąg, a informacje o czasie mają wartość północy (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `StringDate` zawiera tylko liczby od 1 do 12 oddzielone prawidłowymi separatorami dat `DateValue` , program rozpoznaje kolejność na miesiąc, dzień i rok zgodnie z formatem daty krótkiej określonym dla Twojego systemu. `DateValue`używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartości domyślne <xref:System.Globalization.CultureInfo.CurrentCulture%2A> są określane przez ustawienia **Panelu sterowania** . Można zastąpić krótki format daty, ustawiając <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> Właściwość <xref:System.Globalization.DateTimeFormatInfo> klasy w <xref:System.Globalization> przestrzeni nazw.  
  
 `DateValue`rozpoznaje nazwy miesięcy w postaci długiej, skróconej i numerycznej. Przykładowo oprócz rozpoznawania 12/30/1991 i 12/30/91 program `DateValue` rozpoznaje również 30 grudnia 1991 i gru 30, 1991.  
  
 W przypadku pominięcia `StringDate` `DateValue` części roku jest używany bieżący rok z daty systemowej komputera.  
  
 Jeśli argument zawiera informacje o czasie, `DateValue` nie uwzględnia go w zwracanej wartości. `StringDate` Jeśli `StringDate` jednak zawiera on <xref:System.InvalidCastException> nieprawidłowe informacje o czasie, takie jak "89:98", wystąpi błąd.  
  
   
  
## Examples  
 Ten przykład używa funkcji `DateValue` , aby przekonwertować ciąg na datę. Można również użyć literałów dat, aby bezpośrednio przypisać datę do `Object` `oldDate = #2/12/69#`zmiennej lub `Date` , na przykład.  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringDate" />zawiera informacje o nieprawidłowym czasie.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagany. <see langword="Date" /> Wartość, z której ma zostać wyodrębniony dzień.</param>
        <summary>Zwraca liczbę całkowitą z przedziału od 1 do 31 reprezentującą dzień miesiąca.</summary>
        <returns>Wartość całkowita z zakresu od 1 do 31 reprezentująca dzień miesiąca.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli używasz `Day` funkcji, możesz zakwalifikować ją `Microsoft.VisualBasic` z przestrzeni nazw, ponieważ <xref:System.Windows.Forms> przestrzeń nazw definiuje <xref:System.Windows.Forms.Day> jako Wyliczenie. Poniższy przykład pokazuje, jak kwalifikowanie `Day` rozwiązuje tę niejednoznaczność:  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 Możesz również uzyskać dzień miesiąca przez wywołanie `DatePart` i określenie `DateInterval.Day` argumentu *interwału* .  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Day` Aby uzyskać dzień miesiąca od określonej daty. W środowisku programistycznym literał daty jest wyświetlany w standardowym formacie krótkim (na przykład "02/12/1969") przy użyciu ustawień regionalnych Twojego kodu.  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day`jest kwalifikowana do odróżnienia od <xref:System.Windows.Forms.Day?displayProperty=nameWithType> wyliczenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Wymagane. <see langword="Date" /> Wartość, z której ma zostać wyodrębniona godzina.</param>
        <summary>Zwraca liczbę całkowitą z przedziału od 0 do 23 reprezentującą godzinę dnia.</summary>
        <returns>Wartość całkowita z przedziału od 0 do 23 reprezentująca godzinę dnia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać godzinę dnia, wywołując `DatePart` i określając `DateInterval.Hour` dla tego `Interval` argumentu.  
  
   
  
## Examples  
 Ten przykład używa funkcji `Hour` , aby uzyskać godzinę od określonego czasu. W środowisku programistycznym literał czasu jest wyświetlany w formacie godziny krótkiej przy użyciu ustawień regionalnych Twojego kodu.  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Wymagane. <see langword="Date" /> Wartość, z której ma zostać wyodrębniona minuta.</param>
        <summary>Zwraca liczbę całkowitą z przedziału od 0 do 59 reprezentującą minutę godziny.</summary>
        <returns>Wartość całkowita z zakresu od 0 do 59 reprezentująca minutę godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać minutę godziny, wywołując `DatePart` i określając `DateInterval.Minute` dla tego `Interval` argumentu.  
  
   
  
## Examples  
 Ten przykład używa funkcji `Minute` , aby uzyskać minutę godziny od określonego czasu. W środowisku programistycznym literał czasu jest wyświetlany w formacie godziny krótkiej przy użyciu ustawień regionalnych Twojego kodu.  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagane. <see langword="Date" /> Wartość, z której ma zostać wyodrębniony miesiąc.</param>
        <summary>Zwraca liczbę całkowitą z przedziału od 1 do 12 reprezentującą miesiąc roku.</summary>
        <returns>Wartość całkowita z przedziału od 1 do 12 reprezentująca miesiąc roku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać miesiąc roku, wywołując `DatePart` i określając `DateInterval.Month` dla tego `Interval` argumentu.  
  
   
  
## Examples  
 Ten przykład używa funkcji `Month` , aby uzyskać miesiąc od określonej daty. W środowisku programistycznym literał daty jest wyświetlany w formacie daty krótkiej przy użyciu ustawień regionalnych w kodzie.  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">Wymagane. Liczbowe oznaczenie miesiąca, od 1 do 13; 1 oznacza, że Styczeń i 12 wskazuje grudzień. Można użyć wartości 13 z kalendarzem zawierającym 13 miesięcy. Jeśli system korzysta z 12-miesięcznego kalendarza i <paramref name="Month" /> ma wartość 13, <c>MonthName</c> zwraca pusty ciąg.</param>
        <param name="Abbreviate">Opcjonalny. <see langword="True" />Aby skrócić nazwę miesiąca; w przeciwnym razie. <see langword="False" /> Wartość domyślna to <see langword="False" />.</param>
        <summary>Zwraca ciąg zawierający nazwę podanego miesiąca.</summary>
        <returns>Wartość ciągu zawierająca nazwę określonego miesiąca.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg zwracany przez `MonthName` zależy nie tylko od argumentów wejściowych, ale również w ustawieniach ustawień **regionalnych** określonych w **Panelu sterowania**systemu Windows.  
  
> [!NOTE]
>  `MonthName`używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartości domyślne <xref:System.Globalization.CultureInfo.CurrentCulture%2A> są określane przez ustawienia **Panelu sterowania** .  
  
   
  
## Examples  
 Ten przykład używa `MonthName` funkcji, aby określić nazwę miesiąca przez daną liczbę całkowitą. Wartość logiczna określi, czy zostanie wyświetlona pełna`False`nazwa (), czy skrócona`True`nazwa ().  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Month" />jest mniejsza niż 1 lub większa niż 13.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca wartość zawierającą aktualną datę i godzinę ustawioną w systemie.</summary>
        <value>Bieżąca data i godzina według systemu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby ustawić datę systemową, użyj <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> właściwości. Aby ustawić czas systemowy, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład używa właściwości, `Now` aby zwrócić bieżącą datę i godzinę systemową.  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Wymagana. <see langword="Date" /> Wartość, z której ma zostać wyodrębniona sekunda.</param>
        <summary>Zwraca liczbę całkowitą z przedziału od 0 do 59 reprezentującą sekundę minuty.</summary>
        <returns>Wartość całkowita z zakresu od 0 do 59 reprezentująca sekundę minuty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać sekundę z minuty przez wywołanie `DatePart` i określenie `DateInterval.Second` `Interval` argumentu.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Second` Aby uzyskać sekundę minuty od określonego czasu. W środowisku programistycznym literał czasu jest wyświetlany w formacie godziny krótkiej przy użyciu ustawień regionalnych Twojego kodu.  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="Date" /> wartość zawierającą bieżącą godzinę, która jest zgodna z systemem.</summary>
        <value>Zwraca lub ustawia <see langword="Date" /> wartość zawierającą bieżącą godzinę, która jest zgodna z systemem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typ `Date` danych zawiera składniki daty. W przypadku powrotu czasu systemowego `TimeOfDay` program ustawia je wszystkie na 1, więc zwracana wartość reprezentuje pierwszy dzień roku 1. Podczas ustawiania czasu systemowego program `TimeOfDay` ignoruje składniki daty.  
  
 Aby uzyskać dostęp do bieżącej godziny systemowej `String`jako, <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> Użyj właściwości.  
  
 Aby pobrać lub ustawić bieżącą datę systemową, należy użyć <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie daty lub godziny systemowej wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania. Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Ten przykład używa właściwości `TimeOfDay` , aby zwrócić bieżącą godzinę systemową.  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Double" /> Zwraca wartość reprezentującą liczbę sekund, jaka upłynęła od północy.</summary>
        <value>Wartość reprezentująca liczbę sekund, jaka upłynęła od północy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Timer` Właściwość zwraca sekundy i milisekundy od ostatniej północy. Sekundy znajdują się w integralnej części wartości zwracanej, a milisekundy są częścią ułamkową.  
  
   
  
## Examples  
 Ten przykład używa właściwości `Timer` , aby wstrzymać aplikację. Może wykonywać inne przetwarzanie w trakcie wstrzymania.  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 Należy pamiętać, że należy zakwalifikować `Timer` Właściwość <xref:Microsoft.VisualBasic?displayProperty=nameWithType> z przestrzeni nazw, `Timer` ponieważ jest to również zdefiniowana Klasa w <xref:System.Threading?displayProperty=nameWithType>przestrzeniach nazw <xref:System.Windows.Forms?displayProperty=nameWithType> , <xref:System.Timers?displayProperty=nameWithType>i.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">Wymagany. Wyrażenie liczby całkowitej z przedziału od 0 do 23. Akceptowane są również wartości spoza tego zakresu.</param>
        <param name="Minute">Wymagane. Wyrażenie liczby całkowitej z przedziału od 0 do 59. Akceptowane są również wartości spoza tego zakresu. Wartość <paramref name="Minute" /> jest dodawana do obliczonej godziny, więc wartość ujemna określa minuty przed tą godziną.</param>
        <param name="Second">Wymagane. Wyrażenie liczby całkowitej z przedziału od 0 do 59. Akceptowane są również wartości spoza tego zakresu. Wartość <paramref name="Second" /> jest dodawana do obliczonej minuty, więc wartość ujemna określa sekundy przed tą minutą.</param>
        <summary><see langword="Date" /> Zwraca wartość reprezentującą określoną godzinę, minutę i sekundę, z zestawem informacji o dacie względem 1 stycznia roku 1.</summary>
        <returns><see langword="Date" /> Wartość reprezentująca określoną godzinę, minutę i sekundę, wraz z informacjami o dacie ustawionymi względem 1 stycznia roku 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższym przykładzie pokazano ujemną, zero i dodatnią wartość argumentu. `TimeSerial` Funkcja zwraca czas reprezentujący 15 minut przed 3 godzinami przed południe lub 8:45:00 am.  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 `Minute` Jeśli lub `Second` przekroczy swój normalny zakres, zostanie ona zastosowana do kolejnej większej jednostki, zgodnie z potrzebami. Na przykład jeśli określisz 75 minut, jest on oceniany jako jedna godzina i 15 minut.  
  
 `TimeSerial`zmniejsza łączną liczbę sekund modulo 86 400, która jest liczbą sekund w ciągu dnia. W związku z tym zwracany czas jest zawsze z zakresu od 00:00:00 do 23:59:59.  
  
 Typ `Date` danych zawiera składniki daty. `TimeSerial`ustawia wszystkie z nich na 1, dlatego zwracana wartość reprezentuje pierwszy dzień roku 1. Jeśli jednak wartości argumentów powodują, że obliczony czas przekroczy 24 godziny, dzień jest zwiększany w miarę potrzeb. W poniższym przykładzie wartości `Hour` i `Minute` powodują łączny czas wynoszący więcej niż 24 godziny.  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 Jeśli wartości argumentów powodują negatywny obliczony czas, informacje o dacie są ustawiane na 1/1/0001, a informacje o czasie są dostosowywane do zakresu od 00:00:00 do 23:59:59. Jeśli jednak obliczony czas jest krótszy niż w ciągu 24 godzin, <xref:System.ArgumentOutOfRangeException> wystąpi błąd.  
  
 Ponieważ każda `Date` wartość jest obsługiwana <xref:System.DateTime?displayProperty=nameWithType> przez strukturę, jej metody zapewniają dodatkowe `Date` opcje w asemblerze wartości. Na przykład można zastosować jeden ze przeciążonych <xref:System.DateTime.%23ctor%2A> konstruktorów do `Date` wypełnienia zmiennej przy użyciu odpowiedniej kombinacji składników. Poniższy przykład ustawia `newDateTime` do 6 maja 1978 w jednej dziesiątej sekundie przed 8:30:  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `TimeSerial` aby zwrócić godzinę dla określonej godziny, minuty i sekundy.  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Argument jest poza zakresem od-2 147 483 648 do 2 147 483 647</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Obliczony czas jest krótszy niż negatywny 24 godziny.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia wartość ciągu reprezentującą bieżącą godzinę, która jest zgodna z systemem.</summary>
        <value>Zwraca lub ustawia wartość ciągu reprezentującą bieżącą godzinę, która jest zgodna z systemem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString`Program zawsze zwraca czas systemowy jako "HH: mm: SS", który jest formatem 24-godzinnym. Ten format jest kulturą niezmienną, co oznacza, że nie zmienia się nawet w przypadku zmiany **opcji regionalnych** w **Panelu sterowania**.  
  
 Aby pobrać lub ustawić bieżącą datę systemową jako `String`, <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> Użyj właściwości.  
  
 Aby uzyskać bieżącą datę lub godzinę systemową w formacie ustawień regionalnych lub w niestandardowym formacie, podaj <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> Właściwość <xref:Microsoft.VisualBasic.Strings.Format%2A> do funkcji, określając wstępnie zdefiniowany lub zdefiniowany przez użytkownika format daty/godziny. Poniższy przykład ilustruje to.  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 Aby uzyskać dostęp do bieżącej godziny systemowej `Date`jako, <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> Użyj właściwości.  
  
> [!IMPORTANT]
>  Ustawienie daty lub godziny systemowej wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w częściowej sytuacji zaufania. Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Ten przykład używa właściwości `TimeString` , aby wyświetlić bieżący czas systemowy.  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Nieprawidłowy format użyty do ustawienia wartości <see langword="TimeString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">Wymagana. Wyrażenie ciągu reprezentujące wartość daty/godziny z 00:00:00 1 stycznia roku 1 do 23:59:59 31 grudnia 9999.</param>
        <summary><see langword="Date" /> Zwraca wartość zawierającą informacje o czasie reprezentowane przez ciąg, z informacjami o dacie ustawionymi na 1 stycznia roku 1.</summary>
        <returns><see langword="Date" /> Wartość zawierająca informacje o czasie reprezentowane przez ciąg, z informacjami o dacie ustawionymi na 1 stycznia roku 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można wprowadzać prawidłowy czas przy użyciu 12-godzinnego lub 24-godzinnego zegara. Na przykład `"2:24 P.M."` i `"14:24"` są prawidłowymi `StringTime` argumentami.  
  
 Jeśli argument zawiera informacje o dacie, `TimeValue` nie uwzględnia go w zwracanej wartości. `StringTime` Jeśli `StringTime` jednak zawiera nieprawidłowe informacje o dacie, na przykład "Styczeń 32 <xref:System.InvalidCastException> ", wystąpi błąd.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano `TimeValue` funkcję do przekonwertowania ciągu na godzinę. Można również użyć literałów dat, aby bezpośrednio przypisać czas do `Date` zmiennej.  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringTime" />zawiera nieprawidłowe informacje o dacie.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="Date" /> wartość zawierającą bieżącą datę ustawioną w systemie.</summary>
        <value>Zwraca lub ustawia <see langword="Date" /> wartość zawierającą bieżącą datę ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typ `Date` danych obejmuje składniki czasu. Podczas zwracania daty `Today` systemowej ustawia wszystkie z nich na 0, więc zwracana wartość reprezentuje północ (00:00:00). Podczas ustawiania daty systemowej program `Today` ignoruje składniki czasu.  
  
 Aby uzyskać dostęp do bieżącej daty systemu jako `String`, <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> Użyj właściwości.  
  
 Aby uzyskać lub ustawić bieżącą godzinę systemową, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie daty lub godziny systemowej wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania. Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Ten przykład używa właściwości `Today` , aby zwrócić bieżącą datę systemową.  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagany. <see langword="Date" /> Wartość, dla której ma zostać określony dzień tygodnia.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia określająca pierwszy dzień tygodnia. Jeśli nie zostanie określony <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> , jest używany.</param>
        <summary>Zwraca liczbę całkowitą reprezentującą dzień tygodnia.</summary>
        <returns>Wartość całkowita zawierająca liczbę reprezentującą dzień tygodnia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez `Weekday` funkcję odpowiada wartościom `FirstDayOfWeek` wyliczenia, czyli 1 wskazuje niedzielę i 7 wskazuje soboty.  
  
> [!NOTE]
>  `Weekday`używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartości domyślne <xref:System.Globalization.CultureInfo.CurrentCulture%2A> są określane przez ustawienia **Panelu sterowania** .  
  
 `DayOfWeek` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Weekday` Aby uzyskać dzień tygodnia od określonej daty.  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="DayOfWeek" />jest mniejsza niż 0 lub większa niż 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">Wymagane. Całkowitą. Liczbowe oznaczenie dnia tygodnia, od 1 do 7; 1 wskazuje pierwszy dzień tygodnia, a 7 wskazuje ostatni dzień tygodnia. Tożsamości pierwszych i ostatnich dni zależą od ustawienia <paramref name="FirstDayOfWeekValue" />.</param>
        <param name="Abbreviate">Opcjonalny. <see langword="Boolean" />wartość wskazująca, czy nazwa dnia tygodnia ma być skrócona. W przypadku pominięcia wartość domyślna <see langword="False" />to, co oznacza, że nazwa dnia tygodnia nie jest skrócona.</param>
        <param name="FirstDayOfWeekValue">Opcjonalny. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> wyliczenia określająca pierwszy dzień tygodnia. Jeśli nie zostanie określony <see langword="FirstDayOfWeek.System" /> , jest używany.</param>
        <summary>Zwraca ciąg zawierający nazwę podanego dnia tygodnia.</summary>
        <returns>Wartość ciągu zawierająca nazwę określonego dnia tygodnia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg zwracany przez `WeekdayName` zależy nie tylko od argumentów wejściowych, ale również w ustawieniach ustawień **regionalnych** określonych w **Panelu sterowania**systemu Windows.  
  
> [!NOTE]
>  `WeekdayName`używa bieżącego ustawienia kalendarza z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartości domyślne <xref:System.Globalization.CultureInfo.CurrentCulture%2A> są określane przez ustawienia **Panelu sterowania** .  
  
 `FirstDayOfWeekValue` Argument może mieć jedno z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych (ustawienie domyślne)|  
|`FirstDayOfWeek.Sunday`|1|Niedziela|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
   
  
## Examples  
 Poniższy przykład używa `Weekday` funkcji, aby uzyskać dzień tygodnia od określonej daty, a `WeekDayName` następnie funkcję w celu uzyskania nazwy dnia tygodnia z jej numeru.  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Weekday" />jest mniejsza niż 1 lub większa niż 7 lub <paramref name="FirstDayOfWeekValue" /> jest mniejsza niż 0 lub większa niż 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagany. <see langword="Date" /> Wartość, z której ma zostać wyodrębniony rok.</param>
        <summary>Zwraca liczbę całkowitą z przedziału od 1 do 9999 reprezentującą rok.</summary>
        <returns>Wartość całkowita z przedziału od 1 do 9999 reprezentująca rok.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać rok, wywołując `DatePart` i określając `DateInterval.Year` dla tego `Interval` argumentu.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Year` Aby uzyskać rok od określonej daty. W środowisku programistycznym literał daty jest wyświetlany w formacie daty krótkiej przy użyciu ustawień regionalnych w kodzie.  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>
