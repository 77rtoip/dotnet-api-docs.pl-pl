<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c93207af9a66f4f47fd44508e84a0a61ee8cefee" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36727069" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="DateAndTime" /> Moduł zawiera procedury i właściwości używane w operacjach daty i godziny.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słów kluczowych języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które pobrać bieżącą datę lub godzinę, obliczeń daty, zwróć daty lub godziny, ustawić daty lub godziny lub czas trwania procesu.  
  
   
  
## Examples  
 W tym przykładzie użyto `Today` właściwości do zwracania bieżącej systemowej daty.  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see langword="Date" /> wartość zawierającą wartość daty i godziny, do której dodano określony interwał.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. <see langword="DateInterval" /> Wartość wyliczenia lub <see langword="String" /> reprezentujący przedział czasu, które chcesz dodać.</param>
        <param name="Number">Wymagana. <see langword="Double" />. Zmiennoprzecinkowe reprezentujący liczbę interwałów, które chcesz dodać. <c>Numer</c> może być liczbą dodatnią (do pobrania wartości daty/godziny w przyszłości) lub ujemną (Aby uzyskać wartości daty/godziny w przeszłości). Może zawierać ułamkową część kiedy <c>interwał</c> określa godzin, minut i sekund. Dla innych wartości <c>interwał</c>, any ułamkową część <c>numer</c> jest ignorowana.</param>
        <param name="DateValue">Wymagana. <see langword="Date" />. Wyrażenie reprezentujący datę i godzinę, do której ma zostać dodana interwał. <c>Data</c> sam nie ulega zmianie w program wywołujący.</param>
        <summary>Zwraca <see langword="Date" /> wartość zawierającą wartość daty i godziny, do której dodano określony interwał.</summary>
        <returns>Zwraca <see langword="Date" /> wartość zawierającą wartość daty i godziny, do której dodano określony interwał.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć `DateAdd` funkcji Dodaj lub usuń ustalony czas od podanej daty. Na przykład można obliczyć daty 30 dni od dziś lub czas 45 minut przed teraz.  
  
 Aby dodać dni `DateValue`, można użyć `DateInterval.Day`, `DateInterval.DayOfYear`, lub `DateInterval.Weekday`. Są one traktowane jako równoważne, ponieważ `DayOfYear` i `Weekday` nie są przedziały czasu łatwy do rozpoznania.  
  
 `DateAdd` Funkcja nigdy nie zwraca nieprawidłową datę. W razie potrzeby dzień część wynikowy daty jest skorygowana w dół do ostatniego dnia wynikowy miesiąc roku wynikowy. Poniższy przykład umożliwia dodanie jednego miesiąca do 31 stycznia:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 W tym przykładzie `DateAdd` zwraca `#2/28/1995#`, a nie `#2/31/1995#`. Jeśli `DateValue` jest `#1/31/1996#`, zwraca `#2/29/1996#` ponieważ 1996 jest rokiem przestępnym.  
  
> [!NOTE]
>  `DateAdd` zostaną użyte bieżące ustawienia kalendarza <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje podczas dodawania odstępach czasu. Na przykład można dodać ułamkowych liczbę dni, zaokrąglona do najbliższej milisekund, do `Date` zmiennej w następujący sposób:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|String|Jednostkę czasu interwału do dodania|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.DayOfYear`|t|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.Hour`|h|Godzina; zaokrąglona do najbliższej milisekund|  
|`DateInterval.Minute`|n|Minuty; zaokrąglona do najbliższej milisekund|  
|`DateInterval.Month`|m|Miesiąc; skrócona do wartości całkowitych|  
|`DateInterval.Quarter`|q|Kwartał; skrócona do wartości całkowitych|  
|`DateInterval.Second`|s|Drugie; zaokrąglona do najbliższej milisekund|  
|`DateInterval.Weekday`|w|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.WeekOfYear`|ww|Tydzień; skrócona do wartości całkowitych|  
|`DateInterval.Year`|yyyy|Rok; skrócona do wartości całkowitych|  
  
   
  
## Examples  
 W tym przykładzie ma datę i przy użyciu `DateAdd` działać, wyświetlane są odpowiednie Data określoną liczbę miesięcy w przyszłości.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> nie jest taki sam jak <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> nie jest prawidłowy.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Obliczonej daty jest przed 00:00:00 w dniu 1 stycznia roku, 1 lub nowszej niż 23:59:59 31 grudnia 9999 r.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. <see langword="DateInterval" /> Wartość wyliczenia lub <see langword="String" /> reprezentujący przedział czasu, które chcesz dodać.</param>
        <param name="Number">Wymagana. <see langword="Double" />. Zmiennoprzecinkowe reprezentujący liczbę interwałów, które chcesz dodać. <c>Numer</c> może być liczbą dodatnią (do pobrania wartości daty/godziny w przyszłości) lub ujemną (Aby uzyskać wartości daty/godziny w przeszłości). Może zawierać ułamkową część kiedy <c>interwał</c> określa godzin, minut i sekund. Dla innych wartości <c>interwał</c>, any ułamkową część <c>numer</c> jest ignorowana.</param>
        <param name="DateValue">Wymagana. <see langword="Date" />. Wyrażenie reprezentujący datę i godzinę, do której ma zostać dodana interwał. <c>Data</c> sam nie ulega zmianie w program wywołujący.</param>
        <summary>Zwraca <see langword="Date" /> wartość zawierającą wartość daty i godziny, do której dodano określony interwał.</summary>
        <returns>Zwraca <see langword="Date" /> wartość zawierającą wartość daty i godziny, do której dodano określony interwał.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć `DateAdd` funkcji Dodaj lub usuń ustalony czas od podanej daty. Na przykład można obliczyć daty 30 dni od dziś lub czas 45 minut przed teraz.  
  
 Aby dodać dni `DateValue`, można użyć `DateInterval.Day`, `DateInterval.DayOfYear`, lub `DateInterval.Weekday`. Są one traktowane jako równoważne, ponieważ `DayOfYear` i `Weekday` nie są przedziały czasu łatwy do rozpoznania.  
  
 `DateAdd` Funkcja nigdy nie zwraca nieprawidłową datę. W razie potrzeby dzień część wynikowy daty jest skorygowana w dół do ostatniego dnia wynikowy miesiąc roku wynikowy. Poniższy przykład umożliwia dodanie jednego miesiąca do 31 stycznia:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 W tym przykładzie `DateAdd` zwraca `#2/28/1995#`, a nie `#2/31/1995#`. Jeśli `DateValue` jest `#1/31/1996#`, zwraca `#2/29/1996#` ponieważ 1996 jest rokiem przestępnym.  
  
> [!NOTE]
>  `DateAdd` zostaną użyte bieżące ustawienia kalendarza <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje podczas dodawania odstępach czasu. Na przykład można dodać ułamkowych liczbę dni, zaokrąglona do najbliższej milisekund, do `Date` zmiennej w następujący sposób:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|String|Jednostkę czasu interwału do dodania|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.DayOfYear`|t|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.Hour`|h|Godzina; zaokrąglona do najbliższej milisekund|  
|`DateInterval.Minute`|n|Minuty; zaokrąglona do najbliższej milisekund|  
|`DateInterval.Month`|m|Miesiąc; skrócona do wartości całkowitych|  
|`DateInterval.Quarter`|q|Kwartał; skrócona do wartości całkowitych|  
|`DateInterval.Second`|s|Drugie; zaokrąglona do najbliższej milisekund|  
|`DateInterval.Weekday`|w|Dzień; obcięty do wartości całkowitej|  
|`DateInterval.WeekOfYear`|ww|Tydzień; skrócona do wartości całkowitych|  
|`DateInterval.Year`|yyyy|Rok; skrócona do wartości całkowitych|  
  
   
  
## Examples  
 W tym przykładzie ma datę i przy użyciu `DateAdd` działać, wyświetlane są odpowiednie Data określoną liczbę miesięcy w przyszłości.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> nie jest taki sam jak <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> nie jest prawidłowy.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Obliczonej daty jest przed 00:00:00 w dniu 1 stycznia roku, 1 lub nowszej niż 23:59:59 31 grudnia 9999 r.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see langword="Long" /> wartość określającą liczbę interwałów czasu między dwoma <see langword="Date" /> wartości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. <see langword="DateInterval" /> Wartość wyliczenia lub <see langword="String" /> reprezentujący interwał ma być używany jako jednostki różnica między <c>Data1</c> i <c>— data 2</c>.</param>
        <param name="Date1">Wymagana. <see langword="Date" />. Pierwsza wartość daty/godziny, który ma być używany w obliczeniach.</param>
        <param name="Date2">Wymagana. <see langword="Date" />. Druga wartość daty/godziny, który ma być używany w obliczeniach.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybranego spośród <see langword="FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see langword="FirstDayOfWeek.Sunday" /> jest używany.</param>
        <param name="WeekOfYear">Opcjonalna. Wartość wybranego spośród <see langword="FirstWeekOfYear" /> wyliczenie określająca pierwszy tydzień roku. Jeśli nie zostanie określony, <see langword="FirstWeekOfYear.Jan1" /> jest używany.</param>
        <summary>Zwraca <see langword="Long" /> wartość określającą liczbę interwałów czasu między dwoma <see langword="Date" /> wartości.</summary>
        <returns>Zwraca <see langword="Long" /> wartość określającą liczbę interwałów czasu między dwoma <see langword="Date" /> wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć `DateDiff` funkcji, aby określić, ile określonych interwałów czasu między dwiema wartościami daty/godziny. Na przykład może użyć `DateDiff` do obliczenia liczbę dni między datami lub liczbę tygodni od dnia dzisiejszego koniec roku.  
  
## <a name="behavior"></a>Zachowanie  
  
-   **Traktowanie parametrów.** `DateDiff` odejmuje wartość `Date1` od wartości `Date2` do produkcji różnicy. Żadna wartość została zmieniona w program wywołujący.  
  
-   **Wartości zwracane.** Ponieważ `Date1` i `Date2` są `Date` typu danych, posiadają wartości daty i godziny z dokładnością do 100-nanosekundowych impulsów na czasomierz systemu. Jednak `DateDiff` zawsze zwraca liczbę interwałów czasu jako `Long` wartość.  
  
     Jeśli `Date1` reprezentuje nowsze datę i godzinę niż `Date2`, `DateDiff` zwraca wartość ujemną.  
  
-   **Dni.** Jeśli `Interval` ustawiono `DateInterval.DayOfYear`, jest ona traktowana taka sama jak `DateInterval.Day`, ponieważ `DayOfYear` nie jest zrozumiały jednostek interwału czasu.  
  
-   **Tydzień odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.WeekOfYear`, zwracana wartość reprezentuje liczbę tygodni od pierwszego dnia tygodnia zawierający `Date1` i pierwszy dzień tygodnia zawierający `Date2`. W poniższym przykładzie pokazano, jak to daje różne wyniki z `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     W powyższym przykładzie `DateDiff` zwraca wartość 0, aby `wD` ponieważ różnicę między dwoma datami jest mniejsza niż 7 dni, ale zwraca 1, aby `wY` ponieważ występuje różnica siedmiu dni od pierwszych dni odpowiednich kalendarza tygodni.  
  
-   **Większe odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.Year`, zwracana wartość jest obliczana wyłącznie na podstawie części roku `Date1` i `Date2`. Podobnie, wartość zwracana `DateInterval.Month` jest obliczana wyłącznie na podstawie części rok i miesiąc argumentów, a dla `DateInterval.Quarter` z kwartałów zawierający dwoma datami.  
  
     Na przykład podczas porównywania następnego roku, 1 stycznia do 31 grudnia `DateDiff` zwraca wartość 1 `DateInterval.Year`, `DateInterval.Quarter`, lub `DateInterval.Month`, mimo że upłynął co najwyżej tylko jeden dzień.  
  
     Dla kultury, takie jak japoński, który ma wiele Arial `DateDiff` — metoda nie zwraca różnicę w lat. Jeśli różnica obejmuje dwa lub więcej Arial. Zamiast tego można obliczyć różnica w wartości zwracanych przez <xref:System.DateTime.Year%2A> właściwości, jak pokazano w poniższym przykładzie: `date2.Year - date1.Year`.  
  
-   **Inne odstępach czasu.** Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje w znajdowaniu odstępach czasu. Na przykład można użyć `Subtract` w jednej z jego formularze przeciążonej metody: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje <xref:System.TimeSpan> z `Date` zmienną do zwrócenia innego `Date` wartości, i <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje `Date` wartość Aby przywrócić <xref:System.TimeSpan>. Pozwala czas procesu, aby dowiedzieć się, liczbę milisekund przyjmuje, jak przedstawiono na poniższym przykładzie.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość ciągu|Jednostka odstęp czasu|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|„d”|Dzień|  
|`DateInterval.DayOfYear`|„y”|Dzień|  
|`DateInterval.Hour`|„h”|Godzina|  
|`DateInterval.Minute`|"n"|Minuta|  
|`DateInterval.Month`|„m”|miesiąc|  
|`DateInterval.Quarter`|"q"|Kwartał|  
|`DateInterval.Second`|„s”|Sekunda|  
|`DateInterval.Weekday`|„w”|tydzień|  
|`DateInterval.WeekOfYear`|"TT"|Tydzień kalendarza|  
|`DateInterval.Year`|„yyyy”|Rok|  
  
 `DayOfWeek` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `WeekOfYear` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy tydzień pełną nowego roku|  
  
   
  
## Examples  
 W tym przykładzie użyto `DateDiff` funkcji, aby wyświetlić liczbę dni między daną datę i dziś.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Date1" />, <paramref name="Date2" />, lub <paramref name="DayofWeek" /> jest poza zakresem.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Date1" /> lub <paramref name="Date2" /> jest nieprawidłowego typu.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. <see langword="DateInterval" /> Wartość wyliczenia lub <see langword="String" /> reprezentujący interwał ma być używany jako jednostki różnica między <c>Data1</c> i <c>— data 2</c>.</param>
        <param name="Date1">Wymagana. <see langword="Date" />. Pierwsza wartość daty/godziny, który ma być używany w obliczeniach.</param>
        <param name="Date2">Wymagana. <see langword="Date" />. Druga wartość daty/godziny, który ma być używany w obliczeniach.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybranego spośród <see langword="FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see langword="FirstDayOfWeek.Sunday" /> jest używany.</param>
        <param name="WeekOfYear">Opcjonalna. Wartość wybranego spośród <see langword="FirstWeekOfYear" /> wyliczenie określająca pierwszy tydzień roku. Jeśli nie zostanie określony, <see langword="FirstWeekOfYear.Jan1" /> jest używany.</param>
        <summary>Zwraca <see langword="Long" /> wartość określającą liczbę interwałów czasu między dwoma <see langword="Date" /> wartości.</summary>
        <returns>Zwraca <see langword="Long" /> wartość określającą liczbę interwałów czasu między dwoma <see langword="Date" /> wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć `DateDiff` funkcji, aby określić, ile określonych interwałów czasu między dwiema wartościami daty/godziny. Na przykład może użyć `DateDiff` do obliczenia liczbę dni między datami lub liczbę tygodni od dnia dzisiejszego koniec roku.  
  
## <a name="behavior"></a>Zachowanie  
  
-   **Traktowanie parametrów.** `DateDiff` odejmuje wartość `Date1` od wartości `Date2` do produkcji różnicy. Żadna wartość została zmieniona w program wywołujący.  
  
-   **Wartości zwracane.** Ponieważ `Date1` i `Date2` są `Date` typu danych, posiadają wartości daty i godziny z dokładnością do 100-nanosekundowych impulsów na czasomierz systemu. Jednak `DateDiff` zawsze zwraca liczbę interwałów czasu jako `Long` wartość.  
  
     Jeśli `Date1` reprezentuje nowsze datę i godzinę niż `Date2`, `DateDiff` zwraca wartość ujemną.  
  
-   **Dni.** Jeśli `Interval` ustawiono `DateInterval.DayOfYear`, jest ona traktowana taka sama jak `DateInterval.Day`, ponieważ `DayOfYear` nie jest zrozumiały jednostek interwału czasu.  
  
-   **Tydzień odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.WeekOfYear`, zwracana wartość reprezentuje liczbę tygodni od pierwszego dnia tygodnia zawierający `Date1` i pierwszy dzień tygodnia zawierający `Date2`. W poniższym przykładzie pokazano, jak to daje różne wyniki z `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     W powyższym przykładzie `DateDiff` zwraca wartość 0, aby `wD` ponieważ różnicę między dwoma datami jest mniejsza niż 7 dni, ale zwraca 1, aby `wY` ponieważ występuje różnica siedmiu dni od pierwszych dni odpowiednich kalendarza tygodni.  
  
-   **Większe odstępach czasu.** Jeśli `Interval` ustawiono `DateInterval.Year`, zwracana wartość jest obliczana wyłącznie na podstawie części roku `Date1` i `Date2`. Podobnie, wartość zwracana `DateInterval.Month` jest obliczana wyłącznie na podstawie części rok i miesiąc argumentów, a dla `DateInterval.Quarter` z kwartałów zawierający dwoma datami.  
  
     Na przykład podczas porównywania następnego roku, 1 stycznia do 31 grudnia `DateDiff` zwraca wartość 1 `DateInterval.Year`, `DateInterval.Quarter`, lub `DateInterval.Month`, mimo że upłynął co najwyżej tylko jeden dzień.  
  
     Dla kultury, takie jak japoński, który ma wiele Arial `DateDiff` — metoda nie zwraca różnicę w lat. Jeśli różnica obejmuje dwa lub więcej Arial. Zamiast tego można obliczyć różnica w wartości zwracanych przez <xref:System.DateTime.Year%2A> właściwości, jak pokazano w poniższym przykładzie: `date2.Year - date1.Year`.  
  
-   **Inne odstępach czasu.** Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje w znajdowaniu odstępach czasu. Na przykład można użyć `Subtract` w jednej z jego formularze przeciążonej metody: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje <xref:System.TimeSpan> z `Date` zmienną do zwrócenia innego `Date` wartości, i <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> odejmuje `Date` wartość Aby przywrócić <xref:System.TimeSpan>. Pozwala czas procesu, aby dowiedzieć się, liczbę milisekund przyjmuje, jak przedstawiono na poniższym przykładzie.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość ciągu|Jednostka odstęp czasu|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|„d”|Dzień|  
|`DateInterval.DayOfYear`|„y”|Dzień|  
|`DateInterval.Hour`|„h”|Godzina|  
|`DateInterval.Minute`|"n"|Minuta|  
|`DateInterval.Month`|„m”|miesiąc|  
|`DateInterval.Quarter`|"q"|Kwartał|  
|`DateInterval.Second`|„s”|Sekunda|  
|`DateInterval.Weekday`|„w”|tydzień|  
|`DateInterval.WeekOfYear`|"TT"|Tydzień kalendarza|  
|`DateInterval.Year`|„yyyy”|Rok|  
  
 `DayOfWeek` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `WeekOfYear` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy tydzień pełną nowego roku|  
  
   
  
## Examples  
 W tym przykładzie użyto `DateDiff` funkcji, aby wyświetlić liczbę dni między daną datę i dziś.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Date1" />, <paramref name="Date2" />, lub <paramref name="DayofWeek" /> jest poza zakresem.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Date1" /> lub <paramref name="Date2" /> jest nieprawidłowego typu.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see langword="Integer" /> wartość zawierającą wskazany składnik danej <see langword="Date" /> wartość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. <see langword="DateInterval" /> Wartość wyliczenia lub <see langword="String" /> reprezentujący część wartości daty/godziny, aby wrócić.</param>
        <param name="DateValue">Wymagana. <see langword="Date" /> wartość, która ma zostać oceniona.</param>
        <param name="FirstDayOfWeekValue">Opcjonalna. Wartość wybranego spośród <see langword="FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see langword="FirstDayOfWeek.Sunday" /> jest używany.</param>
        <param name="FirstWeekOfYearValue">Opcjonalna. Wartość wybranego spośród <see langword="FirstWeekOfYear" /> wyliczenie określająca pierwszy tydzień roku. Jeśli nie zostanie określony, <see langword="FirstWeekOfYear.Jan1" /> jest używany.</param>
        <summary>Zwraca <see langword="Integer" /> wartość zawierającą wskazany składnik danej <see langword="Date" /> wartość.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość zawierającą wskazany składnik danej <see langword="Date" /> wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć `DatePart` funkcji, aby obliczyć wartości daty/godziny oraz zwracać określonego składnika. Na przykład może użyć `DatePart` do obliczenia dzień tygodnia lub bieżącej godziny.  
  
 Jeśli wybierzesz `DateInterval.Weekday` dla `Interval` argumentu, zwracana wartość jest zgodne z wartościami `FirstDayOfWeek` wyliczenia. Jeśli wybierzesz `DateInterval.WeekOfYear`, `DatePart` używa <xref:System.Globalization.Calendar> i <xref:System.Globalization.CultureInfo> klasy <xref:System.Globalization> przestrzeni nazw w celu określenia bieżących ustawień.  
  
 `FirstDayOfWeekValue` Argument ma wpływ na obliczenia, które używają `DateInterval.Weekday` i `DateInterval.WeekOfYear` `Interval` ustawienia. `FirstWeekOfYearValue` Argument ma wpływ na obliczenia, które określają `DateInterval.WeekOfYear` dla `Interval`.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje podczas pobierania części daty/godziny. Na przykład można uzyskać wartość Data cały `Date` zmiennej o wartości czasu przyjmowana północ, w następujący sposób:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|String|Część daty i godziny wartość zwracana|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Dzień miesiąca (od 1 do 31)|  
|`DateInterval.DayOfYear`|t|Dzień roku (od 1 do 366)|  
|`DateInterval.Hour`|h|Godzina|  
|`DateInterval.Minute`|n|Minuta|  
|`DateInterval.Month`|m|miesiąc|  
|`DateInterval.Quarter`|q|Kwartał|  
|`DateInterval.Second`|s|Sekunda|  
|`DateInterval.Weekday`|w|Dzień tygodnia (od 1 do 7)|  
|`DateInterval.WeekOfYear`|ww|Tydzień roku (1-53)|  
|`DateInterval.Year`|yyyy|Rok|  
  
 `FirstDayOfWeekValue` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `FirstWeekOfYearValue` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy tydzień pełną w nowego roku|  
  
   
  
## Examples  
 W tym przykładzie ma datę i przy użyciu `DatePart` działać, wyświetlane są kwartału roku, w którym występuje.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> nie jest prawidłowy.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> nie jest taki sam jak <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Wymagana. <see langword="DateInterval" /> Wartość wyliczenia lub <see langword="String" /> reprezentujący część wartości daty/godziny, aby wrócić.</param>
        <param name="DateValue">Wymagana. <see langword="Date" /> wartość, która ma zostać oceniona.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybranego spośród <see langword="FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see langword="FirstDayOfWeek.Sunday" /> jest używany.</param>
        <param name="WeekOfYear">Opcjonalna. Wartość wybranego spośród <see langword="FirstWeekOfYear" /> wyliczenie określająca pierwszy tydzień roku. Jeśli nie zostanie określony, <see langword="FirstWeekOfYear.Jan1" /> jest używany.</param>
        <summary>Zwraca <see langword="Integer" /> wartość zawierającą wskazany składnik danej <see langword="Date" /> wartość.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość zawierającą wskazany składnik danej <see langword="Date" /> wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć `DatePart` funkcji, aby obliczyć wartości daty/godziny oraz zwracać określonego składnika. Na przykład może użyć `DatePart` do obliczenia dzień tygodnia lub bieżącej godziny.  
  
 Jeśli wybierzesz `DateInterval.Weekday` dla `Interval` argumentu, zwracana wartość jest zgodne z wartościami `FirstDayOfWeek` wyliczenia. Jeśli wybierzesz `DateInterval.WeekOfYear`, `DatePart` używa <xref:System.Globalization.Calendar> i <xref:System.Globalization.CultureInfo> klasy <xref:System.Globalization> przestrzeni nazw w celu określenia bieżących ustawień.  
  
 `FirstDayOfWeekValue` Argument ma wpływ na obliczenia, które używają `DateInterval.Weekday` i `DateInterval.WeekOfYear` `Interval` ustawienia. `FirstWeekOfYearValue` Argument ma wpływ na obliczenia, które określają `DateInterval.WeekOfYear` dla `Interval`.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje podczas pobierania części daty/godziny. Na przykład można uzyskać wartość Data cały `Date` zmiennej o wartości czasu przyjmowana północ, w następujący sposób:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|String|Część daty i godziny wartość zwracana|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Dzień miesiąca (od 1 do 31)|  
|`DateInterval.DayOfYear`|t|Dzień roku (od 1 do 366)|  
|`DateInterval.Hour`|h|Godzina|  
|`DateInterval.Minute`|n|Minuta|  
|`DateInterval.Month`|m|miesiąc|  
|`DateInterval.Quarter`|q|Kwartał|  
|`DateInterval.Second`|s|Sekunda|  
|`DateInterval.Weekday`|w|Dzień tygodnia (od 1 do 7)|  
|`DateInterval.WeekOfYear`|ww|Tydzień roku (1-53)|  
|`DateInterval.Year`|yyyy|Rok|  
  
 `FirstDayOfWeekValue` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
 `FirstWeekOfYearValue` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Pierwszy tydzień roku określony w ustawieniach systemowych|  
|`FirstWeekOfYear.Jan1`|1|Tydzień zawierający dzień 1 stycznia (domyślnie)|  
|`FirstWeekOfYear.FirstFourDays`|2|Tydzień, który ma co najmniej cztery dni w nowym roku (zgodnie ze standardem ISO 8601, pkt. 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Pierwszy tydzień pełną w nowego roku|  
  
   
  
## Examples  
 W tym przykładzie ma datę i przy użyciu `DatePart` działać, wyświetlane są kwartału roku, w którym występuje.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> nie jest taki sam jak <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">Wymagana. <see langword="Integer" /> Wyrażenie z zakresu od 1 do 9999. Jednak również są akceptowane wartości poniżej tego zakresu. Jeśli <c>roku</c> 0 do 99, jest interpretowany jako między 1930 i 2029, jak wyjaśniono w poniższej sekcji "Uwagi". Jeśli <c>roku</c> jest mniejszy niż 1 jest odejmowany od bieżącego roku.</param>
        <param name="Month">Wymagana. <see langword="Integer" /> wyrażenie od 1 do 12. Akceptowane są również wartości spoza tego zakresu. Wartość <c>miesiąca</c> jest przesunięty 1 i stosowane do stycznia obliczeniowej roku. Innymi słowy (<c>miesiąca</c> - 1) jest dodawany do stycznia. Rok jest obliczany, jeśli to konieczne. W tym celu zilustrowania następujące wyniki: Jeśli <c>miesiąca</c> 1, wynikiem jest stycznia obliczeniowej roku.  Jeśli <c>miesiąca</c> wynosi 0, wynik grudnia zeszłego roku.  Jeśli <c>miesiąca</c> wynosi -1, wynikiem jest listopada zeszłego roku.  Jeśli <c>miesiąca</c> 13, wynik jest stycznia następnego roku.</param>
        <param name="Day">Wymagana. <see langword="Integer" /> wyrażenie od 1 do 31. Akceptowane są również wartości spoza tego zakresu. Wartość <c>dzień</c> jest przesunięty 1 i stosowane do pierwszego dnia miesiąca obliczeniowej. Innymi słowy (<c>dzień</c> - 1) jest dodawany do pierwszego dnia miesiąca. Miesiąc i rok są obliczane ponownie, jeśli to konieczne. W tym celu zilustrowania następujące wyniki: Jeśli <c>dzień</c> 1, wynikiem jest pierwszy dzień miesiąca obliczeniowej.  Jeśli <c>dzień</c> wynosi 0, wynik ostatni dzień minionego miesiąca.  Jeśli <c>dzień</c> wynosi -1, wynikiem jest przedostatni dzień minionego miesiąca.  Jeśli <c>dzień</c> jest koniec bieżącego miesiąca, wynik jest odpowiedni dzień następnego miesiąca. Na przykład jeśli <c>miesiąca</c> to 4 i <c>dzień</c> 31, wynik może 1.</param>
        <summary>Zwraca <see langword="Date" /> wartość reprezentującą określony rok, miesiąc i dzień, gdzie czasu jest przyjmowana północ (00: 00:00).</summary>
        <returns>Zwraca <see langword="Date" /> wartość reprezentującą określony rok, miesiąc i dzień, gdzie czasu jest przyjmowana północ (00: 00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W obszarze Windows 98 lub Windows 2000 rokiem dwucyfrowym dla `Year` argument interpretowania zgodnie z ustawieniami komputera użytkownika. Ustawienia domyślne są wartości z zakresu od 0 do 29 są interpretowane jako lata 2000 – 2029, czy wartości od 30 do 99 są interpretowane jako lata 1930 – 1999. Dla wszystkich innych `Year` argumenty, użyj czterocyfrowy rok, na przykład 1924.  
  
 Wcześniejsze wersje systemu Windows interpretacji lat zgodnie z ustawieniami domyślnymi opisanych powyżej. Aby upewnić się, że funkcja zwraca poprawnej wartości, należy użyć czterech cyfr `Year`.  
  
 W poniższym przykładzie pokazano ujemna, zero i wartości argumentów dodatnią. W tym miejscu `DateSerial` funkcja zwraca `Date` reprezentującą dzień przed pierwszego dnia marca roku 10 lat przed rokiem bieżącym; innymi słowy, ostatni dzień lutego 10 lat temu.  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 Jeśli dowolny `Month` lub `Day` przekracza jej normalny zakres, zostanie zastosowane na następny większy jednostki zależnie od potrzeb. Na przykład jeśli określisz 32 dni, wartość jest szacowana jako jeden miesiąc i od jednej do czterech dni, w zależności od wartości `Month`. Jeśli `Year` jest większa niż 9999, lub jeśli któryś argument jest spoza zakresu -2,147,483,648 do 2 147 483 647, <xref:System.ArgumentException> wystąpi błąd. Jeżeli data określona przez trzech argumentów jest wcześniejsza od 00:00:00 w dniu 1 stycznia roku, 1 lub nowszej niż 23:59:59 31 grudnia 9999 <xref:System.ArgumentOutOfRangeException> wystąpi błąd.  
  
 `Date` Typ danych obejmuje składniki czasu. `DateSerial` Ustawia wszystkie te 0, dlatego zwracana wartość reprezentuje na początku dnia obliczeniowej.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime> struktury, jego metody zapewniają dodatkowe opcje w zebrania `Date` wartość. Na przykład można użyć jednej z przeciążone <xref:System.DateTime.%23ctor%2A> konstruktorów do wypełnienia `Date` zmiennej przy użyciu kombinacji odpowiednie składniki. W poniższym przykładzie `NewDateTime` do 6 maja 1978, dziesiątego jednej sekundy przed 8:30 w nocy:  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 W tym przykładzie użyto `DateSerial` funkcja zwracająca termin określony rok, miesiąc i dzień.  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje <see langword="String" /> wartość reprezentującą aktualną datę ustawioną w systemie.</summary>
        <value>Zwraca lub konfiguruje <see langword="String" /> wartość reprezentującą aktualną datę ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` Zwraca datę systemową w formacie MM-dd rrrr, który używa nazwy skróconej miesiąca. M-d rrrr, są akceptowane formaty daty M-d-y, M/d/rrrr i m/y. Dotyczy to wszystkich ustawień regionalnych systemu, z wyjątkiem tych, które korzystają z zestawem znaków dwubajtowych (DBCS). Jeśli ustawienia regionalne systemu korzysta z zestawem znaków dwubajtowych `DateString` zwraca datę systemową w formacie RRRR MM-dd. Ustawienia regionalne systemu jest ustawiony za pomocą **zegar, język i Region** elementu **Panelu sterowania**.  
  
 **Uwaga** `DateString` właściwość zwraca datę systemową tylko w formacie RRRR MM-dd `zh` (chiński uproszczony), `ko` (koreański) i `ja` ustawień regionalnych systemu (japoński), jeśli używasz programu Visual Basic w Silverlight.  
  
 Można pobrać lub ustawić bieżący czas systemowy jako `String`, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> właściwości.  
  
 Aby uzyskać bieżący system daty i godziny w formacie ustawień regionalnych, lub w niestandardowym formacie, podaj <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> właściwości <xref:Microsoft.VisualBasic.Strings.Format%2A> funkcja Określanie formatu daty/godziny wstępnie zdefiniowanych lub zdefiniowanych przez użytkownika. W poniższym przykładzie pokazano to.  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 Aby dostęp do bieżącej systemowej daty jako `Date`, użyj <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie systemu daty lub godziny wymaga uprawnień kodu niezarządzanego, co może wpływać na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu do kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W poniższym przykładzie użyto `DateString` właściwość, aby wyświetlić bieżącą datę systemową.  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Nieprawidłowy format używany do ustawiania wartości <see langword="DateString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">Wymagana. <see langword="String" /> wyrażenie reprezentujący wartość daty/godziny od 00:00:00 w dniu 1 stycznia roku 1 do 23:59:59 31 grudnia 9999 r.</param>
        <summary>Zwraca <see langword="Date" /> wartość zawierającą informacje o dacie reprezentowane przez ciąg, z czasu jest przyjmowana północ (00: 00:00).</summary>
        <returns>
          <see langword="Date" /> Wartość zawierająca informacje o dacie reprezentowane przez ciąg, z czasu jest przyjmowana północ (00: 00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `StringDate` obejmuje tylko liczb od 1 do 12 oddzielone separatorów prawidłową datę `DateValue` przyjmuje kolejność dzień, miesiąc i rok zgodnie z określonym w systemie format daty krótkiej. `DateValue` zostaną użyte bieżące ustawienia kalendarza <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia. Format daty krótkiej można zastąpić, ustawiając <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> właściwość <xref:System.Globalization.DateTimeFormatInfo> klasy w <xref:System.Globalization> przestrzeni nazw.  
  
 `DateValue` rozpoznaje nazwy miesięcy w formie długich, skróconej i liczbowych. Na przykład w oraz rozpoznawaniu 12/30/1991 i 12/30/91 `DateValue` rozpoznaje także 30 grudnia 1991 i 30 gru 1991.  
  
 Jeśli część roku `StringDate` zostanie pominięty, `DateValue` używa bieżącego roku z komputera daty systemowej.  
  
 Jeśli `StringDate` argument zawiera informacje o czasie `DateValue` nie ma go w zwracanej wartości. Jednak jeśli `StringDate` zawiera nieprawidłową wartość czas informacje, takie jak "89: 98" <xref:System.InvalidCastException> wystąpi błąd.  
  
   
  
## Examples  
 W tym przykładzie użyto `DateValue` funkcji do przekonwertowania ciągu na datę. Umożliwia także literałów dat bezpośrednio przypisać datę `Object` lub `Date` zmiennej, na przykład `oldDate = #2/12/69#`.  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="StringDate" /> zawiera nieprawidłowe informacje o godzinie.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagana. <see langword="Date" /> wartość, z którego mają zostać wyodrębnione dnia.</param>
        <summary>Zwraca <see langword="Integer" /> wartość z zakresu od 1 do 31 reprezentująca dzień miesiąca.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość z zakresu od 1 do 31 reprezentująca dzień miesiąca.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli używasz `Day` funkcji, może być konieczne kwalifikuj z `Microsoft.VisualBasic` przestrzeni nazw, ponieważ <xref:System.Windows.Forms> definiuje przestrzeń nazw <xref:System.Windows.Forms.Day> jako wyliczenie. W poniższym przykładzie przedstawiono sposób kwalifikującego `Day` rozpoznaje tę niejednoznaczność:  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 Możesz również uzyskać dnia miesiąca, wywołując `DatePart` i określając `DateInterval.Day` dla *interwał* argumentu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Day` funkcji, aby uzyskać dzień miesiąca od określonej daty. W środowisku programistycznym literału daty są wyświetlane w krótkim formacie (na przykład "02/12/1969") przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` jest kwalifikowana odróżniający go od <xref:System.Windows.Forms.Day?displayProperty=nameWithType> wyliczenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Wymagana. <see langword="Date" /> wartość, z którego mają zostać wyodrębnione godzinę.</param>
        <summary>Zwraca <see langword="Integer" /> wartość z zakresu od 0 do 23 reprezentująca godzinę dnia.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość z zakresu od 0 do 23 reprezentująca godzinę dnia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać godzinę dnia, wywołując `DatePart` i określając `DateInterval.Hour` dla `Interval` argumentu.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hour` funkcji, aby uzyskać godzinę od określonego czasu. W środowisku programistycznym literał czasu jest wyświetlane w formacie krótkim czasie przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Wymagana. <see langword="Date" /> wartość, z którego mają zostać wyodrębnione minutę.</param>
        <summary>Zwraca <see langword="Integer" /> wartość z zakresu od 0 do 59 reprezentującą minutę godziny.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość z zakresu od 0 do 59 reprezentującą minutę godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać minuty, godziny, wywołując `DatePart` i określając `DateInterval.Minute` dla `Interval` argumentu.  
  
   
  
## Examples  
 W tym przykładzie użyto `Minute` funkcji, aby uzyskać minutę godziny od określonego czasu. W środowisku programistycznym literał czasu jest wyświetlane w formacie krótkim czasie przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagana. <see langword="Date" /> wartość, z którego mają zostać wyodrębnione miesiąca.</param>
        <summary>Zwraca <see langword="Integer" /> wartość z zakresu od 1 do 12 reprezentująca miesiąc w roku.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość z zakresu od 1 do 12 reprezentująca miesiąc w roku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać miesiąc w roku, wywołując `DatePart` i określając `DateInterval.Month` dla `Interval` argumentu.  
  
   
  
## Examples  
 W tym przykładzie użyto `Month` funkcji, aby uzyskać miesiąca od określonej daty. W środowisku programistycznym literał jest wyświetlana data w formacie daty krótkiej przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">Wymagana. <see langword="Integer" />. Liczbowe oznaczenie miesiąca, z zakresu od 1 do 13; wartość 1 oznacza styczeń, a 12 wskazuje grudnia. Możesz użyć wartości 13 z kalendarzem 13 miesięcy. Jeśli system używa 12-miesięczny kalendarz i <c>miesiąca</c> jest 13, <see langword="MonthName" /> zwraca pusty ciąg.</param>
        <param name="Abbreviate">Opcjonalna. <see langword="Boolean" /> Wartość wskazująca, czy nazwa miesiąca ma być skrócona. W przypadku pominięcia będzie używana wartość domyślna to <see langword="False" />, co oznacza, że ta nazwa nie jest skrócona.</param>
        <summary>Zwraca <see langword="String" /> zawierający nazwę podanego miesiąca.</summary>
        <returns>Zwraca <see langword="String" /> zawierający nazwę podanego miesiąca.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Długość ciągu zwróconego przez `MonthName` zależy nie tylko argumenty wejściowe, ale także na **Opcje regionalne** ustawienia określone w oknach **Panelu sterowania**.  
  
> [!NOTE]
>  `MonthName` zostaną użyte bieżące ustawienia kalendarza <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
   
  
## Examples  
 W tym przykładzie użyto `MonthName` funkcji można określić nazwy miesiąca, przez całkowitą podane. Wartość logiczna określi, czy pełną nazwę (`False`) lub skróconą nazwę (`True`) będą wyświetlane.  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Month" /> jest mniejsza niż 1 lub większą niż 13.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca <see langword="Date" /> zawierający bieżącą datę i godzinę ustawioną w systemie.</summary>
        <value>Zwraca <see langword="Date" /> zawierający bieżącą datę i godzinę ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby ustawić daty systemowej, użyj <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> właściwości. Aby ustawić czas systemowy, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Now` właściwości do zwracania bieżącej systemowej daty i godziny.  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Wymagana. <see langword="Date" /> wartość, z którego mają zostać wyodrębnione drugiego.</param>
        <summary>Zwraca <see langword="Integer" /> wartość z zakresu od 0 do 59 reprezentującą sekundę minuty.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość z zakresu od 0 do 59 reprezentującą sekundę minuty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać sekundy, minuty, wywołując `DatePart` i określając `DateInterval.Second` dla `Interval` argumentu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Second` funkcji, aby uzyskać sekundę minuty od określonego czasu. W środowisku programistycznym literał czasu jest wyświetlane w formacie krótkim czasie przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje <see langword="Date" /> wartość reprezentującą aktualną porę dnia ustawioną w systemie.</summary>
        <value>Zwraca lub konfiguruje <see langword="Date" /> wartość reprezentującą aktualną porę dnia ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` Typ danych obejmuje składniki daty. Gdy zwracany jest czas systemowy `TimeOfDay` Ustawia wszystkie 1, dlatego zwracana wartość reprezentuje pierwszego dnia roku 1. Podczas ustawiania czasu systemowego `TimeOfDay` ignoruje składniki daty.  
  
 Bieżący czas systemowy jako dostępu do `String`, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> właściwości.  
  
 Aby pobrać lub ustawić bieżącej systemowej daty, należy użyć <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie systemu daty lub godziny wymaga uprawnień kodu niezarządzanego, co może wpływać na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu do kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W tym przykładzie użyto `TimeOfDay` właściwości do zwrócenia bieżący czas systemowy.  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca <see langword="Double" /> wartość reprezentującą liczbę sekund, jaka upłynęła od północy.</summary>
        <value>Zwraca <see langword="Double" /> wartość reprezentującą liczbę sekund, jaka upłynęła od północy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Timer` Właściwość zwraca zarówno w sekundach i milisekundach od ostatniego północy. Sekundy znajdują się w części całkowitej wartości zwracanej, a w część ułamkowa milisekund.  
  
   
  
## Examples  
 W tym przykładzie użyto `Timer` właściwości, aby zatrzymać aplikację. Może wykonywać innych przetwarzania podczas wstrzymania.  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 Należy pamiętać, że muszą kwalifikować się `Timer` właściwości o <xref:Microsoft.VisualBasic?displayProperty=nameWithType> przestrzeni nazw, ponieważ `Timer` jest również zdefiniowanej klasy w <xref:System.Threading?displayProperty=nameWithType>, <xref:System.Timers?displayProperty=nameWithType>, i <xref:System.Windows.Forms?displayProperty=nameWithType> przestrzeni nazw.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">Wymagana. <see langword="Integer" /> Wyrażenie z zakresu od 0 do 23. Akceptowane są również wartości spoza tego zakresu.</param>
        <param name="Minute">Wymagana. <see langword="Integer" /> Wyrażenie z zakresu od 0 do 59. Akceptowane są również wartości spoza tego zakresu. Wartość <c>minutę</c> jest dodawany do obliczeniowej godzinę, więc minut przed tym godziny określa wartość ujemną.</param>
        <param name="Second">Wymagana. <see langword="Integer" /> Wyrażenie z zakresu od 0 do 59. Akceptowane są również wartości spoza tego zakresu. Wartość <c>drugi</c> zostanie dodany na minutę obliczeniowej, więc wartości ujemnej określa w sekundach przed tym minutę.</param>
        <summary>Zwraca <see langword="Date" /> wartość reprezentującą określoną godzinę, minutę i sekundę, gdzie informacje o dacie przyjmowany 1 stycznia 1 roku.</summary>
        <returns>Zwraca <see langword="Date" /> wartość reprezentującą określoną godzinę, minutę i sekundę, gdzie informacje o dacie przyjmowany 1 stycznia 1 roku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższym przykładzie pokazano ujemna, zero i wartości argumentów dodatnią. `TimeSerial` Funkcja zwraca czas, reprezentujący 15 minut przed trzy godziny przed południe lub 8:45:00.  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 Jeśli dowolny `Minute` lub `Second` przekracza jej normalny zakres, zostanie zastosowane na następny większy jednostki zależnie od potrzeb. Na przykład jeśli określisz 75 minut jest oceniane co godzinę i 15 minut.  
  
 `TimeSerial` zmniejsza modulo 86,400, łączną liczbę sekund, czyli liczbę sekund w ciągu jednego dnia. W związku z tym czas zwracane jest zawsze pomiędzy 00:00:00 i 23:59:59.  
  
 `Date` Typ danych obejmuje składniki daty. `TimeSerial` Ustawia wszystkie te 1, dlatego zwracana wartość reprezentuje pierwszego dnia roku 1. Jednak jeśli wartości argumentów spowoduje obliczony czas przekraczać 24 godziny, dnia jest zwiększany niezbędne. W poniższym przykładzie wartości `Hour` i `Minute` spowodować łączny czas dłuższy niż 24 godzin.  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 Jeśli wartości argumentów oznacza ujemna czas obliczeniowej, informacje o dacie ma ustawioną wartość 1/1/0001 i informacje o godzinie dostosowuje się pomiędzy 00:00:00 i 23:59:59. Jednak jeśli obliczony czas jest mniejsza niż ujemna 24 godziny, <xref:System.ArgumentOutOfRangeException> wystąpi błąd.  
  
 Ponieważ każdy `Date` wartość jest obsługiwana przez <xref:System.DateTime?displayProperty=nameWithType> struktury, jego metody zapewniają dodatkowe opcje w zebrania `Date` wartość. Na przykład można użyć jednej z przeciążone <xref:System.DateTime.%23ctor%2A> konstruktorów do wypełnienia `Date` zmiennej przy użyciu kombinacji odpowiednie składniki. W poniższym przykładzie `newDateTime` do 6 maja 1978, dziesiątego jednej sekundy przed 8:30 w nocy:  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 W poniższym przykładzie użyto `TimeSerial` funkcja zwraca czas na określoną godzinę, minutę i sekundę.  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Argument jest spoza zakresu -2,147,483,648 do 2 147 483 647</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Obliczony czas jest krótszy niż 24 godziny ujemna.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje <see langword="String" /> wartość reprezentującą aktualną porę dnia ustawioną w systemie.</summary>
        <value>Zwraca lub konfiguruje <see langword="String" /> wartość reprezentującą aktualną porę dnia ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` zawsze zwraca czas systemowy jako "Ss", która jest w formacie 24-godzinnym. Ten format jest kultury niezmiennej, co oznacza nie ulega zmianie, nawet w przypadku zmiany **Opcje regionalne** w **Panelu sterowania**.  
  
 Można pobrać lub ustawić bieżącej systemowej daty jako `String`, użyj <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> właściwości.  
  
 Aby uzyskać bieżący system daty i godziny w formacie ustawień regionalnych, lub w niestandardowym formacie, podaj <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> właściwości <xref:Microsoft.VisualBasic.Strings.Format%2A> funkcja Określanie formatu daty/godziny wstępnie zdefiniowanych lub zdefiniowanych przez użytkownika. W poniższym przykładzie pokazano to.  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 Bieżący czas systemowy jako dostępu do `Date`, użyj <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie systemu daty lub godziny wymaga uprawnień kodu niezarządzanego, co może wpływać na jej wykonanie w sytuacji, w częściowej relacji zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu do kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W tym przykładzie użyto `TimeString` właściwość, aby wyświetlić bieżący czas systemowy.  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Nieprawidłowy format używany do ustawiania wartości <see langword="TimeString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">Wymagana. <see langword="String" /> wyrażenie reprezentujący wartość daty/godziny od 00:00:00 w dniu 1 stycznia roku 1 do 23:59:59 31 grudnia 9999 r.</param>
        <summary>Zwraca <see langword="Date" /> wartość zawierającą informacje o godzinie reprezentowane przez ciąg, gdzie informacje o dacie przyjmowany 1 stycznia 1 roku.</summary>
        <returns>Zwraca <see langword="Date" /> wartość zawierającą informacje o godzinie reprezentowane przez ciąg, gdzie informacje o dacie przyjmowany 1 stycznia 1 roku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz wprowadzić prawidłowe godziny przy użyciu zegara 12-godzinnym lub 24-godzinnym. Na przykład `"2:24 P.M."` i `"14:24"` są prawidłowe `StringTime` argumentów.  
  
 Jeśli `StringTime` argument zawiera informacje o dacie, `TimeValue` nie ma go w zwracanej wartości. Jednak jeśli `StringTime` zawiera nieprawidłowe informacje o dacie, na przykład "stycznia 32" <xref:System.InvalidCastException> wystąpi błąd.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `TimeValue` funkcji do przekonwertowania ciągu na godzinę. Umożliwia także literałów dat bezpośrednio przypisać czas do `Date` zmiennej.  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="StringTime" /> zawiera nieprawidłowe informacje o dacie.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje <see langword="Date" /> wartość reprezentującą aktualną datę ustawioną w systemie.</summary>
        <value>Zwraca lub konfiguruje <see langword="Date" /> wartość reprezentującą aktualną datę ustawioną w systemie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` Typ danych obejmuje składniki czasu. Gdy zwracany jest daty systemowej `Today` Ustawia wszystkie te 0, dlatego zwracana wartość oznacza północ (00: 00:00). Podczas ustawiania datę systemową `Today` ignoruje składniki czasu.  
  
 Aby dostęp do bieżącej systemowej daty jako `String`, użyj <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> właściwości.  
  
 Aby pobrać lub ustawić bieżący czas systemowy, należy użyć <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> właściwości.  
  
> [!IMPORTANT]
>  Ustawienie systemu daty lub godziny wymaga uprawnień kodu niezarządzanego, co może wpływać na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu do kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W tym przykładzie użyto `Today` właściwości do zwracania bieżącej systemowej daty.  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagana. <see langword="Date" /> wartość, dla której chcesz określić dzień tygodnia.</param>
        <param name="DayOfWeek">Opcjonalna. Wartość wybranego spośród <see langword="FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see langword="FirstDayOfWeek.Sunday" /> jest używany.</param>
        <summary>Zwraca <see langword="Integer" /> wartość zawierającą liczbę reprezentującą dzień tygodnia.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość zawierającą liczbę reprezentującą dzień tygodnia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwrócona przez `Weekday` funkcja odpowiada wartości `FirstDayOfWeek` wyliczenie; to, że wartość 1 oznacza niedzielę i 7 wskazuje sobotę.  
  
> [!NOTE]
>  `Weekday` zostaną użyte bieżące ustawienia kalendarza <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
 `DayOfWeek` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w ustawieniach systemowych|  
|`FirstDayOfWeek.Sunday`|1|Niedziela (domyślnie)|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Weekday` funkcji, aby uzyskać dzień tygodnia z określonej daty.  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="DayOfWeek" /> jest mniejsza niż 0 lub więcej niż 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">Wymagana. <see langword="Integer" />. Liczbowe oznaczenie dzień tygodnia, od 1 do 7; wartość 1 oznacza pierwszy dzień tygodnia i 7 wskazuje ostatni dzień tygodnia. Tożsamości dni imię i nazwisko są zależne od ustawienia <c>FirstDayOfWeekValue</c>.</param>
        <param name="Abbreviate">Opcjonalna. <see langword="Boolean" /> Wartość wskazująca, czy ma być skrócona nazwa dnia tygodnia. W przypadku pominięcia będzie używana wartość domyślna to <see langword="False" />, co oznacza, że nazwa dnia tygodnia nie jest skrócona.</param>
        <param name="FirstDayOfWeekValue">Opcjonalna. Wartość wybranego spośród <see langword="FirstDayOfWeek" /> wyliczenia, która określa pierwszy dzień tygodnia. Jeśli nie zostanie określony, <see langword="FirstDayOfWeek.System" /> jest używany.</param>
        <summary>Zwraca <see langword="String" /> zawierający nazwę podanego dnia tygodnia.</summary>
        <returns>Zwraca <see langword="String" /> zawierający nazwę podanego dnia tygodnia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Długość ciągu zwróconego przez `WeekdayName` zależy nie tylko argumenty wejściowe, ale także na **Opcje regionalne** ustawienia określone w oknach **Panelu sterowania**.  
  
> [!NOTE]
>  `WeekdayName` zostaną użyte bieżące ustawienia kalendarza <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość <xref:System.Globalization.CultureInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Wartość domyślna <xref:System.Globalization.CultureInfo.CurrentCulture%2A> wartości są określane przez **Panelu sterowania** ustawienia.  
  
 `FirstDayOfWeekValue` Argument może zawierać jeden z następujących ustawień.  
  
|Wartość wyliczenia|Wartość|Opis|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Pierwszy dzień tygodnia określony w systemie ustawienia (ustawienie domyślne)|  
|`FirstDayOfWeek.Sunday`|1|Niedziela|  
|`FirstDayOfWeek.Monday`|2|Poniedziałek (zgodne ze standardem ISO 8601, pkt. 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Wtorek|  
|`FirstDayOfWeek.Wednesday`|4|Środa|  
|`FirstDayOfWeek.Thursday`|5|Czwartek|  
|`FirstDayOfWeek.Friday`|6|Piątek|  
|`FirstDayOfWeek.Saturday`|7|Sobota|  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Weekday` funkcji, aby uzyskać dzień tygodnia z określonej daty, a następnie `WeekDayName` funkcji można uzyskać nazwy dnia tygodnia z numerem.  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Weekday" /> jest mniejsza niż 1 lub większą niż 7, lub <paramref name="FirstDayOfWeekValue" /> jest mniejsza niż 0 lub większą niż 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Wymagana. <see langword="Date" /> wartość, z którego mają zostać wyodrębnione roku.</param>
        <summary>Zwraca <see langword="Integer" /> wartość z zakresu od 1 do 9999 reprezentującą rok.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość z zakresu od 1 do 9999 reprezentującą rok.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również uzyskać roku, wywołując `DatePart` i określając `DateInterval.Year` dla `Interval` argumentu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Year` funkcji, aby uzyskać roku od określonej daty. W środowisku programistycznym literał jest wyświetlana data w formacie daty krótkiej przy użyciu ustawień regionalnych kodu.  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>