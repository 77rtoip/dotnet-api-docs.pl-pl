<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1078adb483e226f7a039b4efdff277139946d6a5" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34173941" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="eb596-101">
        <see langword="Information" /> Moduł zawiera zwracać, testowania lub sprawdź informacje dotyczące procedur.</span>
      <span class="sxs-lookup">
        <span data-stu-id="eb596-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-102">Ten moduł obsługuje słów kluczowych języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które zapewniają informacje o błędzie, sprawdzanie poprawności danych, określić granice tablicy i pobierać informacje dotyczące danych typu i kolor.</span><span class="sxs-lookup"><span data-stu-id="eb596-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-103">W poniższym przykładzie użyto `VbTypeName` funkcja zwraca nazwy typów danych w przypadku kilku zmiennych.</span><span class="sxs-lookup"><span data-stu-id="eb596-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eb596-104">Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-104">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="eb596-105">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-105">Read-only.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-106">Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-106">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="eb596-107">Tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-107">Read-only.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-108">Jeśli Visual Basic napotka bez numerów wierszy, zwraca wartość 0.</span><span class="sxs-lookup"><span data-stu-id="eb596-108">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-109">W tym przykładzie użyto `Erl` właściwości, aby wskazać, numer wiersza.</span><span class="sxs-lookup"><span data-stu-id="eb596-109">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eb596-110">Zawiera informacje na temat błędów czasu wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-110">Contains information about run-time errors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-111">Zawiera informacje na temat błędów czasu wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-111">Contains information about run-time errors.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-112">Właściwości `Err` obiektu są ustawiane przez generator Błąd — Visual Basic, obiekt lub programistę.</span><span class="sxs-lookup"><span data-stu-id="eb596-112">The properties of the `Err` object are set by the generator of an error—Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="eb596-113">Gdy wystąpi błąd wykonania, właściwości `Err` obiektu są wypełnione informacjami, które jednoznacznie identyfikuje błąd i służy do obsługi błędu.</span><span class="sxs-lookup"><span data-stu-id="eb596-113">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="eb596-114">Aby wygenerować błędów czasu wykonywania w kodzie, należy użyć `Raise` metody.</span><span class="sxs-lookup"><span data-stu-id="eb596-114">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="eb596-115">`Err` Właściwości obiektu są resetowane do zera lub ciąg o zerowej długości ("") po `Exit Sub`, `Exit Function`, `Exit Property`, lub `Resume Next` instrukcji w ramach procedury obsługi błędów.</span><span class="sxs-lookup"><span data-stu-id="eb596-115">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="eb596-116">Przy użyciu dowolnej formy `Resume` instrukcję poza procedury obsługi błędów nie spowoduje zresetowanie `Err` właściwości obiektu.</span><span class="sxs-lookup"><span data-stu-id="eb596-116">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="eb596-117">Można użyć `Clear` metoda jawnie `Err`.</span><span class="sxs-lookup"><span data-stu-id="eb596-117">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="eb596-118">Użyj `Raise` metody zamiast `Error` instrukcji, aby generować błędy środowiska wykonawczego błędów systemu i klasy modułów.</span><span class="sxs-lookup"><span data-stu-id="eb596-118">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="eb596-119">Decyzję o tym, czy używać `Raise` metody w innym kodzie zależy od siłę informacji do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="eb596-119">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="eb596-120">`Err` Obiekt jest obiektem wewnętrzne o zakresie globalnym.</span><span class="sxs-lookup"><span data-stu-id="eb596-120">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="eb596-121">W związku z tym nie należy utworzyć wystąpienie w kodzie.</span><span class="sxs-lookup"><span data-stu-id="eb596-121">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-122">W tym przykładzie użyto właściwości `Err` obiektu przy konstruowaniu okno dialogowe komunikat o błędzie.</span><span class="sxs-lookup"><span data-stu-id="eb596-122">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="eb596-123">Zwróć uwagę, że jeśli używasz `Clear` metody pierwszego, gdy użytkownik generuje błąd w Visual Basic z `Raise` metody, właściwości stają się wartościami domyślnymi Visual Basic `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="eb596-123">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="eb596-124">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-124">Required.</span>
          </span>
          <span data-ttu-id="eb596-125">
            <see langword="Object" /> Zmienna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-125">
              <see langword="Object" /> variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-126">Zwraca <see langword="Boolean" /> wartość wskazującą, czy zmienna odwołuje się do tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-126">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-127">Zwraca <see langword="Boolean" /> wartość wskazującą, czy zmienna odwołuje się do tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-127">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-128">`IsArray` Zwraca `True` czy zmienna odwołuje się do tablicy; w przeciwnym razie zwraca `False`.</span><span class="sxs-lookup"><span data-stu-id="eb596-128">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="eb596-129">`IsArray` jest to szczególnie przydatne w przypadku obiektów, które mogą zawierać tablic.</span><span class="sxs-lookup"><span data-stu-id="eb596-129">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-130">W tym przykładzie użyto `IsArray` funkcji w celu sprawdzenia, jeśli wiele zmiennych odwołują się do tablicy.</span><span class="sxs-lookup"><span data-stu-id="eb596-130">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="eb596-131">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-131">Required.</span>
          </span>
          <span data-ttu-id="eb596-132">
            <see langword="Object" /> Wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-132">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-133">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie reprezentuje prawidłową <see langword="Date" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-133">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-134">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie reprezentuje prawidłową <see langword="Date" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-134">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-135">`IsDate` Zwraca `True` Jeśli `Expression` jest <xref:System.DateTime> danych wpisz lub może być przekonwertowany do niego; w przeciwnym razie zwraca `False`.</span><span class="sxs-lookup"><span data-stu-id="eb596-135">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="eb596-136"><xref:System.DateTime> — Typ danych zawiera zarówno wartości daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="eb596-136">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="eb596-137">`IsDate` Zwraca `True` Jeśli `Expression` reprezentuje prawidłową datę, czas ważności, lub prawidłową datę i godzinę.</span><span class="sxs-lookup"><span data-stu-id="eb596-137">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-138">W poniższym przykładzie użyto `IsDate` funkcji, aby określić, czy kilku zmiennych reprezentuje poprawnej <xref:System.DateTime> wartości.</span><span class="sxs-lookup"><span data-stu-id="eb596-138">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="eb596-139">W powyższym przykładzie `IsDate` zwraca `True` pierwsze cztery wywołań i `False` dla ostatniego wywołania.</span><span class="sxs-lookup"><span data-stu-id="eb596-139">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="eb596-140">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-140">Required.</span>
          </span>
          <span data-ttu-id="eb596-141">
            <see langword="Object" /> Wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-141">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-142">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie ma <see cref="T:System.DBNull" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-142">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-143">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie ma <see cref="T:System.DBNull" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-143">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-144">`IsDBNull` Zwraca `True` Jeśli typ danych miary `Expression` daje w wyniku <xref:System.DBNull> typu; w przeciwnym razie `IsDBNull` zwraca `False`.</span><span class="sxs-lookup"><span data-stu-id="eb596-144">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="eb596-145"><xref:System.DBNull?displayProperty=nameWithType> Wartość wskazuje, że `Object` reprezentuje dane brakujące lub nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="eb596-145">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="eb596-146">`DBNull` nie jest taka sama jak `Nothing`, co oznacza, że zmienna nie została jeszcze zainicjowana.</span><span class="sxs-lookup"><span data-stu-id="eb596-146">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="eb596-147">`DBNull` Ponadto nie jest taka sama jak ciąg o zerowej długości (`""`), który jest czasami nazywany pusty ciąg.</span><span class="sxs-lookup"><span data-stu-id="eb596-147">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-148">W tym przykładzie użyto `IsDBNull` funkcji, aby określić, czy zmienna daje w wyniku `DBNull`.</span><span class="sxs-lookup"><span data-stu-id="eb596-148">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="eb596-149">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-149">Required.</span>
          </span>
          <span data-ttu-id="eb596-150">
            <see langword="Object" /> Wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-150">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-151">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie jest typu wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-151">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-152">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie jest typu wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-152">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-153">`IsError` Zwraca `True` Jeśli wyrażenie reprezentuje `Object` zmiennej, która jest pochodną <xref:System.Exception> klasy w <xref:System> przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="eb596-153">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="eb596-154">Wystąpił wyjątek, która jest pochodną <xref:System.Exception?displayProperty=nameWithType> być przechwycony z `Try...Catch...Finally` instrukcje.</span><span class="sxs-lookup"><span data-stu-id="eb596-154">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-155">W poniższym przykładzie użyto `IsError` funkcji w celu sprawdzenia, czy wyrażenie reprezentuje wyjątek systemu.</span><span class="sxs-lookup"><span data-stu-id="eb596-155">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="eb596-156">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-156">Required.</span>
          </span>
          <span data-ttu-id="eb596-157">
            <see langword="Object" /> Wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-157">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-158">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie nie ma żadnego obiektu przypisane do niej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-158">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-159">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie nie ma żadnego obiektu przypisane do niej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-159">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-160">`IsNothing` Zwraca `True` Jeśli wyrażenie reprezentuje zmienną obiektu, który obecnie nie obiekt przypisanej do niego; w przeciwnym razie, zwraca `False`.</span><span class="sxs-lookup"><span data-stu-id="eb596-160">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="eb596-161">`IsNothing` jest przeznaczony do pracy w typach referencyjnych.</span><span class="sxs-lookup"><span data-stu-id="eb596-161">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="eb596-162">Typ wartości nie może zawierać wartość i zostanie przywrócona wartość domyślną, po przypisaniu `Nothing` do niego.</span><span class="sxs-lookup"><span data-stu-id="eb596-162">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="eb596-163">Jeśli podasz typu wartości w `Expression`, `IsNothing` zawsze zwraca `False`.</span><span class="sxs-lookup"><span data-stu-id="eb596-163">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-164">W poniższym przykładzie użyto `IsNothing` funkcji, aby określić, czy zmienna obiektu jest skojarzony z dowolnego wystąpienia obiektu.</span><span class="sxs-lookup"><span data-stu-id="eb596-164">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="eb596-165">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-165">Required.</span>
          </span>
          <span data-ttu-id="eb596-166">
            <see langword="Object" /> Wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-166">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-167">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie może przyjąć jako liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-167">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-168">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie może przyjąć jako liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-168">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-169">`IsNumeric` Zwraca `True` Jeśli typ danych miary `Expression` jest `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, lub `UShort`.</span><span class="sxs-lookup"><span data-stu-id="eb596-169">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="eb596-170">Również zwraca `True` Jeśli `Expression` jest `Char`, `String`, lub `Object` które mogą być pomyślnie przekonwertowane na liczbę.</span><span class="sxs-lookup"><span data-stu-id="eb596-170">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="eb596-171">`Expression` może zawierać znaków innych niż alfanumeryczne.</span><span class="sxs-lookup"><span data-stu-id="eb596-171">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="eb596-172">`IsNumeric` Zwraca `True` Jeśli `Expression` jest ciągiem, który zawiera prawidłową liczbę szesnastkową lub ósemkowo.</span><span class="sxs-lookup"><span data-stu-id="eb596-172">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="eb596-173">`IsNumeric` Zwraca również wartość `True` Jeśli `Expression` zawiera prawidłowe wyrażenie liczbowe zaczyna się od + - znak lub zawiera przecinkami.</span><span class="sxs-lookup"><span data-stu-id="eb596-173">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="eb596-174">`IsNumeric` Zwraca `False` Jeśli `Expression` jest typu danych `Date`.</span><span class="sxs-lookup"><span data-stu-id="eb596-174">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="eb596-175">Zwraca `False` Jeśli `Expression` jest `Char`, `String`, lub `Object` którego nie można pomyślnie przekonwertować na liczbę.</span><span class="sxs-lookup"><span data-stu-id="eb596-175">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-176">W poniższym przykładzie użyto `IsNumeric` funkcji, aby określić, czy zawartość zmiennej może przyjąć jako liczby.</span><span class="sxs-lookup"><span data-stu-id="eb596-176">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="eb596-177">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-177">Required.</span>
          </span>
          <span data-ttu-id="eb596-178">
            <see langword="Object" /> Wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-178">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-179">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie obliczane do typu referencyjnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-179">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-180">Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie obliczane do typu referencyjnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-180">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-181">`IsReference` Zwraca `True` Jeśli `Expression` reprezentuje typ referencyjny, takich jak do wystąpienia klasy `String` typu lub tablicy dowolnego typu; w przeciwnym razie zwraca `False`.</span><span class="sxs-lookup"><span data-stu-id="eb596-181">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="eb596-182">Typ referencyjny zawiera wskaźnik do danych przechowywanych w pamięci w innym miejscu.</span><span class="sxs-lookup"><span data-stu-id="eb596-182">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="eb596-183">Typ wartości zawiera własnych danych.</span><span class="sxs-lookup"><span data-stu-id="eb596-183">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-184">W tym przykładzie użyto `IsReference` funkcji w celu sprawdzenia, jeśli wiele zmiennych odwołują się do typów referencyjnych.</span><span class="sxs-lookup"><span data-stu-id="eb596-184">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="eb596-185">W powyższym przykładzie pierwsze trzy wywołań `IsReference` zwracać `True`.</span><span class="sxs-lookup"><span data-stu-id="eb596-185">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="eb596-186">Zwraca ostatni wywołania `False`, ponieważ `Integer` jest to typ wartości nie jest typem odwołania.</span><span class="sxs-lookup"><span data-stu-id="eb596-186">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="eb596-187">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-187">Required.</span>
          </span>
          <span data-ttu-id="eb596-188">Tablica dowolny typ danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-188">Array of any data type.</span>
          </span>
          <span data-ttu-id="eb596-189">Tablica, w którym ma zostać odnaleziona najniższy możliwa wartość indeksu wymiaru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-189">The array in which you want to find the lowest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="eb596-190">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-190">Optional.</span>
          </span>
          <span data-ttu-id="eb596-191">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-191">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="eb596-192">Wymiar, dla którego najniższy możliwe indeks dolny jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-192">The dimension for which the lowest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="eb596-193">Użyj wartości 1 wymiar, 2 sekundy i tak dalej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-193">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="eb596-194">Jeśli <c>rangę</c> jest pominięty, przyjmowana jest wartość 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-194">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-195">Zwraca najmniejsza dostępną wartość indeksu wskazanego wymiaru tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-195">Returns the lowest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-196">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-196">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="eb596-197">Najniższa wartość może zawierać indeks dla określonego wymiaru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-197">The lowest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="eb596-198">
            <see langword="LBound" /> zawsze zwraca wartość 0, tak długo, jak <paramref name="Array" /> został zainicjowany, nawet jeśli go nie ma elementów, na przykład, jeśli jest to ciąg o zerowej długości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-198">
              <see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span>
          </span>
          <span data-ttu-id="eb596-199">Jeśli <paramref name="Array" /> jest <see langword="Nothing" />, <see langword="LBound" /> zgłasza <see cref="T:System.ArgumentNullException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-199">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-200">Ponieważ indeksy tablicy rozpoczynają się od 0, najmniejsza dostępną wartość indeksu każdy wymiar jest zawsze 0.</span><span class="sxs-lookup"><span data-stu-id="eb596-200">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="eb596-201">Dla tablicy o następujące wymiary `LBound` zwraca wartości w poniższej tabeli:</span><span class="sxs-lookup"><span data-stu-id="eb596-201">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="eb596-202">Wywołanie LBound</span><span class="sxs-lookup"><span data-stu-id="eb596-202">Call to LBound</span></span>|<span data-ttu-id="eb596-203">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="eb596-203">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="eb596-204">0</span><span class="sxs-lookup"><span data-stu-id="eb596-204">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="eb596-205">0</span><span class="sxs-lookup"><span data-stu-id="eb596-205">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="eb596-206">0</span><span class="sxs-lookup"><span data-stu-id="eb596-206">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="eb596-207">W poniższym przykładzie użyto `LBound` funkcji, aby określić najmniejsza dostępną wartość indeksu wskazanego wymiaru tablicy.</span><span class="sxs-lookup"><span data-stu-id="eb596-207">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eb596-208">
            <paramref name="Array" /> jest <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-208">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="eb596-209">
            <paramref name="Rank" /> mniej niż 1 lub <paramref name="Rank" /> jest większa niż rangę <paramref name="Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-209">
              <paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">
          <span data-ttu-id="eb596-210">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-210">Required.</span>
          </span>
          <span data-ttu-id="eb596-211">Liczba całkowita z zakresu 0 – 15.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-211">A whole number in the range 0–15.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-212">Zwraca <see langword="Integer" /> wartość reprezentującą kod kolor RGB odpowiadający określonym kolor numer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-212">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-213">Zwraca <see langword="Integer" /> wartość reprezentującą kod kolor RGB odpowiadający określonym kolor numer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-213">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-214">Począwszy od najmniej znaczący bajt, zwracana wartość określa wartości czerwony, zielonemu i niebieskiemu służy do określania odpowiednich kolorów w systemie RGB używanych w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="eb596-214">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="eb596-215">`Color` Argument ma następujące ustawienia.</span><span class="sxs-lookup"><span data-stu-id="eb596-215">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="eb596-216">Wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="eb596-216">Number</span></span>|<span data-ttu-id="eb596-217">Kolor</span><span class="sxs-lookup"><span data-stu-id="eb596-217">Color</span></span>|<span data-ttu-id="eb596-218">Wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="eb596-218">Number</span></span>|<span data-ttu-id="eb596-219">Kolor</span><span class="sxs-lookup"><span data-stu-id="eb596-219">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="eb596-220">0</span><span class="sxs-lookup"><span data-stu-id="eb596-220">0</span></span>|<span data-ttu-id="eb596-221">czarne</span><span class="sxs-lookup"><span data-stu-id="eb596-221">Black</span></span>|<span data-ttu-id="eb596-222">8</span><span class="sxs-lookup"><span data-stu-id="eb596-222">8</span></span>|<span data-ttu-id="eb596-223">Szary</span><span class="sxs-lookup"><span data-stu-id="eb596-223">Gray</span></span>|  
|<span data-ttu-id="eb596-224">1</span><span class="sxs-lookup"><span data-stu-id="eb596-224">1</span></span>|<span data-ttu-id="eb596-225">niebieski</span><span class="sxs-lookup"><span data-stu-id="eb596-225">Blue</span></span>|<span data-ttu-id="eb596-226">9</span><span class="sxs-lookup"><span data-stu-id="eb596-226">9</span></span>|<span data-ttu-id="eb596-227">Niebieski lekkich</span><span class="sxs-lookup"><span data-stu-id="eb596-227">Light blue</span></span>|  
|<span data-ttu-id="eb596-228">2</span><span class="sxs-lookup"><span data-stu-id="eb596-228">2</span></span>|<span data-ttu-id="eb596-229">zielony</span><span class="sxs-lookup"><span data-stu-id="eb596-229">Green</span></span>|<span data-ttu-id="eb596-230">10</span><span class="sxs-lookup"><span data-stu-id="eb596-230">10</span></span>|<span data-ttu-id="eb596-231">Jasnozielony</span><span class="sxs-lookup"><span data-stu-id="eb596-231">Light green</span></span>|  
|<span data-ttu-id="eb596-232">3</span><span class="sxs-lookup"><span data-stu-id="eb596-232">3</span></span>|<span data-ttu-id="eb596-233">błękitny</span><span class="sxs-lookup"><span data-stu-id="eb596-233">Cyan</span></span>|<span data-ttu-id="eb596-234">11</span><span class="sxs-lookup"><span data-stu-id="eb596-234">11</span></span>|<span data-ttu-id="eb596-235">Jasnobłękitny</span><span class="sxs-lookup"><span data-stu-id="eb596-235">Light cyan</span></span>|  
|<span data-ttu-id="eb596-236">4</span><span class="sxs-lookup"><span data-stu-id="eb596-236">4</span></span>|<span data-ttu-id="eb596-237">czerwony</span><span class="sxs-lookup"><span data-stu-id="eb596-237">Red</span></span>|<span data-ttu-id="eb596-238">12</span><span class="sxs-lookup"><span data-stu-id="eb596-238">12</span></span>|<span data-ttu-id="eb596-239">Czerwonego światła</span><span class="sxs-lookup"><span data-stu-id="eb596-239">Light red</span></span>|  
|<span data-ttu-id="eb596-240">5</span><span class="sxs-lookup"><span data-stu-id="eb596-240">5</span></span>|<span data-ttu-id="eb596-241">amarantowy</span><span class="sxs-lookup"><span data-stu-id="eb596-241">Magenta</span></span>|<span data-ttu-id="eb596-242">13</span><span class="sxs-lookup"><span data-stu-id="eb596-242">13</span></span>|<span data-ttu-id="eb596-243">Jasnoamarantowy</span><span class="sxs-lookup"><span data-stu-id="eb596-243">Light magenta</span></span>|  
|<span data-ttu-id="eb596-244">6</span><span class="sxs-lookup"><span data-stu-id="eb596-244">6</span></span>|<span data-ttu-id="eb596-245">żółty</span><span class="sxs-lookup"><span data-stu-id="eb596-245">Yellow</span></span>|<span data-ttu-id="eb596-246">14</span><span class="sxs-lookup"><span data-stu-id="eb596-246">14</span></span>|<span data-ttu-id="eb596-247">Żółty lekkich</span><span class="sxs-lookup"><span data-stu-id="eb596-247">Light yellow</span></span>|  
|<span data-ttu-id="eb596-248">7</span><span class="sxs-lookup"><span data-stu-id="eb596-248">7</span></span>|<span data-ttu-id="eb596-249">biały</span><span class="sxs-lookup"><span data-stu-id="eb596-249">White</span></span>|<span data-ttu-id="eb596-250">15</span><span class="sxs-lookup"><span data-stu-id="eb596-250">15</span></span>|<span data-ttu-id="eb596-251">Jasny biały</span><span class="sxs-lookup"><span data-stu-id="eb596-251">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="eb596-252">W tym przykładzie użyto `QBColor` funkcji, aby zmienić kolor na wskazanych przez `colorInteger`.</span><span class="sxs-lookup"><span data-stu-id="eb596-252">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="eb596-253">`QBColor` akceptuje wartości całkowite od 0 do 15.</span><span class="sxs-lookup"><span data-stu-id="eb596-253">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eb596-254">
            <paramref name="Color" /> znajduje się poza zakresem od 0 do 15 włącznie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-254">
              <paramref name="Color" /> is outside of range 0 to 15, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">
          <span data-ttu-id="eb596-255">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-255">Required.</span>
          </span>
          <span data-ttu-id="eb596-256">
            <see langword="Integer" /> w zakresie od 0 do 255 włącznie, który reprezentuje intensywność składnika czerwony koloru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-256">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the red component of the color.</span>
          </span>
        </param>
        <param name="Green">
          <span data-ttu-id="eb596-257">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-257">Required.</span>
          </span>
          <span data-ttu-id="eb596-258">
            <see langword="Integer" /> w zakresie od 0 do 255 włącznie, który reprezentuje intensywność składnika zielony koloru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-258">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the green component of the color.</span>
          </span>
        </param>
        <param name="Blue">
          <span data-ttu-id="eb596-259">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-259">Required.</span>
          </span>
          <span data-ttu-id="eb596-260">
            <see langword="Integer" /> w zakresie od 0 do 255 włącznie, który reprezentuje intensywność składnika niebieski koloru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-260">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the blue component of the color.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-261">Zwraca <see langword="Integer" /> wartość odpowiadająca wartości kolorów RGB z zestawem składników kolor czerwony, zielonemu i niebieskiemu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-261">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-262">Zwraca <see langword="Integer" /> wartość odpowiadająca wartości kolorów RGB z zestawem składników kolor czerwony, zielonemu i niebieskiemu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-262">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-263">Aplikacja metody i właściwości, które akceptują określenia koloru oczekiwać specyfikacji to być liczba reprezentująca RGB wartości koloru.</span><span class="sxs-lookup"><span data-stu-id="eb596-263">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="eb596-264">Wartości kolorów RGB określa względną intensywność czerwonemu, zielonemu i niebieskiego w celu wyświetlenia określonych kolor, który będzie wyświetlany.</span><span class="sxs-lookup"><span data-stu-id="eb596-264">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="eb596-265">Jeśli wartość dowolnego argument `RGB` jest większa niż 255 255 jest używany.</span><span class="sxs-lookup"><span data-stu-id="eb596-265">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="eb596-266">W poniższej tabeli wymieniono niektóre standardowe kolory i czerwony, zielonemu i niebieskiemu wartości, które obejmują one.</span><span class="sxs-lookup"><span data-stu-id="eb596-266">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="eb596-267">Kolor</span><span class="sxs-lookup"><span data-stu-id="eb596-267">Color</span></span>|<span data-ttu-id="eb596-268">Czerwony</span><span class="sxs-lookup"><span data-stu-id="eb596-268">Red value</span></span>|<span data-ttu-id="eb596-269">Zielony</span><span class="sxs-lookup"><span data-stu-id="eb596-269">Green value</span></span>|<span data-ttu-id="eb596-270">Niebieski</span><span class="sxs-lookup"><span data-stu-id="eb596-270">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="eb596-271">czarne</span><span class="sxs-lookup"><span data-stu-id="eb596-271">Black</span></span>|<span data-ttu-id="eb596-272">0</span><span class="sxs-lookup"><span data-stu-id="eb596-272">0</span></span>|<span data-ttu-id="eb596-273">0</span><span class="sxs-lookup"><span data-stu-id="eb596-273">0</span></span>|<span data-ttu-id="eb596-274">0</span><span class="sxs-lookup"><span data-stu-id="eb596-274">0</span></span>|  
|<span data-ttu-id="eb596-275">niebieski</span><span class="sxs-lookup"><span data-stu-id="eb596-275">Blue</span></span>|<span data-ttu-id="eb596-276">0</span><span class="sxs-lookup"><span data-stu-id="eb596-276">0</span></span>|<span data-ttu-id="eb596-277">0</span><span class="sxs-lookup"><span data-stu-id="eb596-277">0</span></span>|<span data-ttu-id="eb596-278">255</span><span class="sxs-lookup"><span data-stu-id="eb596-278">255</span></span>|  
|<span data-ttu-id="eb596-279">zielony</span><span class="sxs-lookup"><span data-stu-id="eb596-279">Green</span></span>|<span data-ttu-id="eb596-280">0</span><span class="sxs-lookup"><span data-stu-id="eb596-280">0</span></span>|<span data-ttu-id="eb596-281">255</span><span class="sxs-lookup"><span data-stu-id="eb596-281">255</span></span>|<span data-ttu-id="eb596-282">0</span><span class="sxs-lookup"><span data-stu-id="eb596-282">0</span></span>|  
|<span data-ttu-id="eb596-283">błękitny</span><span class="sxs-lookup"><span data-stu-id="eb596-283">Cyan</span></span>|<span data-ttu-id="eb596-284">0</span><span class="sxs-lookup"><span data-stu-id="eb596-284">0</span></span>|<span data-ttu-id="eb596-285">255</span><span class="sxs-lookup"><span data-stu-id="eb596-285">255</span></span>|<span data-ttu-id="eb596-286">255</span><span class="sxs-lookup"><span data-stu-id="eb596-286">255</span></span>|  
|<span data-ttu-id="eb596-287">czerwony</span><span class="sxs-lookup"><span data-stu-id="eb596-287">Red</span></span>|<span data-ttu-id="eb596-288">255</span><span class="sxs-lookup"><span data-stu-id="eb596-288">255</span></span>|<span data-ttu-id="eb596-289">0</span><span class="sxs-lookup"><span data-stu-id="eb596-289">0</span></span>|<span data-ttu-id="eb596-290">0</span><span class="sxs-lookup"><span data-stu-id="eb596-290">0</span></span>|  
|<span data-ttu-id="eb596-291">amarantowy</span><span class="sxs-lookup"><span data-stu-id="eb596-291">Magenta</span></span>|<span data-ttu-id="eb596-292">255</span><span class="sxs-lookup"><span data-stu-id="eb596-292">255</span></span>|<span data-ttu-id="eb596-293">0</span><span class="sxs-lookup"><span data-stu-id="eb596-293">0</span></span>|<span data-ttu-id="eb596-294">255</span><span class="sxs-lookup"><span data-stu-id="eb596-294">255</span></span>|  
|<span data-ttu-id="eb596-295">żółty</span><span class="sxs-lookup"><span data-stu-id="eb596-295">Yellow</span></span>|<span data-ttu-id="eb596-296">255</span><span class="sxs-lookup"><span data-stu-id="eb596-296">255</span></span>|<span data-ttu-id="eb596-297">255</span><span class="sxs-lookup"><span data-stu-id="eb596-297">255</span></span>|<span data-ttu-id="eb596-298">0</span><span class="sxs-lookup"><span data-stu-id="eb596-298">0</span></span>|  
|<span data-ttu-id="eb596-299">biały</span><span class="sxs-lookup"><span data-stu-id="eb596-299">White</span></span>|<span data-ttu-id="eb596-300">255</span><span class="sxs-lookup"><span data-stu-id="eb596-300">255</span></span>|<span data-ttu-id="eb596-301">255</span><span class="sxs-lookup"><span data-stu-id="eb596-301">255</span></span>|<span data-ttu-id="eb596-302">255</span><span class="sxs-lookup"><span data-stu-id="eb596-302">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="eb596-303">W tym przykładzie pokazano sposób `RGB` funkcja służy do zwracania na liczbę całkowitą reprezentującą `RGB` wartości koloru.</span><span class="sxs-lookup"><span data-stu-id="eb596-303">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eb596-304">
            <paramref name="Green" />, <paramref name="Blue" />, lub <paramref name="Red" /> znajduje się poza zakresem od 0 do 255.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-304">
              <paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">
          <span data-ttu-id="eb596-305">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-305">Required.</span>
          </span>
          <span data-ttu-id="eb596-306">A <see langword="String" /> zmienną, która zawiera nazwę typu Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-306">A <see langword="String" /> variable containing a Visual Basic type name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-307">Zwraca <see langword="String" /> zawierający nazwę systemu danych typu zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-307">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-308">Zwraca <see langword="String" /> zawierający nazwę systemu danych typu zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-308">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-309">`SystemTypeName` Zwraca w pełni kwalifikowana wspólnego języka środowiska uruchomieniowego (języka wspólnego CLR) typu nazwa odpowiadającego nazwie typu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="eb596-309">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="eb596-310">Na przykład jeśli `VbName` zawiera "Date" `SystemTypeName` zwraca "System.DateTime".</span><span class="sxs-lookup"><span data-stu-id="eb596-310">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="eb596-311">Jeśli `SystemTypeName` nie rozpoznaje wartość `VbName`, zwraca `Nothing` (nie ciąg "Nothing").</span><span class="sxs-lookup"><span data-stu-id="eb596-311">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-312">W poniższym przykładzie użyto `SystemTypeName` funkcja zwraca nazwy typów danych w przypadku kilku zmiennych.</span><span class="sxs-lookup"><span data-stu-id="eb596-312">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="eb596-313">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-313">Required.</span>
          </span>
          <span data-ttu-id="eb596-314">
            <see langword="Object" /> Zmienna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-314">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="eb596-315">Jeśli <see langword="Option Strict" /> jest <see langword="Off" />, można przekazać zmiennej typu danych z wyjątkiem struktury.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-315">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-316">Zwraca <see langword="String" /> zawierający informacje o typie danych o zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-316">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-317">Zwraca <see langword="String" /> zawierający informacje o typie danych o zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-317">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-318">W poniższej tabeli przedstawiono `String` wartości zwracanych przez `TypeName` dla innej zawartości `VarName`.</span><span class="sxs-lookup"><span data-stu-id="eb596-318">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="eb596-319">`VarName` Zawartość</span><span class="sxs-lookup"><span data-stu-id="eb596-319">`VarName` contents</span></span>|<span data-ttu-id="eb596-320">Zwrócony ciąg</span><span class="sxs-lookup"><span data-stu-id="eb596-320">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="eb596-321">16-bitowych `True` lub `False` typu wartości</span><span class="sxs-lookup"><span data-stu-id="eb596-321">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="eb596-322">"Boolean"</span><span class="sxs-lookup"><span data-stu-id="eb596-322">"Boolean"</span></span>|  
|<span data-ttu-id="eb596-323">Typ wartości binarnej 8-bitowych</span><span class="sxs-lookup"><span data-stu-id="eb596-323">8-bit binary value type</span></span>|<span data-ttu-id="eb596-324">"Bajtów"</span><span class="sxs-lookup"><span data-stu-id="eb596-324">"Byte"</span></span>|  
|<span data-ttu-id="eb596-325">Typ wartości znaków 16-bitowych</span><span class="sxs-lookup"><span data-stu-id="eb596-325">16-bit character value type</span></span>|<span data-ttu-id="eb596-326">"Char"</span><span class="sxs-lookup"><span data-stu-id="eb596-326">"Char"</span></span>|  
|<span data-ttu-id="eb596-327">Wpisz wartość 64-bitowych daty i godziny</span><span class="sxs-lookup"><span data-stu-id="eb596-327">64-bit date and time value type</span></span>|<span data-ttu-id="eb596-328">"Date"</span><span class="sxs-lookup"><span data-stu-id="eb596-328">"Date"</span></span>|  
|<span data-ttu-id="eb596-329">Typ odwołania wskazuje brak lub nieistniejącą danych</span><span class="sxs-lookup"><span data-stu-id="eb596-329">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="eb596-330">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="eb596-330">"DBNull"</span></span>|  
|<span data-ttu-id="eb596-331">Typ Stałoprzecinkowy wartość liczbową 128-bitowego</span><span class="sxs-lookup"><span data-stu-id="eb596-331">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="eb596-332">"Decimal"</span><span class="sxs-lookup"><span data-stu-id="eb596-332">"Decimal"</span></span>|  
|<span data-ttu-id="eb596-333">Typ wartości liczbowych zmiennoprzecinkowych 64-bitowych</span><span class="sxs-lookup"><span data-stu-id="eb596-333">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="eb596-334">"Double"</span><span class="sxs-lookup"><span data-stu-id="eb596-334">"Double"</span></span>|  
|<span data-ttu-id="eb596-335">Typ wartości 32-bitowa liczba całkowita</span><span class="sxs-lookup"><span data-stu-id="eb596-335">32-bit integer value type</span></span>|<span data-ttu-id="eb596-336">"Int"</span><span class="sxs-lookup"><span data-stu-id="eb596-336">"Integer"</span></span>|  
|<span data-ttu-id="eb596-337">Wskazanie klasy niespecjalizowanej obiektu typu odwołania</span><span class="sxs-lookup"><span data-stu-id="eb596-337">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="eb596-338">"Obiektu"</span><span class="sxs-lookup"><span data-stu-id="eb596-338">"Object"</span></span>|  
|<span data-ttu-id="eb596-339">Typ referencyjny wskazującym na obiekt specjalne utworzone na podstawie klasy *objectclass*</span><span class="sxs-lookup"><span data-stu-id="eb596-339">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="eb596-340">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="eb596-340">"*objectclass*"</span></span>|  
|<span data-ttu-id="eb596-341">Typ wartości 64-bitowa liczba całkowita</span><span class="sxs-lookup"><span data-stu-id="eb596-341">64-bit integer value type</span></span>|<span data-ttu-id="eb596-342">"Długa"</span><span class="sxs-lookup"><span data-stu-id="eb596-342">"Long"</span></span>|  
|<span data-ttu-id="eb596-343">Typ referencyjny bez obiektu aktualnie przypisane do niego</span><span class="sxs-lookup"><span data-stu-id="eb596-343">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="eb596-344">"Nothing"</span><span class="sxs-lookup"><span data-stu-id="eb596-344">"Nothing"</span></span>|  
|<span data-ttu-id="eb596-345">Typ wartości 8-bitową liczbę całkowitą ze znakiem</span><span class="sxs-lookup"><span data-stu-id="eb596-345">8-bit signed integer value type</span></span>|<span data-ttu-id="eb596-346">"SByte"</span><span class="sxs-lookup"><span data-stu-id="eb596-346">"SByte"</span></span>|  
|<span data-ttu-id="eb596-347">Typ wartości 16-bitową liczbę całkowitą</span><span class="sxs-lookup"><span data-stu-id="eb596-347">16-bit integer value type</span></span>|<span data-ttu-id="eb596-348">"Krótkie"</span><span class="sxs-lookup"><span data-stu-id="eb596-348">"Short"</span></span>|  
|<span data-ttu-id="eb596-349">Typ wartości liczbowych zmiennoprzecinkowych 32-bitowych</span><span class="sxs-lookup"><span data-stu-id="eb596-349">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="eb596-350">"Pojedynczy"</span><span class="sxs-lookup"><span data-stu-id="eb596-350">"Single"</span></span>|  
|<span data-ttu-id="eb596-351">Typ referencyjny wskazujące na ciąg znaków 16-bitowych</span><span class="sxs-lookup"><span data-stu-id="eb596-351">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="eb596-352">"String"</span><span class="sxs-lookup"><span data-stu-id="eb596-352">"String"</span></span>|  
|<span data-ttu-id="eb596-353">Typ wartości 32-bitowej liczby całkowitej bez znaku</span><span class="sxs-lookup"><span data-stu-id="eb596-353">32-bit unsigned integer value type</span></span>|<span data-ttu-id="eb596-354">Uinteger "—"</span><span class="sxs-lookup"><span data-stu-id="eb596-354">"UInteger"</span></span>|  
|<span data-ttu-id="eb596-355">Typ wartości 64-bitowej liczby całkowitej bez znaku</span><span class="sxs-lookup"><span data-stu-id="eb596-355">64-bit unsigned integer value type</span></span>|<span data-ttu-id="eb596-356">"ULong"</span><span class="sxs-lookup"><span data-stu-id="eb596-356">"ULong"</span></span>|  
|<span data-ttu-id="eb596-357">Typ wartości 16-bitową liczbę całkowitą bez znaku</span><span class="sxs-lookup"><span data-stu-id="eb596-357">16-bit unsigned integer value type</span></span>|<span data-ttu-id="eb596-358">"UShort"</span><span class="sxs-lookup"><span data-stu-id="eb596-358">"UShort"</span></span>|  
  
 <span data-ttu-id="eb596-359">Jeśli `VarName` jest tablicą, zwracany ciąg może być jednym z ciągów w powyższej tabeli z pustymi nawiasami dołączone.</span><span class="sxs-lookup"><span data-stu-id="eb596-359">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="eb596-360">Na przykład jeśli `VarName` odwołuje się do tablicy liczb całkowitych, `TypeName` zwraca "Integer()".</span><span class="sxs-lookup"><span data-stu-id="eb596-360">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="eb596-361">Gdy `TypeName` zwraca nazwę typu referencyjnego takich jak klasy, zwraca tylko nazwę, nazwę kwalifikowaną.</span><span class="sxs-lookup"><span data-stu-id="eb596-361">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="eb596-362">Na przykład jeśli `VarName` wskazuje obiekt klasy <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` zwraca "PaperSource".</span><span class="sxs-lookup"><span data-stu-id="eb596-362">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="eb596-363">Należy pamiętać, że jeśli zmienna został zadeklarowany jako określonego typu klasy, ale nie został przypisany, obiekt `TypeName` niczego nie "".</span><span class="sxs-lookup"><span data-stu-id="eb596-363">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-364">W poniższym przykładzie użyto `TypeName` funkcja zwraca dane typu informacji o kilku zmiennych.</span><span class="sxs-lookup"><span data-stu-id="eb596-364">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="eb596-365">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-365">Required.</span>
          </span>
          <span data-ttu-id="eb596-366">Tablica dowolny typ danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-366">Array of any data type.</span>
          </span>
          <span data-ttu-id="eb596-367">Tablica, w którym ma zostać odnaleziona największa możliwa wartość indeksu wymiaru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-367">The array in which you want to find the highest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="eb596-368">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-368">Optional.</span>
          </span>
          <span data-ttu-id="eb596-369">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-369">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="eb596-370">Wymiar, dla którego ma zostać zwrócone najwyższa możliwa wartość indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-370">The dimension for which the highest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="eb596-371">Użyj wartości 1 wymiar, 2 sekundy i tak dalej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-371">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="eb596-372">Jeśli <c>rangę</c> jest pominięty, przyjmowana jest wartość 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-372">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-373">Zwraca najwyższą dostępną wartość indeksu wskazanego wymiaru tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-373">Returns the highest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-374">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-374">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="eb596-375">Najwyższą wartość może zawierać indeks dla określonego wymiaru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-375">The highest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="eb596-376">Jeśli <paramref name="Array" /> zawiera tylko jeden element <see langword="UBound" /> zwraca wartość 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-376">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span>
          </span>
          <span data-ttu-id="eb596-377">Jeśli <paramref name="Array" /> nie ma żadnych elementów, na przykład, jeśli jest to ciąg o zerowej długości <see langword="UBound" /> zwraca wartość -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-377">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-378">Ponieważ indeksy tablicy rozpoczynają się od 0, długość wymiaru jest większa o jeden niż największa indeks dostępne dla tego wymiaru.</span><span class="sxs-lookup"><span data-stu-id="eb596-378">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="eb596-379">Dla tablicy o następujące wymiary `UBound` zwraca wartości w poniższej tabeli:</span><span class="sxs-lookup"><span data-stu-id="eb596-379">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="eb596-380">Wywołanie UBound</span><span class="sxs-lookup"><span data-stu-id="eb596-380">Call to UBound</span></span>|<span data-ttu-id="eb596-381">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="eb596-381">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="eb596-382">100</span><span class="sxs-lookup"><span data-stu-id="eb596-382">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="eb596-383">5</span><span class="sxs-lookup"><span data-stu-id="eb596-383">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="eb596-384">4</span><span class="sxs-lookup"><span data-stu-id="eb596-384">4</span></span>|  
  
 <span data-ttu-id="eb596-385">Można użyć `UBound` ustalenie łączną liczbę elementów w tablicy, ale muszą dostosować wartość zwraca go do konta w celu fakt, że indeksy dolne rozpoczynają się od 0.</span><span class="sxs-lookup"><span data-stu-id="eb596-385">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="eb596-386">W poniższym przykładzie oblicza całkowity rozmiar tablicy `a` w poprzednim przykładzie:</span><span class="sxs-lookup"><span data-stu-id="eb596-386">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="eb596-387">Wartość obliczana dla `total` jest 3030, czyli 101 * 6 * 5.</span><span class="sxs-lookup"><span data-stu-id="eb596-387">The value calculated for `total` is 3030, which is 101 * 6 * 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-388">W poniższym przykładzie użyto `UBound` funkcji, aby ustalić najwyższą dostępną wartość indeksu wskazanego wymiaru tablicy.</span><span class="sxs-lookup"><span data-stu-id="eb596-388">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eb596-389">
            <paramref name="Array" /> jest <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-389">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="eb596-390">
            <paramref name="Rank" /> jest mniejszy niż 1 lub <paramref name="Rank" /> jest większa niż rangę <paramref name="Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-390">
              <paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="eb596-391">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-391">Required.</span>
          </span>
          <span data-ttu-id="eb596-392">
            <see langword="Object" /> Zmienna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-392">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="eb596-393">Jeśli <see langword="Option Strict" /> jest <see langword="Off" />, można przekazać zmiennej typu danych z wyjątkiem struktury.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-393">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-394">Zwraca <see langword="Integer" /> wartość zawierającą klasyfikacji danych typu zmienną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-394">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-395">Zwraca <see langword="Integer" /> wartość zawierającą klasyfikacji danych typu zmienną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-395">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-396">Wartość całkowita zwrócony przez `VarType` jest elementem członkowskim <xref:Microsoft.VisualBasic.VariantType>.</span><span class="sxs-lookup"><span data-stu-id="eb596-396">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="eb596-397">W poniższej tabeli przedstawiono wartości zwracanych przez `VarType` dla przypadków specjalnych `VarName`.</span><span class="sxs-lookup"><span data-stu-id="eb596-397">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="eb596-398">Typ danych reprezentowanego przez `VarName`</span><span class="sxs-lookup"><span data-stu-id="eb596-398">Data type represented by `VarName`</span></span>|<span data-ttu-id="eb596-399">Wartość zwrócona przez `VarType`</span><span class="sxs-lookup"><span data-stu-id="eb596-399">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="eb596-400">Nothing</span><span class="sxs-lookup"><span data-stu-id="eb596-400">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="eb596-401">Wyliczenie</span><span class="sxs-lookup"><span data-stu-id="eb596-401">Enumeration</span></span>|<span data-ttu-id="eb596-402">Podstawowy typ danych (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, lub `ULong`)</span><span class="sxs-lookup"><span data-stu-id="eb596-402">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="eb596-403">Tablica</span><span class="sxs-lookup"><span data-stu-id="eb596-403">Array</span></span>|<span data-ttu-id="eb596-404">Bitowe lub typ elementu tablicy i `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="eb596-404">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="eb596-405">Tablicy tablic</span><span class="sxs-lookup"><span data-stu-id="eb596-405">Array of arrays</span></span>|<span data-ttu-id="eb596-406">Bitowe lub `VariantType.Object` i `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="eb596-406">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="eb596-407">Struktury (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="eb596-407">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="eb596-408">Nieznany</span><span class="sxs-lookup"><span data-stu-id="eb596-408">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="eb596-409">W poniższym przykładzie użyto `VarType` funkcja zwraca dane typu klasyfikacji informacji o kilku zmiennych.</span><span class="sxs-lookup"><span data-stu-id="eb596-409">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">
          <span data-ttu-id="eb596-410">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-410">Required.</span>
          </span>
          <span data-ttu-id="eb596-411">
            <see langword="String" /> zmienną, która zawiera nazwę typu, używany przez środowisko uruchomieniowe języka wspólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-411">
              <see langword="String" /> variable containing a type name used by the common language runtime.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eb596-412">Zwraca <see langword="String" /> wartość zawierającą nazwę danych Visual Basic typu zmienną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-412">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eb596-413">Zwraca <see langword="String" /> wartość zawierającą nazwę danych Visual Basic typu zmienną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eb596-413">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb596-414">`VbTypeName` Zwraca nazwę typu Visual Basic odpowiadający nazwę typu środowiska uruchomieniowego języka wspólnego.</span><span class="sxs-lookup"><span data-stu-id="eb596-414">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="eb596-415">Na przykład jeśli `UrtName` zawiera "Int32" lub "System.Int32" `VbTypeName` zwraca "Int".</span><span class="sxs-lookup"><span data-stu-id="eb596-415">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="eb596-416">Jeśli `VbTypeName` nie rozpoznaje wartość `UrtName`, zwraca `Nothing` (nie ciąg "Nothing").</span><span class="sxs-lookup"><span data-stu-id="eb596-416">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="eb596-417">Nazwa typu w `UrtName` można uzyskać z różnych źródeł, na przykład <xref:System.Reflection.MemberInfo.Name%2A> właściwości w <xref:System.Reflection.MemberInfo> tablicę <xref:System.Type> klasy.</span><span class="sxs-lookup"><span data-stu-id="eb596-417">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb596-418">W poniższym przykładzie użyto `VbTypeName` funkcja zwraca nazwy typów danych w przypadku kilku zmiennych.</span><span class="sxs-lookup"><span data-stu-id="eb596-418">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>