<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ae76229b66a7a71d521a64a406df63f7e7cf230" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317490" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Information" /> Moduł zawiera procedury używane do zwracania, testowania lub weryfikowania informacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które zawierają informacje o błędzie, weryfikują dane, określają granice tablicy i pobierają informacje o typie danych i kolorach.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `VbTypeName` aby zwrócić nazwy typów danych dla kilku zmiennych.  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">Informacja i interakcja — Podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md">Typy danych — podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md">Deklaracje i stałe — podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji. Tylko do odczytu.</summary>
        <returns>Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji. Tylko do odczytu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli Visual Basic napotka numery wierszy, zwraca 0.  
  
   
  
## Examples  
 Ten przykład używa `Erl` właściwości, aby wskazać numer wiersza.  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zawiera informacje o błędach czasu wykonywania.</summary>
        <returns>Zawiera informacje o błędach czasu wykonywania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwości `Err` obiektu są ustawiane przez generator błędu-Visual Basic, obiektu lub programisty.  
  
 Gdy wystąpi błąd czasu wykonywania, właściwości `Err` obiektu są wypełniane informacjami, które jednoznacznie identyfikują błąd i można użyć do obsłużenia błędu. Aby wygenerować błąd czasu wykonywania w kodzie, użyj `Raise` metody.  
  
 `Resume Next` `Exit Property` `Exit Function` `Exit Sub`Właściwości obiektu są resetowane do ciągów zero lub o zerowej długości ("") po instrukcji,, lub w ramach procedury obsługi błędu. `Err` Użycie jakiejkolwiek formy `Resume` instrukcji poza procedurą obsługi błędów nie spowoduje `Err` zresetowania właściwości obiektu. Możesz użyć `Clear` metody do jawnego resetowania `Err`.  
  
 Użyj metody zamiast instrukcji, `Error` aby generować błędy w czasie wykonywania dla błędów systemowych i modułów klas. `Raise` Decyzja o tym, `Raise` czy metoda w innym kodzie jest używana, zależy od rozbudowanych informacji, które mają zostać zwrócone.  
  
 `Err` Obiekt jest obiektem wewnętrznym z zakresem globalnym. W związku z tym nie trzeba tworzyć wystąpienia go w kodzie.  
  
   
  
## Examples  
 W tym przykładzie zastosowano właściwości `Err` obiektu w konstruowaniu okna dialogowego komunikatu o błędzie. Należy zauważyć, że jeśli najpierw `Clear` używasz metody, podczas generowania Visual Basic błąd `Raise` przy użyciu metody Visual Basic wartości domyślne `Err` stają się właściwościami obiektu.  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md">Exit — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md">Resume — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md">Komunikaty o błędach (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Wymagany. <see langword="Object" />zmiennej.</param>
        <summary><see langword="Boolean" /> Zwraca wartość wskazującą, czy zmienna wskazuje tablicę.</summary>
        <returns><see langword="Boolean" /> Zwraca wartość wskazującą, czy zmienna wskazuje tablicę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray`zwraca `True` czy zmienna wskazuje tablicę; w przeciwnym razie zwraca wartość `False`. `IsArray`jest szczególnie przydatna w przypadku obiektów, które mogą zawierać tablice.  
  
   
  
## Examples  
 Ten przykład używa funkcji `IsArray` , aby sprawdzić, czy kilka zmiennych odwołuje się do tablicy.  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md">Tablice w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagany. <see langword="Object" />wyrażenia.</param>
        <summary>Zwraca wartość wskazującą czy wyrażenie reprezentuje prawidłową <see langword="Date" /> wartość. <see langword="Boolean" /></summary>
        <returns>Zwraca wartość wskazującą czy wyrażenie reprezentuje prawidłową <see langword="Date" /> wartość. <see langword="Boolean" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate`zwraca `True` wartość `Expression` , jeśli jest <xref:System.DateTime> typem danych lub można ją przekonwertować na nią; w przeciwnym razie zwraca `False`wartość.  
  
 Typ <xref:System.DateTime> danych zawiera zarówno wartość daty, jak i wartość czasu. `IsDate`zwraca `True` wartość `Expression` , jeśli reprezentuje prawidłową datę, prawidłowy czas lub prawidłową datę i godzinę.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `IsDate` aby określić, czy kilka zmiennych reprezentuje prawidłowe <xref:System.DateTime> wartości.  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 W powyższym przykładzie `IsDate` zwraca `True` dla pierwszych czterech wywołań i `False` dla ostatniego wywołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Object" />wyrażenia.</param>
        <summary>Zwraca wartość wskazującą, <see cref="T:System.DBNull" /> czy wyrażenie szacuje klasę. <see langword="Boolean" /></summary>
        <returns>Zwraca wartość wskazującą, <see cref="T:System.DBNull" /> czy wyrażenie szacuje klasę. <see langword="Boolean" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull`zwraca `True` <xref:System.DBNull> czy `IsDBNull` typ danych `False`jest obliczany dla typu; w przeciwnym razie zwraca. `Expression`  
  
 <xref:System.DBNull?displayProperty=nameWithType> Wartość wskazuje `Object` , że reprezentuje brakujące lub nieistniejące dane. `DBNull`nie jest taka sama jak `Nothing`, co oznacza, że zmienna nie została jeszcze zainicjowana. `DBNull`nie jest również taka sama jak ciąg o zerowej długości (`""`), który jest czasami określany jako ciąg o wartości null.  
  
   
  
## Examples  
 Ten przykład używa funkcji `IsDBNull` , aby określić, czy zmienna szacuje `DBNull`wartość.  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagane. <see langword="Object" />wyrażenia.</param>
        <summary><see langword="Boolean" /> Zwraca wartość wskazującą, czy wyrażenie jest typu wyjątku.</summary>
        <returns><see langword="Boolean" /> Zwraca wartość wskazującą, czy wyrażenie jest typu wyjątku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError`zwraca `True` czy wyrażenie `Object` reprezentuje <xref:System> zmienną, która pochodzi od klasywprzestrzeninazw.<xref:System.Exception>  
  
 Wyjątek pochodzący z <xref:System.Exception?displayProperty=nameWithType> można przechwycić `Try...Catch...Finally` za pomocą instrukcji.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `IsError` aby sprawdzić, czy wyrażenie reprezentuje wyjątek systemowy.  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagane. <see langword="Object" />wyrażenia.</param>
        <summary><see langword="Boolean" /> Zwraca wartość wskazującą, czy do wyrażenia nie jest przypisany obiekt.</summary>
        <returns><see langword="Boolean" /> Zwraca wartość wskazującą, czy do wyrażenia nie jest przypisany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing`zwraca `True` czy wyrażenie reprezentuje zmienną obiektu, która aktualnie nie ma przypisanego obiektu; w przeciwnym razie zwraca wartość `False`.  
  
 `IsNothing`jest przeznaczony do pracy na typach referencyjnych. Typ wartości nie może zawierać wartości [Nothing](~/docs/visual-basic/language-reference/nothing.md) i przywraca jej wartość domyślną, jeśli zostanie do niej przypisany `Nothing` . W przypadku podania typu wartości w `Expression`, `IsNothing` program zawsze `False`zwraca wartość.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `IsNothing` aby określić, czy zmienna obiektu jest skojarzona z dowolnym wystąpieniem obiektu.  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Typy wartości i odwołań</related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Object" />wyrażenia.</param>
        <summary><see langword="Boolean" /> Zwraca wartość wskazującą, czy wyrażenie może być oceniane jako liczba.</summary>
        <returns><see langword="Boolean" /> Zwraca wartość wskazującą, czy wyrażenie może być oceniane jako liczba.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric`zwraca `True` `Boolean`czy Typdanych`Byte` to,`UInteger` ,, ,,`Double`,,, ,`Single` `Integer` `Long` `Decimal` `Expression` `SByte` `Short` , `ULong`lub .`UShort` Zwraca `True` również wtedy `Char`, `Expression` gdy jest, `String`lub `Object` można pomyślnie przekonwertować na liczbę. `Expression`może zawierać znaki niebędące cyframi. `IsNumeric`zwraca `True` wartość `Expression` , jeśli jest ciągiem zawierającym prawidłową liczbę szesnastkową lub ósemkową. `IsNumeric`zwraca również `True` wartość `Expression` , jeśli zawiera prawidłowe wyrażenie liczbowe zaczynające się od znaku + lub-lub zawiera przecinki.  
  
 `IsNumeric`zwraca `False` wartość `Expression` , jeśli jest typem `Date`danych. `False` `Expression` Zwraca ,`Char`jeśli jest, lubnie`Object` można pomyślnie przekonwertować na liczbę. `String`  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `IsNumeric` aby określić, czy zawartość zmiennej może być oceniona jako liczba.  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Object" />wyrażenia.</param>
        <summary><see langword="Boolean" /> Zwraca wartość wskazującą, czy wyrażenie daje w wyniku typ referencyjny.</summary>
        <returns><see langword="Boolean" /> Zwraca wartość wskazującą, czy wyrażenie daje w wyniku typ referencyjny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference`zwraca `True` wartość `Expression` , jeśli reprezentuje typ referencyjny, taki jak wystąpienie klasy, `String` typ lub tablica dowolnego typu; w przeciwnym razie zwraca wartość `False`.  
  
 Typ odwołania zawiera wskaźnik do danych przechowywanych w innym miejscu w pamięci. Typ wartości zawiera własne dane.  
  
   
  
## Examples  
 Ten przykład używa funkcji `IsReference` , aby sprawdzić, czy kilka zmiennych odwołuje się do typów referencyjnych.  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 W poprzednim przykładzie pierwsze trzy wywołania `IsReference` zwracają. `True` Ostatnie wywołanie zwraca `False`, ponieważ `Integer` jest typem wartości, a nie typem referencyjnym.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Typy wartości i odwołań</related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Wymagana. Tablica dowolnego typu danych. Tablica, w której ma zostać znaleziony najniższy możliwy indeks dolny wymiaru.</param>
        <param name="Rank">Opcjonalny. <see langword="Integer" />. Wymiar, dla którego ma zostać zwrócony najniższy możliwy indeks dolny. Użyj 1 dla pierwszego wymiaru, 2 dla drugiego i tak dalej. W <paramref name="Rank" /> przypadku pominięcia przyjmowana jest wartość 1.</param>
        <summary>Zwraca najniższy dostępny indeks dolny dla wskazanego wymiaru tablicy.</summary>
        <returns><see langword="Integer" />. Najniższa wartość, którą może zawierać indeks dolny określonego wymiaru. <see langword="LBound" />zawsze zwraca wartość 0, o <paramref name="Array" /> ile została zainicjowana, nawet jeśli nie ma elementów, na przykład jeśli jest ciągiem o zerowej długości. Jeśli <paramref name="Array" /> jest <see langword="Nothing" />, zgłasza<see langword="LBound" /> . <see cref="T:System.ArgumentNullException" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ indeksy dolne tablicy zaczynają się od 0, najniższy dostępny indeks dolny dla każdego wymiaru jest zawsze równy 0.  
  
 W przypadku tablicy o następujących wymiarach `LBound` zwraca wartości z poniższej tabeli:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Wywołanie metody LBound|Wartość zwracana|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `LBound` aby określić najniższy dostępny indeks dolny dla wskazanego wymiaru tablicy.  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" />mniejsze niż 1 lub <paramref name="Rank" /> większe niż <paramref name="Array" />ranga.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim, instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">Wymagana. Liczba całkowita z zakresu 0-15.</param>
        <summary><see langword="Integer" /> Zwraca wartość reprezentującą kod koloru RGB odpowiadający podanemu numerowi koloru.</summary>
        <returns><see langword="Integer" /> Zwraca wartość reprezentującą kod koloru RGB odpowiadający podanemu numerowi koloru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozpoczynając od najmniej znaczącego bajtu, zwracana wartość określa czerwone, zielone i niebieskie wartości używane do ustawiania odpowiedniego koloru w systemie RGB używanym przez język Visual Basic.  
  
 `Color` Argument ma te ustawienia.  
  
|Wartość liczbowa|Kolor|Wartość liczbowa|Kolor|  
|------------|-----------|------------|-----------|  
|0|Czarny|8|Szary|  
|1|Niebieski|9|Jasnoniebieski|  
|2|Znacznika|10|Jasnozielony|  
|3|Obecne|11|Jasnoniebieski|  
|4|Czerwony|12|Czerwona|  
|5|Udział|13|Jasnozielony|  
|6|Kryje|14|Jasnoniebieski|  
|7|Biały|15|Jasne białe|  
  
   
  
## Examples  
 W tym przykładzie `QBColor` funkcja służy do zmiany koloru wskazanego przez `colorInteger`. `QBColor`akceptuje wartości całkowite z zakresu od 0 do 15.  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Color" />wykracza poza zakres od 0 do 15 włącznie.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">Wymagana. <see langword="Integer" />w zakresie 0-255, włącznie, reprezentujące intensywność składnika czerwieni koloru.</param>
        <param name="Green">Wymagany. <see langword="Integer" />w zakresie 0-255, włącznie, reprezentujące intensywność zielonego składnika koloru.</param>
        <param name="Blue">Wymagane. <see langword="Integer" />w zakresie 0-255, włącznie, reprezentujące intensywność niebieskiego składnika koloru.</param>
        <summary><see langword="Integer" /> Zwraca wartość reprezentującą wartość koloru RGB z zestawu czerwonych, zielonych i niebieskich składników koloru.</summary>
        <returns><see langword="Integer" /> Zwraca wartość reprezentującą wartość koloru RGB z zestawu czerwonych, zielonych i niebieskich składników koloru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metody i właściwości aplikacji, które akceptują specyfikację koloru, oczekują, że specyfikacja jest liczbą reprezentującą wartość koloru RGB. Wartość koloru RGB określa względne intensywność czerwony, zielony i niebieski, aby spowodować wyświetlenie określonego koloru.  
  
 Jeśli wartość któregokolwiek argumentu `RGB` jest większa niż 255, jest używany program 255.  
  
 Poniższa tabela zawiera listę standardowych kolorów oraz wartości czerwony, zielony i niebieski, które zawierają.  
  
|Kolor|Czerwona wartość|Zielona wartość|Niebieska wartość|  
|-----------|---------------|-----------------|----------------|  
|Czarny|0|0|0|  
|Niebieski|0|0|255|  
|Znacznika|0|255|0|  
|Obecne|0|255|255|  
|Czerwony|255|0|0|  
|Udział|255|0|255|  
|Kryje|255|255|0|  
|Biały|255|255|255|  
  
   
  
## Examples  
 Ten przykład pokazuje, `RGB` jak funkcja jest używana do zwrócenia liczby całkowitej `RGB` reprezentującej wartość koloru.  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Green" />, <paramref name="Blue" />, lub <paramref name="Red" /> wykracza poza zakres od 0 do 255 włącznie.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">Wymagana. <see langword="String" /> Zmienna zawierająca nazwę typu Visual Basic.</param>
        <summary><see langword="String" /> Zwraca wartość zawierającą systemową nazwę typu danych zmiennej.</summary>
        <returns><see langword="String" /> Zwraca wartość zawierającą systemową nazwę typu danych zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName`zwraca w pełni kwalifikowaną nazwę typu środowiska uruchomieniowego języka wspólnego (CLR) odpowiadającą nazwie typu Visual Basic. Na przykład jeśli `VbName` zawiera ciąg "date", `SystemTypeName` zwraca wartość "System. DateTime". Jeśli `SystemTypeName` nie rozpoznaje `VbName`wartości, zwraca `Nothing` (nie ciąg "Nothing").  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `SystemTypeName` aby zwrócić nazwy typów danych dla kilku zmiennych.  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Wymagana. <see langword="Object" />zmiennej. Jeśli <see langword="Option Strict" /> jest<see langword="Off" />, można przekazać zmienną dowolnego typu danych z wyjątkiem struktury.</param>
        <summary><see langword="String" /> Zwraca wartość zawierającą informacje o typie danych zmiennej.</summary>
        <returns><see langword="String" /> Zwraca wartość zawierającą informacje o typie danych zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono `String` wartości zwracane przez `TypeName` program dla innej zawartości `VarName`.  
  
|`VarName`Contents|Zwrócony ciąg|  
|------------------------|---------------------|  
|Typ 16- `True` bitowy `False` lub wartość|Typu|  
|8-bitowy typ wartości binarnej|Bajc|  
|Typ wartości 16-bitowej znaku|Delikatn|  
|64-bitowy typ wartości daty i godziny|Dniu|  
|Typ referencyjny wskazujący brak lub nieistniejące dane|Ona|  
|128-bitowy typ wartości liczbowej stałej zmiennoprzecinkowej|Dokładności|  
|64-bitowy typ wartości liczbowej zmiennoprzecinkowej|Double|  
|32-bitowy typ wartości całkowitej|Całkowitą|  
|Typ odwołania wskazujący Niewyspecjalizowany obiekt|Stream|  
|Typ referencyjny wskazujący wyspecjalizowany obiekt utworzony z klasy *objectClass*|"*objectClass*"|  
|64-bitowy typ wartości całkowitej|Długo|  
|Typ odwołania bez aktualnie przypisanego obiektu|Wartość|  
|8-bitowy typ wartości ze znakiem liczby całkowitej|SByte|  
|16-bitowy typ wartości całkowitej|Wybierak|  
|32-bitowy typ wartości liczbowej zmiennoprzecinkowej|Wiersz|  
|Typ odwołania wskazujący ciąg znaków 16-bitowych|Parametry|  
|32-bitowy typ wartości całkowitej bez znaku|UInteger —|  
|64-bitowy typ wartości całkowitej bez znaku|ULong|  
|16-bitowy typ wartości całkowitej bez znaku|"UShort"|  
  
 Jeśli `VarName` jest tablicą, zwracany ciąg może być dowolnym z ciągów w powyższej tabeli z dołączonymi pustymi nawiasami. Na przykład, jeśli `VarName` wskazuje tablicę liczb całkowitych, `TypeName` zwraca wartość "Integer ()".  
  
 Gdy `TypeName` zwraca nazwę typu referencyjnego, takiego jak Klasa, zwraca tylko samą nazwę, a nie nazwę kwalifikowaną. Na przykład, jeśli `VarName` wskazuje obiekt klasy <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` zwraca "PaperSource". Należy pamiętać, że jeśli zmienna jest zadeklarowana jako o określonym typie klasy, ale nie ma przypisanego obiektu, `TypeName` zwraca wartość "Nothing".  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `TypeName` aby zwrócić informacje o typie danych kilku zmiennych.  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Wymagany. Tablica dowolnego typu danych. Tablica, w której ma znajdować się najwyższy możliwy indeks dolny wymiaru.</param>
        <param name="Rank">Opcjonalny. <see langword="Integer" />. Wymiar, dla którego ma zostać zwrócony najwyższy możliwy indeks dolny. Użyj 1 dla pierwszego wymiaru, 2 dla drugiego i tak dalej. W <paramref name="Rank" /> przypadku pominięcia przyjmowana jest wartość 1.</param>
        <summary>Zwraca najwyższy dostępny indeks dolny dla wskazanego wymiaru tablicy.</summary>
        <returns><see langword="Integer" />. Najwyższa wartość, którą może zawierać indeks dolny określonego wymiaru. Jeśli <paramref name="Array" /> ma tylko jeden element, <see langword="UBound" /> zwraca 0. Jeśli <paramref name="Array" /> nie ma żadnych elementów, na przykład jeśli jest ciągiem o zerowej długości, <see langword="UBound" /> zwraca-1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ indeksy dolne tablicy zaczynają się od 0, długość wymiaru jest większa o jeden niż najwyższy dostępny indeks dolny dla tego wymiaru.  
  
 W przypadku tablicy o następujących wymiarach `UBound` zwraca wartości z poniższej tabeli:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Wywołanie do programu UBound|Wartość zwracana|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 Możesz użyć `UBound` , aby określić łączną liczbę elementów w tablicy, ale należy dostosować wartość zwracaną do konta, ponieważ indeksy dolne zaczynają się od 0. Poniższy przykład oblicza łączny rozmiar tablicy `a` w poprzednim przykładzie:  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 Wartość obliczona dla `total` to 3030, czyli 101 * 6 * 5.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `UBound` aby określić najwyższy dostępny indeks dolny dla wskazanego wymiaru tablicy.  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" />jest mniejsza niż 1 lub <paramref name="Rank" /> jest większa niż <paramref name="Array" />ranga.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim, instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Wymagana. <see langword="Object" />zmiennej. Jeśli <see langword="Option Strict" /> jest<see langword="Off" />, można przekazać zmienną dowolnego typu danych z wyjątkiem struktury.</param>
        <summary><see langword="Integer" /> Zwraca wartość zawierającą klasyfikację typu danych zmiennej.</summary>
        <returns><see langword="Integer" /> Zwraca wartość zawierającą klasyfikację typu danych zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość całkowita zwrócona przez `VarType` to element członkowski. <xref:Microsoft.VisualBasic.VariantType>  
  
 W poniższej tabeli przedstawiono wartości zwracane przez `VarType` specjalne `VarName`przypadki.  
  
|Typ danych reprezentowany przez`VarName`|Wartość zwrócona przez`VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|Wyliczenie|Typ danych bazowych`SByte`( `Byte`, `Short` `UShort` ,`Integer`,,,, ,lub`ULong`) `Long` `UInteger`|  
|Array|Bitowe lub typu elementu tablicy i`VariantType.Array`|  
|Tablica tablic|Bitowe lub z `VariantType.Object` i`VariantType.Array`|  
|Struktura (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|Nieznany|`VariantType.Object`|  
  
   
  
## Examples  
 W poniższym przykładzie `VarType` funkcja zwraca informacje o klasyfikacji typu danych dotyczące kilku zmiennych.  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">Wymagana. <see langword="String" />Zmienna zawierająca nazwę typu używaną przez środowisko uruchomieniowe języka wspólnego.</param>
        <summary><see langword="String" /> Zwraca wartość zawierającą Visual Basicą nazwę typu danych zmiennej.</summary>
        <returns><see langword="String" /> Zwraca wartość zawierającą Visual Basicą nazwę typu danych zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName`Zwraca nazwę typu Visual Basic odpowiadającą nazwie typu środowiska uruchomieniowego języka wspólnego. Na przykład, jeśli `UrtName` zawiera ciąg "Int32" lub "System. Int32" `VbTypeName` , zwraca "Integer". Jeśli `VbTypeName` nie rozpoznaje `UrtName`wartości, zwraca `Nothing` (nie ciąg "Nothing").  
  
 Nazwa typu w `UrtName` można uzyskać z różnych źródeł, na przykład <xref:System.Reflection.MemberInfo.Name%2A> z właściwości <xref:System.Type> w <xref:System.Reflection.MemberInfo> tablicy klasy.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `VbTypeName` aby zwrócić nazwy typów danych dla kilku zmiennych.  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
