<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1078adb483e226f7a039b4efdff277139946d6a5" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34173941" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Information" /> Moduł zawiera zwracać, testowania lub sprawdź informacje dotyczące procedur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słów kluczowych języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które zapewniają informacje o błędzie, sprawdzanie poprawności danych, określić granice tablicy i pobierać informacje dotyczące danych typu i kolor.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `VbTypeName` funkcja zwraca nazwy typów danych w przypadku kilku zmiennych.  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji. Tylko do odczytu.</summary>
        <returns>Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji. Tylko do odczytu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli Visual Basic napotka bez numerów wierszy, zwraca wartość 0.  
  
   
  
## Examples  
 W tym przykładzie użyto `Erl` właściwości, aby wskazać, numer wiersza.  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zawiera informacje na temat błędów czasu wykonywania.</summary>
        <returns>Zawiera informacje na temat błędów czasu wykonywania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwości `Err` obiektu są ustawiane przez generator Błąd — Visual Basic, obiekt lub programistę.  
  
 Gdy wystąpi błąd wykonania, właściwości `Err` obiektu są wypełnione informacjami, które jednoznacznie identyfikuje błąd i służy do obsługi błędu. Aby wygenerować błędów czasu wykonywania w kodzie, należy użyć `Raise` metody.  
  
 `Err` Właściwości obiektu są resetowane do zera lub ciąg o zerowej długości ("") po `Exit Sub`, `Exit Function`, `Exit Property`, lub `Resume Next` instrukcji w ramach procedury obsługi błędów. Przy użyciu dowolnej formy `Resume` instrukcję poza procedury obsługi błędów nie spowoduje zresetowanie `Err` właściwości obiektu. Można użyć `Clear` metoda jawnie `Err`.  
  
 Użyj `Raise` metody zamiast `Error` instrukcji, aby generować błędy środowiska wykonawczego błędów systemu i klasy modułów. Decyzję o tym, czy używać `Raise` metody w innym kodzie zależy od siłę informacji do zwrócenia.  
  
 `Err` Obiekt jest obiektem wewnętrzne o zakresie globalnym. W związku z tym nie należy utworzyć wystąpienie w kodzie.  
  
   
  
## Examples  
 W tym przykładzie użyto właściwości `Err` obiektu przy konstruowaniu okno dialogowe komunikat o błędzie. Zwróć uwagę, że jeśli używasz `Clear` metody pierwszego, gdy użytkownik generuje błąd w Visual Basic z `Raise` metody, właściwości stają się wartościami domyślnymi Visual Basic `Err` obiektu.  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Wymagana. <see langword="Object" /> Zmienna.</param>
        <summary>Zwraca <see langword="Boolean" /> wartość wskazującą, czy zmienna odwołuje się do tablicy.</summary>
        <returns>Zwraca <see langword="Boolean" /> wartość wskazującą, czy zmienna odwołuje się do tablicy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray` Zwraca `True` czy zmienna odwołuje się do tablicy; w przeciwnym razie zwraca `False`. `IsArray` jest to szczególnie przydatne w przypadku obiektów, które mogą zawierać tablic.  
  
   
  
## Examples  
 W tym przykładzie użyto `IsArray` funkcji w celu sprawdzenia, jeśli wiele zmiennych odwołują się do tablicy.  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Object" /> Wyrażenie.</param>
        <summary>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie reprezentuje prawidłową <see langword="Date" /> wartość.</summary>
        <returns>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie reprezentuje prawidłową <see langword="Date" /> wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate` Zwraca `True` Jeśli `Expression` jest <xref:System.DateTime> danych wpisz lub może być przekonwertowany do niego; w przeciwnym razie zwraca `False`.  
  
 <xref:System.DateTime> — Typ danych zawiera zarówno wartości daty i godziny. `IsDate` Zwraca `True` Jeśli `Expression` reprezentuje prawidłową datę, czas ważności, lub prawidłową datę i godzinę.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `IsDate` funkcji, aby określić, czy kilku zmiennych reprezentuje poprawnej <xref:System.DateTime> wartości.  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 W powyższym przykładzie `IsDate` zwraca `True` pierwsze cztery wywołań i `False` dla ostatniego wywołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Object" /> Wyrażenie.</param>
        <summary>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie ma <see cref="T:System.DBNull" /> klasy.</summary>
        <returns>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie ma <see cref="T:System.DBNull" /> klasy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull` Zwraca `True` Jeśli typ danych miary `Expression` daje w wyniku <xref:System.DBNull> typu; w przeciwnym razie `IsDBNull` zwraca `False`.  
  
 <xref:System.DBNull?displayProperty=nameWithType> Wartość wskazuje, że `Object` reprezentuje dane brakujące lub nie istnieje. `DBNull` nie jest taka sama jak `Nothing`, co oznacza, że zmienna nie została jeszcze zainicjowana. `DBNull` Ponadto nie jest taka sama jak ciąg o zerowej długości (`""`), który jest czasami nazywany pusty ciąg.  
  
   
  
## Examples  
 W tym przykładzie użyto `IsDBNull` funkcji, aby określić, czy zmienna daje w wyniku `DBNull`.  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Object" /> Wyrażenie.</param>
        <summary>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie jest typu wyjątku.</summary>
        <returns>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie jest typu wyjątku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError` Zwraca `True` Jeśli wyrażenie reprezentuje `Object` zmiennej, która jest pochodną <xref:System.Exception> klasy w <xref:System> przestrzeni nazw.  
  
 Wystąpił wyjątek, która jest pochodną <xref:System.Exception?displayProperty=nameWithType> być przechwycony z `Try...Catch...Finally` instrukcje.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `IsError` funkcji w celu sprawdzenia, czy wyrażenie reprezentuje wyjątek systemu.  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Object" /> Wyrażenie.</param>
        <summary>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie nie ma żadnego obiektu przypisane do niej.</summary>
        <returns>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie nie ma żadnego obiektu przypisane do niej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing` Zwraca `True` Jeśli wyrażenie reprezentuje zmienną obiektu, który obecnie nie obiekt przypisanej do niego; w przeciwnym razie, zwraca `False`.  
  
 `IsNothing` jest przeznaczony do pracy w typach referencyjnych. Typ wartości nie może zawierać wartość i zostanie przywrócona wartość domyślną, po przypisaniu `Nothing` do niego. Jeśli podasz typu wartości w `Expression`, `IsNothing` zawsze zwraca `False`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `IsNothing` funkcji, aby określić, czy zmienna obiektu jest skojarzony z dowolnego wystąpienia obiektu.  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Object" /> Wyrażenie.</param>
        <summary>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie może przyjąć jako liczby.</summary>
        <returns>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie może przyjąć jako liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric` Zwraca `True` Jeśli typ danych miary `Expression` jest `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, lub `UShort`. Również zwraca `True` Jeśli `Expression` jest `Char`, `String`, lub `Object` które mogą być pomyślnie przekonwertowane na liczbę. `Expression` może zawierać znaków innych niż alfanumeryczne. `IsNumeric` Zwraca `True` Jeśli `Expression` jest ciągiem, który zawiera prawidłową liczbę szesnastkową lub ósemkowo. `IsNumeric` Zwraca również wartość `True` Jeśli `Expression` zawiera prawidłowe wyrażenie liczbowe zaczyna się od + - znak lub zawiera przecinkami.  
  
 `IsNumeric` Zwraca `False` Jeśli `Expression` jest typu danych `Date`. Zwraca `False` Jeśli `Expression` jest `Char`, `String`, lub `Object` którego nie można pomyślnie przekonwertować na liczbę.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `IsNumeric` funkcji, aby określić, czy zawartość zmiennej może przyjąć jako liczby.  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Object" /> Wyrażenie.</param>
        <summary>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie obliczane do typu referencyjnego.</summary>
        <returns>Zwraca <see langword="Boolean" /> wartość wskazującą, czy wyrażenie obliczane do typu referencyjnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference` Zwraca `True` Jeśli `Expression` reprezentuje typ referencyjny, takich jak do wystąpienia klasy `String` typu lub tablicy dowolnego typu; w przeciwnym razie zwraca `False`.  
  
 Typ referencyjny zawiera wskaźnik do danych przechowywanych w pamięci w innym miejscu. Typ wartości zawiera własnych danych.  
  
   
  
## Examples  
 W tym przykładzie użyto `IsReference` funkcji w celu sprawdzenia, jeśli wiele zmiennych odwołują się do typów referencyjnych.  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 W powyższym przykładzie pierwsze trzy wywołań `IsReference` zwracać `True`. Zwraca ostatni wywołania `False`, ponieważ `Integer` jest to typ wartości nie jest typem odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Wymagana. Tablica dowolny typ danych. Tablica, w którym ma zostać odnaleziona najniższy możliwa wartość indeksu wymiaru.</param>
        <param name="Rank">Opcjonalna. <see langword="Integer" />. Wymiar, dla którego najniższy możliwe indeks dolny jest zwracana. Użyj wartości 1 wymiar, 2 sekundy i tak dalej. Jeśli <c>rangę</c> jest pominięty, przyjmowana jest wartość 1.</param>
        <summary>Zwraca najmniejsza dostępną wartość indeksu wskazanego wymiaru tablicy.</summary>
        <returns>
          <see langword="Integer" />. Najniższa wartość może zawierać indeks dla określonego wymiaru. <see langword="LBound" /> zawsze zwraca wartość 0, tak długo, jak <paramref name="Array" /> został zainicjowany, nawet jeśli go nie ma elementów, na przykład, jeśli jest to ciąg o zerowej długości. Jeśli <paramref name="Array" /> jest <see langword="Nothing" />, <see langword="LBound" /> zgłasza <see cref="T:System.ArgumentNullException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ indeksy tablicy rozpoczynają się od 0, najmniejsza dostępną wartość indeksu każdy wymiar jest zawsze 0.  
  
 Dla tablicy o następujące wymiary `LBound` zwraca wartości w poniższej tabeli:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Wywołanie LBound|Wartość zwracana|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 W poniższym przykładzie użyto `LBound` funkcji, aby określić najmniejsza dostępną wartość indeksu wskazanego wymiaru tablicy.  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Array" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException">
          <paramref name="Rank" /> mniej niż 1 lub <paramref name="Rank" /> jest większa niż rangę <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">Wymagana. Liczba całkowita z zakresu 0 – 15.</param>
        <summary>Zwraca <see langword="Integer" /> wartość reprezentującą kod kolor RGB odpowiadający określonym kolor numer.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość reprezentującą kod kolor RGB odpowiadający określonym kolor numer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Począwszy od najmniej znaczący bajt, zwracana wartość określa wartości czerwony, zielonemu i niebieskiemu służy do określania odpowiednich kolorów w systemie RGB używanych w języku Visual Basic.  
  
 `Color` Argument ma następujące ustawienia.  
  
|Wartość liczbowa|Kolor|Wartość liczbowa|Kolor|  
|------------|-----------|------------|-----------|  
|0|czarne|8|Szary|  
|1|niebieski|9|Niebieski lekkich|  
|2|zielony|10|Jasnozielony|  
|3|błękitny|11|Jasnobłękitny|  
|4|czerwony|12|Czerwonego światła|  
|5|amarantowy|13|Jasnoamarantowy|  
|6|żółty|14|Żółty lekkich|  
|7|biały|15|Jasny biały|  
  
   
  
## Examples  
 W tym przykładzie użyto `QBColor` funkcji, aby zmienić kolor na wskazanych przez `colorInteger`. `QBColor` akceptuje wartości całkowite od 0 do 15.  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Color" /> znajduje się poza zakresem od 0 do 15 włącznie.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">Wymagana. <see langword="Integer" /> w zakresie od 0 do 255 włącznie, który reprezentuje intensywność składnika czerwony koloru.</param>
        <param name="Green">Wymagana. <see langword="Integer" /> w zakresie od 0 do 255 włącznie, który reprezentuje intensywność składnika zielony koloru.</param>
        <param name="Blue">Wymagana. <see langword="Integer" /> w zakresie od 0 do 255 włącznie, który reprezentuje intensywność składnika niebieski koloru.</param>
        <summary>Zwraca <see langword="Integer" /> wartość odpowiadająca wartości kolorów RGB z zestawem składników kolor czerwony, zielonemu i niebieskiemu.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość odpowiadająca wartości kolorów RGB z zestawem składników kolor czerwony, zielonemu i niebieskiemu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacja metody i właściwości, które akceptują określenia koloru oczekiwać specyfikacji to być liczba reprezentująca RGB wartości koloru. Wartości kolorów RGB określa względną intensywność czerwonemu, zielonemu i niebieskiego w celu wyświetlenia określonych kolor, który będzie wyświetlany.  
  
 Jeśli wartość dowolnego argument `RGB` jest większa niż 255 255 jest używany.  
  
 W poniższej tabeli wymieniono niektóre standardowe kolory i czerwony, zielonemu i niebieskiemu wartości, które obejmują one.  
  
|Kolor|Czerwony|Zielony|Niebieski|  
|-----------|---------------|-----------------|----------------|  
|czarne|0|0|0|  
|niebieski|0|0|255|  
|zielony|0|255|0|  
|błękitny|0|255|255|  
|czerwony|255|0|0|  
|amarantowy|255|0|255|  
|żółty|255|255|0|  
|biały|255|255|255|  
  
   
  
## Examples  
 W tym przykładzie pokazano sposób `RGB` funkcja służy do zwracania na liczbę całkowitą reprezentującą `RGB` wartości koloru.  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Green" />, <paramref name="Blue" />, lub <paramref name="Red" /> znajduje się poza zakresem od 0 do 255.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">Wymagana. A <see langword="String" /> zmienną, która zawiera nazwę typu Visual Basic.</param>
        <summary>Zwraca <see langword="String" /> zawierający nazwę systemu danych typu zmiennej.</summary>
        <returns>Zwraca <see langword="String" /> zawierający nazwę systemu danych typu zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName` Zwraca w pełni kwalifikowana wspólnego języka środowiska uruchomieniowego (języka wspólnego CLR) typu nazwa odpowiadającego nazwie typu Visual Basic. Na przykład jeśli `VbName` zawiera "Date" `SystemTypeName` zwraca "System.DateTime". Jeśli `SystemTypeName` nie rozpoznaje wartość `VbName`, zwraca `Nothing` (nie ciąg "Nothing").  
  
   
  
## Examples  
 W poniższym przykładzie użyto `SystemTypeName` funkcja zwraca nazwy typów danych w przypadku kilku zmiennych.  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Wymagana. <see langword="Object" /> Zmienna. Jeśli <see langword="Option Strict" /> jest <see langword="Off" />, można przekazać zmiennej typu danych z wyjątkiem struktury.</param>
        <summary>Zwraca <see langword="String" /> zawierający informacje o typie danych o zmiennej.</summary>
        <returns>Zwraca <see langword="String" /> zawierający informacje o typie danych o zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono `String` wartości zwracanych przez `TypeName` dla innej zawartości `VarName`.  
  
|`VarName` Zawartość|Zwrócony ciąg|  
|------------------------|---------------------|  
|16-bitowych `True` lub `False` typu wartości|"Boolean"|  
|Typ wartości binarnej 8-bitowych|"Bajtów"|  
|Typ wartości znaków 16-bitowych|"Char"|  
|Wpisz wartość 64-bitowych daty i godziny|"Date"|  
|Typ odwołania wskazuje brak lub nieistniejącą danych|"DBNull"|  
|Typ Stałoprzecinkowy wartość liczbową 128-bitowego|"Decimal"|  
|Typ wartości liczbowych zmiennoprzecinkowych 64-bitowych|"Double"|  
|Typ wartości 32-bitowa liczba całkowita|"Int"|  
|Wskazanie klasy niespecjalizowanej obiektu typu odwołania|"Obiektu"|  
|Typ referencyjny wskazującym na obiekt specjalne utworzone na podstawie klasy *objectclass*|"*objectclass*"|  
|Typ wartości 64-bitowa liczba całkowita|"Długa"|  
|Typ referencyjny bez obiektu aktualnie przypisane do niego|"Nothing"|  
|Typ wartości 8-bitową liczbę całkowitą ze znakiem|"SByte"|  
|Typ wartości 16-bitową liczbę całkowitą|"Krótkie"|  
|Typ wartości liczbowych zmiennoprzecinkowych 32-bitowych|"Pojedynczy"|  
|Typ referencyjny wskazujące na ciąg znaków 16-bitowych|"String"|  
|Typ wartości 32-bitowej liczby całkowitej bez znaku|Uinteger "—"|  
|Typ wartości 64-bitowej liczby całkowitej bez znaku|"ULong"|  
|Typ wartości 16-bitową liczbę całkowitą bez znaku|"UShort"|  
  
 Jeśli `VarName` jest tablicą, zwracany ciąg może być jednym z ciągów w powyższej tabeli z pustymi nawiasami dołączone. Na przykład jeśli `VarName` odwołuje się do tablicy liczb całkowitych, `TypeName` zwraca "Integer()".  
  
 Gdy `TypeName` zwraca nazwę typu referencyjnego takich jak klasy, zwraca tylko nazwę, nazwę kwalifikowaną. Na przykład jeśli `VarName` wskazuje obiekt klasy <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` zwraca "PaperSource". Należy pamiętać, że jeśli zmienna został zadeklarowany jako określonego typu klasy, ale nie został przypisany, obiekt `TypeName` niczego nie "".  
  
   
  
## Examples  
 W poniższym przykładzie użyto `TypeName` funkcja zwraca dane typu informacji o kilku zmiennych.  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Wymagana. Tablica dowolny typ danych. Tablica, w którym ma zostać odnaleziona największa możliwa wartość indeksu wymiaru.</param>
        <param name="Rank">Opcjonalna. <see langword="Integer" />. Wymiar, dla którego ma zostać zwrócone najwyższa możliwa wartość indeksu. Użyj wartości 1 wymiar, 2 sekundy i tak dalej. Jeśli <c>rangę</c> jest pominięty, przyjmowana jest wartość 1.</param>
        <summary>Zwraca najwyższą dostępną wartość indeksu wskazanego wymiaru tablicy.</summary>
        <returns>
          <see langword="Integer" />. Najwyższą wartość może zawierać indeks dla określonego wymiaru. Jeśli <paramref name="Array" /> zawiera tylko jeden element <see langword="UBound" /> zwraca wartość 0. Jeśli <paramref name="Array" /> nie ma żadnych elementów, na przykład, jeśli jest to ciąg o zerowej długości <see langword="UBound" /> zwraca wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ indeksy tablicy rozpoczynają się od 0, długość wymiaru jest większa o jeden niż największa indeks dostępne dla tego wymiaru.  
  
 Dla tablicy o następujące wymiary `UBound` zwraca wartości w poniższej tabeli:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Wywołanie UBound|Wartość zwracana|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 Można użyć `UBound` ustalenie łączną liczbę elementów w tablicy, ale muszą dostosować wartość zwraca go do konta w celu fakt, że indeksy dolne rozpoczynają się od 0. W poniższym przykładzie oblicza całkowity rozmiar tablicy `a` w poprzednim przykładzie:  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 Wartość obliczana dla `total` jest 3030, czyli 101 * 6 * 5.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `UBound` funkcji, aby ustalić najwyższą dostępną wartość indeksu wskazanego wymiaru tablicy.  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Array" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException">
          <paramref name="Rank" /> jest mniejszy niż 1 lub <paramref name="Rank" /> jest większa niż rangę <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Wymagana. <see langword="Object" /> Zmienna. Jeśli <see langword="Option Strict" /> jest <see langword="Off" />, można przekazać zmiennej typu danych z wyjątkiem struktury.</param>
        <summary>Zwraca <see langword="Integer" /> wartość zawierającą klasyfikacji danych typu zmienną.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość zawierającą klasyfikacji danych typu zmienną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość całkowita zwrócony przez `VarType` jest elementem członkowskim <xref:Microsoft.VisualBasic.VariantType>.  
  
 W poniższej tabeli przedstawiono wartości zwracanych przez `VarType` dla przypadków specjalnych `VarName`.  
  
|Typ danych reprezentowanego przez `VarName`|Wartość zwrócona przez `VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|Wyliczenie|Podstawowy typ danych (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, lub `ULong`)|  
|Tablica|Bitowe lub typ elementu tablicy i `VariantType.Array`|  
|Tablicy tablic|Bitowe lub `VariantType.Object` i `VariantType.Array`|  
|Struktury (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|Nieznany|`VariantType.Object`|  
  
   
  
## Examples  
 W poniższym przykładzie użyto `VarType` funkcja zwraca dane typu klasyfikacji informacji o kilku zmiennych.  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">Wymagana. <see langword="String" /> zmienną, która zawiera nazwę typu, używany przez środowisko uruchomieniowe języka wspólnego.</param>
        <summary>Zwraca <see langword="String" /> wartość zawierającą nazwę danych Visual Basic typu zmienną.</summary>
        <returns>Zwraca <see langword="String" /> wartość zawierającą nazwę danych Visual Basic typu zmienną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName` Zwraca nazwę typu Visual Basic odpowiadający nazwę typu środowiska uruchomieniowego języka wspólnego. Na przykład jeśli `UrtName` zawiera "Int32" lub "System.Int32" `VbTypeName` zwraca "Int". Jeśli `VbTypeName` nie rozpoznaje wartość `UrtName`, zwraca `Nothing` (nie ciąg "Nothing").  
  
 Nazwa typu w `UrtName` można uzyskać z różnych źródeł, na przykład <xref:System.Reflection.MemberInfo.Name%2A> właściwości w <xref:System.Reflection.MemberInfo> tablicę <xref:System.Type> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `VbTypeName` funkcja zwraca nazwy typów danych w przypadku kilku zmiennych.  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>