<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1877d972b8316acba774e61d2124408ae6062b4d" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48755608" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="20190-101">
        <see langword="FileSystem" /> Modułu zawiera procedury, które są używane do wykonywania operacji pliku, katalogu lub folderu i systemu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="20190-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="20190-102">
        <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż przy użyciu <see langword="FileSystem" /> modułu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="20190-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="20190-103">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="20190-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-104">Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, uzyskujących dostęp do plików i folderów.</span><span class="sxs-lookup"><span data-stu-id="20190-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-105">W tym przykładzie użyto `GetAttr` funkcję, aby określić atrybuty pliku i katalogu lub folderu.</span><span class="sxs-lookup"><span data-stu-id="20190-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md">
      <span data-ttu-id="20190-106">Katalogi i pliki</span>
      <span class="sxs-lookup">
        <span data-stu-id="20190-106">Directories and Files Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md">
      <span data-ttu-id="20190-107">Wejście i wyjście — Podsumowanie</span>
      <span class="sxs-lookup">
        <span data-stu-id="20190-107">Input and Output Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="20190-108">Słowa kluczowe (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="20190-108">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="20190-109">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="20190-109">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="20190-110">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-110">Required.</span>
          </span>
          <span data-ttu-id="20190-111">A <see langword="String" /> wyrażenia, który identyfikuje, które katalogu lub folderu staje się nowego domyślnego katalogu lub folderu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-111">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="20190-112">
            <c>Ścieżka</c> mogą obejmować dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-112">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="20190-113">Jeśli dysk nie zostanie określony, <see langword="ChDir" /> zmienia domyślnego katalogu lub folderu na bieżącym dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-114">Zmienia bieżącego katalogu lub folderu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-114">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="20190-115">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="ChDir" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="20190-116">Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-117">`ChDir` Funkcji zmienia domyślnego katalogu, ale nie dysk domyślny.</span><span class="sxs-lookup"><span data-stu-id="20190-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="20190-118">Na przykład jeśli domyślnym dysku C, następująca instrukcja zmienia domyślny katalog na dysku D, ale C pozostaje dysk domyślny:</span><span class="sxs-lookup"><span data-stu-id="20190-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="20190-119">Można ustawić względne zmiany w katalogu jest przez wpisanie dwóch kropek w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-120">`ChDir` Funkcja wymaga, aby kod niezarządzany uprawnienie, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania.</span><span class="sxs-lookup"><span data-stu-id="20190-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="20190-121">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i.</span><span class="sxs-lookup"><span data-stu-id="20190-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-122">W tym przykładzie użyto `ChDir` funkcję, aby zmienić bieżącego katalogu lub folderu.</span><span class="sxs-lookup"><span data-stu-id="20190-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-123">
            <paramref name="Path" /> jest pusty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-123">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="20190-124">Określono nieprawidłowy dysk lub dysk jest niedostępny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-124">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">
          <span data-ttu-id="20190-125">Porady: analizowanie ścieżek pliku w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-125">How to: Parse File Paths in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">
          <span data-ttu-id="20190-126">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-127">Zmienia bieżący dysk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-127">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="20190-128">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-128">Required.</span>
          </span>
          <span data-ttu-id="20190-129">Wyrażenie ciągu, który określa istniejącego dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-129">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="20190-130">Jeśli podasz ciągiem o zerowej długości (""), nie zmienia bieżący dysk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-130">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="20190-131">Jeśli <c>dysku</c> argument jest ciąg znaków wielu <see langword="ChDrive" /> używa pierwszą literę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-131">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-132">Zmienia bieżący dysk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-132">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-133">`ChDrive` Funkcja wymaga, aby kod niezarządzany uprawnienie, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania.</span><span class="sxs-lookup"><span data-stu-id="20190-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="20190-134">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="20190-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-135">W tym przykładzie użyto `ChDrive` funkcję, aby zmienić bieżący dysk.</span><span class="sxs-lookup"><span data-stu-id="20190-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="20190-136">Funkcja zgłasza wyjątek, jeśli dysk nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="20190-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-137">Określono nieprawidłowy dysk lub dysk jest niedostępny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-137">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-138">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-138">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="20190-139">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-139">Required.</span>
          </span>
          <span data-ttu-id="20190-140">Wyrażenie ciągu, który określa istniejącego dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-140">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="20190-141">Jeśli podasz ciągiem o zerowej długości (""), nie zmienia bieżący dysk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-141">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="20190-142">Jeśli <c>dysku</c> argument jest ciąg znaków wielu <see langword="ChDrive" /> używa pierwszą literę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-142">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-143">Zmienia bieżący dysk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-143">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-144">`ChDrive` Funkcja wymaga, aby kod niezarządzany uprawnienie, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania.</span><span class="sxs-lookup"><span data-stu-id="20190-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="20190-145">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="20190-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-146">W tym przykładzie użyto `ChDrive` funkcję, aby zmienić bieżący dysk.</span><span class="sxs-lookup"><span data-stu-id="20190-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="20190-147">Funkcja zgłasza wyjątek, jeśli dysk nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="20190-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-148">Określono nieprawidłowy dysk lub dysk jest niedostępny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-148">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-149">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-149">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-150">Zwraca ciąg reprezentujący bieżącą ścieżkę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-150">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="20190-151">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> Zapewnia lepszą szybkość i wydajność operacji We/Wy pliku niż <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="20190-152">Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20190-153">Zwraca ciąg reprezentujący bieżącą ścieżkę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="20190-154">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> Zapewnia lepszą szybkość i wydajność operacji We/Wy pliku niż <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="20190-155">Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-156">Ciąg reprezentujący bieżącą ścieżkę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="20190-157">W tym przykładzie użyto `CurDir` funkcja zwraca bieżącą ścieżkę.</span><span class="sxs-lookup"><span data-stu-id="20190-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="20190-158">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-158">Optional.</span>
          </span>
          <span data-ttu-id="20190-159">
            <see langword="Char" /> wyrażenie określające istniejącego dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-159">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="20190-160">Jeśli dysk nie zostanie określony, lub jeśli <c>dysku</c> jest ciągiem o zerowej długości (""), <see langword="CurDir" /> zwraca ścieżkę dla bieżącego dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-160">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-161">Zwraca ciąg reprezentujący bieżącą ścieżkę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-161">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="20190-162">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> Zapewnia lepszą szybkość i wydajność operacji We/Wy pliku niż <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="20190-163">Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-164">Ciąg reprezentujący bieżącą ścieżkę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-164">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="20190-165">W tym przykładzie użyto `CurDir` funkcja zwraca bieżącą ścieżkę.</span><span class="sxs-lookup"><span data-stu-id="20190-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-166">Zwraca ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="20190-167">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> Zapewnia lepszą szybkość i wydajność operacji We/Wy pliku niż <see langword="Dir" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="20190-168">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20190-169">Zwraca ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="20190-170">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> Zapewnia lepszą szybkość i wydajność operacji We/Wy pliku niż <see langword="Dir" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="20190-171">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-172">Ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-173">`Dir` Funkcja obsługuje korzystanie z wielu znaków (`*`) i pojedynczych znaków (`?`) symboli wieloznacznych do określenia wielu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="20190-174">`VbVolume` zwraca etykietę woluminu dysku, zamiast nazwy określonego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="20190-175">Należy podać `PathName` przy pierwszym wywołaniu `Dir` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="20190-176">Aby pobrać następny element, może wykonać kolejne wywołania `Dir` funkcję bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="20190-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-177">By działała poprawnie, `Dir` funkcja wymaga, aby <xref:System.Security.Permissions.FileIOPermissionAccess.Read> i <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flagi <xref:System.Security.Permissions.FileIOPermission> mieć uprawnienia do wykonywania kodu.</span><span class="sxs-lookup"><span data-stu-id="20190-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="20190-178">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, i [uprawnienia dostępu kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="20190-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="20190-179">`Attributes` Wartości wyliczenia argumentów są następujące:</span><span class="sxs-lookup"><span data-stu-id="20190-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="20190-180">Wartość</span><span class="sxs-lookup"><span data-stu-id="20190-180">Value</span></span>|<span data-ttu-id="20190-181">Stała</span><span class="sxs-lookup"><span data-stu-id="20190-181">Constant</span></span>|<span data-ttu-id="20190-182">Opis</span><span class="sxs-lookup"><span data-stu-id="20190-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="20190-183">Domyślnie.</span><span class="sxs-lookup"><span data-stu-id="20190-183">Default.</span></span> <span data-ttu-id="20190-184">Określa pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="20190-185">Określa pliki tylko do odczytu, a także pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="20190-186">Określa ukryte pliki i pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="20190-187">Określa pliki systemowe i pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="20190-188">Określa etykietę woluminu; Jeśli inne atrybut jest określony, `vbVolume` jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="20190-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="20190-189">Określa katalogi lub foldery i pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="20190-190">Plik został zmieniony od czasu wykonania ostatniej kopii zapasowej.</span><span class="sxs-lookup"><span data-stu-id="20190-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="20190-191">Plik ma inną nazwę.</span><span class="sxs-lookup"><span data-stu-id="20190-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="20190-192">Te wyliczenia są określone przez język Visual Basic i mogą być używane w dowolnym miejscu w kodzie zamiast wartości faktycznych.</span><span class="sxs-lookup"><span data-stu-id="20190-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-193">W tym przykładzie użyto `Dir` funkcji w celu sprawdzenia, czy istnieją określone pliki i katalogi.</span><span class="sxs-lookup"><span data-stu-id="20190-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="20190-194">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-194">Optional.</span>
          </span>
          <span data-ttu-id="20190-195">
            <see langword="String" /> wyrażenie, które określa nazwę pliku, nazwa katalogu lub folderu lub etykiety woluminu dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-195">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="20190-196">Ciąg o zerowej długości (<see langword="&quot;&quot;" />) jest zwracany, jeśli <c>PathName</c> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="20190-197">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-197">Optional.</span>
          </span>
          <span data-ttu-id="20190-198">Wyrażenie wyliczenia lub liczbowe, którego wartość określa atrybuty pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-198">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="20190-199">W przypadku pominięcia <see langword="Dir" /> zwraca pliki dopasowane <c>PathName</c> , ale nie uwzględniając atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-199">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-200">Zwraca ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-200">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="20190-201">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> Zapewnia lepszą szybkość i wydajność operacji We/Wy pliku niż <see langword="Dir" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-201">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="20190-202">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-202">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-203">Ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-203">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-204">`Dir` Funkcja obsługuje korzystanie z wielu znaków (`*`) i pojedynczych znaków (`?`) symboli wieloznacznych do określenia wielu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-204">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="20190-205">`VbVolume` zwraca etykietę woluminu dysku, zamiast nazwy określonego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-205">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="20190-206">Należy podać `PathName` przy pierwszym wywołaniu `Dir` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-206">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="20190-207">Aby pobrać następny element, może wykonać kolejne wywołania `Dir` funkcję bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="20190-207">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-208">By działała poprawnie, `Dir` funkcja wymaga, aby <xref:System.Security.Permissions.FileIOPermissionAccess.Read> i <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flagi <xref:System.Security.Permissions.FileIOPermission> mieć uprawnienia do wykonywania kodu.</span><span class="sxs-lookup"><span data-stu-id="20190-208">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="20190-209">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, i [uprawnienia dostępu kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="20190-209">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="20190-210">`Attributes` Wartości wyliczenia argumentów są następujące:</span><span class="sxs-lookup"><span data-stu-id="20190-210">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="20190-211">Wartość</span><span class="sxs-lookup"><span data-stu-id="20190-211">Value</span></span>|<span data-ttu-id="20190-212">Stała</span><span class="sxs-lookup"><span data-stu-id="20190-212">Constant</span></span>|<span data-ttu-id="20190-213">Opis</span><span class="sxs-lookup"><span data-stu-id="20190-213">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="20190-214">Domyślnie.</span><span class="sxs-lookup"><span data-stu-id="20190-214">Default.</span></span> <span data-ttu-id="20190-215">Określa pliki, które nie uwzględniając atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-215">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="20190-216">Określa pliki tylko do odczytu, oprócz plików, które nie uwzględniając atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-216">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="20190-217">Określa pliki ukryte, oprócz plików, które nie uwzględniając atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-217">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="20190-218">Określa pliki systemowe, oprócz plików, które nie uwzględniając atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-218">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="20190-219">Określa etykietę woluminu; Jeśli inne atrybut jest określony, `vbVolume` jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="20190-219">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="20190-220">Określa katalogi lub foldery, oprócz plików, które nie uwzględniając atrybutów.</span><span class="sxs-lookup"><span data-stu-id="20190-220">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="20190-221">Plik został zmieniony od czasu wykonania ostatniej kopii zapasowej.</span><span class="sxs-lookup"><span data-stu-id="20190-221">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="20190-222">Plik ma inną nazwę.</span><span class="sxs-lookup"><span data-stu-id="20190-222">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="20190-223">Te wyliczenia są określone przez język Visual Basic i mogą być używane w dowolnym miejscu w kodzie zamiast wartości faktycznych.</span><span class="sxs-lookup"><span data-stu-id="20190-223">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-224">W tym przykładzie użyto `Dir` funkcji w celu sprawdzenia, czy istnieją określone pliki i katalogi.</span><span class="sxs-lookup"><span data-stu-id="20190-224">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-225">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-225">Required.</span>
          </span>
          <span data-ttu-id="20190-226">
            <see langword="Integer" /> Zawierający Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-226">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-227">Zwraca wartość typu Boolean <see langword="True" /> po otwarciu końca pliku dla <see langword="Random" /> lub kolejnych <see langword="Input" /> został osiągnięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-227">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-228">Zwraca wartość typu Boolean <see langword="True" /> po otwarciu końca pliku dla <see langword="Random" /> lub kolejnych <see langword="Input" /> został osiągnięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-228">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-229">Użyj `EOF` w celu uniknięcia błędów generowanych podczas próby pobrania danych wejściowych poza końcem pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-229">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="20190-230">`EOF` Funkcja zwraca `False` dopóki nie zostanie osiągnięty koniec pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-230">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="20190-231">W przypadku plików otwartych do `Random` lub `Binary` dostęp, `EOF` zwraca `False` dopóki ostatnio wykonana `FileGet` funkcji nie może odczytać całego rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-231">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="20190-232">W przypadku plików otwartych do `Binary` dostęp do próba odczytania pliku przy użyciu `Input` działać do momentu `EOF` zwraca `True` generuje błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-232">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="20190-233">Użyj `LOF` i `Loc` funkcji zamiast `EOF` podczas odczytywania plików binarnych z `Input`, lub użyj `Get` przy użyciu `EOF` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-233">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="20190-234">W przypadku plików otwartych do `Output`, `EOF` zawsze zwraca `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-234">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-235">W tym przykładzie użyto `EOF` funkcję, aby wykrywać koniec pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-235">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="20190-236">W tym przykładzie założono, że `Testfile` to plik tekstowy, który zawiera kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="20190-236">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-237">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-237">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-238">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-238">Required.</span>
          </span>
          <span data-ttu-id="20190-239">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-239">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="20190-240">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-240">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-241">Zwraca wyliczenie reprezentującą tryb otwierania plików za pomocą <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-241">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="20190-242">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> Zapewnia lepszą szybkość i wydajność operacji We/Wy pliku niż <see langword="FileAttr" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-242">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="20190-243">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-243">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-244">Następujące wartości wyliczenia wskazują tryb dostępu do pliku:</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-244">The following enumeration values indicate the file access mode:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="20190-245">Wartość</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-245">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="20190-246">Tryb</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-246">Mode</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="20190-247">1</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-247">1</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Input" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="20190-248">2</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-248">2</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Output" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="20190-249">4</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-249">4</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Random" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="20190-250">8</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-250">8</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Append" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="20190-251">32</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-251">32</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Binary" />
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-252">Ta funkcja zwraca wyliczenie reprezentującą tryb otwierania plików za pomocą `FileOpen` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-252">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-253">W tym przykładzie użyto `FileAttr` funkcja zwraca tryb pliku otwartego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-253">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-254">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-254">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="20190-255">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-255">Optional.</span>
          </span>
          <span data-ttu-id="20190-256">Tablica parametrów 0 lub więcej kanałów zostanie zamknięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-256">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-257">Zawiera wejścia/wyjścia (We/Wy) do pliku, który został otwarty przy użyciu <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-257">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="20190-258">
            <see langword="My" /> zapewnia lepszą szybkość i wydajność operacji We/Wy na plikach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-258">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="20190-259">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-259">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-260">`FileClose` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-260">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-261">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-261">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-262">Aby uzyskać więcej informacji, zobacz [porady: Odczyt tekstu z plików za pomocą StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [jak: pisanie tekstu do plików za pomocą StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), i [wskazówki: manipulowanie plikami i katalogami w Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="20190-262">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="20190-263">Jeżeli pominięto `FileNumbers`, wszystkie aktywne pliki otwierane przez `FileOpen` funkcji są zamknięte.</span><span class="sxs-lookup"><span data-stu-id="20190-263">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="20190-264">Podczas zamykania plików, które zostały otwarte dla `Output` lub `Append`, końcowego bufor wyjściowy jest zapisywany w buforze systemu operacyjnego dla tego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-264">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="20190-265">Wszystkie ilość miejsca w buforze skojarzone z zamkniętej zwolnienia pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-265">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="20190-266">Gdy `FileClose` funkcja jest wykonywana, skojarzenia plików za pomocą jego pliku numer kończy się.</span><span class="sxs-lookup"><span data-stu-id="20190-266">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-267">W tym przykładzie użyto `FileClose` funkcję, aby zamknąć plik otwarty `Input`.</span><span class="sxs-lookup"><span data-stu-id="20190-267">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-268">
            <paramref name="FileNumber" /> nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-268">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="20190-269">End — Instrukcja</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-269">End Statement</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md">
          <span data-ttu-id="20190-270">Stop — Instrukcja (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-270">Stop Statement (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-271">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-271">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="20190-272">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-272">Required.</span>
          </span>
          <span data-ttu-id="20190-273">
            <see langword="String" /> wyrażenie, który określa nazwę pliku, który ma być skopiowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-273">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="20190-274">
            <c>Źródło</c> może zawierać katalogu lub folderu i dysk z plikiem źródłowym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-274">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="20190-275">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-275">Required.</span>
          </span>
          <span data-ttu-id="20190-276">
            <see langword="String" /> wyrażenie, który określa nazwę pliku docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-276">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="20190-277">
            <c>Miejsce docelowe</c> może zawierać katalogu lub folderu i dysk pliku docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-277">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-278">Kopiuje plik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-278">Copies a file.</span>
          </span>
          <span data-ttu-id="20190-279">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> Zapewnia lepszą szybkość i wydajność operacji We/Wy pliku niż <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-279">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="20190-280">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-280">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-281">Jeśli spróbujesz użyć `FileCopy` działać na aktualnie otwartego pliku, wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-281">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="20190-282">`FileCopy` wymaga pełnego zaufania do pracy na dysku lokalnym.</span><span class="sxs-lookup"><span data-stu-id="20190-282">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-283">W tym przykładzie użyto `FileCopy` funkcji do kopiowania plików do innego.</span><span class="sxs-lookup"><span data-stu-id="20190-283">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="20190-284">Dla celów tego przykładu załóżmy, że `SrcFile` jest plikiem, który zawiera dane.</span><span class="sxs-lookup"><span data-stu-id="20190-284">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-285">
            <paramref name="Source" /> lub <paramref name="Destination" /> jest nieprawidłowy lub nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-285">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-286">Plik jest już otwarty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-286">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="20190-287">Plik nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-287">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md">
          <span data-ttu-id="20190-288">Porady: tworzenie kopii pliku w innym katalogu w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-288">How to: Create a Copy of a File in a Different Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">
          <span data-ttu-id="20190-289">Porady: tworzenie kopii pliku w tym samym katalogu w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-289">How to: Create a Copy of a File in the Same Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">
          <span data-ttu-id="20190-290">Porady: kopiowanie katalogu do innego katalogu w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-290">How to: Copy a Directory to Another Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="20190-291">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-291">Required.</span>
          </span>
          <span data-ttu-id="20190-292">
            <see langword="String" /> wyrażenie, które określa nazwę pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-292">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="20190-293">
            <c>Nazwa ścieżki</c> może zawierać katalogu lub folderu i dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-293">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-294">Zwraca <see langword="Date" /> wartość, która wskazuje datę i godzinę, plik został zapisany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-294">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="20190-295">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-295">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="20190-296">Aby uzyskać więcej informacji zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-296">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-297">
            <see langword="Date" /> wartość, która wskazuje, daty i godziny pliku utworzenia lub ostatniej modyfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-297">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="20190-298">W tym przykładzie użyto `FileDateTime` funkcję, aby określić datę i godzinę plik został utworzony lub Data ostatniej modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-298">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="20190-299">Format daty i godziny widocznej zależy od ustawień regionalnych systemu.</span><span class="sxs-lookup"><span data-stu-id="20190-299">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-300">
            <paramref name="PathName" /> jest nieprawidłowa lub zawiera symbole wieloznaczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-300">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="20190-301">Plik docelowy nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-301">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-302">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-302">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-303">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-303">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-304">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-304">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-305">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-305">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-306">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-306">Required.</span>
          </span>
          <span data-ttu-id="20190-307">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-307">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-308">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-308">Required.</span>
          </span>
          <span data-ttu-id="20190-309">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-309">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-310">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-310">Optional.</span>
          </span>
          <span data-ttu-id="20190-311">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-311">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-312">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-312">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-313">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-313">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-314">Aby uzyskać więcej informacji zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-314">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-315">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-315">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-316">Dane odczytane z `FileGet` są zwykle zapisywane w pliku z `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-316">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-317">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-317">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-318">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-318">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-319">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-319">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-320">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-320">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-321">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-321">Random Mode</span></span>  
 <span data-ttu-id="20190-322">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-322">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-323">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-323">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-324">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-324">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-325">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-325">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-326">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-326">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-327">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-327">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-328">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-328">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-329">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-329">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-330">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-330">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-331">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-331">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-332">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-332">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-333">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-333">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-334">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-334">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-335">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-335">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-336">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-336">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-337">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-337">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-338">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-338">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-339">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-339">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-340">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-340">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-341">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-341">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-342">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-342">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-343">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-343">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-344">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-344">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-345">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-345">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-346">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-347">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-347">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-348">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-348">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-349">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-349">Binary Mode</span></span>  
 <span data-ttu-id="20190-350">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-350">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-351">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-351">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-352">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-352">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-353">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-353">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-354">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-354">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-355">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-355">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-356">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-356">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-357">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-357">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-358">Podczas odczytu z pliku za pomocą`FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-358">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-359">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-359">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-360">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-360">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-361">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-361">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-362">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-362">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-363">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-363">Required.</span>
          </span>
          <span data-ttu-id="20190-364">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-364">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-365">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-365">Required.</span>
          </span>
          <span data-ttu-id="20190-366">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-366">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-367">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-367">Optional.</span>
          </span>
          <span data-ttu-id="20190-368">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-368">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-369">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-369">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-370">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-370">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-371">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-371">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-372">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-372">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-373">Dane odczytane z `FileGet` są zwykle zapisywane w pliku z `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-373">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-374">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-374">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-375">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-375">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-376">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-376">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-377">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-377">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-378">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-378">Random Mode</span></span>  
 <span data-ttu-id="20190-379">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-379">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-380">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-380">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-381">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-381">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-382">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-382">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-383">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-383">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-384">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-384">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-385">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-385">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-386">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-386">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-387">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-387">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-388">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-388">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-389">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-389">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-390">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-390">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-391">Jeżeli nie zastosowano deskryptora.</span><span class="sxs-lookup"><span data-stu-id="20190-391">If the descriptor is not used.</span></span> <span data-ttu-id="20190-392">Rozmiar i granice tablicy przekazane do, a następnie `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-392">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-393">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-394">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-395">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-395">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-396">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-397">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-397">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-398">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-398">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-399">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-399">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-400">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-400">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-401">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-401">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-402">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-402">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-403">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-403">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-404">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-405">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-405">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-406">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-406">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-407">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-407">Binary Mode</span></span>  
 <span data-ttu-id="20190-408">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-408">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-409">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-409">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-410">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-410">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-411">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-411">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-412">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-412">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-413">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-413">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-414">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-414">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-415">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-415">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-416">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-416">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-417">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-417">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-418">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-419">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-419">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-420">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-420">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-421">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-421">Required.</span>
          </span>
          <span data-ttu-id="20190-422">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-422">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-423">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-423">Required.</span>
          </span>
          <span data-ttu-id="20190-424">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-424">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-425">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-425">Optional.</span>
          </span>
          <span data-ttu-id="20190-426">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-426">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-427">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-427">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-428">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-428">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-429">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-429">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-430">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-430">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-431">Dane odczytane z `FileGet` są zwykle zapisywane w pliku z `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-431">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-432">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-432">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-433">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-433">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-434">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-434">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-435">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-435">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-436">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-436">Random Mode</span></span>  
 <span data-ttu-id="20190-437">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-437">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-438">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-438">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-439">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-439">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-440">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-440">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-441">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-441">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-442">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-442">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-443">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-443">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-444">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-444">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-445">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-445">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-446">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-446">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-447">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-447">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-448">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-448">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-449">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-449">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-450">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-450">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-451">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-451">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-452">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-452">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-453">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-453">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-454">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-454">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-455">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-455">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-456">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-456">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-457">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-457">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-458">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-458">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-459">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-459">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-460">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-460">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-461">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-462">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-462">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-463">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-463">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-464">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-464">Binary Mode</span></span>  
 <span data-ttu-id="20190-465">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-465">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-466">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-466">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-467">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-467">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-468">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-468">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-469">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-469">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-470">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-470">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-471">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-471">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-472">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-472">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-473">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-473">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-474">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-474">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-475">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-475">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-476">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-476">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-477">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-477">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-478">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-478">Required.</span>
          </span>
          <span data-ttu-id="20190-479">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-479">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-480">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-480">Required.</span>
          </span>
          <span data-ttu-id="20190-481">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-481">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-482">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-482">Optional.</span>
          </span>
          <span data-ttu-id="20190-483">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-483">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-484">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-484">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-485">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-485">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-486">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-486">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-487">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-487">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-488">Dane odczytane z `FileGet` są zwykle zapisywane w pliku z `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-488">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-489">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-489">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-490">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-490">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-491">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-491">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-492">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-492">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-493">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-493">Random Mode</span></span>  
 <span data-ttu-id="20190-494">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-494">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-495">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji`FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-495">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-496">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-496">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-497">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-497">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-498">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-498">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-499">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-499">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-500">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-500">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-501">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-501">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-502">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-502">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-503">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-504">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-504">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-505">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-505">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-506">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-506">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-507">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-508">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-509">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-509">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-510">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-511">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-511">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-512">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-512">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-513">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-513">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-514">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-514">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-515">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-515">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-516">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-516">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-517">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-517">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-518">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-519">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-519">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-520">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-520">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-521">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-521">Binary Mode</span></span>  
 <span data-ttu-id="20190-522">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-522">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-523">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-523">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-524">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-524">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-525">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-525">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-526">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-526">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-527">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-527">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-528">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-528">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-529">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-529">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-530">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-530">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-531">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-531">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-532">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-532">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-533">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-533">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-534">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-534">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-535">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-535">Required.</span>
          </span>
          <span data-ttu-id="20190-536">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-536">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-537">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-537">Required.</span>
          </span>
          <span data-ttu-id="20190-538">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-538">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-539">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-539">Optional.</span>
          </span>
          <span data-ttu-id="20190-540">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-541">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-541">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-542">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-543">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-544">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-544">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-545">Dane odczytane z `FileGet` są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-545">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-546">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-547">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-547">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-548">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-548">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-549">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-549">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-550">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-550">Random Mode</span></span>  
 <span data-ttu-id="20190-551">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-551">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-552">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-552">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-553">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-553">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-554">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-554">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-555">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-555">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-556">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-556">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-557">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-557">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-558">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-558">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-559">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-559">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-560">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-560">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-561">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-561">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-562">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-562">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-563">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-563">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-564">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-565">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-566">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-566">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-567">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-568">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-568">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-569">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-569">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-570">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-570">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-571">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-571">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-572">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-573">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-573">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-574">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-574">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-575">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-576">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-576">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-577">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-578">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-578">Binary Mode</span></span>  
 <span data-ttu-id="20190-579">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-579">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-580">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-580">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-581">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-581">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-582">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-582">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-583">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-583">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-584">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-584">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-585">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-585">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-586">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-586">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-587">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-587">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-588">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-588">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-589">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-589">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-590">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-590">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-591">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-591">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-592">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-592">Required.</span>
          </span>
          <span data-ttu-id="20190-593">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-593">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-594">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-594">Required.</span>
          </span>
          <span data-ttu-id="20190-595">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-595">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-596">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-596">Optional.</span>
          </span>
          <span data-ttu-id="20190-597">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-598">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-598">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-599">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-600">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-601">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-601">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-602">Dane odczytane z `FileGet` są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-602">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-603">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-604">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-604">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-605">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-605">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-606">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-606">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-607">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-607">Random Mode</span></span>  
 <span data-ttu-id="20190-608">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-608">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-609">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-609">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-610">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-610">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-611">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-611">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-612">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-612">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-613">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-613">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-614">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-614">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-615">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-615">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-616">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-616">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-617">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-617">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-618">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-618">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-619">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-619">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-620">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-620">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-621">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-621">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-622">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-622">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-623">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-623">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-624">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-624">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-625">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-625">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-626">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-626">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-627">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-627">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-628">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-628">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-629">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-630">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-630">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-631">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-631">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-632">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-633">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-633">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-634">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-635">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-635">Binary Mode</span></span>  
 <span data-ttu-id="20190-636">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-636">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-637">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-637">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-638">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-638">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-639">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-639">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-640">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-640">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-641">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-641">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-642">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-642">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-643">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-643">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-644">Podczas odczytu z pliku za pomocą`FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-644">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-645">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-646">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-647">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-647">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-648">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-649">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-649">Required.</span>
          </span>
          <span data-ttu-id="20190-650">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-651">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-651">Required.</span>
          </span>
          <span data-ttu-id="20190-652">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-652">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-653">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-653">Optional.</span>
          </span>
          <span data-ttu-id="20190-654">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-655">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-655">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-656">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-657">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-658">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-658">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-659">Dane odczytane z `FileGet` są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-659">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-660">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-661">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-661">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-662">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-662">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-663">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-663">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-664">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-664">Random Mode</span></span>  
 <span data-ttu-id="20190-665">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-665">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-666">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-666">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-667">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-667">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-668">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-668">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-669">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-669">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-670">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-670">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-671">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-671">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-672">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-672">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-673">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-673">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-674">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-674">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-675">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-675">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-676">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-676">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-677">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-677">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-678">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-678">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-679">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-679">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-680">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-681">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-681">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-682">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-682">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-683">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-683">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-684">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-684">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-685">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-685">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-686">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-687">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-687">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-688">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-688">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-689">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-690">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-690">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-691">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-692">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-692">Binary Mode</span></span>  
 <span data-ttu-id="20190-693">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-693">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-694">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-694">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-695">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-695">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-696">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-696">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-697">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-697">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-698">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-698">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-699">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-699">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-700">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-700">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-701">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-701">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-702">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-702">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-703">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-703">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-704">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-704">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-705">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-705">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-706">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-706">Required.</span>
          </span>
          <span data-ttu-id="20190-707">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-708">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-708">Required.</span>
          </span>
          <span data-ttu-id="20190-709">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-709">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-710">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-710">Optional.</span>
          </span>
          <span data-ttu-id="20190-711">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-712">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-712">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-713">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-714">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-715">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-715">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-716">Dane odczytane z `FileGet` są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-716">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-717">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-718">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-718">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-719">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-719">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-720">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-720">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-721">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-721">Random Mode</span></span>  
 <span data-ttu-id="20190-722">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-723">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-723">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-724">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-725">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-726">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-726">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-727">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-727">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-728">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-728">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-729">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-729">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-730">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-730">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-731">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-731">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-732">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-732">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-733">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-733">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-734">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-734">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-735">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-735">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-736">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-736">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-737">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-738">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-738">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-739">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-739">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-740">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-740">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-741">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-741">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-742">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-742">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-743">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-744">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-744">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-745">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-745">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-746">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-747">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-747">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-748">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-749">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-749">Binary Mode</span></span>  
 <span data-ttu-id="20190-750">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-751">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-752">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-753">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-753">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-754">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-754">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-755">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-755">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-756">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-756">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-757">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-757">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-758">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-758">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-759">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-759">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-760">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-760">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-761">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-761">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-762">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-762">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-763">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-763">Required.</span>
          </span>
          <span data-ttu-id="20190-764">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-764">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-765">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-765">Required.</span>
          </span>
          <span data-ttu-id="20190-766">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-766">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-767">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-767">Optional.</span>
          </span>
          <span data-ttu-id="20190-768">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-768">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-769">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-769">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-770">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-771">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-772">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-772">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-773">Dane odczytane z `FileGet` są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-773">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-774">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-774">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-775">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-775">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-776">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-776">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-777">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-777">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-778">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-778">Random Mode</span></span>  
 <span data-ttu-id="20190-779">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-779">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-780">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-780">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-781">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-781">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-782">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-782">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-783">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-783">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-784">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-784">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-785">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-785">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-786">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-786">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-787">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-787">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-788">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-788">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-789">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-789">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-790">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-790">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-791">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-791">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-792">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-792">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-793">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-793">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-794">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-794">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-795">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-795">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-796">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-796">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-797">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-797">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-798">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-798">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-799">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-799">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-800">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-800">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-801">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-801">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-802">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-802">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-803">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-804">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-804">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-805">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-805">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-806">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-806">Binary Mode</span></span>  
 <span data-ttu-id="20190-807">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-807">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-808">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-808">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-809">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-809">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-810">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-810">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-811">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-811">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-812">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-812">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-813">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-813">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-814">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-814">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-815">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-815">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-816">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-816">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-817">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-818">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-819">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-820">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-820">Required.</span>
          </span>
          <span data-ttu-id="20190-821">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-821">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-822">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-822">Required.</span>
          </span>
          <span data-ttu-id="20190-823">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-823">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-824">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-824">Optional.</span>
          </span>
          <span data-ttu-id="20190-825">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-825">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-826">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-826">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-827">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-827">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-828">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-828">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-829">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-829">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-830">Dane odczytane z `FileGet` są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-830">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-831">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-831">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-832">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-832">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-833">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-833">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-834">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-834">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-835">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-835">Random Mode</span></span>  
 <span data-ttu-id="20190-836">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-836">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-837">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-837">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-838">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-838">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-839">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-839">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-840">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-840">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-841">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-841">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-842">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-842">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-843">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-843">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-844">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-844">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-845">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-845">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-846">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-846">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-847">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-847">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-848">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-848">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-849">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-849">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-850">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-850">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-851">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-851">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-852">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-852">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-853">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-853">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-854">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-854">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-855">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-855">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-856">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-856">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-857">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-857">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-858">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-858">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-859">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-859">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-860">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-861">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-861">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-862">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-862">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-863">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-863">Binary Mode</span></span>  
 <span data-ttu-id="20190-864">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-864">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-865">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-865">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-866">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-866">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-867">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-867">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-868">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-868">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-869">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-869">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-870">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-870">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-871">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-871">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-872">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-872">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-873">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-873">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-874">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-874">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-875">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-875">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-876">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-876">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-877">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-877">Required.</span>
          </span>
          <span data-ttu-id="20190-878">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-878">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-879">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-879">Required.</span>
          </span>
          <span data-ttu-id="20190-880">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-880">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-881">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-881">Optional.</span>
          </span>
          <span data-ttu-id="20190-882">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-882">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-883">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-883">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-884">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-884">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-885">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-885">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-886">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-886">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-887">Dane odczytane z `FileGet` są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-887">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-888">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-888">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-889">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-889">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-890">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-890">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-891">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-891">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-892">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-892">Random Mode</span></span>  
 <span data-ttu-id="20190-893">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-893">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-894">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-894">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-895">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-895">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-896">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-896">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-897">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-897">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-898">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-898">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-899">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-899">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-900">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-900">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-901">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-901">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-902">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-902">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-903">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-903">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-904">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-904">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-905">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-905">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-906">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-906">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-907">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-907">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-908">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-908">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-909">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-909">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-910">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-910">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-911">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-911">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-912">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-912">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-913">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-913">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-914">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-914">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-915">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-915">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-916">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-916">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-917">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-918">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-918">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-919">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-919">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-920">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-920">Binary Mode</span></span>  
 <span data-ttu-id="20190-921">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-921">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-922">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-922">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-923">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-923">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-924">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-924">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-925">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-925">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-926">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-926">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-927">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-927">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-928">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-928">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-929">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-929">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-930">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-930">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-931">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-931">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-932">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-932">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-933">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-933">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-934">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-934">Required.</span>
          </span>
          <span data-ttu-id="20190-935">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-935">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-936">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-936">Required.</span>
          </span>
          <span data-ttu-id="20190-937">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-937">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-938">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-938">Optional.</span>
          </span>
          <span data-ttu-id="20190-939">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-939">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="20190-940">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-940">Optional.</span>
          </span>
          <span data-ttu-id="20190-941">Stosuje się tylko przy pisaniu ciągów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-941">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="20190-942">Określa, czy należy napisać deskryptor dwubajtowy, który ma być ciąg, który opisuje długości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-942">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="20190-943">Wartość domyślna to <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-943">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-944">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-944">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-945">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-946">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-947">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-947">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-948">Dane odczytane z `FileGet` są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-948">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-949">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-949">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-950">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-950">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-951">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-951">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-952">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-952">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-953">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-953">Random Mode</span></span>  
 <span data-ttu-id="20190-954">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-954">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-955">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-955">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-956">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-956">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-957">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-957">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-958">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-958">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-959">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-959">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-960">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-960">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-961">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-961">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-962">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-962">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-963">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-963">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-964">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-964">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-965">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-965">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-966">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-966">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-967">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-967">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-968">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-968">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-969">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-969">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-970">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-970">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-971">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-971">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-972">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-972">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-973">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-973">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-974">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-974">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-975">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-975">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-976">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-976">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-977">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-977">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-978">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-979">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-979">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-980">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-980">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-981">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-981">Binary Mode</span></span>  
 <span data-ttu-id="20190-982">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-982">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-983">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-983">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-984">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-984">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-985">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-985">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-986">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-986">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-987">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-987">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-988">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-988">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-989">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-989">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-990">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-990">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-991">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-991">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-992">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-992">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-993">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-993">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-994">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-994">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-995">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-995">Required.</span>
          </span>
          <span data-ttu-id="20190-996">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-996">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-997">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-997">Required.</span>
          </span>
          <span data-ttu-id="20190-998">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-998">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-999">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-999">Optional.</span>
          </span>
          <span data-ttu-id="20190-1000">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1000">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="20190-1001">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1001">Optional.</span>
          </span>
          <span data-ttu-id="20190-1002">Ma zastosowanie tylko wtedy, gdy pisania tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1002">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="20190-1003">Określa, czy tablica jest traktowane jako dynamiczne i czy konieczne jest deskryptora tablicy opisujących rozmiar i granice tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1003">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="20190-1004">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1004">Optional.</span>
          </span>
          <span data-ttu-id="20190-1005">Stosuje się tylko przy pisaniu ciągów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1005">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="20190-1006">Określa, czy należy napisać deskryptor dwubajtowy, który ma być ciąg, który opisuje długości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1006">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="20190-1007">Wartość domyślna to <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1007">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1008">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1008">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-1009">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1009">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="20190-1010">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1010">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1011">`FileGet` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1011">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1012">Dane odczytane z `FileGet` są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-1012">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="20190-1013">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1013">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1014">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji) jest do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-1014">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-1015">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1015">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-1016">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-1016">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1017">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1017">Random Mode</span></span>  
 <span data-ttu-id="20190-1018">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1018">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1019">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1019">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1020">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest dopełniana istniejącą zawartość buforu pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1020">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1021">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1021">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-1022">Domyślnie, jeśli zmienna wczytywana jest ciągiem `FileGet` odczytuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1022">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-1023">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1023">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1024">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1024">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-1025">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1025">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1026">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1026">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="20190-1027">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1027">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1028">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1028">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="20190-1029">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1029">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="20190-1030">Jeżeli nie zastosowano deskryptora, rozmiar i granice tablicy przekazane do `FileGet` ustalić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="20190-1030">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="20190-1031">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1031">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1032">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1032">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1033">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1033">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1034">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1034">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="20190-1035">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="20190-1035">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="20190-1036">18 bajtów w przypadku deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="20190-1036">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="20190-1037">200 bajtów w przypadku danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-1037">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-1038">Jeśli wczytywana zmienna wczytywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FileGet` odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1038">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="20190-1039">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych odczytywanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1039">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-1040">`FileGet` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1040">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-1041">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePut`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1041">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1042">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów.</span><span class="sxs-lookup"><span data-stu-id="20190-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="20190-1043">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-1043">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="20190-1044">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1044">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1045">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1045">Binary Mode</span></span>  
 <span data-ttu-id="20190-1046">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1046">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1047">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1047">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1048">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1048">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1049">`FileGet` odczytuje wszystkie zmienne z dysku w sposób ciągły; oznacza to bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1049">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1050">Dla tablicy innej niż tablica w strukturze `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1050">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="20190-1051">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1051">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="20190-1052">`FileGet` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1052">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1053">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1053">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="20190-1054">Podczas odczytu z pliku za pomocą `FileGet` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1054">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1055">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1055">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1056">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1056">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-1057">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1057">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1058">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1058">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1059">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1059">Required.</span>
          </span>
          <span data-ttu-id="20190-1060">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1060">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1061">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1061">Required.</span>
          </span>
          <span data-ttu-id="20190-1062">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1062">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1063">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1063">Optional.</span>
          </span>
          <span data-ttu-id="20190-1064">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się odczytywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1064">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1065">Wczytuje dane z otwartego pliku dysku do zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1065">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="20190-1066">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="20190-1067">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1067">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1068">`FileGetObject` Funkcja jest używana zamiast `FileGet` Aby uniknąć niejednoznaczności w czasie kompilacji, jeśli typ `Object` zwracany zamiast innego typu, takie jak `Integer`, `Long`, `Short`, i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1068">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="20190-1069">Jeśli zamierzasz zapisać `Variant` typu `FileGetObject` jest wymagana.</span><span class="sxs-lookup"><span data-stu-id="20190-1069">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="20190-1070">W razie wątpliwości, jeśli używasz obiektu jako drugi parametr, zawsze zaleca się używanie `FilePutObject` i `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="20190-1070">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="20190-1071">`FileGetObject` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1071">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1072">Dane odczytane z `FileGetObject` są zwykle zapisywane z `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="20190-1072">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="20190-1073">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1073">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1074">Jeżeli pominięto `RecordNumber`, `FileGetObject` odczytuje rekord lub bajt po ostatniej `FileGetObject` lub `FilePutObject` — funkcja (albo wskazywany przez ostatnią `Seek` funkcji).</span><span class="sxs-lookup"><span data-stu-id="20190-1074">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1075">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1075">Random Mode</span></span>  
 <span data-ttu-id="20190-1076">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1076">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1077">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FileGetObject` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1077">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1078">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest dopełniana istniejącą zawartość buforu pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1078">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1079">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to dobry pomysł, aby mieć długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1079">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="20190-1080">Jeżeli zmienna wczytywana jest ciągiem, domyślnie `FileGetObject` odczytuje dwubajtowy deskryptor, zawierająca długość ciągu, a następnie odczytuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1080">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="20190-1081">W związku z tym, długość rekordu określana przez `RecordLength` klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1081">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1082">Visual Basic 6.0 i starsze wersje obsługują ciągi o stałej długości i podczas odczytu pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1082">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="20190-1083">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1083">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1084">Jeśli wczytywana zmienna jest tablicą, długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1084">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1085">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1085">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1086">Jego długość jest równa 2 plus 8 razy liczba wymiarów: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="20190-1086">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="20190-1087">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, gdy tablica jest zapisywany na dysku:</span><span class="sxs-lookup"><span data-stu-id="20190-1087">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="20190-1088">218 bajtów są rozpowszechniane w następujący sposób: 18 bajtów w przypadku deskryptora (2 + 8 \* 2), a 100 bajtów danych (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="20190-1088">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="20190-1089">`FileGetObject` odczytuje elementy struktury tak, jakby każdy był odczytywany indywidualnie, z tą różnicą, że nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1089">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="20190-1090">Na dysku tablica dynamiczna w typ zdefiniowany przez użytkownika (napisany z uwzględnieniem `FilePutObject`) jest poprzedzana deskryptorem, którego długość jest równa 2 plus 8 razy liczba wymiarów: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="20190-1090">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="20190-1091">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania pojedynczych elementów, w tym wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="20190-1091">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="20190-1092"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> Klasy mogą być stosowane do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1092">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1093">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1093">Binary Mode</span></span>  
 <span data-ttu-id="20190-1094">Do plików otwieranych w `Binary` trybie wszystkie `Random` reguły mają zastosowanie, z uwzględnieniem poniższych wyjątków:</span><span class="sxs-lookup"><span data-stu-id="20190-1094">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="20190-1095">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1095">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1096">`FileGetObject` odczytuje wszystkie zmienne z dysku w sposób ciągły, oznacza to, za pomocą żadnych uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1096">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1097">Dla tablicy innej niż tablica w strukturze `FileGetObject` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1097">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="20190-1098">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1098">No descriptor is read.</span></span>  
  
 <span data-ttu-id="20190-1099">`FileGetObject` odczytuje ciągi o zmiennej długości, które nie są elementami struktury, bez uwzględnienia deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1099">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1100">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1100">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-1101">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1101">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-1102">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-1102">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1103">Poniższy przykład odczytuje rekordu w pliku testu i następnie pobiera go.</span><span class="sxs-lookup"><span data-stu-id="20190-1103">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-1104">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1104">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1105">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1105">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="20190-1106">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1106">Required.</span>
          </span>
          <span data-ttu-id="20190-1107">
            <see langword="String" /> wyrażenie, które określa plik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1107">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="20190-1108">
            <c>Nazwa ścieżki</c> może zawierać katalogu lub folderu i dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1108">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1109">Zwraca <see langword="Long" /> wartość, która określa długość pliku w bajtach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1109">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="20190-1110">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1110">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="20190-1111">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1111">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-1112">
            <see langword="Long" /> Wartość określająca długość pliku w bajtach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1112">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1113">Jeśli określony plik jest otwarty, kiedy `FileLen` funkcja jest wywoływana, wartość zwracana reprezentuje rozmiar pliku w czasie ostatniego otwarcia.</span><span class="sxs-lookup"><span data-stu-id="20190-1113">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-1114">Aby uzyskać bieżącą długość otwartego pliku, użyj `LOF` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-1114">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1115">W tym przykładzie użyto `FileLen` funkcja zwraca długość pliku w bajtach.</span><span class="sxs-lookup"><span data-stu-id="20190-1115">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="20190-1116">Dla celów tego przykładu załóżmy, że `TestFile` jest plik, który zawiera dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1116">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="20190-1117">Plik nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1117">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-1118">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1118">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1119">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1119">Required.</span>
          </span>
          <span data-ttu-id="20190-1120">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1120">Any valid file number.</span>
          </span>
          <span data-ttu-id="20190-1121">Użyj <see langword="FreeFile" /> funkcję, aby uzyskać najbliższej liczby plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1121">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="20190-1122">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1122">Required.</span>
          </span>
          <span data-ttu-id="20190-1123">
            <see langword="String" /> wyrażenie, które określa nazwę pliku — może obejmować katalogu lub folderu i dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1123">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="20190-1124">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1124">Required.</span>
          </span>
          <span data-ttu-id="20190-1125">Wyliczenie opisujące tryb pliku: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, lub <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1125">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="20190-1126">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1126">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="20190-1127">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1127">Optional.</span>
          </span>
          <span data-ttu-id="20190-1128">Wyliczenie opisujące operacje dozwolona dla otwartego pliku: <see langword="Read" />, <see langword="Write" />, lub <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1128">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="20190-1129">Wartość domyślna to <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1129">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="20190-1130">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1130">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="20190-1131">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1131">Optional.</span>
          </span>
          <span data-ttu-id="20190-1132">Wyliczenie opisujące operacje jest niedozwolony otwartego pliku przez inne procesy: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, i <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1132">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="20190-1133">Wartość domyślna to <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1133">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="20190-1134">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1134">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="20190-1135">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1135">Optional.</span>
          </span>
          <span data-ttu-id="20190-1136">Liczbę mniejszą lub równą 32 767 znaków (w bajtach).</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1136">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="20190-1137">Dla plików otwartych do dostępu losowego ta wartość jest długość rekordu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1137">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="20190-1138">Dla kolejnych plików ta wartość jest liczbą znaków buforowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1138">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1139">Otwiera plik dla danych wejściowych lub wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1139">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="20190-1140">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1140">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="20190-1141">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1141">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1142">`FileOpen` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-1142">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-1143">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-1143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-1144">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-1144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-1145">Przed wykonaniem wszelkich operacji We/Wy na nim, należy otworzyć plik.</span><span class="sxs-lookup"><span data-stu-id="20190-1145">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="20190-1146">`FileOpen` przydziela bufor dla operacji We/Wy do pliku i określa tryb dostępu do używania z buforu.</span><span class="sxs-lookup"><span data-stu-id="20190-1146">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-1147">Podczas zapisywania do pliku, aplikacja może być konieczne utworzenie pliku, jeśli plik, który próbuje zapisać nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="20190-1147">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="20190-1148">Aby to zrobić, musi ona uprawnienia dla katalogu, w którym ma zostać utworzony plik.</span><span class="sxs-lookup"><span data-stu-id="20190-1148">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="20190-1149">Jednakże jeżeli plik określony przez `FileName` istnieje w zakresie aplikacji `Write` uprawnienia tylko do sam plik.</span><span class="sxs-lookup"><span data-stu-id="20190-1149">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="20190-1150">Wszędzie tam, gdzie to możliwe, aby pomóc zwiększyć bezpieczeństwo, tworzyć plik podczas wdrożenia i przyznać `Write` uprawnienie do tego pliku tylko, a nie do całego katalogu.</span><span class="sxs-lookup"><span data-stu-id="20190-1150">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="20190-1151">Aby zwiększyć bezpieczeństwo, zapisywać dane do katalogów użytkownika zamiast do katalogu głównego lub katalogu Program Files.</span><span class="sxs-lookup"><span data-stu-id="20190-1151">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="20190-1152">Kanał, aby otworzyć znajduje się za pomocą `FreeFile()` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-1152">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-1153">`FileOpen` Funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania.</span><span class="sxs-lookup"><span data-stu-id="20190-1153">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="20190-1154">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1154">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1155">Ten przykład ilustruje różne przypadki użycia `FileOpen` funkcję, aby włączyć dane wejściowe i wyjściowe do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1155">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="20190-1156">Poniższy kod zostanie otwarty plik `TestFile` w `Input` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1156">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="20190-1157">W tym przykładzie otwiera plik w `Binary` tryb tylko operacje zapisu.</span><span class="sxs-lookup"><span data-stu-id="20190-1157">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="20190-1158">W poniższym przykładzie otwierany plik w `Random` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1158">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="20190-1159">Ten plik zawiera rekordy struktury `Person`.</span><span class="sxs-lookup"><span data-stu-id="20190-1159">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="20190-1160">Ten przykład kodu otwiera plik w `Output` tryb; wszelkie może procesu Odczyt lub zapis do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1160">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="20190-1161">Ten przykład kodu otwiera plik w `Binary` trybie do odczytu; inne procesy nie można odczytać pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1161">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1162">Długość rekordu jest ujemna (i nie jest równa -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1162">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1163">
            <paramref name="FileName" /> jest jeszcze otwarty, lub <paramref name="FileName" /> jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1163">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-1164">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1164">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1165">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1165">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-1166">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1166">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1167">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1167">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1168">F, aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1168">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1169">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1169">Required.</span>
          </span>
          <span data-ttu-id="20190-1170">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1170">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1171">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1171">Required.</span>
          </span>
          <span data-ttu-id="20190-1172">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1172">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1173">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1173">Optional.</span>
          </span>
          <span data-ttu-id="20190-1174">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1174">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1175">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1175">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1176">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1176">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1177">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1177">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1178">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1178">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1179">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1179">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1180">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1180">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1181">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1181">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1182">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1182">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1183">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1183">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1184">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1184">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1185">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1185">Random Mode</span></span>  
 <span data-ttu-id="20190-1186">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1186">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1187">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1187">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1188">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1188">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1189">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1189">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1190">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1190">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1191">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1191">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1192">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1192">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1193">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1193">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1194">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1194">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1195">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1195">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1196">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1196">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1197">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1197">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1198">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1198">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1199">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1199">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1200">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1200">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1201">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1201">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1202">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1202">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1203">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1203">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1204">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1204">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1205">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1205">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1206">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1206">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1207">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1207">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1208">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1208">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1209">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1210">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1210">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1211">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1211">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1212">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1212">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1213">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1213">Binary Mode</span></span>  
 <span data-ttu-id="20190-1214">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1214">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1215">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1215">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1216">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1216">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1217">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1217">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1218">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1218">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1219">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1219">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1220">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1220">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1221">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1221">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1222">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1222">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1223">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1223">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1224">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1224">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1225">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1225">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1226">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1226">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1227">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1227">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1228">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1228">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1229">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1229">Required.</span>
          </span>
          <span data-ttu-id="20190-1230">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1230">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1231">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1231">Required.</span>
          </span>
          <span data-ttu-id="20190-1232">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1232">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1233">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1233">Optional.</span>
          </span>
          <span data-ttu-id="20190-1234">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1234">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1235">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1235">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1236">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1236">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1237">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1237">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1238">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1238">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1239">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1239">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1240">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1240">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1241">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1241">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1242">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1242">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1243">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1243">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1244">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1244">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1245">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1245">Random Mode</span></span>  
 <span data-ttu-id="20190-1246">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1246">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1247">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1247">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1248">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1248">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1249">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1249">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1250">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1250">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1251">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1251">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1252">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1252">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1253">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1253">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1254">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1254">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1255">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1255">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1256">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1256">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1257">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1257">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1258">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1258">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1259">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1259">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1260">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1260">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1261">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1261">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1262">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1262">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1263">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1263">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1264">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1264">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1265">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1265">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1266">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1266">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1267">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1267">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1268">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1268">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1269">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1270">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1270">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1271">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1271">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1272">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1272">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1273">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1273">Binary Mode</span></span>  
 <span data-ttu-id="20190-1274">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1274">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1275">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1275">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1276">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1276">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1277">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1277">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1278">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1278">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1279">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1279">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1280">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1280">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1281">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1281">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1282">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1282">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1283">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1283">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1284">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1284">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1285">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1285">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1286">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1286">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1287">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1287">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1288">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1288">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1289">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1289">Required.</span>
          </span>
          <span data-ttu-id="20190-1290">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1290">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1291">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1291">Required.</span>
          </span>
          <span data-ttu-id="20190-1292">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1292">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1293">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1293">Optional.</span>
          </span>
          <span data-ttu-id="20190-1294">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1294">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1295">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1295">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1296">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1296">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1297">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1297">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1298">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1298">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1299">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1299">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1300">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1300">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1301">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1301">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1302">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1302">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1303">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1303">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1304">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1304">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1305">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1305">Random Mode</span></span>  
 <span data-ttu-id="20190-1306">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1307">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1307">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1308">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1309">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1310">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1310">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1311">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1311">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1312">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1312">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1313">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1313">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1314">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1314">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1315">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1316">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1316">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1317">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1317">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1318">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1318">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1319">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1319">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1320">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1320">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1321">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1321">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1322">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1322">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1323">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1323">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1324">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1324">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1325">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1325">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1326">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1326">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1327">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1327">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1328">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1328">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1329">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1330">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1330">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1331">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1331">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1332">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1332">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1333">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1333">Binary Mode</span></span>  
 <span data-ttu-id="20190-1334">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1335">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1336">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1337">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1337">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1338">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1338">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1339">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1339">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1340">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1340">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1341">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1341">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1342">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1342">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1343">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1343">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1344">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1344">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1345">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1345">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1346">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1346">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1347">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1347">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1348">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1348">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1349">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1349">Required.</span>
          </span>
          <span data-ttu-id="20190-1350">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1350">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1351">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1351">Required.</span>
          </span>
          <span data-ttu-id="20190-1352">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1352">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1353">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1353">Optional.</span>
          </span>
          <span data-ttu-id="20190-1354">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1354">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1355">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1355">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1356">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1356">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1357">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1357">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1358">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1358">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1359">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1359">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1360">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1360">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1361">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1361">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1362">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1362">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1363">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1363">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1364">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1364">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1365">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1365">Random Mode</span></span>  
 <span data-ttu-id="20190-1366">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1366">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1367">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1367">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1368">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1368">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1369">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1369">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1370">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1370">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1371">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1371">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1372">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1372">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1373">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1373">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1374">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1374">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1375">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1375">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1376">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1376">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1377">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1378">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1378">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1379">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1379">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1380">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1380">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1381">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1381">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1382">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1382">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1383">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1383">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1384">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1384">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1385">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1385">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1386">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1387">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1387">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1388">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1388">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1389">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1390">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1390">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1391">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1391">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1392">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1392">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1393">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1393">Binary Mode</span></span>  
 <span data-ttu-id="20190-1394">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1394">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1395">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1395">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1396">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1396">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1397">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1397">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1398">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1398">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1399">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1399">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1400">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1400">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1401">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1401">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1402">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1402">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1403">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1403">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1404">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1404">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1405">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1405">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1406">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1406">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1407">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1408">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1408">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1409">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1409">Required.</span>
          </span>
          <span data-ttu-id="20190-1410">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1410">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1411">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1411">Required.</span>
          </span>
          <span data-ttu-id="20190-1412">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1412">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1413">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1413">Optional.</span>
          </span>
          <span data-ttu-id="20190-1414">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1414">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1415">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1415">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1416">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1417">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1417">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1418">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1418">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1419">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1419">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1420">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1420">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1421">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1421">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1422">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1422">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1423">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1423">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1424">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1424">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1425">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1425">Random Mode</span></span>  
 <span data-ttu-id="20190-1426">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1426">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1427">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1427">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1428">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1428">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1429">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1429">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1430">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1430">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1431">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1431">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1432">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1432">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1433">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1433">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1434">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1434">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1435">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1435">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1436">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1436">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1437">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1438">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1438">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1439">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1439">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1440">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1440">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1441">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1441">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1442">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1442">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1443">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1443">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1444">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1444">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1445">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1445">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1446">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1446">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1447">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1447">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1448">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1448">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1449">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1450">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1450">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1451">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1451">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1452">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1452">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1453">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1453">Binary Mode</span></span>  
 <span data-ttu-id="20190-1454">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1454">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1455">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1455">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1456">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1456">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1457">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1457">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1458">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1458">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1459">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1459">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1460">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1460">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1461">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1461">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1462">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1462">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1463">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1463">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1464">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1464">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1465">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1465">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1466">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1466">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1467">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1467">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1468">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1468">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1469">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1469">Required.</span>
          </span>
          <span data-ttu-id="20190-1470">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1471">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1471">Required.</span>
          </span>
          <span data-ttu-id="20190-1472">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1473">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1473">Optional.</span>
          </span>
          <span data-ttu-id="20190-1474">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1475">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1476">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1477">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1478">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1479">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1480">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1481">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1482">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1483">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1484">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1485">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1485">Random Mode</span></span>  
 <span data-ttu-id="20190-1486">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1487">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1488">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1489">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1490">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1491">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1492">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1493">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1494">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1495">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1496">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1497">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1498">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1499">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1500">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1501">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1502">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1503">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1504">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1505">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1506">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1507">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1508">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1509">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1510">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1511">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1512">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1513">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1513">Binary Mode</span></span>  
 <span data-ttu-id="20190-1514">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1515">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1516">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1517">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1518">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1519">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1520">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1521">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1522">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1523">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1524">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1525">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1526">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1527">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1528">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1528">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1529">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1529">Required.</span>
          </span>
          <span data-ttu-id="20190-1530">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1531">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1531">Required.</span>
          </span>
          <span data-ttu-id="20190-1532">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1533">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1533">Optional.</span>
          </span>
          <span data-ttu-id="20190-1534">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1535">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1536">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1537">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1538">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1539">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1540">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1541">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1542">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1543">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1544">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1545">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1545">Random Mode</span></span>  
 <span data-ttu-id="20190-1546">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1547">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1548">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1549">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1550">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1551">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1552">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1553">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1554">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1555">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1556">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący`VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1557">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1558">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1559">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1560">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1561">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1562">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1563">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1564">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1565">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1566">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1567">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1568">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1569">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1570">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1571">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1572">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1573">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1573">Binary Mode</span></span>  
 <span data-ttu-id="20190-1574">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1575">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1576">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1577">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1578">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1579">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1580">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1581">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1582">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1583">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1584">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1585">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1586">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1587">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1588">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1588">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1589">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1589">Required.</span>
          </span>
          <span data-ttu-id="20190-1590">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1590">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1591">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1591">Required.</span>
          </span>
          <span data-ttu-id="20190-1592">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1592">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1593">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1593">Optional.</span>
          </span>
          <span data-ttu-id="20190-1594">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1594">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1595">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1595">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1596">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1596">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1597">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1597">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1598">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1598">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1599">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1599">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1600">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1600">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1601">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1601">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1602">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1602">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1603">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1603">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1604">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1604">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1605">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1605">Random Mode</span></span>  
 <span data-ttu-id="20190-1606">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1606">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1607">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1607">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1608">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1608">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1609">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1609">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1610">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1610">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1611">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1611">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1612">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1612">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1613">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1613">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1614">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1614">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1615">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1616">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1616">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1617">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1617">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1618">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1618">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1619">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1619">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1620">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1620">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1621">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1621">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1622">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1622">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1623">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1623">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1624">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1625">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1626">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1626">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1627">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1628">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1628">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1629">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1630">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1630">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1631">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1631">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1632">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1632">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1633">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1633">Binary Mode</span></span>  
 <span data-ttu-id="20190-1634">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1634">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1635">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1635">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1636">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1636">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1637">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1637">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1638">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1638">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1639">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1639">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1640">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1640">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1641">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1641">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1642">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1642">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1643">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1643">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1644">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1644">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1645">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1645">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1646">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1646">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1647">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1647">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1648">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1649">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1649">Required.</span>
          </span>
          <span data-ttu-id="20190-1650">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1651">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1651">Required.</span>
          </span>
          <span data-ttu-id="20190-1652">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1652">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1653">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1653">Optional.</span>
          </span>
          <span data-ttu-id="20190-1654">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1655">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1655">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1656">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1657">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1658">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1658">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1659">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1659">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1660">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1661">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1661">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1662">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1662">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1663">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1663">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1664">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1664">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1665">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1665">Random Mode</span></span>  
 <span data-ttu-id="20190-1666">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1666">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1667">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1667">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1668">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1668">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1669">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1669">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1670">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1670">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1671">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1671">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1672">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1672">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1673">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1673">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1674">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1674">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1675">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1676">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1676">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1677">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1677">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1678">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1678">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1679">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1679">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1680">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1680">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1681">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1681">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1682">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1682">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1683">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1683">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1684">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1684">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1685">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1685">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1686">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1687">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1687">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1688">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1688">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1689">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1690">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1690">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1691">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1692">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1692">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1693">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1693">Binary Mode</span></span>  
 <span data-ttu-id="20190-1694">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1694">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1695">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1695">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1696">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1696">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1697">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1697">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1698">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1698">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1699">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1699">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1700">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1700">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1701">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1701">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1702">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1702">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1703">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1703">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1704">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1704">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1705">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1705">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1706">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1706">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1707">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1707">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1708">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1708">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1709">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1709">Required.</span>
          </span>
          <span data-ttu-id="20190-1710">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1710">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1711">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1711">Required.</span>
          </span>
          <span data-ttu-id="20190-1712">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1712">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1713">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1713">Optional.</span>
          </span>
          <span data-ttu-id="20190-1714">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1715">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1715">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1716">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1717">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1718">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1718">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1719">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1719">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1720">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1721">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1721">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1722">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1722">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1723">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1723">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1724">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1724">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1725">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1725">Random Mode</span></span>  
 <span data-ttu-id="20190-1726">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1726">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1727">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1727">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1728">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1728">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1729">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1729">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1730">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1730">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1731">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1731">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1732">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1732">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1733">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1733">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1734">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1734">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1735">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1735">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1736">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1736">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1737">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1738">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1738">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1739">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1739">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1740">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1740">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1741">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1741">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1742">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1742">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1743">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1743">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1744">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1744">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1745">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1745">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1746">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1747">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1747">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1748">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1748">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1749">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1750">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1750">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1751">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1752">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1752">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1753">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1753">Binary Mode</span></span>  
 <span data-ttu-id="20190-1754">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1754">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1755">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1755">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1756">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1756">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1757">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1757">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1758">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1758">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1759">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1759">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1760">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1760">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1761">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1761">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1762">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1762">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1763">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1763">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1764">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1764">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1765">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1765">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1766">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1766">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1767">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1767">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1768">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1768">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1769">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1769">Required.</span>
          </span>
          <span data-ttu-id="20190-1770">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1770">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1771">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1771">Required.</span>
          </span>
          <span data-ttu-id="20190-1772">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1772">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1773">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1773">Optional.</span>
          </span>
          <span data-ttu-id="20190-1774">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1774">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1775">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1775">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1776">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1777">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1778">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1778">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1779">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1779">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1780">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1780">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1781">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1781">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1782">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1782">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1783">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1783">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1784">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1784">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1785">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1785">Random Mode</span></span>  
 <span data-ttu-id="20190-1786">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1786">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1787">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w`RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1787">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1788">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1788">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1789">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1789">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1790">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1790">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1791">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1791">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1792">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1792">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1793">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1793">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1794">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1794">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1795">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1795">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1796">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1796">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1797">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1798">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1798">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1799">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1799">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1800">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1800">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1801">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1801">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1802">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1802">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1803">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1803">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1804">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1804">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1805">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1805">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1806">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1807">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1807">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1808">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1808">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1809">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1810">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1810">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1811">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1811">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1812">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1812">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1813">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1813">Binary Mode</span></span>  
 <span data-ttu-id="20190-1814">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1814">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1815">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1815">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1816">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1816">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1817">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1817">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1818">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1818">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1819">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1819">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1820">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1820">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1821">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1821">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1822">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1822">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1823">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1823">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1824">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1824">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1825">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1825">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1826">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1826">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1827">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1827">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1828">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1828">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1829">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1829">Required.</span>
          </span>
          <span data-ttu-id="20190-1830">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1830">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1831">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1831">Required.</span>
          </span>
          <span data-ttu-id="20190-1832">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1832">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1833">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1833">Optional.</span>
          </span>
          <span data-ttu-id="20190-1834">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1834">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1835">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1835">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1836">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1836">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1837">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1837">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1838">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1838">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1839">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1839">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1840">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1840">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1841">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1841">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1842">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1842">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1843">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1843">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1844">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1844">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1845">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1845">Random Mode</span></span>  
 <span data-ttu-id="20190-1846">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1846">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1847">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1847">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1848">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1848">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1849">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1849">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1850">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1850">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1851">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1851">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1852">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1852">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1853">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1853">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1854">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1854">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1855">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1856">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1856">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1857">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1857">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1858">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1858">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1859">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1859">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1860">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1860">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1861">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1861">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1862">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1862">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1863">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1863">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1864">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1865">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1866">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1866">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1867">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1868">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1868">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1869">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1870">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1870">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1871">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1871">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1872">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1872">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1873">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1873">Binary Mode</span></span>  
 <span data-ttu-id="20190-1874">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1874">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1875">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1875">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1876">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1876">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1877">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1877">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1878">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1878">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1879">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1879">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1880">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1880">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1881">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1881">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1882">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1882">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1883">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1883">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1884">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1884">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1885">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1885">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1886">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1886">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1887">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1887">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1888">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1888">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1889">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1889">Required.</span>
          </span>
          <span data-ttu-id="20190-1890">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1891">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1891">Required.</span>
          </span>
          <span data-ttu-id="20190-1892">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1892">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1893">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1893">Optional.</span>
          </span>
          <span data-ttu-id="20190-1894">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="20190-1895">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1895">Optional.</span>
          </span>
          <span data-ttu-id="20190-1896">Stosuje się tylko przy pisaniu ciągów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="20190-1897">Określa, czy chcesz zapisać ciąg dwubajtowy deskryptor długości ciągu do pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="20190-1898">Wartość domyślna to <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1899">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1900">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1901">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />...</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1902">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1903">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1904">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1905">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1906">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1907">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1908">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1909">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1909">Random Mode</span></span>  
 <span data-ttu-id="20190-1910">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1911">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1912">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1913">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1914">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1915">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1916">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1917">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1918">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1919">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1920">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1921">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1922">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1923">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1924">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1925">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1926">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1927">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1928">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1929">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1930">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1931">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1932">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-1933">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-1934">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-1935">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-1936">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-1937">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-1937">Binary Mode</span></span>  
 <span data-ttu-id="20190-1938">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-1939">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-1940">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-1941">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-1942">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-1943">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-1944">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-1945">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-1946">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-1947">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-1948">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-1949">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-1950">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-1951">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-1952">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1952">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-1953">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1953">Required.</span>
          </span>
          <span data-ttu-id="20190-1954">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-1955">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1955">Required.</span>
          </span>
          <span data-ttu-id="20190-1956">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-1957">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1957">Optional.</span>
          </span>
          <span data-ttu-id="20190-1958">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="20190-1959">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1959">Optional.</span>
          </span>
          <span data-ttu-id="20190-1960">Ma zastosowanie tylko wtedy, gdy pisania tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1960">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="20190-1961">Określa, czy tablica jest traktowane jako dynamiczne i czy należy napisać deskryptor ciąg, który opisuje długość tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1961">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="20190-1962">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1962">Optional.</span>
          </span>
          <span data-ttu-id="20190-1963">Stosuje się tylko przy pisaniu ciągów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1963">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="20190-1964">Określa, czy chcesz zapisać ciąg dwubajtowy deskryptor długości ciągu do pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1964">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="20190-1965">Wartość domyślna to <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1965">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-1966">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1966">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-1967">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1967">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="20190-1968">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-1968">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-1969">`FilePut` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-1969">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-1970">Dane zapisane z `FilePut` są zazwyczaj odczytywane z pliku za pomocą `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="20190-1970">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="20190-1971">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-1971">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-1972">Jeżeli pominięto `RecordNumber`, następny rekord lub bajt po ostatniej `FileGet` lub `FilePut` albo wskazany przez ostatnią `Seek` funkcja została napisana.</span><span class="sxs-lookup"><span data-stu-id="20190-1972">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="20190-1973">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1973">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-1974">`FilePut` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1974">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-1975">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePut`, należy wykonać takie same, z `FileGet`, musisz się upewnić, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-1975">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-1976">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-1976">Random Mode</span></span>  
 <span data-ttu-id="20190-1977">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-1977">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-1978">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-1978">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-1979">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-1979">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-1980">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-1980">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-1981">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-1981">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="20190-1982">Jeśli zmienna zapisywana jest ciągiem, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane wprowadzane do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1982">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="20190-1983">W związku z tym, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1983">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="20190-1984">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePut` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-1984">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-1985">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-1985">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-1986">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-1986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-1987">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePut` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1987">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-1988">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-1988">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-1989">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-1989">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-1990">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1990">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="20190-1991">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="20190-1991">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="20190-1992">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-1992">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="20190-1993">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-1993">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="20190-1994">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="20190-1994">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="20190-1995">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-1995">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-1996">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-1996">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="20190-1997">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-1997">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-1998">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-1998">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="20190-1999">Jeśli zmienna zapisywana stanowi inny typ zmiennej (nie ciąg znaków o zmiennej długości czy obiekt), `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="20190-1999">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="20190-2000">Długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa długości danych zapisanych.</span><span class="sxs-lookup"><span data-stu-id="20190-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="20190-2001">`FilePut` Zapisuje elementy struktury tak, jakby każdy był zapisywany indywidualnie, z wyjątkiem nie ma żadnych uzupełnień między elementami.</span><span class="sxs-lookup"><span data-stu-id="20190-2001">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="20190-2002">`VBFixedString` Atrybut można stosować do pól ciągu w strukturach, aby wskazywać wielkość ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-2002">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="20190-2003">Pola ciągu, które posiadają większą liczbę bajtów, niż określa `VBFixedString` atrybutu są obcinane w trakcie zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="20190-2003">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-2004">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-2004">Binary Mode</span></span>  
 <span data-ttu-id="20190-2005">Do plików otwieranych w `Binary` tryb, większość `Random` zastosować zasady dotyczące trybu, z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="20190-2005">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="20190-2006">Następujące reguły dotyczące plików otwarty w `Binary` tryb różnią się od reguł dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="20190-2006">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="20190-2007">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-2007">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-2008">`FilePut` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-2008">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="20190-2009">Dla tablicy innej niż tablica w strukturze `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="20190-2009">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="20190-2010">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="20190-2010">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="20190-2011">`FilePut` zapisuje ciągi o zmiennej długości, które nie są elementami struktury, bez deskryptora o długości dwóch bajtów.</span><span class="sxs-lookup"><span data-stu-id="20190-2011">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="20190-2012">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-2012">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="20190-2013">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="20190-2013">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="20190-2014">Zapisywanie do pliku za pomocą `FilePut` funkcja wymaga, aby `Write` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2014">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2015">W tym przykładzie użyto `FilePut` funkcję, aby zapisywać dane w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2015">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="20190-2016">Pięć rekordów struktury `Person` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2016">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-2017">
            <paramref name="RecordNumber" /> &lt; 1 i nie jest równa -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2017">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2018">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2018">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-2019">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2019">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2020">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2020">Required.</span>
          </span>
          <span data-ttu-id="20190-2021">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2021">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2022">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2022">Required.</span>
          </span>
          <span data-ttu-id="20190-2023">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2023">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="20190-2024">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2024">Optional.</span>
          </span>
          <span data-ttu-id="20190-2025">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu) gdzie rozpoczyna się zapisywanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2025">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2026">Zapisuje dane ze zmiennej do pliku na dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2026">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="20190-2027">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2027">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="20190-2028">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2028">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2029">`FilePutObject` Funkcja jest używana zamiast `FilePut` Aby uniknąć niejednoznaczności w czasie kompilacji, jeśli typ `Object` jest przekazywany zamiast innego typu, takie jak `Integer`, `Long`, `Short`, i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-2029">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="20190-2030">`FilePutObject` zapisuje i odczytuje deskryptory, które opisują obiektu.</span><span class="sxs-lookup"><span data-stu-id="20190-2030">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="20190-2031">Jeśli zamierzasz zapisać `Variant` typu `FilePutObject` jest wymagana.</span><span class="sxs-lookup"><span data-stu-id="20190-2031">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="20190-2032">W razie wątpliwości, jeśli używasz obiektu jako drugi parametr, firma Microsoft zaleca, aby zawsze używać `FilePutObject` i `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="20190-2032">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="20190-2033">`FilePutObject` jest prawidłowy tylko w `Random` i `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2033">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-2034">Dane zapisane z `FilePutObject` są zazwyczaj odczytywane z pliku za pomocą `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="20190-2034">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="20190-2035">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-2035">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="20190-2036">Jeżeli pominięto `RecordNumber`, `FilePutObject` zapisuje następny rekord lub bajt po ostatniej `FileGetObject` lub `FilePutObject` — funkcja (lub rekord lub bajt wskazywany przez ostatnią `Seek` funkcji).</span><span class="sxs-lookup"><span data-stu-id="20190-2036">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="20190-2037">`StringIsFixedLength` Argument określa, czy funkcja interpretuje ciągi jako zmiennej czy stałej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-2037">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="20190-2038">`FilePutObject` nie wpisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="20190-2038">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="20190-2039">Jeśli używasz `StringIsFixedLength`  =  `True` z `FilePutObject`, należy wykonać takie same, z `FileGetObject`, i należy również upewnić się, że ciąg został zainicjowany do oczekiwanej długości.</span><span class="sxs-lookup"><span data-stu-id="20190-2039">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="20190-2040">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="20190-2040">Random Mode</span></span>  
 <span data-ttu-id="20190-2041">Do plików otwieranych w `Random` tryb, są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="20190-2041">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="20190-2042">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji `FilePutObject` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-2042">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="20190-2043">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-2043">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="20190-2044">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest mieć długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-2044">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="20190-2045">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20190-2045">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="20190-2046">Jeśli zmienna zapisywana stanowi obiekt, który zawiera typ liczbowy `FilePutObject` zapisuje dwa bajty identyfikujące `VarType` obiektu, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="20190-2046">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="20190-2047">Na przykład podczas zapisywania obiektu zawierającego liczbę całkowitą z zakresu `FilePutObject` zapisuje sześć bajtów: dwa bajty, które identyfikują obiekt jako `VarType(3)` (`Integer`) i cztery bajty, które zawierają dane.</span><span class="sxs-lookup"><span data-stu-id="20190-2047">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="20190-2048">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej dwa bajty większa od rzeczywistej liczby bajtów potrzebnych do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-2048">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="20190-2049">Jeśli zmienna zapisywana stanowi obiekt, który zawiera ciąg, `FilePutObject` zapisuje deskryptor dwubajtowy identyfikujący `VarType(8)` obiektu, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-2049">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="20190-2050">Długość rekordu określana przez `RecordLength` parametru w `FileOpen` funkcja musi być co najmniej cztery bajty większa od rzeczywistej długości ciągu.</span><span class="sxs-lookup"><span data-stu-id="20190-2050">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="20190-2051">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` do `StringIsFixedLength` parametru, a wczytywany ciąg powinien mieć odpowiednią długość.</span><span class="sxs-lookup"><span data-stu-id="20190-2051">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="20190-2052">Jeśli zmienna zapisywana jest tablica, długość rekordu określana przez `RecordLength` w klauzuli `FileOpen` funkcja musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="20190-2052">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="20190-2053">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="20190-2053">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="20190-2054">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="20190-2054">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="20190-2055">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="20190-2055">Binary Mode</span></span>  
 <span data-ttu-id="20190-2056">Do plików otwieranych w `Binary` trybie wszystkie `Random` zastosować zasady dotyczące trybu, z wyjątkiem:</span><span class="sxs-lookup"><span data-stu-id="20190-2056">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="20190-2057">`RecordLength` w klauzuli `FileOpen` funkcja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="20190-2057">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="20190-2058">`FilePutObject` zapisuje wszystkie zmienne na dysku w sposób ciągły, to znaczy bez uzupełnień między rekordami.</span><span class="sxs-lookup"><span data-stu-id="20190-2058">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2059">W tym przykładzie użyto `FilePutObject` funkcję, aby zapisać ciąg do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2059">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-2060">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2060">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2061">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2061">Required.</span>
          </span>
          <span data-ttu-id="20190-2062">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2062">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="20190-2063">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2063">Required.</span>
          </span>
          <span data-ttu-id="20190-2064">Wyrażenie liczbowe w zakresie 0 – 255 włącznie, co oznacza liczbę znaków, są wyświetlane w wierszu, przed rozpoczęciem nowego wiersza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2064">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="20190-2065">Jeśli <c>RecordWidth</c> jest równa 0, nie ma żadnego limitu długości wiersza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2065">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="20190-2066">Wartością domyślną dla <c>RecordWidth</c> wynosi 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2066">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2067">Przypisuje szerokość linii danych wyjściowych w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2067">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="20190-2068">W tym przykładzie użyto `FileWidth` funkcję, aby ustawić szerokość linii danych wyjściowych dla pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2068">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2069">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2069">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2070">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2070">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20190-2071">Zwraca <see langword="Integer" /> wartość reprezentująca następny dostępny do użytku przez numer pliku <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2071">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2072">Zwraca <see langword="Integer" /> wartość reprezentująca następny dostępny do użytku przez numer pliku <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2072">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2073">Użyj `FreeFile` podawać numer pliku, który nie jest już używana.</span><span class="sxs-lookup"><span data-stu-id="20190-2073">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2074">W tym przykładzie użyto `FreeFile` funkcja zwraca następny dostępny numer pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2074">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="20190-2075">Pięć plików są otwarte dla danych wyjściowych w ramach pętli i przykładowe dane są zapisywane do każdego.</span><span class="sxs-lookup"><span data-stu-id="20190-2075">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2076">Więcej niż 255 pliki są używane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2076">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-2077">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2077">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="20190-2078">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2078">Required.</span>
          </span>
          <span data-ttu-id="20190-2079">
            <see langword="String" /> wyrażenie, który określa nazwę pliku, katalogu lub folderu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2079">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="20190-2080">
            <c>Nazwa ścieżki</c> może zawierać katalogu lub folderu i dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2080">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2081">Zwraca <see langword="FileAttribute" /> wartość, która reprezentuje atrybuty pliku, katalogu lub folderu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2081">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="20190-2082">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2082">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="20190-2083">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2083">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2084">Wartość zwrócona przez obiekt <see langword="GetAttr" /> jest sumą wartości wyliczenia następujące:</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2084">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="20190-2085">Wartość</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2085">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="20190-2086">Stała</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2086">Constant</span>
                </span>
              </description>
              <description>
                <span data-ttu-id="20190-2087">Opis</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2087">Description</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Normal" />
              </term>
              <description>
                <see langword="vbNormal" />
              </description>
              <description>
                <span data-ttu-id="20190-2088">Normalny.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2088">Normal.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="ReadOnly" />
              </term>
              <description>
                <see langword="vbReadOnly" />
              </description>
              <description>
                <span data-ttu-id="20190-2089">Tylko do odczytu.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2089">Read-only.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Hidden" />
              </term>
              <description>
                <see langword="vbHidden" />
              </description>
              <description>
                <span data-ttu-id="20190-2090">Ukryte.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2090">Hidden.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="System" />
              </term>
              <description>
                <see langword="vbSystem" />
              </description>
              <description>
                <span data-ttu-id="20190-2091">System plików.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2091">System file.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Directory" />
              </term>
              <description>
                <see langword="vbDirectory" />
              </description>
              <description>
                <span data-ttu-id="20190-2092">Katalogu lub folderu.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2092">Directory or folder.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Archive" />
              </term>
              <description>
                <see langword="vbArchive" />
              </description>
              <description>
                <span data-ttu-id="20190-2093">Plik został zmieniony od czasu wykonania ostatniej kopii zapasowej.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2093">File has changed since last backup.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Alias" />
              </term>
              <description>
                <see langword="vbAlias" />
              </description>
              <description>
                <span data-ttu-id="20190-2094">Plik ma inną nazwę.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="20190-2094">File has a different name.</span>
                </span>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="20190-2095">Te wyliczenia są określane za pomocą języka Visual Basic.</span>
              <span class="sxs-lookup">
                <span data-stu-id="20190-2095">These enumerations are specified by the Visual Basic language.</span>
              </span>
              <span data-ttu-id="20190-2096">Nazwy mogą być używane w dowolnym miejscu w kodzie zamiast wartości faktycznych.</span>
              <span class="sxs-lookup">
                <span data-stu-id="20190-2096">The names can be used anywhere in your code in place of the actual values.</span>
              </span>
            </para>
          </block>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2097">Aby określić, które atrybuty są ustawione, użyj `And` operatora bitowego porównania wartości zwracanej przez `GetAttr` funkcji i wartość wybranego atrybutu pliku chcesz.</span><span class="sxs-lookup"><span data-stu-id="20190-2097">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="20190-2098">Jeśli wynik nie wynosi zero, ten atrybut jest ustawiony dla wskazanego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2098">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="20190-2099">Na przykład, wartość zwracana przez następujące `And` wyrażenie jest zero, jeśli `Archive` nie ustawiono atrybutu:</span><span class="sxs-lookup"><span data-stu-id="20190-2099">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="20190-2100">Wartość różną od zera jest zwracany, jeśli `Archive` ma ustawioną wartość atrybutu.</span><span class="sxs-lookup"><span data-stu-id="20190-2100">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2101">W tym przykładzie użyto `GetAttr` funkcję, aby określić atrybuty pliku i katalogu lub folderu.</span><span class="sxs-lookup"><span data-stu-id="20190-2101">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2102">
            <paramref name="Pathname" /> jest nieprawidłowa lub zawiera symbole wieloznaczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2102">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="20190-2103">Plik docelowy nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2103">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md">
          <span data-ttu-id="20190-2104">And — Operator (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2104">And Operator (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2105">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2105">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-2106">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2106">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2107">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2107">Required.</span>
          </span>
          <span data-ttu-id="20190-2108">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2108">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2109">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2109">Required.</span>
          </span>
          <span data-ttu-id="20190-2110">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2110">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2111">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2111">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2112">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2112">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2113">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2113">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2114">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2114">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2115">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2115">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2116">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2116">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2117">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2117">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2118">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2118">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2119">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2119">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2120">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2120">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2121">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2121">Data</span></span>|<span data-ttu-id="20190-2122">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2122">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2123">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2123">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2124">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2124">Empty</span></span>|  
|<span data-ttu-id="20190-2125">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2125">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2126">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2126">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2127">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2127">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2128">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2128">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2129">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2129">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2130">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2130">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2131">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2131">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2132">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2132">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2133">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2133">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2134">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2134">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2135">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2135">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2136">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2136">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2137">W tym przykładzie założono, że `TestFile` plik, który ma kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2137">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2138">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2138">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2139">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2139">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2140">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2140">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2141">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2141">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2142">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2142">Required.</span>
          </span>
          <span data-ttu-id="20190-2143">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2143">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2144">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2144">Required.</span>
          </span>
          <span data-ttu-id="20190-2145">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2145">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2146">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2146">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2147">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2147">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2148">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2148">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2149">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2149">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2150">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2150">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2151">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2151">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2152">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2152">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2153">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2153">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2154">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2154">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2155">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2155">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2156">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2156">Data</span></span>|<span data-ttu-id="20190-2157">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2157">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2158">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2158">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2159">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2159">Empty</span></span>|  
|<span data-ttu-id="20190-2160">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2160">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2161">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2161">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2162">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2162">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2163">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2163">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2164">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2164">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2165">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2165">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2166">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2166">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2167">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2167">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2168">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2168">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2169">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2169">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2170">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2170">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2171">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2171">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2172">W tym przykładzie założono, że `TestFile` plik, który ma kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2172">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2173">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2174">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2174">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2175">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2175">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2176">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2176">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2177">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2177">Required.</span>
          </span>
          <span data-ttu-id="20190-2178">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2178">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2179">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2179">Required.</span>
          </span>
          <span data-ttu-id="20190-2180">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2180">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2181">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2181">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2182">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2182">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2183">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2183">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2184">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2184">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2185">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2185">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2186">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2186">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2187">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2187">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2188">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2188">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2189">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2189">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2190">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2190">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2191">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2191">Data</span></span>|<span data-ttu-id="20190-2192">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2192">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2193">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2193">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2194">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2194">Empty</span></span>|  
|<span data-ttu-id="20190-2195">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2195">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2196">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2196">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2197">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2197">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2198">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2198">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2199">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2199">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2200">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2200">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2201">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2201">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2202">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2202">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2203">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2203">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2204">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2204">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2205">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2205">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2206">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2206">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2207">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2207">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2208">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2208">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2209">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2209">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2210">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2210">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2211">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2211">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2212">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2212">Required.</span>
          </span>
          <span data-ttu-id="20190-2213">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2213">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2214">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2214">Required.</span>
          </span>
          <span data-ttu-id="20190-2215">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2215">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2216">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2216">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2217">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2217">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2218">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2218">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2219">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2219">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2220">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2220">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2221">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2221">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2222">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2222">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2223">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2223">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2224">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2224">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2225">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2225">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2226">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2226">Data</span></span>|<span data-ttu-id="20190-2227">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2227">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2228">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2228">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2229">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2229">Empty</span></span>|  
|<span data-ttu-id="20190-2230">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2230">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2231">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2231">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2232">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2232">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2233">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2233">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2234">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2234">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2235">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2235">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2236">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2236">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2237">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2237">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2238">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2238">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2239">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2239">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2240">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2240">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2241">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2241">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2242">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2242">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2243">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2243">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2244">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2244">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2245">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2245">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2246">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2246">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2247">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2247">Required.</span>
          </span>
          <span data-ttu-id="20190-2248">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2248">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2249">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2249">Required.</span>
          </span>
          <span data-ttu-id="20190-2250">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2250">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2251">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2251">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2252">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2252">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2253">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2253">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2254">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2254">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2255">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2255">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2256">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2256">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2257">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2257">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2258">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2258">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2259">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2259">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2260">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2260">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2261">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2261">Data</span></span>|<span data-ttu-id="20190-2262">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2262">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2263">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2263">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2264">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2264">Empty</span></span>|  
|<span data-ttu-id="20190-2265">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2265">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2266">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2266">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2267">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2267">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2268">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2268">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2269">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2269">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2270">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2270">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2271">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2271">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2272">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2272">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2273">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2273">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2274">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2274">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2275">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2275">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2276">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2276">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2277">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2277">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2278">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2278">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2279">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2279">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2280">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2280">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2281">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2281">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2282">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2282">Required.</span>
          </span>
          <span data-ttu-id="20190-2283">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2283">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2284">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2284">Required.</span>
          </span>
          <span data-ttu-id="20190-2285">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2285">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2286">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2286">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2287">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2287">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2288">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2288">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2289">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2289">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2290">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2290">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2291">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2291">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2292">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2292">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2293">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2293">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2294">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2294">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2295">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2295">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2296">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2296">Data</span></span>|<span data-ttu-id="20190-2297">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2297">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2298">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2298">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2299">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2299">Empty</span></span>|  
|<span data-ttu-id="20190-2300">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2300">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2301">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2301">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2302">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2302">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2303">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2303">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2304">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2304">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2305">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2305">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2306">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2306">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2307">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2307">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2308">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2308">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2309">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2309">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2310">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2310">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2311">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2311">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2312">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2312">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2313">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2313">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2314">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2314">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2315">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2315">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2316">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2316">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2317">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2317">Required.</span>
          </span>
          <span data-ttu-id="20190-2318">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2318">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2319">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2319">Required.</span>
          </span>
          <span data-ttu-id="20190-2320">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2320">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2321">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2321">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2322">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2322">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2323">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2323">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2324">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2324">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2325">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2325">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2326">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2326">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2327">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2327">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2328">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2328">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2329">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2329">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2330">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2330">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2331">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2331">Data</span></span>|<span data-ttu-id="20190-2332">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2332">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2333">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2333">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2334">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2334">Empty</span></span>|  
|<span data-ttu-id="20190-2335">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2335">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2336">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2336">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2337">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2337">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2338">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2338">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2339">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2339">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2340">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2340">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2341">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2341">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2342">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2342">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2343">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2343">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2344">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2344">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2345">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2345">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2346">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2346">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2347">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2347">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2348">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2348">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2349">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2349">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2350">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2350">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2351">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2351">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2352">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2352">Required.</span>
          </span>
          <span data-ttu-id="20190-2353">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2354">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2354">Required.</span>
          </span>
          <span data-ttu-id="20190-2355">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2355">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2356">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2356">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2357">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2357">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2358">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2358">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2359">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2359">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2360">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2360">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2361">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2361">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2362">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2362">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2363">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2363">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2364">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2364">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2365">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2365">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2366">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2366">Data</span></span>|<span data-ttu-id="20190-2367">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2367">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2368">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2368">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2369">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2369">Empty</span></span>|  
|<span data-ttu-id="20190-2370">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2370">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2371">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2371">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2372">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2372">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2373">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2373">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2374">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2374">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2375">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2375">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2376">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2376">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2377">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2377">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2378">Na przykład w niemieckiej wersji, gdy wejściowe 3,14159, zwraca tylko 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2378">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2379">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2379">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2380">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2380">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2381">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2381">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2382">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2382">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2383">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2383">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2384">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2384">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2385">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2385">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2386">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2386">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2387">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2387">Required.</span>
          </span>
          <span data-ttu-id="20190-2388">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2388">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2389">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2389">Required.</span>
          </span>
          <span data-ttu-id="20190-2390">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2390">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2391">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2391">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2392">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2392">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2393">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2393">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2394">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2394">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2395">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2395">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2396">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2396">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2397">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2397">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2398">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2398">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2399">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2399">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2400">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2400">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2401">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2401">Data</span></span>|<span data-ttu-id="20190-2402">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2402">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2403">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2403">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2404">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2404">Empty</span></span>|  
|<span data-ttu-id="20190-2405">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2405">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2406">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2406">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2407">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2407">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2408">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2408">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2409">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2409">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2410">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2410">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2411">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2411">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2412">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2412">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2413">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2413">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2414">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2414">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2415">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2415">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2416">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2416">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2417">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2417">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2418">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2419">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2419">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2420">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2420">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2421">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2421">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2422">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2422">Required.</span>
          </span>
          <span data-ttu-id="20190-2423">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2423">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2424">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2424">Required.</span>
          </span>
          <span data-ttu-id="20190-2425">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2425">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2426">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2426">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2427">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2427">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2428">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2428">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2429">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2429">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2430">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2430">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2431">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2431">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2432">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2432">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2433">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2433">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2434">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2434">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2435">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2435">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2436">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2436">Data</span></span>|<span data-ttu-id="20190-2437">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2437">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2438">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2438">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2439">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2439">Empty</span></span>|  
|<span data-ttu-id="20190-2440">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2440">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2441">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2441">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2442">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2442">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2443">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2443">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2444">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2444">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2445">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2445">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2446">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2446">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2447">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2447">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2448">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2448">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2449">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2449">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2450">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2450">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2451">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2451">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2452">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2452">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2453">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2453">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2454">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2454">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2455">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2455">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2456">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2456">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2457">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2457">Required.</span>
          </span>
          <span data-ttu-id="20190-2458">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2458">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2459">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2459">Required.</span>
          </span>
          <span data-ttu-id="20190-2460">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2460">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2461">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2461">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2462">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2462">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2463">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2463">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2464">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2464">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2465">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2465">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2466">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2466">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2467">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2467">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2468">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2468">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2469">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2469">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2470">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2470">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2471">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2471">Data</span></span>|<span data-ttu-id="20190-2472">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2472">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2473">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2473">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2474">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2474">Empty</span></span>|  
|<span data-ttu-id="20190-2475">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2475">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2476">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2476">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2477">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2477">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2478">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2478">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2479">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2479">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2480">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2480">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2481">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2481">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2482">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2482">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2483">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2483">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2484">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2484">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2485">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2485">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2486">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2486">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2487">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2487">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2488">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2488">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2489">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2489">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2490">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2490">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2491">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2491">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2492">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2492">Required.</span>
          </span>
          <span data-ttu-id="20190-2493">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2493">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="20190-2494">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2494">Required.</span>
          </span>
          <span data-ttu-id="20190-2495">Zmienna, której przypisano wartości odczytane z pliku — nie może być zmienną tablicy lub obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2495">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2496">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2496">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2497">`Input` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2497">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2498">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2498">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2499">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2499">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2500">Dane odczytane z `Input` są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="20190-2500">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="20190-2501">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2501">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2502">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2502">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2503">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="20190-2503">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="20190-2504">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2504">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="20190-2505">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="20190-2505">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="20190-2506">Dane</span><span class="sxs-lookup"><span data-stu-id="20190-2506">Data</span></span>|<span data-ttu-id="20190-2507">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="20190-2507">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="20190-2508">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="20190-2508">Delimiting comma or blank line</span></span>|<span data-ttu-id="20190-2509">Pusty</span><span class="sxs-lookup"><span data-stu-id="20190-2509">Empty</span></span>|  
|<span data-ttu-id="20190-2510">#NULL #</span><span class="sxs-lookup"><span data-stu-id="20190-2510">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="20190-2511">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="20190-2511">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="20190-2512">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="20190-2512">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="20190-2513">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="20190-2513">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="20190-2514">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="20190-2514">#ERROR `errornumber`#</span></span>|<span data-ttu-id="20190-2515">`errornumber` (zmienna jest obiektem oznaczanym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="20190-2515">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="20190-2516">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2516">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2517">`Input` Funkcja nie jest lokalizowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2517">The `Input` function is not localized.</span></span> <span data-ttu-id="20190-2518">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="20190-2518">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2519">Podczas odczytu z pliku za pomocą `Input` funkcja wymaga, aby `Read` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2519">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2520">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="20190-2520">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2521">W tym przykładzie użyto `Input` funkcji w celu odczytania danych z pliku do dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="20190-2521">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="20190-2522">W tym przykładzie założono, że `TestFile` to plik zawierający kilka wierszy danych zapisanych przy użyciu `Write` funkcji, każdy wiersz zawiera ciąg w cudzysłowach i liczbę, oddzielone przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="20190-2522">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2523">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2523">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2524">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2524">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2525">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2525">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2526">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2526">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2527">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2527">Required.</span>
          </span>
          <span data-ttu-id="20190-2528">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2528">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="20190-2529">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2529">Required.</span>
          </span>
          <span data-ttu-id="20190-2530">Dowolne prawidłowe wyrażenie liczbowe określającą liczbę znaków do odczytania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2530">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2531">Zwraca <see langword="String" /> wartość, która zawiera znaki z pliku otwarte w <see langword="Input" /> lub <see langword="Binary" /> trybu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2531">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="20190-2532">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="20190-2533">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2534">Zwraca <see langword="String" /> wartość, która zawiera znaki z pliku otwarte w <see langword="Input" /> lub <see langword="Binary" /> trybu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="20190-2535">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2536">`InputString` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2536">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2537">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2537">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2538">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2538">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2539">Dane odczytane z `InputString` funkcji są zwykle zapisywane w pliku przy użyciu `Print` lub `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="20190-2539">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="20190-2540">Funkcja ta jest widoczny tylko w przypadku plików otwartych w `Input` lub `Binary` trybu.</span><span class="sxs-lookup"><span data-stu-id="20190-2540">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="20190-2541">W odróżnieniu od `Input` funkcji `InputString` funkcja zwraca wszystkie znaki, zostanie odczytanych.</span><span class="sxs-lookup"><span data-stu-id="20190-2541">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="20190-2542">W tym przecinki, znaki powrotu karetki, wysuwu wiersza, znaki cudzysłowu i spacje.</span><span class="sxs-lookup"><span data-stu-id="20190-2542">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="20190-2543">W przypadku plików otwartych do `Binary` dostęp do próba odczytania pliku przy użyciu `InputString` działać do momentu `EOF` zwraca `True` generuje błąd.</span><span class="sxs-lookup"><span data-stu-id="20190-2543">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="20190-2544">Użyj `LOF` i `Loc` funkcji zamiast `EOF` podczas odczytu plików binarnych za pomocą `InputString`, lub użyj `FileGet` zastosowania `EOF` — funkcja.</span><span class="sxs-lookup"><span data-stu-id="20190-2544">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2545">Podczas odczytu z plików, nie należy wprowadzać zabezpieczeń decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2545">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="20190-2546">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-2546">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2547">W tym przykładzie użyto `InputString` funkcję, aby przeczytać o jeden znak w czasie z pliku i wydrukuj go do `Output` okna.</span><span class="sxs-lookup"><span data-stu-id="20190-2547">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="20190-2548">W tym przykładzie założono, że `MyFile` to plik tekstowy, który ma kilka wierszy przykładowych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-2548">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2549">
            <paramref name="FileNumber" /> nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2549">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-2550">
            <paramref name="CharCount" /> &lt; 0 lub &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2550">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2551">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2551">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2552">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2552">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2553">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2553">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="20190-2554">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2554">Required.</span>
          </span>
          <span data-ttu-id="20190-2555">
            <see langword="String" /> wyrażenie określające jedną lub więcej nazw plików do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2555">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="20190-2556">
            <c>Nazwa ścieżki</c> może zawierać katalogu lub folderu i dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2556">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2557">Usuwa pliki z dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2557">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="20190-2558">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2558">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="20190-2559">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2559">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2560">`Kill` obsługuje korzystanie z wielu znaków (`*`) i pojedynczych znaków (`?`) symboli wieloznacznych do określenia wielu plików.</span><span class="sxs-lookup"><span data-stu-id="20190-2560">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="20190-2561">**Uwaga dotycząca zabezpieczeń** w celu wykonania `Kill` funkcja wymaga, aby `Read` i `PathDiscovery` flagi <xref:System.Security.Permissions.FileIOPermission> mieć uprawnienia do wykonywania kodu.</span><span class="sxs-lookup"><span data-stu-id="20190-2561">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="20190-2562">Aby uzyskać więcej informacji, zobacz <xref:System.Security.SecurityException> [uprawnienia dostępu kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="20190-2562">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2563">W tym przykładzie użyto `Kill` funkcję, aby usunąć plik z dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-2563">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2564">Otwieranie plików docelowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2564">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="20190-2565">Nie można odnaleźć plików docelowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2565">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="20190-2566">Odmowa uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2566">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2567">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2567">Required.</span>
          </span>
          <span data-ttu-id="20190-2568">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2568">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2569">Odczytuje pojedynczy wiersz z otwartego pliku sekwencyjnego i przypisuje go do <see langword="String" /> zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2569">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2570">Odczytuje pojedynczy wiersz z otwartego pliku sekwencyjnego i przypisuje go do <see langword="String" /> zmiennej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2570">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2571">`LineInput` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2571">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2572">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2572">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2573">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2573">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2574">Dane odczytane z `LineInput` są zwykle zapisywane w pliku przy użyciu `Print`.</span><span class="sxs-lookup"><span data-stu-id="20190-2574">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2575">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2575">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="20190-2576">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-2576">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="20190-2577">`LineInput` Funkcja odczytuje z pliku o jeden znak w danym momencie, aż do napotkania znaku powrotu karetki (`Chr(13)`) lub zwrotu/wiersz źródła danych (`Chr(13) + Chr(10)`) sekwencji.</span><span class="sxs-lookup"><span data-stu-id="20190-2577">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="20190-2578">Sekwencje kanału informacyjnego powrotu/wiersza powrotu karetki są pomijane zamiast dołączany do ciągu znaków.</span><span class="sxs-lookup"><span data-stu-id="20190-2578">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2579">Podczas odczytu z pliku za pomocą `LineInput` funkcja wymaga, aby `Read` dostęp z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2579">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2580">W tym przykładzie użyto `LineInput` funkcję, aby odczytać wiersz z pliku sekwencyjnego i przypisać ją do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="20190-2580">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="20190-2581">W tym przykładzie założono, że `TestFile` to plik tekstowy, który ma kilka wierszy przykładowych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-2581">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="20190-2582">Osiągnięto koniec pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2582">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2583">
            <paramref name="FileNumber" /> nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2583">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2584">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2584">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2585">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2585">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2586">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2586">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2587">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2587">Required.</span>
          </span>
          <span data-ttu-id="20190-2588">Dowolne, prawidłowe <see langword="Integer" /> pliku numer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2588">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2589">Zwraca <see langword="Long" /> wartość określającą bieżącą pozycję odczytu/zapisu w otwartego pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2589">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2590">Zwraca <see langword="Long" /> wartość określającą bieżącą pozycję odczytu/zapisu w otwartego pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2590">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2591">`Loc` Funkcji jest liczony od zera; korzystania z niego pobrać pierwszy bajt w pliku zwróci wartość 0.</span><span class="sxs-lookup"><span data-stu-id="20190-2591">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="20190-2592">`Loc` Funkcja zapewnia zgodność z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2592">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2593">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2593">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2594">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2594">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2595">Poniżej opisano wartość zwracana przez każdy tryb dostępu do pliku:</span><span class="sxs-lookup"><span data-stu-id="20190-2595">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="20190-2596">Tryb</span><span class="sxs-lookup"><span data-stu-id="20190-2596">Mode</span></span>|<span data-ttu-id="20190-2597">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="20190-2597">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="20190-2598">Numer ostatniego rekordu odczytywany lub zapisywany do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2598">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="20190-2599">Bieżące położenie bajtów w pliku podzielona przez 128.</span><span class="sxs-lookup"><span data-stu-id="20190-2599">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="20190-2600">Jednak informacje zwrócone przez `Loc` dla kolejnych plików nie jest używany ani wymagane.</span><span class="sxs-lookup"><span data-stu-id="20190-2600">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="20190-2601">Położenie ostatniego bajtu zapisu lub odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-2601">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="20190-2602">W tym przykładzie użyto `Loc` funkcja zwraca bieżącą pozycję odczytu/zapisu w otwartego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2602">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="20190-2603">W tym przykładzie założono, że `MyFile` to plik tekstowy, który ma kilka wierszy przykładowych danych.</span><span class="sxs-lookup"><span data-stu-id="20190-2603">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2604">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2604">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-2605">Służy do sterowania dostępem innych procesów do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2605">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="20190-2606">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Lock" /> i <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2606">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="20190-2607">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2607">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2608">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2608">Required.</span>
          </span>
          <span data-ttu-id="20190-2609">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2609">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2610">Służy do sterowania dostępem innych procesów do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2610">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="20190-2611">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Lock" /> i <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2611">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="20190-2612">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2612">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2613">`Lock` i `Unlock` funkcje są używane w środowiskach, w których kilka procesów wymaga dostępu do tego samego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2613">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="20190-2614">`Lock` i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="20190-2614">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="20190-2615">Argumenty `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="20190-2615">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="20190-2616">Jeśli `Record`, lub `FromRecord` i `ToRecord` są nie zostanie podany, blokada obejmie cały plik.</span><span class="sxs-lookup"><span data-stu-id="20190-2616">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="20190-2617">Jeśli `Record` samodzielnie zostanie określony pojedynczy rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2617">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="20190-2618">Jeśli plik został otwarty do sekwencyjnego danych wejściowych lub wyjściowych, `Lock` i `Unlock` dotyczą całego pliku, niezależnie od tego, w zakresie określonym przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="20190-2618">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2619">Ten przykład ilustruje użycie `Lock` i `Unlock` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2619">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="20190-2620">W tym przykładzie założono, że `People.txt` to plik zawierający rekordy struktury `Person`.</span><span class="sxs-lookup"><span data-stu-id="20190-2620">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2621">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2621">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2622">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2622">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2623">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2623">Required.</span>
          </span>
          <span data-ttu-id="20190-2624">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2624">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="20190-2625">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2625">Optional.</span>
          </span>
          <span data-ttu-id="20190-2626">Liczba tylko rekord lub bajt do zablokowania lub odblokowania</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2626">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2627">Służy do sterowania dostępem innych procesów do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2627">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="20190-2628">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Lock" /> i <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="20190-2629">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2630">`Lock` i `Unlock` funkcje są używane w środowiskach, w których kilka procesów wymaga dostępu do tego samego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2630">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="20190-2631">`Lock` i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="20190-2631">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="20190-2632">Argumenty `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="20190-2632">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="20190-2633">Jeśli `Record`, lub `FromRecord` i `ToRecord` są nie zostanie podany, blokada obejmie cały plik.</span><span class="sxs-lookup"><span data-stu-id="20190-2633">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="20190-2634">Jeśli `Record` samodzielnie zostanie określony pojedynczy rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2634">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="20190-2635">Jeśli plik został otwarty do sekwencyjnego danych wejściowych lub wyjściowych, `Lock` i `Unlock` dotyczą całego pliku, niezależnie od tego, w zakresie określonym przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="20190-2635">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2636">Ten przykład ilustruje użycie `Lock` i `Unlock` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2636">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="20190-2637">W tym przykładzie założono, że `People.txt` to plik zawierający rekordy struktury `Person`.</span><span class="sxs-lookup"><span data-stu-id="20190-2637">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2638">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2638">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2639">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2639">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2640">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2640">Required.</span>
          </span>
          <span data-ttu-id="20190-2641">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2641">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="20190-2642">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2642">Optional.</span>
          </span>
          <span data-ttu-id="20190-2643">Liczba pierwszy rekord lub bajt, aby zablokować lub odblokować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2643">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="20190-2644">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2644">Optional.</span>
          </span>
          <span data-ttu-id="20190-2645">Liczba ostatnich rekord lub bajt, aby zablokować lub odblokować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2645">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2646">Służy do sterowania dostępem innych procesów do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2646">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="20190-2647">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Lock" /> i <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2647">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="20190-2648">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2648">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2649">`Lock` i `Unlock` funkcje są używane w środowiskach, w których kilka procesów wymaga dostępu do tego samego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2649">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="20190-2650">`Lock` i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="20190-2650">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="20190-2651">Argumenty `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="20190-2651">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="20190-2652">Jeśli `Record`, lub `FromRecord` i `ToRecord` są nie zostanie podany, blokada obejmie cały plik.</span><span class="sxs-lookup"><span data-stu-id="20190-2652">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="20190-2653">Jeśli `Record` samodzielnie zostanie określony pojedynczy rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2653">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="20190-2654">Jeśli plik został otwarty do sekwencyjnego danych wejściowych lub wyjściowych, `Lock` i `Unlock` dotyczą całego pliku, niezależnie od tego, w zakresie określonym przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="20190-2654">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2655">Ten przykład ilustruje użycie `Lock` i `Unlock` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2655">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="20190-2656">W tym przykładzie założono, że `People.txt` to plik zawierający rekordy struktury `Person`.</span><span class="sxs-lookup"><span data-stu-id="20190-2656">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2657">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2657">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2658">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2658">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2659">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2659">Required.</span>
          </span>
          <span data-ttu-id="20190-2660">
            <see langword="Integer" /> Zawierający prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2660">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2661">Zwraca <see langword="Long" /> reprezentującą rozmiar w bajtach, w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2661">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="20190-2662">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="20190-2663">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2663">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2664">Zwraca <see langword="Long" /> reprezentującą rozmiar w bajtach, w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2664">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="20190-2665">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2666">Użyj `FileLen` funkcję, aby uzyskać długość pliku, który nie jest otwarty.</span><span class="sxs-lookup"><span data-stu-id="20190-2666">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2667">W tym przykładzie użyto `LOF` funkcję, aby określić rozmiar otwartego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2667">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="20190-2668">W tym przykładzie założono, że `TestFile` to plik tekstowy, który zawiera przykładowe dane.</span><span class="sxs-lookup"><span data-stu-id="20190-2668">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2669">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-2670">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2670">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-2671">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2671">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="20190-2672">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2672">Required.</span>
          </span>
          <span data-ttu-id="20190-2673">
            <see langword="String" /> wyrażenie, które identyfikuje katalog, który ma zostać utworzony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2673">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="20190-2674">
            <c>Ścieżki</c> mogą obejmować dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2674">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="20190-2675">Jeśli dysk nie zostanie określony, <see langword="MkDir" /> powoduje utworzenie nowego katalogu na bieżącym dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2675">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2676">Tworzy nowy katalog.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2676">Creates a new directory.</span>
          </span>
          <span data-ttu-id="20190-2677">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="20190-2678">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2678">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2679">Ta funkcja tworzy nowy katalog.</span><span class="sxs-lookup"><span data-stu-id="20190-2679">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2680">W tym przykładzie użyto `MkDir` funkcję, aby utworzyć katalog.</span><span class="sxs-lookup"><span data-stu-id="20190-2680">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="20190-2681">Jeśli dysk nie zostanie określony, nowy katalog jest tworzony na bieżącym dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-2681">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-2682">
            <paramref name="Path" /> nie jest określona lub jest pusty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2682">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="20190-2683">Odmowa uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2683">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2684">Katalog już istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2684">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md">
          <span data-ttu-id="20190-2685">Porady: tworzenie katalogu w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2685">How to: Create a Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2686">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2686">Required.</span>
          </span>
          <span data-ttu-id="20190-2687">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2687">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="20190-2688">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2688">Optional.</span>
          </span>
          <span data-ttu-id="20190-2689">Zero lub więcej rozdzielonych przecinkami wyrażenia, aby zapisać do pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2689">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="20190-2690">
            <c>Dane wyjściowe</c> ustawienia argumentu są:</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2690">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="20190-2691">
            <see langword="T:System.IO.IOException" />: Tryb plik jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2691">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="20190-2692">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2692">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2693">Zapisy wyświetlania danych w formacie pliku sekwencyjnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2693">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2694">`Print` i `PrintLine` funkcje są zapewniane dla zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2694">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2695">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2695">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2696">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2696">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2697">`Print` nie ma wiersz na końcu wiersza; jednak `PrintLine` Dołącz wiersz źródła danych.</span><span class="sxs-lookup"><span data-stu-id="20190-2697">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="20190-2698">Dane zapisane z `Print` są zazwyczaj odczytywane z pliku za pomocą `LineInput` lub `Input`.</span><span class="sxs-lookup"><span data-stu-id="20190-2698">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="20190-2699">Jeżeli pominięto `Output` dla `PrintLine`, pusty wiersz zostanie wydrukowany do pliku; w przypadku `Print`, nic nie danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="20190-2699">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="20190-2700">Wiele wyrażeń oddzielone przecinkami mają zostać wyrównane na granicach kartę, ale mieszanie przecinkami i `TAB` może spowodować niespójne wyniki.</span><span class="sxs-lookup"><span data-stu-id="20190-2700">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="20190-2701">Aby uzyskać `Boolean` danych, albo `True` lub `False` zostanie wydrukowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2701">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="20190-2702">`True` i `False` słowa kluczowe nie są przekształcane, niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-2702">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="20190-2703">Dane są zapisywane do pliku przy użyciu formatu daty krótkiej standardowa rozpoznany przez system.</span><span class="sxs-lookup"><span data-stu-id="20190-2703">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="20190-2704">Gdy składnik daty lub godziny jest nieobecny lub równy zero, tylko podana część jest zapisywana do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2704">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="20190-2705">Jeśli nic nie jest zapisywane w pliku `Output` danych jest pusta.</span><span class="sxs-lookup"><span data-stu-id="20190-2705">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="20190-2706">Jednak jeśli `Output` dane listy `DBNull`, `Null` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2706">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="20190-2707">Aby uzyskać `Error` dane wyjściowe są wyświetlane jako `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="20190-2707">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="20190-2708">`Error` — Słowo kluczowe nie jest tłumaczony niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-2708">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="20190-2709">Wszystkie dane zapisane do pliku za pomocą `Print` uwzględnia ustawienia regionalne; oznacza to, dane są poprawnie sformatowane przy użyciu odpowiednich separatora dziesiętnego.</span><span class="sxs-lookup"><span data-stu-id="20190-2709">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="20190-2710">Jeśli użytkownik chce do wysyłania danych do użycia przez wielu ustawień regionalnych, `Write` powinny być używane.</span><span class="sxs-lookup"><span data-stu-id="20190-2710">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="20190-2711">Zapisywanie do pliku za pomocą `Print` lub `PrintLine` functions wymaga `Write` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2711">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2712">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess> .</span><span class="sxs-lookup"><span data-stu-id="20190-2712">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2713">W tym przykładzie użyto `Print` i `PrintLine` funkcje można zapisać danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2713">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2714">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2714">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2715">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2715">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2716">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2716">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2717">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2717">Required.</span>
          </span>
          <span data-ttu-id="20190-2718">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2718">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="20190-2719">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2719">Optional.</span>
          </span>
          <span data-ttu-id="20190-2720">Zero lub więcej rozdzielonych przecinkami wyrażenia, aby zapisać do pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2720">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="20190-2721">
            <c>Dane wyjściowe</c> ustawienia argumentu są:</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2721">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="20190-2722">
            <see langword="T:System.IO.IOException" />: Tryb plik jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2722">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="20190-2723">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2723">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2724">Zapisy wyświetlania danych w formacie pliku sekwencyjnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2724">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2725">`Print` i `PrintLine` funkcje są zapewniane dla zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2725">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2726">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2726">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2727">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2727">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2728">`Print` nie ma wiersz na końcu wiersza; jednak`PrintLine` Dołącz wiersz źródła danych.</span><span class="sxs-lookup"><span data-stu-id="20190-2728">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="20190-2729">Dane zapisane z `Print` są zazwyczaj odczytywane z pliku za pomocą `LineInput` lub `Input`.</span><span class="sxs-lookup"><span data-stu-id="20190-2729">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="20190-2730">Jeżeli pominięto `Output` dla `PrintLine`, pusty wiersz zostanie wydrukowany do pliku; w przypadku `Print`, nic nie danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="20190-2730">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="20190-2731">Wiele wyrażeń oddzielone przecinkami mają zostać wyrównane na granicach kartę, ale mieszanie przecinkami i `TAB` może spowodować niespójne wyniki.</span><span class="sxs-lookup"><span data-stu-id="20190-2731">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="20190-2732">Aby uzyskać `Boolean` danych, albo `True` lub `False` zostanie wydrukowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2732">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="20190-2733">`True` i `False` słowa kluczowe nie są przekształcane, niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-2733">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="20190-2734">Dane są zapisywane do pliku przy użyciu formatu daty krótkiej standardowa rozpoznawane przez system.</span><span class="sxs-lookup"><span data-stu-id="20190-2734">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="20190-2735">Gdy składnik daty lub godziny jest nieobecny lub równy zero, tylko podana część jest zapisywana do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2735">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="20190-2736">Jeśli nic nie jest zapisywane w pliku `Output` danych jest pusta.</span><span class="sxs-lookup"><span data-stu-id="20190-2736">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="20190-2737">Jednak jeśli `Output` dane listy `DBNull`, `Null` są zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2737">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="20190-2738">Aby uzyskać `Error` dane wyjściowe są wyświetlane jako `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="20190-2738">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="20190-2739">`Error` — Słowo kluczowe nie jest tłumaczony niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-2739">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="20190-2740">Wszystkie dane zapisane do pliku za pomocą `Print` uwzględnia ustawienia regionalne; oznacza to, dane są poprawnie sformatowane przy użyciu odpowiednich separatora dziesiętnego.</span><span class="sxs-lookup"><span data-stu-id="20190-2740">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="20190-2741">Jeśli użytkownik chce do wysyłania danych do użycia przez wielu ustawień regionalnych, `Write` powinny być używane.</span><span class="sxs-lookup"><span data-stu-id="20190-2741">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="20190-2742">Zapisywanie do pliku za pomocą `Print` lub `PrintLine` functions wymaga `Write` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-2742">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-2743">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess> .</span><span class="sxs-lookup"><span data-stu-id="20190-2743">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2744">W tym przykładzie użyto `Print` i `PrintLine` funkcje można zapisać danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2744">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2745">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2745">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-2746">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2746">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-2747">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2747">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="20190-2748">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2748">Required.</span>
          </span>
          <span data-ttu-id="20190-2749">
            <see langword="String" /> wyrażenie określające istniejącej nazwy pliku i lokalizację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2749">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="20190-2750">
            <c>OldPath</c> może zawierać katalogu i dysku w pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2750">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="20190-2751">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2751">Required.</span>
          </span>
          <span data-ttu-id="20190-2752">
            <see langword="String" /> wyrażenie, które określa nową nazwę pliku i lokalizację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2752">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="20190-2753">
            <c>Nowa_ścieżka</c> mogą obejmować katalogu oraz dysk w lokalizacji docelowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2753">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="20190-2754">Nazwa pliku określona przez <c>Nowa_ścieżka</c> już nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2754">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2755">Zmienia nazwę pliku lub katalogu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2755">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="20190-2756">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2756">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="20190-2757">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2757">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2758">`Rename` Funkcji zmieniania nazwy pliku i przenosi je do innego katalogu, jeśli jest to wymagane.</span><span class="sxs-lookup"><span data-stu-id="20190-2758">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="20190-2759">`Rename` Funkcji można przenieść plik na dyskach, ale tylko wtedy można zmienić nazwę istniejącego katalogu podczas zarówno `NewPath` i `OldPath` znajdują się na tym samym dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-2759">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="20190-2760">`Rename` Nie można utworzyć nowego pliku lub katalogu.</span><span class="sxs-lookup"><span data-stu-id="20190-2760">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="20190-2761">Za pomocą `Rename` generuje błąd, funkcję dla otwartego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2761">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="20190-2762">Otwórz plik należy zamknąć przed zmianą nazwy.</span><span class="sxs-lookup"><span data-stu-id="20190-2762">You must close an open file before renaming it.</span></span> <span data-ttu-id="20190-2763">`Rename` argumenty nie może zawierać wielu znaków (\*) i symboli wieloznacznych pojedynczych znaków (?).</span><span class="sxs-lookup"><span data-stu-id="20190-2763">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20190-2764">Korzystając z `Rename` do skopiowania pliku niechronionych lokalizacji do chronionej lokalizacji, plik zachowuje mniej ograniczone uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="20190-2764">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="20190-2765">Sprawdź, czy nie są Przedstawiamy zagrożenie bezpieczeństwa.</span><span class="sxs-lookup"><span data-stu-id="20190-2765">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2766">W tym przykładzie użyto `Rename` funkcję, aby zmienić nazwę pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2766">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="20190-2767">Do celów tego przykładu założono, że katalogi, które są określone w już istnieje.</span><span class="sxs-lookup"><span data-stu-id="20190-2767">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-2768">Ścieżka jest nieprawidłowa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2768">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="20190-2769">
            <paramref name="OldPath" /> Plik nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2769">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2770">Nie można zmienić nazwy do innego urządzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2770">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">
          <span data-ttu-id="20190-2771">Porady: zmienianie nazwy pliku w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2771">How to: Rename a File in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20190-2772">Zamyka wszystkie dysku pliki otwierane przy użyciu <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2772">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="20190-2773">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="20190-2774">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2775">`Reset` Funkcji spowoduje zamknięcie wszystkich aktywnych plików otwartych przez `FileOpen` działa i ma taką samą funkcję jak `FileClose()` bez żadnych parametrów.</span><span class="sxs-lookup"><span data-stu-id="20190-2775">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2776">W tym przykładzie użyto `Reset` funkcję, aby zamknąć wszystkie otwarte pliki i zapisać zawartość wszystkie bufory plików na dysku.</span><span class="sxs-lookup"><span data-stu-id="20190-2776">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="20190-2777">Zwróć uwagę na użycie `Object` zmiennej `FileNumber` zarówno jako ciąg i numeru.</span><span class="sxs-lookup"><span data-stu-id="20190-2777">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="20190-2778">End — Instrukcja</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2778">End Statement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="20190-2779">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2779">Required.</span>
          </span>
          <span data-ttu-id="20190-2780">
            <see langword="String" /> wyrażenie, które identyfikuje katalogu lub folderu, do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2780">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="20190-2781">
            <c>Ścieżka</c> można dołączyć dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2781">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="20190-2782">Jeśli dysk nie zostanie określony, <see langword="RmDir" /> powoduje usunięcie katalogu na bieżącym dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2782">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2783">Usuwa istniejącego katalogu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2783">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="20190-2784">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="20190-2785">Aby uzyskać więcej informacji, zobacz <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2785">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2786">Błąd występuje, Jeśli spróbujesz użyć `RmDir` w katalogu, który zawiera pliki.</span><span class="sxs-lookup"><span data-stu-id="20190-2786">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="20190-2787">Użyj `Kill` funkcję, aby usunąć wszystkie pliki, zanim spróbujesz usunąć katalog.</span><span class="sxs-lookup"><span data-stu-id="20190-2787">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2788">W tym przykładzie użyto `RmDir` funkcję, aby usunąć istniejący katalog.</span><span class="sxs-lookup"><span data-stu-id="20190-2788">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-2789">
            <paramref name="Path" /> nie jest określona lub jest pusty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2789">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2790">Katalog docelowy zawiera pliki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2790">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="20190-2791">Katalog nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2791">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-2792">Zwraca <see langword="Long" /> określającą bieżącą pozycję odczytu/zapisu w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji lub ustawia pozycję dla następnej operacji odczytu/zapisu w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2792">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="20190-2793">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="20190-2794">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2795">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2795">Required.</span>
          </span>
          <span data-ttu-id="20190-2796">
            <see langword="Integer" /> Zawierający prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2796">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2797">Zwraca <see langword="Long" /> określającą bieżącą pozycję odczytu/zapisu w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji lub ustawia pozycję dla następnej operacji odczytu/zapisu w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2797">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="20190-2798">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2798">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="20190-2799">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2799">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2800">Zwraca <see langword="Long" /> określającą bieżącą pozycję odczytu/zapisu w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji lub ustawia pozycję dla następnej operacji odczytu/zapisu w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2801">`Seek` Zwraca wartość z zakresu od 1 do 2 147 483 647 (równoważne do 2 ^ 31-1) włącznie.</span><span class="sxs-lookup"><span data-stu-id="20190-2801">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="20190-2802">Poniżej przedstawiono wartości zwracane dla każdego trybu dostępu do pliku:</span><span class="sxs-lookup"><span data-stu-id="20190-2802">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="20190-2803">Tryb</span><span class="sxs-lookup"><span data-stu-id="20190-2803">Mode</span></span>|<span data-ttu-id="20190-2804">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="20190-2804">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="20190-2805">Liczbę odczytywanych lub zapisywanych następnego rekordu</span><span class="sxs-lookup"><span data-stu-id="20190-2805">Number of the next record read or written</span></span>|  
|<span data-ttu-id="20190-2806">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="20190-2806">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="20190-2807">Pozycja bajt, w którym występuje następnej operacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2807">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="20190-2808">Pierwszy bajt w pliku znajduje się na pozycji 1, drugi bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-2808">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="20190-2809">W tym przykładzie użyto `Seek` funkcja zwraca bieżącą pozycję w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2809">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="20190-2810">W przykładzie założono `TestFile` to plik zawierający rekordy struktury `Record`.</span><span class="sxs-lookup"><span data-stu-id="20190-2810">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="20190-2811">Do plików otwieranych w `Random` trybie `Seek` zwraca liczbę następnego rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-2811">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="20190-2812">W przypadku plików otwartych w trybach innych niż `Random` trybie `Seek` zwraca pozycję bajt, w którym występuje następnej operacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2812">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="20190-2813">Załóżmy `TestFile` jest plikiem zawierającym kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="20190-2813">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="20190-2814">W tym przykładzie użyto `Seek` funkcję, aby ustawić położenie do następnego odczytu lub zapisu w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2814">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="20190-2815">W przypadku plików otwartych w trybach innych niż `Random` trybie `Seek` Ustawia położenie bajt, w którym występuje następnej operacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2815">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="20190-2816">Załóżmy `TestFile` jest plikiem zawierającym kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="20190-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2817">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-2818">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-2819">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2820">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2820">Required.</span>
          </span>
          <span data-ttu-id="20190-2821">
            <see langword="Integer" /> Zawierający prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2821">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="20190-2822">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2822">Required.</span>
          </span>
          <span data-ttu-id="20190-2823">Jeśli wystąpią liczbą z zakresu 1 – 2 147 483 647, włącznie, która wskazuje, gdzie następnego odczyt/zapis operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2823">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2824">Zwraca <see langword="Long" /> określającą bieżącą pozycję odczytu/zapisu w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji lub ustawia pozycję dla następnej operacji odczytu/zapisu w pliku otwartym za pomocą <see langword="FileOpen" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2824">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="20190-2825">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2825">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="20190-2826">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2826">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2827">`Seek` Zwraca wartość z zakresu od 1 do 2 147 483 647 (równoważne do 2 ^ 31-1) włącznie.</span><span class="sxs-lookup"><span data-stu-id="20190-2827">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="20190-2828">Poniżej przedstawiono wartości zwracane dla każdego trybu dostępu do pliku:</span><span class="sxs-lookup"><span data-stu-id="20190-2828">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="20190-2829">Tryb</span><span class="sxs-lookup"><span data-stu-id="20190-2829">Mode</span></span>|<span data-ttu-id="20190-2830">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="20190-2830">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="20190-2831">Liczbę odczytywanych lub zapisywanych następnego rekordu</span><span class="sxs-lookup"><span data-stu-id="20190-2831">Number of the next record read or written</span></span>|  
|<span data-ttu-id="20190-2832">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="20190-2832">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="20190-2833">Pozycja bajt, w którym występuje następnej operacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2833">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="20190-2834">Pierwszy bajt w pliku znajduje się na pozycji 1, drugi bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20190-2834">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="20190-2835">W tym przykładzie użyto `Seek` funkcja zwraca bieżącą pozycję w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2835">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="20190-2836">W przykładzie założono `TestFile` to plik zawierający rekordy struktury `Record`.</span><span class="sxs-lookup"><span data-stu-id="20190-2836">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="20190-2837">Do plików otwieranych w `Random` trybie `Seek` zwraca liczbę następnego rekordu.</span><span class="sxs-lookup"><span data-stu-id="20190-2837">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="20190-2838">W przypadku plików otwartych w trybach innych niż `Random` trybie `Seek` zwraca pozycję bajt, w którym występuje następnej operacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2838">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="20190-2839">Załóżmy `TestFile` jest plikiem zawierającym kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="20190-2839">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="20190-2840">W tym przykładzie użyto `Seek` funkcję, aby ustawić położenie do następnego odczytu lub zapisu w pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2840">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="20190-2841">W przypadku plików otwartych w trybach innych niż `Random` trybie `Seek` Ustawia położenie bajt, w którym występuje następnej operacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2841">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="20190-2842">Załóżmy `TestFile` jest plikiem zawierającym kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="20190-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2843">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2843">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="20190-2844">Odczyt z plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2844">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="20190-2845">Zapisywanie w plikach w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2845">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="20190-2846">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2846">Required.</span>
          </span>
          <span data-ttu-id="20190-2847">
            <see langword="String" /> wyrażenie, które określa nazwę pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2847">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="20190-2848">
            <c>Nazwa ścieżki</c> może zawierać katalogu lub folderu i dysku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2848">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="20190-2849">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2849">Required.</span>
          </span>
          <span data-ttu-id="20190-2850">Wyrażenie stałe i liczbowego, w których suma określa atrybuty pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2850">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2851">Ustawia atrybut informacji dla pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2851">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="20190-2852">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2852">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="20190-2853">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2853">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2854">Błąd czasu wykonywania występuje, Jeśli spróbujesz ustawić atrybuty otwartego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2854">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="20190-2855">`Attributes` Wartości wyliczenia argumentów są następujące:</span><span class="sxs-lookup"><span data-stu-id="20190-2855">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="20190-2856">Wartość</span><span class="sxs-lookup"><span data-stu-id="20190-2856">Value</span></span>|<span data-ttu-id="20190-2857">Stała</span><span class="sxs-lookup"><span data-stu-id="20190-2857">Constant</span></span>|<span data-ttu-id="20190-2858">Opis</span><span class="sxs-lookup"><span data-stu-id="20190-2858">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="20190-2859">Normalny (domyślnie).</span><span class="sxs-lookup"><span data-stu-id="20190-2859">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="20190-2860">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="20190-2860">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="20190-2861">Ukryte.</span><span class="sxs-lookup"><span data-stu-id="20190-2861">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="20190-2862">System plików.</span><span class="sxs-lookup"><span data-stu-id="20190-2862">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="20190-2863">Etykieta woluminu</span><span class="sxs-lookup"><span data-stu-id="20190-2863">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="20190-2864">Katalogu lub folderu.</span><span class="sxs-lookup"><span data-stu-id="20190-2864">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="20190-2865">Plik został zmieniony od czasu wykonania ostatniej kopii zapasowej.</span><span class="sxs-lookup"><span data-stu-id="20190-2865">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="20190-2866">Plik ma inną nazwę.</span><span class="sxs-lookup"><span data-stu-id="20190-2866">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="20190-2867">Te wyliczenia są określane za pomocą języka Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20190-2867">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="20190-2868">Nazwy mogą być używane w dowolnym miejscu w kodzie zamiast wartości faktycznych.</span><span class="sxs-lookup"><span data-stu-id="20190-2868">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2869">W tym przykładzie użyto `SetAttr` funkcję, aby ustawić atrybutów pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2869">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20190-2870">
            <paramref name="Attribute" /> Typ jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2870">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="20190-2871">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2871">Required.</span>
          </span>
          <span data-ttu-id="20190-2872">Liczba miejsc do magazynowania, aby wstawić przed wyświetleniem lub drukowanie następnego wyrażenia na liście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2872">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2873">Używane z <see langword="Print" /> lub <see langword="PrintLine" /> funkcji do pozycjonowania danych wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2873">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2874">Używane z <see langword="Print" /> lub <see langword="PrintLine" /> funkcji do pozycjonowania danych wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2875">Jeśli `Count` jest mniejsza niż szerokość linii danych wyjściowych, natychmiast następną pozycję wydruku następuje liczba wydrukowanych spacji.</span><span class="sxs-lookup"><span data-stu-id="20190-2875">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="20190-2876">Jeśli`Count` jest większa niż szerokość linii danych wyjściowych, `SPC` oblicza następną pozycję wydruku przy użyciu formuły:</span><span class="sxs-lookup"><span data-stu-id="20190-2876">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="20190-2877">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="20190-2877">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="20190-2878">Na przykład, jeśli bieżącej pozycji drukowania jest 24, szerokość linii danych wyjściowych to 80 i określeniu `SPC(90)`, drukowania dalej rozpocznie się od pozycji 34 (bieżącej pozycji drukowania + pozostałą część 90/80).</span><span class="sxs-lookup"><span data-stu-id="20190-2878">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="20190-2879">Jeśli różnica między bieżącą pozycję wydruku i szerokości linii danych wyjściowych jest mniejsza niż `Count` (lub `Count` `Mod` *szerokość*), `SPC` funkcji nakłada się na początku następnego wiersza i generuje miejsca do magazynowania jest równa `Count` — (*szerokość* — *bieżąca_pozycja_wydruku*).</span><span class="sxs-lookup"><span data-stu-id="20190-2879">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2880">Upewnij się, że kolumny tabel są dostatecznie szeroka umożliwić szerokie litery.</span><span class="sxs-lookup"><span data-stu-id="20190-2880">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2881">W tym przykładzie użyto `SPC` funkcji do pozycjonowania danych wyjściowych w pliku, a w **dane wyjściowe** okna.</span><span class="sxs-lookup"><span data-stu-id="20190-2881">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="20190-2882">Mod — Operator (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2882">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-2883">Używane z <see langword="Print" /> lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2883">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20190-2884">Używane z <see langword="Print" /> lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2884">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2885">Używane z <see langword="Print" /> lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2885">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2886">Jeśli bieżąca pozycja drukowania w bieżącym wierszu jest większy niż `Column`, `TAB` przejdzie do wartości kolumny równej `Column` w następnym wierszu danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="20190-2886">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="20190-2887">Jeśli `Column` jest mniejszy niż 1 `TAB` Przenosi pozycję wydruku do kolumny 1.</span><span class="sxs-lookup"><span data-stu-id="20190-2887">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="20190-2888">Jeśli `Column` jest większa niż szerokość linii danych wyjściowych, `TAB` oblicza następną pozycję wydruku przy użyciu formuły:</span><span class="sxs-lookup"><span data-stu-id="20190-2888">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="20190-2889">Mod szerokość kolumny</span><span class="sxs-lookup"><span data-stu-id="20190-2889">Column Mod width</span></span>  
  
 <span data-ttu-id="20190-2890">Na przykład jeśli *szerokość* to 80 i określeniu `TAB(90)`, drukowania dalej rozpocznie się w kolumnie 10 (reszta 90/80).</span><span class="sxs-lookup"><span data-stu-id="20190-2890">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="20190-2891">Jeśli `Column` jest mniejsza od bieżącej pozycji drukowania drukowania rozpoczyna się w następnym wierszu na obliczonej pozycji drukowania.</span><span class="sxs-lookup"><span data-stu-id="20190-2891">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="20190-2892">Jeśli obliczonej pozycji drukowania jest większy niż bieżąca pozycja drukowania, drukowanie rozpoczyna się na obliczony wydrukować pozycji w tym samym wierszu.</span><span class="sxs-lookup"><span data-stu-id="20190-2892">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="20190-2893">Skrajnie po lewej stronie pozycji drukowania w wierszu danych wyjściowych ma zawsze numer 1.</span><span class="sxs-lookup"><span data-stu-id="20190-2893">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="20190-2894">Kiedy używasz `Print` lub `PrintLine` funkcji Drukowanie do plików, po prawej stronie pozycji drukowania jest szerokość bieżącego pliku wyjściowego, który można ustawić za pomocą `FileWidth` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2894">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="20190-2895">`TAB` Funkcji można używać z `WriteLine` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2895">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="20190-2896">Nie można używać z <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> lub <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20190-2896">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2897">Upewnij się, że kolumny tabel są dostatecznie szeroka, aby zawierać litery szerokości.</span><span class="sxs-lookup"><span data-stu-id="20190-2897">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2898">W tym przykładzie użyto `TAB` funkcji do pozycjonowania danych wyjściowych w pliku, a w **dane wyjściowe** okna.</span><span class="sxs-lookup"><span data-stu-id="20190-2898">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="20190-2899">Mod — Operator (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2899">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="20190-2900">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2900">Optional.</span>
          </span>
          <span data-ttu-id="20190-2901">Numer kolumny, przenieść przed wyświetleniem lub drukowanie następnego wyrażenia na liście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2901">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="20190-2902">W przypadku pominięcia <see langword="TAB" /> przenosi punkt wstawiania do początku następnego strefy drukowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2902">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2903">Używane z <see langword="Print" /> lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2903">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20190-2904">Używane z <see langword="Print" /> lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2904">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2905">Jeśli bieżąca pozycja drukowania w bieżącym wierszu jest większa niż `Column`, `TAB` przejdzie do wartości kolumny równej `Column` w następnym wierszu danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="20190-2905">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="20190-2906">Jeśli `Column` jest mniejszy niż 1 `TAB` Przenosi pozycję wydruku do kolumny 1.</span><span class="sxs-lookup"><span data-stu-id="20190-2906">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="20190-2907">Jeśli `Column` jest większa niż szerokość linii danych wyjściowych, `TAB` oblicza następną pozycję wydruku przy użyciu formuły:</span><span class="sxs-lookup"><span data-stu-id="20190-2907">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="20190-2908">Mod szerokość kolumny</span><span class="sxs-lookup"><span data-stu-id="20190-2908">Column Mod width</span></span>  
  
 <span data-ttu-id="20190-2909">Na przykład jeśli *szerokość* to 80 i określeniu `TAB(90)`, drukowania dalej rozpocznie się w kolumnie 10 (reszta 90/80).</span><span class="sxs-lookup"><span data-stu-id="20190-2909">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="20190-2910">Jeśli `Column` jest mniejsza od bieżącej pozycji drukowania drukowania rozpoczyna się w następnym wierszu na obliczonej pozycji drukowania.</span><span class="sxs-lookup"><span data-stu-id="20190-2910">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="20190-2911">Jeśli obliczonej pozycji drukowania jest większa od bieżącej pozycji drukowania, drukowanie rozpoczyna się na obliczony wydrukować pozycji w tym samym wierszu.</span><span class="sxs-lookup"><span data-stu-id="20190-2911">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="20190-2912">Skrajnie po lewej stronie pozycji drukowania w wierszu danych wyjściowych ma zawsze numer 1.</span><span class="sxs-lookup"><span data-stu-id="20190-2912">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="20190-2913">Kiedy używasz `Print` lub `PrintLine` funkcji Drukowanie do plików, po prawej stronie pozycji drukowania jest szerokość bieżącego pliku wyjściowego, który można ustawić za pomocą `FileWidth` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2913">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="20190-2914">`TAB` Funkcji można używać z `WriteLine` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2914">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="20190-2915">Nie można używać z <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> lub <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20190-2915">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20190-2916">Upewnij się, że kolumny tabel są dostatecznie szeroka, aby zawierać litery szerokości.</span><span class="sxs-lookup"><span data-stu-id="20190-2916">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2917">W tym przykładzie użyto `TAB` funkcji do pozycjonowania danych wyjściowych w pliku, a w **dane wyjściowe** okna.</span><span class="sxs-lookup"><span data-stu-id="20190-2917">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="20190-2918">Mod — Operator (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2918">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20190-2919">Służy do sterowania dostępem innych procesów do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2919">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="20190-2920">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Lock" /> i <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2920">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="20190-2921">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2921">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2922">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2922">Required.</span>
          </span>
          <span data-ttu-id="20190-2923">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2923">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2924">Służy do sterowania dostępem innych procesów do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2924">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="20190-2925">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Lock" /> i <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2925">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="20190-2926">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2926">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2927">`Lock` i `Unlock` funkcje są używane w środowiskach, w których kilka procesów wymaga dostępu do tego samego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2927">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="20190-2928">`Lock` i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="20190-2928">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="20190-2929">Argumenty `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="20190-2929">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="20190-2930">Jeśli `Record`, lub `FromRecord` i `ToRecord` są nie zostanie podany, blokada obejmie cały plik.</span><span class="sxs-lookup"><span data-stu-id="20190-2930">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="20190-2931">Jeśli `Record` samodzielnie zostanie określony pojedynczy rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2931">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="20190-2932">Jeśli plik został otwarty do sekwencyjnego danych wejściowych lub wyjściowych, `Lock` i `Unlock` dotyczą całego pliku, niezależnie od tego, w zakresie określonym przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="20190-2932">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2933">Ten przykład ilustruje użycie `Lock` i `Unlock` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2933">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="20190-2934">W tym przykładzie założono, że `People.txt` to plik zawierający rekordy struktury `Person`.</span><span class="sxs-lookup"><span data-stu-id="20190-2934">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2935">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2935">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2936">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2936">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2937">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2937">Required.</span>
          </span>
          <span data-ttu-id="20190-2938">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2938">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="20190-2939">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2939">Optional.</span>
          </span>
          <span data-ttu-id="20190-2940">Liczba tylko rekord lub bajt do zablokowania lub odblokowania</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2940">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2941">Służy do sterowania dostępem innych procesów do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2941">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="20190-2942">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Lock" /> i <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2942">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="20190-2943">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2943">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2944">`Lock` i `Unlock` funkcje są używane w środowiskach, w których kilka procesów wymaga dostępu do tego samego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2944">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="20190-2945">`Lock` i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="20190-2945">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="20190-2946">Argumenty `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="20190-2946">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="20190-2947">Jeśli `Record`, lub `FromRecord` i `ToRecord` są nie zostanie podany, blokada obejmie cały plik.</span><span class="sxs-lookup"><span data-stu-id="20190-2947">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="20190-2948">Jeśli `Record` samodzielnie zostanie określony pojedynczy rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2948">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="20190-2949">Jeśli plik został otwarty do sekwencyjnego danych wejściowych lub wyjściowych, `Lock` i `Unlock` dotyczą całego pliku, niezależnie od tego, w zakresie określonym przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="20190-2949">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2950">Ten przykład ilustruje użycie `Lock` i `Unlock` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2950">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="20190-2951">W tym przykładzie założono, że `People.txt` to plik zawierający rekordy struktury `Person`.</span><span class="sxs-lookup"><span data-stu-id="20190-2951">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2952">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2953">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2953">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2954">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2954">Required.</span>
          </span>
          <span data-ttu-id="20190-2955">Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2955">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="20190-2956">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2956">Optional.</span>
          </span>
          <span data-ttu-id="20190-2957">Liczba pierwszy rekord lub bajt, aby zablokować lub odblokować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2957">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="20190-2958">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2958">Optional.</span>
          </span>
          <span data-ttu-id="20190-2959">Liczba ostatnich rekord lub bajt, aby zablokować lub odblokować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2959">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2960">Służy do sterowania dostępem innych procesów do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2960">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="20190-2961">
            <see langword="My" /> Funkcja zapewnia lepszą szybkość i wydajność w operacjach we/wy pliku niż <see langword="Lock" /> i <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2961">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="20190-2962">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2962">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2963">`Lock` i `Unlock` funkcje są używane w środowiskach, w których kilka procesów wymaga dostępu do tego samego pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2963">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="20190-2964">`Lock` i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="20190-2964">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="20190-2965">Argumenty `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="20190-2965">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="20190-2966">Jeśli `Record`, lub `FromRecord` i `ToRecord` są nie zostanie podany, blokada obejmie cały plik.</span><span class="sxs-lookup"><span data-stu-id="20190-2966">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="20190-2967">Jeśli `Record` samodzielnie zostanie określony pojedynczy rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2967">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="20190-2968">Jeśli plik został otwarty do sekwencyjnego danych wejściowych lub wyjściowych, `Lock` i `Unlock` dotyczą całego pliku, niezależnie od tego, w zakresie określonym przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="20190-2968">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-2969">Ten przykład ilustruje użycie `Lock` i `Unlock` funkcji.</span><span class="sxs-lookup"><span data-stu-id="20190-2969">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="20190-2970">W tym przykładzie założono, że `People.txt` to plik zawierający rekordy struktury `Person`.</span><span class="sxs-lookup"><span data-stu-id="20190-2970">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-2971">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2971">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-2972">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2972">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-2973">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2973">Required.</span>
          </span>
          <span data-ttu-id="20190-2974">
            <see langword="Integer" /> Wyrażenia zawierającego Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2974">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="20190-2975">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2975">Optional.</span>
          </span>
          <span data-ttu-id="20190-2976">Co najmniej jednego rozdzielonych przecinkami wyrażenia można zapisać do pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2976">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-2977">Zapisuje dane do pliku sekwencyjnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2977">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="20190-2978">Dane zapisane z <see langword="Write" /> są zazwyczaj odczytywane z pliku za pomocą <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-2978">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-2979">`Write` i `WriteLine` funkcje są zapewniane dla zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2979">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-2980">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-2980">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-2981">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-2981">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-2982">Jeżeli pominięto `Output`, wydrukowaniu pusty wiersz do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2982">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="20190-2983">Wiele wyrażeń mogą być oddzielone przecinkami.</span><span class="sxs-lookup"><span data-stu-id="20190-2983">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="20190-2984">W odróżnieniu od `Print` funkcji `Write` funkcji wstawia przecinkami, między elementami i ciągi w cudzysłowie, ponieważ są one zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2984">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="20190-2985">Nie trzeba umieścić jawne ograniczniki na liście.</span><span class="sxs-lookup"><span data-stu-id="20190-2985">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="20190-2986">Gdy `Write` służy do zapisywania danych do pliku, tylko liczbowe, `Boolean`, Data, null, i `Error` formatów danych są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="20190-2986">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="20190-2987">Następujące założenia uniwersalne są przestrzegane, dzięki czemu dane mogą zawsze odczytać i poprawnie interpretowany przy użyciu `Input`, niezależnie od ustawień regionalnych:</span><span class="sxs-lookup"><span data-stu-id="20190-2987">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="20190-2988">Dane liczbowe są zawsze zapisywane używającego kropki jako separatora dziesiętnego.</span><span class="sxs-lookup"><span data-stu-id="20190-2988">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="20190-2989">Aby uzyskać `Boolean` danych, albo `#TRUE#` lub `#FALSE#` zostanie wydrukowany.</span><span class="sxs-lookup"><span data-stu-id="20190-2989">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="20190-2990">`True` i `False` słowa kluczowe nie są przekształcane, niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-2990">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="20190-2991">Dane daty są zapisywane do pliku przy użyciu formatu daty uniwersalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-2991">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="20190-2992">Gdy składnik daty lub godziny jest nieobecny lub równy zero, tylko podana część jest zapisywana do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2992">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="20190-2993">Jeśli nic nie jest zapisywane w pliku `Output` danych jest pusta.</span><span class="sxs-lookup"><span data-stu-id="20190-2993">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="20190-2994">Jednak w przypadku danych o wartości null `#NULL#` są zapisywane.</span><span class="sxs-lookup"><span data-stu-id="20190-2994">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="20190-2995">Aby uzyskać `Error` dane wyjściowe są wyświetlane jako `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="20190-2995">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="20190-2996">`Error` — Słowo kluczowe nie są tłumaczone, niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-2996">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="20190-2997">`WriteLine` Wstawia znak nowego wiersza (czyli kanału informacyjnego powrotu karetki/wiersza lub `Chr(13) + Chr(10)`) po zapisane ostatni znak `Output` do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-2997">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="20190-2998">Możesz osadzić znaki cudzysłowu w ciągu za pomocą podwójnego cudzysłowu lub "".</span><span class="sxs-lookup"><span data-stu-id="20190-2998">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="20190-2999">Na przykład</span><span class="sxs-lookup"><span data-stu-id="20190-2999">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="20190-3000">Zwraca ciąg zawierający wartość `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="20190-3000">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="20190-3001">Zapisywanie do pliku za pomocą `Write` lub `WriteLine` functions wymaga `Append` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-3001">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-3002">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess> .</span><span class="sxs-lookup"><span data-stu-id="20190-3002">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-3003">W tym przykładzie użyto `Write` funkcji do zapisu danych pierwotnych pliku sekwencyjnego.</span><span class="sxs-lookup"><span data-stu-id="20190-3003">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="20190-3004">Tryb pliku jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3004">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-3005">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3005">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-3006">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3006">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-3007">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3007">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="20190-3008">Wymagane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3008">Required.</span>
          </span>
          <span data-ttu-id="20190-3009">
            <see langword="Integer" /> Wyrażenia zawierającego Dowolna prawidłowa liczba plików.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3009">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="20190-3010">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3010">Optional.</span>
          </span>
          <span data-ttu-id="20190-3011">Co najmniej jednego rozdzielonych przecinkami wyrażenia można zapisać do pliku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3011">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20190-3012">Zapisuje dane do pliku sekwencyjnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3012">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="20190-3013">Dane zapisane z <see langword="Write" /> są zazwyczaj odczytywane z pliku za pomocą <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3013">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20190-3014">`Write` i `WriteLine` funkcje są zapewniane dla zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-3014">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="20190-3015">W przypadku aplikacji innych niż ZASTANE `My.Computer.FileSystem` obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="20190-3015">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="20190-3016">Aby uzyskać więcej informacji, zobacz [dostęp do plików za pomocą Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="20190-3016">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="20190-3017">Jeżeli pominięto `Output`, wydrukowaniu pusty wiersz do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-3017">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="20190-3018">Wiele wyrażeń mogą być oddzielone przecinkami.</span><span class="sxs-lookup"><span data-stu-id="20190-3018">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="20190-3019">W odróżnieniu od `Print` funkcji `Write` funkcji wstawia przecinkami, między elementami i ciągi w cudzysłowie, ponieważ są one zapisywane do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-3019">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="20190-3020">Nie trzeba umieścić jawne ograniczniki na liście.</span><span class="sxs-lookup"><span data-stu-id="20190-3020">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="20190-3021">Gdy `Write` służy do zapisywania danych do pliku, tylko liczbowe, `Boolean`, Data, null, i `Error` formatów danych są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="20190-3021">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="20190-3022">Następujące założenia uniwersalne są przestrzegane, dzięki czemu dane mogą zawsze odczytać i poprawnie interpretowany przy użyciu `Input`, niezależnie od ustawień regionalnych:</span><span class="sxs-lookup"><span data-stu-id="20190-3022">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="20190-3023">Dane liczbowe są zawsze zapisywane używającego kropki jako separatora dziesiętnego.</span><span class="sxs-lookup"><span data-stu-id="20190-3023">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="20190-3024">Aby uzyskać `Boolean` danych, albo `#TRUE#` lub `#FALSE#` zostanie wydrukowany.</span><span class="sxs-lookup"><span data-stu-id="20190-3024">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="20190-3025">`True` i `False` słowa kluczowe nie są przekształcane, niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-3025">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="20190-3026">Dane daty są zapisywane do pliku przy użyciu formatu daty uniwersalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-3026">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="20190-3027">Gdy składnik daty lub godziny jest nieobecny lub równy zero, tylko podana część jest zapisywana do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-3027">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="20190-3028">Jeśli nic nie jest zapisywane w pliku `Output` danych jest pusta.</span><span class="sxs-lookup"><span data-stu-id="20190-3028">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="20190-3029">Jednak w przypadku danych o wartości null `#NULL#` są zapisywane.</span><span class="sxs-lookup"><span data-stu-id="20190-3029">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="20190-3030">Aby uzyskać `Error` dane wyjściowe są wyświetlane jako `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="20190-3030">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="20190-3031">`Error` — Słowo kluczowe nie są tłumaczone, niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="20190-3031">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="20190-3032">`WriteLine` Wstawia znak nowego wiersza (czyli kanału informacyjnego powrotu karetki/wiersza lub `Chr(13) + Chr(10)`) po zapisane ostatni znak `Output` do pliku.</span><span class="sxs-lookup"><span data-stu-id="20190-3032">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="20190-3033">Możesz osadzić znaki cudzysłowu w ciągu za pomocą podwójnego cudzysłowu lub "".</span><span class="sxs-lookup"><span data-stu-id="20190-3033">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="20190-3034">Na przykład</span><span class="sxs-lookup"><span data-stu-id="20190-3034">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="20190-3035">Zwraca ciąg zawierający wartość `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="20190-3035">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="20190-3036">Zapisywanie do pliku za pomocą `Write` lub `WriteLine` functions wymaga `Append` dostęp z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="20190-3036">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="20190-3037">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess> .</span><span class="sxs-lookup"><span data-stu-id="20190-3037">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20190-3038">W tym przykładzie użyto `Write` funkcji do zapisu danych pierwotnych pliku sekwencyjnego.</span><span class="sxs-lookup"><span data-stu-id="20190-3038">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="20190-3039">Dostęp do plików za pomocą Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3039">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="20190-3040">Porady: zapisywanie tekstu do plików w Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3040">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="20190-3041">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="20190-3041">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>