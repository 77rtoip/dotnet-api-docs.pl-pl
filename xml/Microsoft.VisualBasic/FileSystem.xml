<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b8affba69c9ea52a1bf3e93c3b9d5d4a2d6fd1f8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317701" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="37fab-101"><see langword="FileSystem" /> Moduł zawiera procedury, które są używane do wykonywania operacji na plikach, katalogach i folderach oraz operacje systemu.</span><span class="sxs-lookup"><span data-stu-id="37fab-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="37fab-102">Ta <see langword="My" /> funkcja zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach niż <see langword="FileSystem" /> przy użyciu modułu.</span><span class="sxs-lookup"><span data-stu-id="37fab-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="37fab-103">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-104">Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które uzyskują dostęp do plików i folderów.</span><span class="sxs-lookup"><span data-stu-id="37fab-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-105">Ten przykład używa funkcji `GetAttr` , aby określić atrybuty pliku i katalogu lub folderu.</span><span class="sxs-lookup"><span data-stu-id="37fab-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="37fab-106">Katalogi i pliki</span><span class="sxs-lookup"><span data-stu-id="37fab-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="37fab-107">Wejście i wyjście — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="37fab-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="37fab-108">Słowa kluczowe (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="37fab-109">Visual Basic elementy członkowskie biblioteki wykonawczej</span><span class="sxs-lookup"><span data-stu-id="37fab-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="37fab-110">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-110">Required.</span></span> <span data-ttu-id="37fab-111">Wyrażenie ciągu, które identyfikuje katalog lub folder, który zostaje nowym katalogiem domyślnym lub folderem.</span><span class="sxs-lookup"><span data-stu-id="37fab-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="37fab-112"><paramref name="Path" />może zawierać dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="37fab-113">Jeśli dysk nie zostanie określony, <see langword="ChDir" /> program zmieni katalog domyślny lub folder na bieżącym dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="37fab-114">Zmienia bieżący katalog lub folder.</span><span class="sxs-lookup"><span data-stu-id="37fab-114">Changes the current directory or folder.</span></span> <span data-ttu-id="37fab-115">Funkcja zapewnia lepszą wydajność i wydajność w przypadku operacji we/wy na plikach <see langword="ChDir" /> niż funkcja. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="37fab-116">Aby uzyskać więcej informacji, <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-117">`ChDir` Funkcja zmienia katalog domyślny, ale nie dysku domyślnego.</span><span class="sxs-lookup"><span data-stu-id="37fab-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="37fab-118">Na przykład, jeśli dyskiem domyślnym jest C, Poniższa instrukcja zmienia katalog domyślny na dysku D, ale C pozostaje dyskiem domyślnym:</span><span class="sxs-lookup"><span data-stu-id="37fab-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="37fab-119">Względne zmiany w katalogu można wprowadzać przez wpisanie dwóch okresów w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-120">`ChDir` Funkcja wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania.</span><span class="sxs-lookup"><span data-stu-id="37fab-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="37fab-121">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i.</span><span class="sxs-lookup"><span data-stu-id="37fab-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-122">Ten przykład używa funkcji `ChDir` , aby zmienić bieżący katalog lub folder.</span><span class="sxs-lookup"><span data-stu-id="37fab-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-123"><paramref name="Path" />jest puste.</span><span class="sxs-lookup"><span data-stu-id="37fab-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="37fab-124">Określono nieprawidłowy dysk lub dysk jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="37fab-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="37fab-125">Instrukcje: Analizowanie ścieżek plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="37fab-126">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-127">Zmienia bieżący dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="37fab-128">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-128">Required.</span></span> <span data-ttu-id="37fab-129">Wyrażenie ciągu określające istniejący dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="37fab-130">Jeśli podasz ciąg o zerowej długości (""), bieżący dysk nie zostanie zmieniony.</span><span class="sxs-lookup"><span data-stu-id="37fab-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="37fab-131">Jeśli argument jest ciągiem wielokrotnym, <see langword="ChDrive" /> używa tylko pierwszej litery. <paramref name="Drive" /></span><span class="sxs-lookup"><span data-stu-id="37fab-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="37fab-132">Zmienia bieżący dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-133">`ChDrive` Funkcja wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania.</span><span class="sxs-lookup"><span data-stu-id="37fab-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="37fab-134">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="37fab-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-135">Ten przykład używa funkcji `ChDrive` , aby zmienić bieżący dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="37fab-136">Funkcja zgłasza wyjątek, jeśli dysk nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-137">Określono nieprawidłowy dysk lub dysk jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="37fab-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-138">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="37fab-139">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-139">Required.</span></span> <span data-ttu-id="37fab-140">Wyrażenie ciągu określające istniejący dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="37fab-141">Jeśli podasz ciąg o zerowej długości (""), bieżący dysk nie zostanie zmieniony.</span><span class="sxs-lookup"><span data-stu-id="37fab-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="37fab-142">Jeśli argument jest ciągiem wielokrotnym, <see langword="ChDrive" /> używa tylko pierwszej litery. <paramref name="Drive" /></span><span class="sxs-lookup"><span data-stu-id="37fab-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="37fab-143">Zmienia bieżący dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-144">`ChDrive` Funkcja wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania.</span><span class="sxs-lookup"><span data-stu-id="37fab-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="37fab-145">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="37fab-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-146">Ten przykład używa funkcji `ChDrive` , aby zmienić bieżący dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="37fab-147">Funkcja zgłasza wyjątek, jeśli dysk nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-148">Określono nieprawidłowy dysk lub dysk jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="37fab-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-149">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-150">Zwraca ciąg reprezentujący bieżącą ścieżkę.</span><span class="sxs-lookup"><span data-stu-id="37fab-150">Returns a string representing the current path.</span></span> <span data-ttu-id="37fab-151">Zapewnia lepszą produktywność i wydajność operacji we/wy na plikach niż <see langword="CurDir" />. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="37fab-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="37fab-152">Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37fab-153">Zwraca ciąg reprezentujący bieżącą ścieżkę.</span><span class="sxs-lookup"><span data-stu-id="37fab-153">Returns a string representing the current path.</span></span> <span data-ttu-id="37fab-154">Zapewnia lepszą produktywność i wydajność operacji we/wy na plikach niż <see langword="CurDir" />. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="37fab-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="37fab-155">Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="37fab-156">Ciąg reprezentujący bieżącą ścieżkę.</span><span class="sxs-lookup"><span data-stu-id="37fab-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="37fab-157">Ten przykład używa funkcji `CurDir` , aby zwrócić bieżącą ścieżkę.</span><span class="sxs-lookup"><span data-stu-id="37fab-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="37fab-158">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-158">Optional.</span></span> <span data-ttu-id="37fab-159"><see langword="Char" />wyrażenie określające istniejący dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="37fab-160">Jeśli nie określono dysku lub jeśli <paramref name="Drive" /> jest ciągiem o zerowej długości (""), <see langword="CurDir" /> funkcja zwraca ścieżkę dla bieżącego dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="37fab-161">Zwraca ciąg reprezentujący bieżącą ścieżkę.</span><span class="sxs-lookup"><span data-stu-id="37fab-161">Returns a string representing the current path.</span></span> <span data-ttu-id="37fab-162">Zapewnia lepszą produktywność i wydajność operacji we/wy na plikach niż <see langword="CurDir" />. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="37fab-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="37fab-163">Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="37fab-164">Ciąg reprezentujący bieżącą ścieżkę.</span><span class="sxs-lookup"><span data-stu-id="37fab-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="37fab-165">Ten przykład używa funkcji `CurDir` , aby zwrócić bieżącą ścieżkę.</span><span class="sxs-lookup"><span data-stu-id="37fab-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-166">Zwraca ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="37fab-167">Zapewnia lepszą wydajność i wydajność operacji we/wy na plikach <see langword="Dir" /> niż funkcja. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="37fab-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="37fab-168">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37fab-169">Zwraca ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="37fab-170">Zapewnia lepszą wydajność i wydajność operacji we/wy na plikach <see langword="Dir" /> niż funkcja. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="37fab-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="37fab-171">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="37fab-172">Ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-173">Funkcja obsługuje używanie wielu znaków (`*`) i symboli wieloznacznych (`?`) do określenia wielu plików. `Dir`</span><span class="sxs-lookup"><span data-stu-id="37fab-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="37fab-174">`VbVolume`zwraca etykietę woluminu dla dysku, a nie określoną nazwę pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="37fab-175">Musisz podać `PathName` przy pierwszym `Dir` wywołaniu funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="37fab-176">Aby pobrać następny element, można wykonać kolejne wywołania `Dir` funkcji bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="37fab-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-177">Aby działać poprawnie `Dir` , funkcja <xref:System.Security.Permissions.FileIOPermissionAccess.Read> wymaga, <xref:System.Security.Permissions.FileIOPermission> aby flagi <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> i zostały przyznane do wykonywania kodu.</span><span class="sxs-lookup"><span data-stu-id="37fab-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="37fab-178">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.FileIOPermission>zobacz <xref:System.Security.SecurityException>, i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="37fab-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="37fab-179">Wartości `Attributes` wyliczenia argumentów są następujące:</span><span class="sxs-lookup"><span data-stu-id="37fab-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="37fab-180">Wartość</span><span class="sxs-lookup"><span data-stu-id="37fab-180">Value</span></span>|<span data-ttu-id="37fab-181">Stała</span><span class="sxs-lookup"><span data-stu-id="37fab-181">Constant</span></span>|<span data-ttu-id="37fab-182">Opis</span><span class="sxs-lookup"><span data-stu-id="37fab-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="37fab-183">Wartooć.</span><span class="sxs-lookup"><span data-stu-id="37fab-183">Default.</span></span> <span data-ttu-id="37fab-184">Określa pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="37fab-185">Określa pliki tylko do odczytu, a także pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="37fab-186">Określa pliki ukryte, a także pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="37fab-187">Określa pliki systemowe, a także pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="37fab-188">Określa etykietę woluminu; Jeśli jakikolwiek inny atrybut jest określony, `vbVolume` jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="37fab-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="37fab-189">Określa katalogi lub foldery, a także pliki bez atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="37fab-190">Plik został zmieniony od czasu wykonania ostatniej kopii zapasowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="37fab-191">Plik ma inną nazwę.</span><span class="sxs-lookup"><span data-stu-id="37fab-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="37fab-192">Te wyliczenia są określane przez język Visual Basic i mogą być używane w dowolnym miejscu w kodzie, a nie rzeczywistymi wartościami.</span><span class="sxs-lookup"><span data-stu-id="37fab-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-193">Ten przykład używa funkcji `Dir` , aby sprawdzić, czy istnieją pewne pliki i katalogi.</span><span class="sxs-lookup"><span data-stu-id="37fab-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="37fab-194">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-194">Optional.</span></span> <span data-ttu-id="37fab-195">Wyrażenie ciągu określające nazwę pliku, nazwę katalogu lub folderu lub etykietę woluminu dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="37fab-196"><see langword="&quot;&quot;" /> Jeśli<paramref name="PathName" /> nie zostanie znaleziony ciąg o zerowej długości ().</span><span class="sxs-lookup"><span data-stu-id="37fab-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="37fab-197">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-197">Optional.</span></span> <span data-ttu-id="37fab-198">Wyrażenie ciągu określające nazwę pliku, nazwę katalogu lub folderu lub etykietę woluminu dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="37fab-199"><see langword="&quot;&quot;" /> Jeśli<paramref name="Pathname" /> nie zostanie znaleziony ciąg o zerowej długości ().</span><span class="sxs-lookup"><span data-stu-id="37fab-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="37fab-200">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-200">Optional.</span></span> <span data-ttu-id="37fab-201">Wyliczenie lub wyrażenie liczbowe, którego wartość określa atrybuty pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="37fab-202">W <see langword="Dir" /> przypadku pominięcia zwraca pliki, <paramref name="Pathname" /> które pasują do siebie, ale nie mają atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="37fab-203">Zwraca ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="37fab-204">Zapewnia lepszą wydajność i wydajność operacji we/wy na plikach <see langword="Dir" /> niż funkcja. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="37fab-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="37fab-205">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="37fab-206">Ciąg reprezentujący nazwę pliku, katalogu lub folderu odpowiadającego określonemu wzorcowi, atrybutowi pliku lub etykietom woluminu dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-207">Funkcja obsługuje używanie wielu znaków (`*`) i symboli wieloznacznych (`?`) do określenia wielu plików. `Dir`</span><span class="sxs-lookup"><span data-stu-id="37fab-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
 <span data-ttu-id="37fab-208">`VbVolume`zwraca etykietę woluminu dla dysku, a nie określoną nazwę pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
 <span data-ttu-id="37fab-209">Musisz podać `PathName` przy pierwszym `Dir` wywołaniu funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="37fab-210">Aby pobrać następny element, można wykonać kolejne wywołania `Dir` funkcji bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="37fab-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-211">Aby działać poprawnie `Dir` , funkcja <xref:System.Security.Permissions.FileIOPermissionAccess.Read> wymaga, <xref:System.Security.Permissions.FileIOPermission> aby flagi <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> i zostały przyznane do wykonywania kodu.</span><span class="sxs-lookup"><span data-stu-id="37fab-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="37fab-212">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.FileIOPermission>zobacz <xref:System.Security.SecurityException>, i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="37fab-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
 <span data-ttu-id="37fab-213">Wartości `Attributes` wyliczenia argumentów są następujące:</span><span class="sxs-lookup"><span data-stu-id="37fab-213">The `Attributes` argument enumeration values are as follows:</span></span>  
|<span data-ttu-id="37fab-214">Wartość</span><span class="sxs-lookup"><span data-stu-id="37fab-214">Value</span></span>|<span data-ttu-id="37fab-215">Stała</span><span class="sxs-lookup"><span data-stu-id="37fab-215">Constant</span></span>|<span data-ttu-id="37fab-216">Opis</span><span class="sxs-lookup"><span data-stu-id="37fab-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="37fab-217">Wartooć.</span><span class="sxs-lookup"><span data-stu-id="37fab-217">Default.</span></span> <span data-ttu-id="37fab-218">Określa pliki, które nie mają atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="37fab-219">Określa pliki tylko do odczytu, oprócz plików, które nie mają atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="37fab-220">Określa pliki ukryte, oprócz plików, które nie mają atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="37fab-221">Określa pliki systemowe, oprócz plików, które nie mają atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="37fab-222">Określa etykietę woluminu; Jeśli jakikolwiek inny atrybut jest określony, `vbVolume` jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="37fab-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="37fab-223">Określa katalogi lub foldery, oprócz plików, które nie mają atrybutów.</span><span class="sxs-lookup"><span data-stu-id="37fab-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="37fab-224">Plik został zmieniony od czasu wykonania ostatniej kopii zapasowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="37fab-225">Plik ma inną nazwę.</span><span class="sxs-lookup"><span data-stu-id="37fab-225">File has a different name.</span></span>|  
> [!NOTE]
>  <span data-ttu-id="37fab-226">Te wyliczenia są określane przez język Visual Basic i mogą być używane w dowolnym miejscu w kodzie zamiast rzeczywistych wartości.</span><span class="sxs-lookup"><span data-stu-id="37fab-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
## Examples  
 <span data-ttu-id="37fab-227">Ten przykład używa funkcji `Dir` , aby sprawdzić, czy istnieją pewne pliki i katalogi.</span><span class="sxs-lookup"><span data-stu-id="37fab-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-228">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-228">Required.</span></span> <span data-ttu-id="37fab-229"><see langword="Integer" /> Zawiera dowolny prawidłowy numer pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="37fab-230">Zwraca wartość <see langword="True" /> logiczną, gdy osiągnięto koniec pliku otwartego dla <see langword="Random" /> lub sekwencyjnego. <see langword="Input" /></span><span class="sxs-lookup"><span data-stu-id="37fab-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="37fab-231">Wartość <see langword="True" /> logiczna, gdy zostanie osiągnięty koniec pliku <see langword="Random" /> otwartego lub sekwencyjnego <see langword="Input" /> .</span><span class="sxs-lookup"><span data-stu-id="37fab-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-232">Użyj `EOF` , aby uniknąć wygenerowania błędu przez próba pobrania danych wejściowych poza końcem pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="37fab-233">`EOF` Funkcja zwraca`False` do momentu osiągnięcia końca pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="37fab-234">W przypadku plików otwartych `Random` dla `Binary` lub dostępu `EOF` program `False` zwraca do momentu `FileGet` , aż Ostatnia wykonana funkcja nie będzie mogła odczytać całego rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="37fab-235">W przypadku plików otwartych `Binary` na potrzeby dostępu próbuje odczytać plik `Input` za pomocą funkcji, dopóki funkcja `EOF` Return `True` nie wygeneruje błędu.</span><span class="sxs-lookup"><span data-stu-id="37fab-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="37fab-236">`Loc` `Input` `Get` Używajfunkcji`EOF` i zamiast `EOF` odczytywania plików binarnych za pomocą, lub używać przy użyciu funkcji. `LOF`</span><span class="sxs-lookup"><span data-stu-id="37fab-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="37fab-237">Program z plikami otwartymi `EOF` dla programu `True` `Output`zawsze zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="37fab-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-238">W tym przykładzie `EOF` funkcja służy do wykrywania końca pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="37fab-239">W tym przykładzie przyjęto założenie, że `Testfile` jest plikiem tekstowym zawierającym kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="37fab-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-240">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-241">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-241">Required.</span></span> <span data-ttu-id="37fab-242"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-242"><see langword="Integer" />.</span></span> <span data-ttu-id="37fab-243">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="37fab-244">Zwraca Wyliczenie reprezentujące tryb pliku dla plików otwartych przy użyciu <see langword="FileOpen" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="37fab-245">Zapewnia lepszą wydajność i wydajność operacji we/wy na plikach <see langword="FileAttr" /> niż funkcja. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="37fab-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="37fab-246">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="37fab-247">Następujące wartości wyliczenia wskazują tryb dostępu do pliku:</span><span class="sxs-lookup"><span data-stu-id="37fab-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="37fab-248">Wartość</span><span class="sxs-lookup"><span data-stu-id="37fab-248">Value</span></span> 
 </term><description> <span data-ttu-id="37fab-249">Tryb</span><span class="sxs-lookup"><span data-stu-id="37fab-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="37fab-250">1</span><span class="sxs-lookup"><span data-stu-id="37fab-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="37fab-251">2</span><span class="sxs-lookup"><span data-stu-id="37fab-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="37fab-252">4</span><span class="sxs-lookup"><span data-stu-id="37fab-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="37fab-253">8</span><span class="sxs-lookup"><span data-stu-id="37fab-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="37fab-254">32</span><span class="sxs-lookup"><span data-stu-id="37fab-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-255">Ta funkcja zwraca Wyliczenie reprezentujące tryb pliku dla plików otwartych przy użyciu `FileOpen` funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-256">Ten przykład używa funkcji `FileAttr` , aby zwrócić tryb pliku otwartego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-257">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="37fab-258">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-258">Optional.</span></span> <span data-ttu-id="37fab-259">Tablica parametrów dla 0 lub więcej kanałów do zamknięcia.</span><span class="sxs-lookup"><span data-stu-id="37fab-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="37fab-260">Zawiera dane wejściowe/wyjściowe (we/wy) do pliku otwartego przy użyciu <see langword="FileOpen" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="37fab-261"><see langword="My" />zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach.</span><span class="sxs-lookup"><span data-stu-id="37fab-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="37fab-262">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-263">`FileClose` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-264">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-265">Aby uzyskać więcej informacji, zobacz [jak: Odczytywanie tekstu z plików za pomocą](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)StreamReader [, jak: Zapisuj tekst w plikach za pomocą StreamWriter —](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)i [instruktażu: Manipulowanie plikami i katalogami w](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="37fab-266">W przypadku pominięcia `FileNumbers`zostaną zamknięte wszystkie aktywne pliki `FileOpen` otwarte przez funkcję.</span><span class="sxs-lookup"><span data-stu-id="37fab-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="37fab-267">Po zamknięciu plików, które zostały otwarte `Output` dla `Append`lub, końcowy bufor danych wyjściowych jest zapisywana w buforze systemu operacyjnego dla tego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="37fab-268">Wszystkie miejsca na bufory skojarzone z zamkniętym plikiem są wydane.</span><span class="sxs-lookup"><span data-stu-id="37fab-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="37fab-269">`FileClose` Gdy funkcja jest wykonywana, skojarzenie pliku z numerem jego pliku zostanie zakończone.</span><span class="sxs-lookup"><span data-stu-id="37fab-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-270">W tym przykładzie `FileClose` funkcja służy do zamykania pliku otwartego dla `Input`.</span><span class="sxs-lookup"><span data-stu-id="37fab-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-271"><paramref name="FileNumber" />nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="37fab-272">End — Instrukcja</span><span class="sxs-lookup"><span data-stu-id="37fab-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="37fab-273">Stop — Instrukcja (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-274">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="37fab-275">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-275">Required.</span></span> <span data-ttu-id="37fab-276">Wyrażenie ciągu określające nazwę pliku, który ma zostać skopiowany.</span><span class="sxs-lookup"><span data-stu-id="37fab-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="37fab-277"><paramref name="Source" />może obejmować katalog lub folder oraz dysk pliku źródłowego.</span><span class="sxs-lookup"><span data-stu-id="37fab-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="37fab-278">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-278">Required.</span></span> <span data-ttu-id="37fab-279">Wyrażenie ciągu określające nazwę pliku docelowego.</span><span class="sxs-lookup"><span data-stu-id="37fab-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="37fab-280"><paramref name="Destination" />może obejmować katalog lub folder oraz dysk pliku docelowego.</span><span class="sxs-lookup"><span data-stu-id="37fab-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="37fab-281">Kopiuje plik.</span><span class="sxs-lookup"><span data-stu-id="37fab-281">Copies a file.</span></span> <span data-ttu-id="37fab-282">Zapewnia lepszą produktywność i wydajność operacji we/wy na plikach niż <see langword="FileCopy" />. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="37fab-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="37fab-283">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-284">Jeśli spróbujesz użyć `FileCopy` funkcji w aktualnie otwartym pliku, wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="37fab-285">`FileCopy`wymaga pełnego zaufania do pracy na dysku lokalnym.</span><span class="sxs-lookup"><span data-stu-id="37fab-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-286">Ten przykład używa `FileCopy` funkcji do kopiowania jednego pliku do innego.</span><span class="sxs-lookup"><span data-stu-id="37fab-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="37fab-287">Na potrzeby tego przykładu Załóżmy, że `SrcFile` jest plikiem zawierającym dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-288"><paramref name="Source" />lub <paramref name="Destination" /> jest nieprawidłowy lub nie został określony.</span><span class="sxs-lookup"><span data-stu-id="37fab-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-289">Plik jest już otwarty.</span><span class="sxs-lookup"><span data-stu-id="37fab-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="37fab-290">Plik nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="37fab-291">Instrukcje: Utwórz kopię pliku w innym katalogu w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="37fab-292">Instrukcje: Utwórz kopię pliku w tym samym katalogu w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="37fab-293">Instrukcje: Kopiowanie katalogu do innego katalogu w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="37fab-294">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-294">Required.</span></span> <span data-ttu-id="37fab-295">Wyrażenie ciągu określające nazwę pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="37fab-296"><paramref name="PathName" />może obejmować katalog lub folder, a także dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="37fab-297"><see langword="Date" /> Zwraca wartość wskazującą datę i godzinę zapisania pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="37fab-298">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileDateTime" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="37fab-299">Aby uzyskać więcej informacji, zobacz<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span><span class="sxs-lookup"><span data-stu-id="37fab-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="37fab-300"><see langword="Date" />wartość, która wskazuje datę i godzinę utworzenia lub ostatniej modyfikacji pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="37fab-301">Ten przykład używa funkcji `FileDateTime` , aby określić datę i godzinę utworzenia lub ostatniej modyfikacji pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="37fab-302">Format wyświetlanej daty i godziny zależy od ustawień regionalnych systemu.</span><span class="sxs-lookup"><span data-stu-id="37fab-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-303"><paramref name="PathName" />jest nieprawidłowa lub zawiera symbole wieloznaczne.</span><span class="sxs-lookup"><span data-stu-id="37fab-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="37fab-304">Plik docelowy nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-305">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-306">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-307">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-308">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-309">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-309">Required.</span></span> <span data-ttu-id="37fab-310">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-311">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-311">Required.</span></span> <span data-ttu-id="37fab-312">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-313">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-313">Optional.</span></span> <span data-ttu-id="37fab-314">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-315">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-316">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-317">Aby uzyskać więcej informacji, zobacz<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="37fab-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-318">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-319">Odczytane `FileGet` dane są zwykle zapisywane w pliku z `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-320">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-321">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-322">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-323">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-324">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-324">Random Mode</span></span>  
 <span data-ttu-id="37fab-325">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-326">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-327">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-328">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-329">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-330">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-331">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-332">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-333">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-334">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-335">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-336">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-337">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-338">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-339">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-340">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-341">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-342">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-343">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-344">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-345">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-346">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-347">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-348">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-349">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-350">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-351">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-352">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-352">Binary Mode</span></span>  
 <span data-ttu-id="37fab-353">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-354">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-355">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-356">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-357">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-358">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-359">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-360">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-361">Odczytywanie z pliku przy użyciu`FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-362"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-363">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-364">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-365">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-366">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-366">Required.</span></span> <span data-ttu-id="37fab-367">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-368">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-368">Required.</span></span> <span data-ttu-id="37fab-369">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-370">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-370">Optional.</span></span> <span data-ttu-id="37fab-371">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-372">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-373">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-374">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-375">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-376">Odczytane `FileGet` dane są zwykle zapisywane w pliku z `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-377">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-378">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-379">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-380">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-381">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-381">Random Mode</span></span>  
 <span data-ttu-id="37fab-382">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-383">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-384">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-385">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-386">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-387">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-388">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-389">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-390">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-391">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-392">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-393">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-394">Jeśli deskryptor nie jest używany.</span><span class="sxs-lookup"><span data-stu-id="37fab-394">If the descriptor is not used.</span></span> <span data-ttu-id="37fab-395">Następnie rozmiar i granice tablicy przekazały `FileGet` się, aby określić, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-396">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-397">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-398">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-399">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-400">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-401">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-402">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-403">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-404">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-405">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-406">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-407">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-408">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-409">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-410">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-410">Binary Mode</span></span>  
 <span data-ttu-id="37fab-411">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-412">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-413">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-414">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-415">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-416">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-417">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-418">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-419">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-420"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-421">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-422">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-423">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-424">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-424">Required.</span></span> <span data-ttu-id="37fab-425">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-426">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-426">Required.</span></span> <span data-ttu-id="37fab-427">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-428">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-428">Optional.</span></span> <span data-ttu-id="37fab-429">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-430">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-431">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-432">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-433">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-434">Odczytane `FileGet` dane są zwykle zapisywane w pliku z `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-435">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-436">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-437">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-438">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-439">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-439">Random Mode</span></span>  
 <span data-ttu-id="37fab-440">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-441">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-442">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-443">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-444">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-445">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-446">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-447">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-448">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-449">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-450">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-451">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-452">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-453">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-454">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-455">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-456">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-457">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-458">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-459">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-460">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-461">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-462">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-463">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-464">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-465">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-466">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-467">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-467">Binary Mode</span></span>  
 <span data-ttu-id="37fab-468">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-469">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-470">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-471">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-472">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-473">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-474">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-475">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-476">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-477"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-478">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-479">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-480">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-481">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-481">Required.</span></span> <span data-ttu-id="37fab-482">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-483">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-483">Required.</span></span> <span data-ttu-id="37fab-484">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-485">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-485">Optional.</span></span> <span data-ttu-id="37fab-486">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-487">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-488">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-489">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-490">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-491">Odczytane `FileGet` dane są zwykle zapisywane w pliku z `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-492">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-493">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-494">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-495">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-496">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-496">Random Mode</span></span>  
 <span data-ttu-id="37fab-497">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-498">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program`FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-499">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-500">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-501">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-502">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-503">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-504">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-505">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-506">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-507">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-508">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-509">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-510">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-511">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-512">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-513">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-514">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-515">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-516">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-517">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-518">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-519">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-520">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-521">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-522">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-523">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-524">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-524">Binary Mode</span></span>  
 <span data-ttu-id="37fab-525">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-526">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-527">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-528">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-529">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-530">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-531">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-532">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-533">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-534"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-535">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-536">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-537">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-538">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-538">Required.</span></span> <span data-ttu-id="37fab-539">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-540">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-540">Required.</span></span> <span data-ttu-id="37fab-541">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-542">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-542">Optional.</span></span> <span data-ttu-id="37fab-543">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-544">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-545">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-546">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-547">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-548">Odczytane `FileGet` dane są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-549">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-550">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-551">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-552">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-553">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-553">Random Mode</span></span>  
 <span data-ttu-id="37fab-554">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-555">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-556">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-557">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-558">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-559">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-560">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-561">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-562">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-563">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-564">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-565">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-566">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-567">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-568">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-569">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-570">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-571">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-572">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-573">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-574">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-575">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-576">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-577">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-578">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-579">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-580">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-581">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-581">Binary Mode</span></span>  
 <span data-ttu-id="37fab-582">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-583">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-584">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-585">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-586">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-587">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-588">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-589">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-590">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-591"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-592">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-593">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-594">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-595">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-595">Required.</span></span> <span data-ttu-id="37fab-596">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-597">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-597">Required.</span></span> <span data-ttu-id="37fab-598">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-599">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-599">Optional.</span></span> <span data-ttu-id="37fab-600">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-601">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-602">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-603">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-604">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-605">Odczytane `FileGet` dane są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-606">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-607">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-608">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-609">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-610">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-610">Random Mode</span></span>  
 <span data-ttu-id="37fab-611">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-612">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-613">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-614">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-615">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-616">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-617">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-618">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-619">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-620">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-621">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-622">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-623">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-624">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-625">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-626">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-627">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-628">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-629">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-630">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-631">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-632">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-633">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-634">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-635">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-636">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-637">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-638">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-638">Binary Mode</span></span>  
 <span data-ttu-id="37fab-639">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-640">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-641">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-642">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-643">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-644">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-645">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-646">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-647">Odczytywanie z pliku przy użyciu`FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-648"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-649">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-650">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-651">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-652">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-652">Required.</span></span> <span data-ttu-id="37fab-653">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-654">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-654">Required.</span></span> <span data-ttu-id="37fab-655">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-656">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-656">Optional.</span></span> <span data-ttu-id="37fab-657">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-658">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-659">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-660">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-661">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-662">Odczytane `FileGet` dane są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-663">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-664">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-665">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-666">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-667">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-667">Random Mode</span></span>  
 <span data-ttu-id="37fab-668">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-669">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-670">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-671">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-672">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-673">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-674">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-675">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-676">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-677">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-678">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-679">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-680">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-681">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-682">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-683">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-684">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-685">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-686">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-687">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-688">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-689">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-690">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-691">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-692">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-693">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-694">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-695">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-695">Binary Mode</span></span>  
 <span data-ttu-id="37fab-696">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-697">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-698">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-699">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-700">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-701">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-702">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-703">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-704">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-705"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-706">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-707">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-708">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-709">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-709">Required.</span></span> <span data-ttu-id="37fab-710">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-711">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-711">Required.</span></span> <span data-ttu-id="37fab-712">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-713">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-713">Optional.</span></span> <span data-ttu-id="37fab-714">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-715">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-716">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-717">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-718">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-719">Odczytane `FileGet` dane są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-720">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-721">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-722">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-723">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-724">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-724">Random Mode</span></span>  
 <span data-ttu-id="37fab-725">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-726">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-727">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-728">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-729">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-730">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-731">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-732">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-733">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-734">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-735">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-736">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-737">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-738">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-739">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-740">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-741">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-742">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-743">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-744">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-745">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-746">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-747">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-748">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-749">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-750">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-751">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-752">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-752">Binary Mode</span></span>  
 <span data-ttu-id="37fab-753">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-754">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-755">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-756">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-757">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-758">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-759">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-760">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-761">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-762"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-763">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-764">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-765">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-766">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-766">Required.</span></span> <span data-ttu-id="37fab-767">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-768">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-768">Required.</span></span> <span data-ttu-id="37fab-769">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-770">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-770">Optional.</span></span> <span data-ttu-id="37fab-771">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-772">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-773">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-774">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-775">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-776">Odczytane `FileGet` dane są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-777">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-778">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-779">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-780">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-781">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-781">Random Mode</span></span>  
 <span data-ttu-id="37fab-782">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-783">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-784">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-785">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-786">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-787">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-788">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-789">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-790">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-791">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-792">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-793">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-794">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-795">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-796">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-797">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-798">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-799">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-800">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-801">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-802">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-803">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-804">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-805">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-806">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-807">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-808">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-809">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-809">Binary Mode</span></span>  
 <span data-ttu-id="37fab-810">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-811">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-812">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-813">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-814">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-815">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-816">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-817">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-818">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-819"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-820">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-821">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-822">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-823">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-823">Required.</span></span> <span data-ttu-id="37fab-824">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-825">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-825">Required.</span></span> <span data-ttu-id="37fab-826">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-827">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-827">Optional.</span></span> <span data-ttu-id="37fab-828">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-829">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-830">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-831">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-832">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-833">Odczytane `FileGet` dane są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-834">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-835">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-836">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-837">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-838">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-838">Random Mode</span></span>  
 <span data-ttu-id="37fab-839">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-840">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-841">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-842">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-843">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-844">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-845">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-846">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-847">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-848">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-849">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-850">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-851">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-852">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-853">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-854">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-855">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-856">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-857">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-858">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-859">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-860">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-861">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-862">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-863">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-864">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-865">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-866">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-866">Binary Mode</span></span>  
 <span data-ttu-id="37fab-867">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-868">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-869">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-870">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-871">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-872">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-873">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-874">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-875">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-876"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-877">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-878">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-879">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-880">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-880">Required.</span></span> <span data-ttu-id="37fab-881">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-882">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-882">Required.</span></span> <span data-ttu-id="37fab-883">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-884">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-884">Optional.</span></span> <span data-ttu-id="37fab-885">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-886">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-887">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-888">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-889">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-890">Odczytane `FileGet` dane są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-891">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-892">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-893">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-894">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-895">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-895">Random Mode</span></span>  
 <span data-ttu-id="37fab-896">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-897">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-898">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-899">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-900">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-901">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-902">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-903">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-904">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-905">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-906">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-907">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-908">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-909">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-910">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-911">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-912">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-913">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-914">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-915">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-916">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-917">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-918">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-919">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-920">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-921">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-922">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-923">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-923">Binary Mode</span></span>  
 <span data-ttu-id="37fab-924">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-925">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-926">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-927">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-928">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-929">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-930">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-931">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-932">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-933"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-934">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-935">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-936">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-937">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-937">Required.</span></span> <span data-ttu-id="37fab-938">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-939">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-939">Required.</span></span> <span data-ttu-id="37fab-940">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-941">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-941">Optional.</span></span> <span data-ttu-id="37fab-942">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="37fab-943">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-943">Optional.</span></span> <span data-ttu-id="37fab-944">Stosuje się tylko przy pisaniu ciągów.</span><span class="sxs-lookup"><span data-stu-id="37fab-944">Applies only when writing a string.</span></span> <span data-ttu-id="37fab-945">Określa, czy należy napisać dwubajtowy deskryptor dla ciągu, który opisuje długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="37fab-946">Wartość domyślna to <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="37fab-947">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-948">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-949">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-950">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-951">Odczytane `FileGet` dane są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-952">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-953">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-954">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-955">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-956">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-956">Random Mode</span></span>  
 <span data-ttu-id="37fab-957">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-958">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-959">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-960">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-961">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-962">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-963">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-964">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-965">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-966">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-967">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-968">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-969">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-970">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-971">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-972">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-973">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-974">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-975">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-976">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-977">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-978">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-979">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-980">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-981">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-982">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-983">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-984">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-984">Binary Mode</span></span>  
 <span data-ttu-id="37fab-985">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-986">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-987">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-988">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-989">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-990">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-991">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-992">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-993">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-994"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-995">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-996">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-997">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-998">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-998">Required.</span></span> <span data-ttu-id="37fab-999">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1000">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1000">Required.</span></span> <span data-ttu-id="37fab-1001">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1002">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1002">Optional.</span></span> <span data-ttu-id="37fab-1003">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="37fab-1004">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-1004">Optional.</span></span> <span data-ttu-id="37fab-1005">Ma zastosowanie tylko w przypadku pisania tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1005">Applies only when writing an array.</span></span> <span data-ttu-id="37fab-1006">Określa, czy tablica ma być traktowana jako dynamiczna, oraz czy konieczne jest określenie deskryptora tablicy opisującego rozmiar i granice tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="37fab-1007">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1007">Optional.</span></span> <span data-ttu-id="37fab-1008">Stosuje się tylko przy pisaniu ciągów.</span><span class="sxs-lookup"><span data-stu-id="37fab-1008">Applies only when writing a string.</span></span> <span data-ttu-id="37fab-1009">Określa, czy należy napisać dwubajtowy deskryptor dla ciągu, który opisuje długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="37fab-1010">Wartość domyślna to <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="37fab-1011">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="37fab-1012">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGet" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="37fab-1013">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1014">`FileGet`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1015">Odczytane `FileGet` dane są zwykle zapisywane w pliku przy użyciu `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="37fab-1016">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1017">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji (lub wskazywanym przez ostatnią `Seek` funkcję) jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-1018">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-1019">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1020">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1020">Random Mode</span></span>  
 <span data-ttu-id="37fab-1021">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1022">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGet` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1023">Miejsce między końcem jednego rekordu a początkiem następnego rekordu jest uzupełnione istniejącą zawartością buforu pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1024">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-1025">Domyślnie, jeśli zmienna, do której jest odczytywany, jest ciągiem `FileGet` , odczytuje deskryptor dwubajtowy, który zawiera długość ciągu, a następnie odczytuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1026">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1027">Program Visual Basic 6.0 i jego starsze wersje obsługują ciągi o stałej długości; przy wprowadzaniu do pliku, deskryptor długości nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-1028">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1029">Jeśli wczytywana zmienna jest tablicą, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="37fab-1030">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1031">Podczas odczytywania tablicy należy dopasować sposób zapisu tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="37fab-1032">Jeśli został on zapisany z deskryptorem, należy odczytać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="37fab-1033">Jeśli deskryptor nie jest używany, rozmiar i granice tablicy są przesyłane w `FileGet` celu określenia, co należy odczytać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="37fab-1034">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1035">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1036">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1037">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="37fab-1038">218 bajtów zostało rozdzielonych w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="37fab-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="37fab-1039">18 bajtów dla deskryptora: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="37fab-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="37fab-1040">200 bajtów dla danych: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-1041">Jeśli zmienna, do której jest odczytywany, jest dowolnym innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem `FileGet` ), odczytuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="37fab-1042">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-1043">`FileGet`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-1044">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePut`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1045">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów.</span><span class="sxs-lookup"><span data-stu-id="37fab-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="37fab-1046">Obejmuje to wszystkie tablice i ich deskryptory.</span><span class="sxs-lookup"><span data-stu-id="37fab-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-1047">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1048">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1048">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1049">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1050">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1051">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1052">`FileGet`odczytuje ze sobą wszystkie zmienne z dysku; oznacza to, że bez uzupełniania między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1053">Dla każdej tablicy innej niż tablica w strukturze program `FileGet` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="37fab-1054">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="37fab-1055">`FileGet`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1056">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="37fab-1057">Odczytywanie z pliku przy użyciu `FileGet` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1058"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1059">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-1060">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1061">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1062">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1062">Required.</span></span> <span data-ttu-id="37fab-1063">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1064">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1064">Required.</span></span> <span data-ttu-id="37fab-1065">Prawidłowa nazwa zmiennej, do której wczytywane są dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1066">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1066">Optional.</span></span> <span data-ttu-id="37fab-1067">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), w którym rozpocznie się odczytywanie.</span><span class="sxs-lookup"><span data-stu-id="37fab-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1068">Wczytuje dane z otwartego pliku dysku do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="37fab-1069">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileGetObject" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="37fab-1070">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1071">`Integer` `Object` `Long` `Short`Funkcja jest używana `FileGet` zamiast, aby uniknąć niejasności w czasie kompilacji, jeśli typ jest zwracany zamiast innego typu, takiego jak,, i tak dalej. `FileGetObject`</span><span class="sxs-lookup"><span data-stu-id="37fab-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="37fab-1072">Jeśli zamierzasz napisać `Variant` typ, `FileGetObject` jest wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="37fab-1073">Gdy jest to możliwe, jeśli używasz obiektu dla drugiego parametru, zawsze jest Sugerowane użycie `FilePutObject` i. `FileGetObject`</span><span class="sxs-lookup"><span data-stu-id="37fab-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="37fab-1074">`FileGetObject`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1075">Odczytane `FileGetObject` dane są zwykle zapisywane `FilePutObject`z.</span><span class="sxs-lookup"><span data-stu-id="37fab-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="37fab-1076">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1077">W `RecordNumber`przypadku pominięcia `Seek` program `FileGetObject` odczytuje rekord lub bajt po ostatnim `FileGetObject` lub `FilePutObject` funkcji (lub wskazywane przez ostatnią funkcję).</span><span class="sxs-lookup"><span data-stu-id="37fab-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1078">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1078">Random Mode</span></span>  
 <span data-ttu-id="37fab-1079">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1080">Jeśli długość odczytywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FileGetObject` odczytuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1081">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest uzupełniony do istniejącej zawartości buforu pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1082">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to dobrym pomysłem jest, że długość rekordu jest zgodna z długością odczytywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="37fab-1083">Jeśli zmienna, do której jest odczytywany, jest ciągiem, `FileGetObject` domyślnie odczytuje dwubajtowy deskryptor zawierający długość ciągu, a następnie odczytuje dane, które są umieszczane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1084">W związku z tym, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1085">Visual Basic 6,0 i wcześniejsze wersje obsługują ciągi o stałej długości i podczas odczytu do pliku, deskryptor długości nie jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="37fab-1086">Jeśli chcesz odczytać ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg, w którym czytasz, powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1087">Jeśli zmienna, do której jest odczytywany, jest tablicą, Długość rekordu określana `RecordLength` przez parametr `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1088">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1089">Jego długość jest równa 2 plus 8 razy liczba wymiarów: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="37fab-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="37fab-1090">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, gdy tablica jest zapisywana na dysku:</span><span class="sxs-lookup"><span data-stu-id="37fab-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="37fab-1091">218 bajtów zostało rozdzielonych w następujący sposób: 18 bajtów dla deskryptora (2 + 8 \* 2) i 100 bajtów dla danych (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="37fab-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="37fab-1092">`FileGetObject`odczytuje elementy struktur tak, jakby były odczytywane indywidualnie, z tą różnicą, że nie ma dopełnienia między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="37fab-1093">Na dysku dynamiczna tablica w typie zdefiniowanym przez użytkownika (z `FilePutObject`prefiksem) jest poprzedzona przez deskryptor, którego długość jest równa 2 plus 8 razy liczba wymiarów: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="37fab-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="37fab-1094">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do odczytania poszczególnych elementów, w tym dowolnych tablic i ich deskryptorów.</span><span class="sxs-lookup"><span data-stu-id="37fab-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="37fab-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> Klasa może być stosowana do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1096">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1096">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1097">W przypadku plików otwartych `Binary` w trybie wszystkie `Random` reguły mają zastosowanie z następującymi wyjątkami:</span><span class="sxs-lookup"><span data-stu-id="37fab-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="37fab-1098">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1099">`FileGetObject`odczytuje wszystkie zmienne z dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1100">Dla każdej tablicy innej niż tablica w strukturze program `FileGetObject` odczytuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="37fab-1101">Deskryptor nie jest odczytywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="37fab-1102">`FileGetObject`odczytuje ciągi o zmiennej długości, które nie są elementami struktur bez oczekiwania deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1103">Liczba bajtów odczytanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-1104">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-1105">Na przykład plik o nazwie Form1. vb nie może być plikiem źródłowym Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1106">Poniższy przykład odczytuje rekord do pliku testowego, a następnie pobiera go.</span><span class="sxs-lookup"><span data-stu-id="37fab-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-1107">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1108">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="37fab-1109">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1109">Required.</span></span> <span data-ttu-id="37fab-1110">Wyrażenie ciągu określające plik.</span><span class="sxs-lookup"><span data-stu-id="37fab-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="37fab-1111"><paramref name="PathName" />może obejmować katalog lub folder, a także dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="37fab-1112">Zwraca wartość określającą długość pliku w bajtach.</span><span class="sxs-lookup"><span data-stu-id="37fab-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="37fab-1113">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileLen" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="37fab-1114">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="37fab-1115">Długość pliku w bajtach.</span><span class="sxs-lookup"><span data-stu-id="37fab-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1116">Jeśli określony plik jest otwarty, gdy `FileLen` wywoływana jest funkcja, zwracana wartość reprezentuje rozmiar pliku w momencie otwarcia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-1117">Aby uzyskać bieżącą długość otwartego pliku, użyj `LOF` funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1118">Ten przykład używa funkcji `FileLen` , aby zwrócić długość pliku w bajtach.</span><span class="sxs-lookup"><span data-stu-id="37fab-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="37fab-1119">Na potrzeby tego przykładu Załóżmy, że `TestFile` jest plikiem zawierającym pewne dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="37fab-1120">Plik nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-1121">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1122">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1122">Required.</span></span> <span data-ttu-id="37fab-1123">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1123">Any valid file number.</span></span> <span data-ttu-id="37fab-1124">Użyj funkcji <see langword="FreeFile" /> , aby uzyskać następny dostępny numer pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="37fab-1125">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1125">Required.</span></span> <span data-ttu-id="37fab-1126">Wyrażenie ciągu określające nazwę pliku — może zawierać katalog lub folder i dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="37fab-1127">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1127">Required.</span></span> <span data-ttu-id="37fab-1128">Wyliczenie określające tryb pliku: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" /> <see langword="Output" />, lub <see langword="Random" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="37fab-1129">Aby uzyskać więcej informacji, <see cref="T:Microsoft.VisualBasic.OpenMode" /> Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="37fab-1130">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1130">Optional.</span></span> <span data-ttu-id="37fab-1131">Wyliczenie określające operacje dozwolone w otwartym pliku: <see langword="Read" />, <see langword="Write" />, lub <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="37fab-1132">Wartość domyślna to <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="37fab-1133">Aby uzyskać więcej informacji, <see cref="T:Microsoft.VisualBasic.OpenAccess" /> Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="37fab-1134">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1134">Optional.</span></span> <span data-ttu-id="37fab-1135">Wyliczenie określające operacje niedozwolone w otwartym pliku przez inne procesy: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, i <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="37fab-1136">Wartość domyślna to <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="37fab-1137">Aby uzyskać więcej informacji, <see cref="T:Microsoft.VisualBasic.OpenShare" /> Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="37fab-1138">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-1138">Optional.</span></span> <span data-ttu-id="37fab-1139">Liczba mniejsza lub równa 32 767 (bajty).</span><span class="sxs-lookup"><span data-stu-id="37fab-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="37fab-1140">W przypadku plików otwartych dla dostępu losowego ta wartość jest długością rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="37fab-1141">W przypadku sekwencyjnych plików ta wartość jest liczbą znaków w buforze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="37fab-1142">Otwiera plik dla danych wejściowych lub wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1142">Opens a file for input or output.</span></span> <span data-ttu-id="37fab-1143">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileOpen" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="37fab-1144">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1145">`FileOpen` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-1146">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-1147">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-1148">Aby można było wykonać operację we/wy, należy otworzyć plik.</span><span class="sxs-lookup"><span data-stu-id="37fab-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="37fab-1149">`FileOpen`przydziela bufor dla operacji we/wy do pliku i określa tryb dostępu do użycia z buforem.</span><span class="sxs-lookup"><span data-stu-id="37fab-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-1150">Podczas zapisywania do pliku aplikacja może mieć możliwość utworzenia pliku, jeśli plik, do którego ma nastąpić zapis, nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="37fab-1151">W tym celu musi mieć uprawnienia do katalogu, w którym ma zostać utworzony plik.</span><span class="sxs-lookup"><span data-stu-id="37fab-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="37fab-1152">Jeśli jednak plik określony przez `FileName` istnieje, aplikacja musi mieć `Write` uprawnienia tylko do samego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="37fab-1153">Gdy to możliwe, aby zwiększyć bezpieczeństwo, należy utworzyć plik podczas wdrażania i udzielić `Write` uprawnienia tylko do tego pliku, a nie do całego katalogu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="37fab-1154">Aby zwiększyć bezpieczeństwo, Zapisz dane w katalogach użytkowników, a nie w katalogu głównym lub w katalogu Program Files.</span><span class="sxs-lookup"><span data-stu-id="37fab-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="37fab-1155">Kanał do otwarcia można znaleźć za pomocą `FreeFile()` funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-1156">Funkcja wymaga `Read` dostępu z`FileIOPermissionAccess` wyliczenia, co może mieć wpływ na wykonywanie w częściowej sytuacji zaufania. `FileOpen`</span><span class="sxs-lookup"><span data-stu-id="37fab-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="37fab-1157">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.FileIOPermissionAccess> zobacz Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="37fab-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1158">Ten przykład ilustruje różne zastosowania `FileOpen` funkcji w celu włączenia danych wejściowych i wyjściowych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="37fab-1159">Poniższy kod otwiera plik `TestFile` w `Input` trybie.</span><span class="sxs-lookup"><span data-stu-id="37fab-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="37fab-1160">Ten przykład otwiera plik w `Binary` trybie tylko do zapisywania operacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="37fab-1161">Poniższy przykład otwiera plik w `Random` trybie.</span><span class="sxs-lookup"><span data-stu-id="37fab-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="37fab-1162">Plik zawiera rekordy struktury `Person`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="37fab-1163">Ten przykład kodu otwiera plik w `Output` trybie; każdy proces może odczytywać lub zapisywać plik.</span><span class="sxs-lookup"><span data-stu-id="37fab-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="37fab-1164">Ten przykład kodu otwiera plik w `Binary` trybie do odczytu; inne procesy nie mogą odczytać pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1165">Długość rekordu jest ujemna (a nie równa-1).</span><span class="sxs-lookup"><span data-stu-id="37fab-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1166"><paramref name="FileName" />jest już otwarty lub <paramref name="FileName" /> jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-1167">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1168">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-1169">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1170">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1171">F Aby uzyskać więcej informacji, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1172">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1172">Required.</span></span> <span data-ttu-id="37fab-1173">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1174">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1174">Required.</span></span> <span data-ttu-id="37fab-1175">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1176">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-1176">Optional.</span></span> <span data-ttu-id="37fab-1177">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1178">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1179">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1180">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1181">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1182">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1183">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1184">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1185">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1186">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1187">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1188">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1188">Random Mode</span></span>  
 <span data-ttu-id="37fab-1189">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1190">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1191">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1192">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1193">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1194">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1195">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1196">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1197">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1198">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1199">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1200">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1201">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1202">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1203">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1204">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1205">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1206">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1207">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1208">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1209">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1210">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1211">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1212">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1213">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1214">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1215">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1216">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1216">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1217">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1218">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1219">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1220">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1221">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1222">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1223">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1224">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1225">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1226">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1227">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1228">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1229"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1230">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1231">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1232">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1232">Required.</span></span> <span data-ttu-id="37fab-1233">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1234">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1234">Required.</span></span> <span data-ttu-id="37fab-1235">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1236">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1236">Optional.</span></span> <span data-ttu-id="37fab-1237">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1238">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1239">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1240">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1241">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1242">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1243">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1244">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1245">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1246">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1247">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1248">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1248">Random Mode</span></span>  
 <span data-ttu-id="37fab-1249">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1250">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1251">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1252">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1253">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1254">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1255">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1256">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1257">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1258">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1259">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1260">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1261">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1262">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1263">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1264">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1265">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1266">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1267">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1268">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1269">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1270">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1271">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1272">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1273">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1274">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1275">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1276">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1276">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1277">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1278">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1279">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1280">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1281">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1282">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1283">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1284">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1285">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1286">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1287">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1288">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1289"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1290">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1291">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1292">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1292">Required.</span></span> <span data-ttu-id="37fab-1293">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1294">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1294">Required.</span></span> <span data-ttu-id="37fab-1295">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1296">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1296">Optional.</span></span> <span data-ttu-id="37fab-1297">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1298">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1299">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1300">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1301">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1302">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1303">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1304">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1305">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1306">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1307">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1308">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1308">Random Mode</span></span>  
 <span data-ttu-id="37fab-1309">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1310">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1311">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1312">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1313">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1314">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1315">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1316">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1317">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1318">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1319">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1320">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1321">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1322">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1323">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1324">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1325">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1326">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1327">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1328">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1329">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1330">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1331">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1332">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1333">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1334">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1335">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1336">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1336">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1337">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1338">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1339">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1340">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1341">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1342">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1343">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1344">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1345">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1346">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1347">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1348">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1349"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1350">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1351">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1352">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1352">Required.</span></span> <span data-ttu-id="37fab-1353">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1354">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1354">Required.</span></span> <span data-ttu-id="37fab-1355">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1356">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1356">Optional.</span></span> <span data-ttu-id="37fab-1357">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1358">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1359">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1360">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1361">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1362">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1363">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1364">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1365">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1366">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1367">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1368">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1368">Random Mode</span></span>  
 <span data-ttu-id="37fab-1369">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1370">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1371">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1372">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1373">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1374">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1375">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1376">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1377">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1378">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1379">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1380">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1381">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1382">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1383">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1384">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1385">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1386">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1387">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1388">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1389">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1390">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1391">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1392">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1393">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1394">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1395">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1396">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1396">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1397">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1398">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1399">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1400">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1401">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1402">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1403">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1404">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1405">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1406">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1407">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1408">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1409"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1410">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1411">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1412">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1412">Required.</span></span> <span data-ttu-id="37fab-1413">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1414">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1414">Required.</span></span> <span data-ttu-id="37fab-1415">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1416">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1416">Optional.</span></span> <span data-ttu-id="37fab-1417">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1418">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1419">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1420">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1421">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1422">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1423">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1424">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1425">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1426">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1427">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1428">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1428">Random Mode</span></span>  
 <span data-ttu-id="37fab-1429">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1430">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1431">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1432">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1433">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1434">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1435">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1436">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1437">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1438">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1439">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1440">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1441">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1442">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1443">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1444">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1445">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1446">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1447">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1448">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1449">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1450">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1451">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1452">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1453">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1454">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1455">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1456">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1456">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1457">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1458">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1459">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1460">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1461">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1462">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1463">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1464">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1465">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1466">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1467">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1468">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1469"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1470">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1471">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1472">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1472">Required.</span></span> <span data-ttu-id="37fab-1473">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1474">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1474">Required.</span></span> <span data-ttu-id="37fab-1475">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1476">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1476">Optional.</span></span> <span data-ttu-id="37fab-1477">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1478">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1479">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1480">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1481">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1482">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1483">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1484">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1485">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1486">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1487">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1488">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1488">Random Mode</span></span>  
 <span data-ttu-id="37fab-1489">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1490">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1491">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1492">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1493">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1494">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1495">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1496">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1497">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1498">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1499">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1500">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1501">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1502">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1503">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1504">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1505">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1506">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1507">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1508">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1509">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1510">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1511">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1512">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1513">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1514">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1515">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1516">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1516">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1517">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1518">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1519">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1520">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1521">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1522">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1523">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1524">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1525">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1526">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1527">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1528">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1529"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1530">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1531">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1532">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1532">Required.</span></span> <span data-ttu-id="37fab-1533">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1534">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1534">Required.</span></span> <span data-ttu-id="37fab-1535">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1536">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-1536">Optional.</span></span> <span data-ttu-id="37fab-1537">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1538">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1539">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1540">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1541">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1542">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1543">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1544">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1545">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1546">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1547">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1548">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1548">Random Mode</span></span>  
 <span data-ttu-id="37fab-1549">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1550">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1551">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1552">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1553">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1554">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1555">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1556">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1557">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1558">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1559">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy`VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1560">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1561">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1562">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1563">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1564">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1565">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1566">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1567">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1568">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1569">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1570">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1571">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1572">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1573">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1574">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1575">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1576">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1576">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1577">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1578">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1579">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1580">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1581">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1582">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1583">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1584">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1585">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1586">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1587">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1588">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1589"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1590">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1591">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1592">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1592">Required.</span></span> <span data-ttu-id="37fab-1593">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1594">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1594">Required.</span></span> <span data-ttu-id="37fab-1595">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1596">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-1596">Optional.</span></span> <span data-ttu-id="37fab-1597">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1598">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1599">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1600">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1601">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1602">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1603">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1604">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1605">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1606">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1607">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1608">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1608">Random Mode</span></span>  
 <span data-ttu-id="37fab-1609">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1610">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1611">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1612">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1613">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1614">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1615">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1616">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1617">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1618">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1619">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1620">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1621">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1622">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1623">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1624">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1625">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1626">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1627">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1628">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1629">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1630">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1631">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1632">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1633">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1634">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1635">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1636">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1636">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1637">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1638">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1639">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1640">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1641">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1642">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1643">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1644">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1645">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1646">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1647">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1648">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1649"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1650">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1651">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1652">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1652">Required.</span></span> <span data-ttu-id="37fab-1653">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1654">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1654">Required.</span></span> <span data-ttu-id="37fab-1655">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1656">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-1656">Optional.</span></span> <span data-ttu-id="37fab-1657">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1658">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1659">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1660">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1661">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1662">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1663">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1664">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1665">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1666">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1667">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1668">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1668">Random Mode</span></span>  
 <span data-ttu-id="37fab-1669">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1670">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1671">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1672">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1673">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1674">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1675">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1676">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1677">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1678">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1679">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1680">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1681">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1682">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1683">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1684">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1685">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1686">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1687">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1688">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1689">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1690">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1691">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1692">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1693">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1694">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1695">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1696">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1696">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1697">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1698">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1699">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1700">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1701">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1702">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1703">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1704">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1705">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1706">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1707">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1708">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1709"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1710">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1711">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1712">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1712">Required.</span></span> <span data-ttu-id="37fab-1713">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1714">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1714">Required.</span></span> <span data-ttu-id="37fab-1715">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1716">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-1716">Optional.</span></span> <span data-ttu-id="37fab-1717">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1718">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1719">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1720">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1721">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1722">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1723">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1724">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1725">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1726">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1727">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1728">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1728">Random Mode</span></span>  
 <span data-ttu-id="37fab-1729">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1730">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1731">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1732">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1733">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1734">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1735">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1736">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1737">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1738">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1739">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1740">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1741">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1742">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1743">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1744">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1745">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1746">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1747">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1748">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1749">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1750">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1751">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1752">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1753">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1754">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1755">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1756">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1756">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1757">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1758">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1759">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1760">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1761">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1762">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1763">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1764">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1765">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1766">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1767">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1768">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1769"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1770">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1771">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1772">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1772">Required.</span></span> <span data-ttu-id="37fab-1773">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1774">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1774">Required.</span></span> <span data-ttu-id="37fab-1775">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1776">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1776">Optional.</span></span> <span data-ttu-id="37fab-1777">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1778">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1779">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1780">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1781">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1782">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1783">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1784">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1785">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1786">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1787">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1788">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1788">Random Mode</span></span>  
 <span data-ttu-id="37fab-1789">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1790">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w`RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1791">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1792">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1793">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1794">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1795">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1796">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1797">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1798">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1799">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1800">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1801">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1802">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1803">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1804">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1805">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1806">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1807">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1808">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1809">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1810">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1811">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1812">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1813">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1814">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1815">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1816">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1816">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1817">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1818">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1819">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1820">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1821">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1822">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1823">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1824">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1825">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1826">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1827">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1828">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1829"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1830">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1831">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FilePut(System::Object ^ FileNumber, System::Object ^ Value, System::Object ^ RecordNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1832">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1832">Required.</span></span> <span data-ttu-id="37fab-1833">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1834">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1834">Required.</span></span> <span data-ttu-id="37fab-1835">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1836">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1836">Optional.</span></span> <span data-ttu-id="37fab-1837">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-1838">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1839">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1840">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1841">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1842">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1843">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1844">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1845">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1846">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1847">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1848">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1848">Random Mode</span></span>  
 <span data-ttu-id="37fab-1849">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1850">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1851">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1852">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1853">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1854">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1855">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1856">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1857">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1858">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1859">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1860">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1861">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1862">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1863">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1864">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1865">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1866">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1867">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1868">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1869">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1870">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1871">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1872">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1873">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1874">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1875">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1876">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1876">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1877">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1878">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1879">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1880">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1881">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1882">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1883">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1884">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1885">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1886">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1887">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1888">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1889"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1890">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1891">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1892">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1892">Required.</span></span> <span data-ttu-id="37fab-1893">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1894">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1894">Required.</span></span> <span data-ttu-id="37fab-1895">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1896">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1896">Optional.</span></span> <span data-ttu-id="37fab-1897">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="37fab-1898">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1898">Optional.</span></span> <span data-ttu-id="37fab-1899">Stosuje się tylko przy pisaniu ciągów.</span><span class="sxs-lookup"><span data-stu-id="37fab-1899">Applies only when writing a string.</span></span> <span data-ttu-id="37fab-1900">Określa, czy należy napisać dwubajtowy deskryptor długości ciągu dla ciągu do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="37fab-1901">Wartość domyślna to <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="37fab-1902">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1903">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1904">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1905">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1906">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1907">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1908">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1909">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1910">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1911">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1912">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1912">Random Mode</span></span>  
 <span data-ttu-id="37fab-1913">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1914">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1915">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1916">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1917">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1918">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1919">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1920">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1921">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1922">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1923">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1924">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1925">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1926">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1927">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1928">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1929">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1930">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1931">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1932">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-1933">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-1934">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-1935">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-1936">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-1937">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-1938">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-1939">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-1940">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-1940">Binary Mode</span></span>  
 <span data-ttu-id="37fab-1941">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-1942">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-1943">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-1944">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-1945">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-1946">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-1947">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-1948">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-1949">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-1950">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-1951">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-1952">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-1953"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-1954">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-1955">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-1956">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1956">Required.</span></span> <span data-ttu-id="37fab-1957">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-1958">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1958">Required.</span></span> <span data-ttu-id="37fab-1959">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-1960">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1960">Optional.</span></span> <span data-ttu-id="37fab-1961">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="37fab-1962">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-1962">Optional.</span></span> <span data-ttu-id="37fab-1963">Ma zastosowanie tylko w przypadku pisania tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1963">Applies only when writing an array.</span></span> <span data-ttu-id="37fab-1964">Określa, czy tablica ma być traktowana jako dynamiczna, oraz czy należy napisać deskryptor tablicy dla ciągu opisującego długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="37fab-1965">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-1965">Optional.</span></span> <span data-ttu-id="37fab-1966">Stosuje się tylko przy pisaniu ciągów.</span><span class="sxs-lookup"><span data-stu-id="37fab-1966">Applies only when writing a string.</span></span> <span data-ttu-id="37fab-1967">Określa, czy należy napisać dwubajtowy deskryptor długości ciągu dla ciągu do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="37fab-1968">Wartość domyślna to <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="37fab-1969">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="37fab-1970">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePut" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="37fab-1971">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-1972">`FilePut`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-1973">Dane zapisywane w `FilePut` programie są zwykle odczytywane z pliku przy `FileGet`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="37fab-1974">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-1975">Jeśli pominięto `RecordNumber`, następny rekord lub bajt po ostatnim `FileGet` lub `FilePut` funkcji lub wskazywanym przez ostatnią `Seek` funkcję jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="37fab-1976">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-1977">`FilePut`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-1978">`StringIsFixedLength` Jeśliużywasz`FilePut` `FileGet`programu z programem, musisz wykonać te same czynności z programem, aby upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`  = </span><span class="sxs-lookup"><span data-stu-id="37fab-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-1979">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-1979">Random Mode</span></span>  
 <span data-ttu-id="37fab-1980">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-1981">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePut` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-1982">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-1983">Ponieważ ilości danych uzupełniania nie można dokładnie określić, to zazwyczaj dobrze jest, gdy długość rekordu jest zgodna z długością zapisanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-1984">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="37fab-1985">Jeśli zmienna jest zapisywana, `FilePut` zapisuje dwubajtowy deskryptor, który zawiera długość ciągu, a następnie zapisuje dane, które są przechowywane w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="37fab-1986">W związku z tym długość rekordu określana `RecordLength` przez klauzulę `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="37fab-1987">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePut` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-1988">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePut` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-1989">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-1990">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePut` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-1991">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-1992">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-1993">Jeżeli zapisywaną zmienną jest tablica, można wybrać, czy odczytać deskryptor, by uzyskać informacje o wielkości i wymiarze tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="37fab-1994">Visual Basic 6.0 i starsze wersje zapisują deskryptor plików dla tablic dynamicznych, bez uwzględniania tablicy o stałym rozmiarze.</span><span class="sxs-lookup"><span data-stu-id="37fab-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="37fab-1995">Według domyślnych ustawień programu Visual Basic 2005 deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="37fab-1996">Aby zapisać deskryptor, ustaw `ArrayIsDynamic` parametr na. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="37fab-1997">Podczas zapisywania tablicy należy dopasować sposób odczytywania tablicy; jeśli będzie odczytywana z deskryptorem, należy napisać deskryptor.</span><span class="sxs-lookup"><span data-stu-id="37fab-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="37fab-1998">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-1999">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="37fab-2000">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-2001">Na przykład następująca deklaracja tablicy wymaga 218 bajtów, jeśli tablica zapisywana jest na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="37fab-2002">Jeśli zapisywana zmienna jest jakimkolwiek innym typem zmiennej (a nie ciągiem o zmiennej długości czy obiektem), program `FilePut` zapisuje tylko dane zmienne.</span><span class="sxs-lookup"><span data-stu-id="37fab-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="37fab-2003">Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa długości zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="37fab-2004">`FilePut`Zapisuje elementy struktur tak, jakby każda została zapisywana pojedynczo, z tą różnicą, że nie istnieje uzupełnienie między elementami.</span><span class="sxs-lookup"><span data-stu-id="37fab-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="37fab-2005">Ten `VBFixedString` atrybut może być stosowany do pól ciągu w strukturach, aby wskazać rozmiar ciągu podczas zapisywania na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="37fab-2006">Pola ciągów, które mają więcej bajtów niż określa `VBFixedString` atrybut, są obcinane podczas zapisywania na dysku,</span><span class="sxs-lookup"><span data-stu-id="37fab-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-2007">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-2007">Binary Mode</span></span>  
 <span data-ttu-id="37fab-2008">W przypadku plików otwartych `Binary` w trybie większość `Random` reguł trybu ma zastosowanie z pewnymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="37fab-2009">Następujące reguły dla plików otwartych w `Binary` trybie różnią się w zależności od zasad dla `Random` trybu:</span><span class="sxs-lookup"><span data-stu-id="37fab-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="37fab-2010">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-2011">`FilePut`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="37fab-2012">W przypadku każdej tablicy innej niż tablica w strukturze program `FilePut` zapisuje tylko dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="37fab-2013">Deskryptor nie jest zapisywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="37fab-2014">`FilePut`zapisuje ciągi o zmiennej długości, które nie są elementami struktur bez deskryptora długości dwubajtowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="37fab-2015">Liczba bajtów zapisanych jest równa liczbie znaków znajdujących się już w ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="37fab-2016">Na przykład poniższe instrukcje zapisują 11 bajtów do pliku numer 1:</span><span class="sxs-lookup"><span data-stu-id="37fab-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="37fab-2017">Zapis w pliku przy użyciu `FilePut` funkcji wymaga `Write` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2018">W tym przykładzie `FilePut` funkcja służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="37fab-2019">W pliku Zapisano pięć rekordów `Person` struktury.</span><span class="sxs-lookup"><span data-stu-id="37fab-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-2020"><paramref name="RecordNumber" />&lt; 1 i nie równa-1.</span><span class="sxs-lookup"><span data-stu-id="37fab-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2021">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-2022">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2023">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2023">Required.</span></span> <span data-ttu-id="37fab-2024">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2025">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2025">Required.</span></span> <span data-ttu-id="37fab-2026">Prawidłowa nazwa zmiennej, która zawiera dane zapisane na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="37fab-2027">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2027">Optional.</span></span> <span data-ttu-id="37fab-2028">Numer rekordu (<see langword="Random" /> pliki trybu) lub liczba bajtów (<see langword="Binary" /> pliki trybu), które zaczynają pisać.</span><span class="sxs-lookup"><span data-stu-id="37fab-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="37fab-2029">Zapisuje dane ze zmiennej do pliku na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="37fab-2030">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FilePutObject" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="37fab-2031">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2032">`Integer` `Object` `Long` `Short`Funkcja jest używana `FilePut` zamiast, aby uniknąć niejasności w czasie kompilacji, jeśli typ jest przekazywać zamiast innego typu, takiego jak,, i tak dalej. `FilePutObject`</span><span class="sxs-lookup"><span data-stu-id="37fab-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="37fab-2033">`FilePutObject`zapisuje i odczytuje deskryptory opisujące obiekt.</span><span class="sxs-lookup"><span data-stu-id="37fab-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="37fab-2034">Jeśli zamierzasz napisać `Variant` typ, `FilePutObject` jest wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="37fab-2035">W razie wątpliwości, jeśli używasz obiektu dla drugiego parametru, zalecamy, aby zawsze używać `FilePutObject` i. `FileGetObject`</span><span class="sxs-lookup"><span data-stu-id="37fab-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="37fab-2036">`FilePutObject`jest prawidłowy tylko w `Random` trybie `Binary` i.</span><span class="sxs-lookup"><span data-stu-id="37fab-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-2037">Dane zapisywane w `FilePutObject` programie są zwykle odczytywane z pliku przy `FileGetObject`użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="37fab-2038">Pierwszy rekord lub bajt w pliku znajduje się na pozycji 1, drugi rekord lub bajt na pozycji 2 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="37fab-2039">W `RecordNumber`przypadku pominięcia `Seek` program `FilePutObject` zapisuje następny rekord lub bajt po ostatniej `FileGetObject` lub `FilePutObject` funkcji (lub rekordu lub bajtu wskazywanym przez ostatnią funkcję).</span><span class="sxs-lookup"><span data-stu-id="37fab-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="37fab-2040">`StringIsFixedLength` Argument kontroluje, czy funkcja interpretuje ciągi jako zmienną lub stałą długość.</span><span class="sxs-lookup"><span data-stu-id="37fab-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="37fab-2041">`FilePutObject`nie zapisuje deskryptora długości, gdy argument jest `True`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="37fab-2042">W przypadku korzystania `StringIsFixedLength`  =  `FilePutObject` `FileGetObject`z programu z programem należy wykonać te same czynności w programie, a ponadto należy upewnić się, że ciąg jest zainicjowany do oczekiwanej długości. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="37fab-2043">Tryb losowy</span><span class="sxs-lookup"><span data-stu-id="37fab-2043">Random Mode</span></span>  
 <span data-ttu-id="37fab-2044">W przypadku plików otwartych `Random` w trybie są stosowane następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="37fab-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="37fab-2045">Jeśli długość zapisywanych danych jest mniejsza niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, program `FilePutObject` zapisuje kolejne rekordy w granicach długości rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="37fab-2046">Odstęp między końcem jednego rekordu a początkiem następnego rekordu jest wypełniany istniejącą zawartością buforu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="37fab-2047">Ponieważ ilości danych uzupełniania nie można dokładnie określić, zazwyczaj dobrym pomysłem jest, aby długość rekordu była zgodna z długością zapisywanych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="37fab-2048">Jeśli długość zapisywanych danych jest większa niż długość określona w `RecordLength` klauzuli `FileOpen` funkcji, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="37fab-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="37fab-2049">Jeśli zmienna, która jest zapisywana, jest obiektem, który zawiera `FilePutObject` typ liczbowy, zapisuje dwa `VarType` bajty identyfikujące obiekt, a następnie zapisuje zmienną.</span><span class="sxs-lookup"><span data-stu-id="37fab-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="37fab-2050">Na przykład podczas pisania obiektu, który zawiera liczbę całkowitą, program `FilePutObject` zapisuje sześć bajtów: dwa bajty, które identyfikują `VarType(3)` obiekt`Integer`jako () i cztery bajty zawierające dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="37fab-2051">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej dwa bajty większe niż rzeczywista liczba bajtów wymagana do przechowania zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="37fab-2052">Jeśli zmienna zapisywana jest obiektem, który zawiera ciąg, `FilePutObject` Zapisuje deskryptor dwubajtowy `VarType(8)` identyfikujący obiekt, deskryptor dwubajtowy wskazujący długość ciągu, a następnie zapisuje dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="37fab-2053">Długość rekordu określana przez `RecordLength` parametr `FileOpen` w funkcji musi być co najmniej cztery bajty większą niż rzeczywista długość ciągu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="37fab-2054">Jeśli chcesz umieścić ciąg bez deskryptora, należy przekazać `True` `StringIsFixedLength` do parametru, a ciąg odczytywany powinien być poprawną długością.</span><span class="sxs-lookup"><span data-stu-id="37fab-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="37fab-2055">Jeśli zmienna zapisywana jest tablicą, Długość rekordu określana przez `RecordLength` klauzulę `FileOpen` w funkcji musi być większa lub równa sumie wszystkich bajtów wymaganych do zapisania danych tablicowych i deskryptora tablicy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="37fab-2056">Deskryptor określa rangę tablicy, rozmiar i dolne granice dla każdej rangi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="37fab-2057">Jego długość jest równa 2 plus 8 razy liczba wymiarów: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="37fab-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="37fab-2058">Tryb binarny</span><span class="sxs-lookup"><span data-stu-id="37fab-2058">Binary Mode</span></span>  
 <span data-ttu-id="37fab-2059">W przypadku plików otwartych `Binary` w trybie wszystkie reguły `Random` trybu są stosowane, z wyjątkiem:</span><span class="sxs-lookup"><span data-stu-id="37fab-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="37fab-2060">`RecordLength` Klauzula`FileOpen` w funkcji nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="37fab-2061">`FilePutObject`zapisuje wszystkie zmienne na dysku w sposób ciągły, czyli bez dopełnienia między rekordami.</span><span class="sxs-lookup"><span data-stu-id="37fab-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2062">Ten przykład używa funkcji `FilePutObject` , aby napisać ciąg do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-2063">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2064">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2064">Required.</span></span> <span data-ttu-id="37fab-2065">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="37fab-2066">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2066">Required.</span></span> <span data-ttu-id="37fab-2067">Wyrażenie liczbowe w zakresie 0-255, włącznie, które wskazuje liczbę znaków wyświetlanych w wierszu przed rozpoczęciem nowego wiersza.</span><span class="sxs-lookup"><span data-stu-id="37fab-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="37fab-2068">Jeśli <paramref name="RecordWidth" /> wartość jest równa 0, nie ma limitu długości wiersza.</span><span class="sxs-lookup"><span data-stu-id="37fab-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="37fab-2069">Wartość domyślna dla <paramref name="RecordWidth" /> jest równa 0.</span><span class="sxs-lookup"><span data-stu-id="37fab-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="37fab-2070">Przypisuje szerokość linii wyjściowej do pliku otwartego przy użyciu <see langword="FileOpen" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="37fab-2071">Ten przykład używa funkcji `FileWidth` , aby ustawić szerokość linii wyjściowej dla pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2072">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2073">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37fab-2074">Zwraca wartość reprezentującą następny numer pliku, który jest dostępny do użycia <see langword="FileOpen" /> przez funkcję. <see langword="Integer" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="37fab-2075">Wartość całkowita, która reprezentuje następny numer pliku, który jest dostępny do użycia <see langword="FileOpen" /> przez funkcję.</span><span class="sxs-lookup"><span data-stu-id="37fab-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2076">Użyj `FreeFile` , aby podać numer pliku, który nie jest jeszcze używany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2077">Ten przykład używa funkcji `FreeFile` , aby zwrócić następny dostępny numer pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="37fab-2078">Do danych wyjściowych w pętli są otwierane pięć plików, a niektóre przykładowe dane są zapisywane w każdym z nich.</span><span class="sxs-lookup"><span data-stu-id="37fab-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2079">Więcej niż 255 plików jest używanych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-2080">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="37fab-2081">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2081">Required.</span></span> <span data-ttu-id="37fab-2082">Wyrażenie ciągu określające nazwę pliku, katalogu lub folderu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="37fab-2083"><paramref name="PathName" />może obejmować katalog lub folder, a także dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="37fab-2084"><see langword="FileAttribute" /> Zwraca wartość, która reprezentuje atrybuty pliku, katalogu lub folderu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="37fab-2085">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="FileAttribute" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="37fab-2086">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="37fab-2087">Bitowe połączenie wartości wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2087">A bitwise combination of the enumeration values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2088">Aby określić, które atrybuty są ustawione, użyj `And` operatora, aby wykonać bitowe porównanie wartości zwracanej `GetAttr` przez funkcję i wartość określonego atrybutu pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2088">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="37fab-2089">Jeśli wynik jest różny od zera, ten atrybut jest ustawiany dla nazwanego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2089">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="37fab-2090">Na przykład zwracaną wartością następującego `And` wyrażenia jest zero, `Archive` Jeśli atrybut nie jest ustawiony:</span><span class="sxs-lookup"><span data-stu-id="37fab-2090">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="37fab-2091">Wartość różna od zera jest zwracana, `Archive` Jeśli atrybut jest ustawiony.</span><span class="sxs-lookup"><span data-stu-id="37fab-2091">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2092">Ten przykład używa funkcji `GetAttr` , aby określić atrybuty pliku i katalogu lub folderu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2092">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2093"><paramref name="Pathname" />jest nieprawidłowa lub zawiera symbole wieloznaczne.</span><span class="sxs-lookup"><span data-stu-id="37fab-2093"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="37fab-2094">Plik docelowy nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-2094">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="37fab-2095">And — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2095">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2096">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2096">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-2097">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2097">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2098">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2098">Required.</span></span> <span data-ttu-id="37fab-2099">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2099">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2100">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2100">Required.</span></span> <span data-ttu-id="37fab-2101">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2101">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2102">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2102">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2103">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2103">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2104">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2104">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2105">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2105">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2106">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2106">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2107">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2107">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2108">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2108">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2109">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2109">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2110">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2110">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2111">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2111">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2112">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2112">Data</span></span>|<span data-ttu-id="37fab-2113">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2113">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2114">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2114">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2115">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2115">Empty</span></span>|  
|<span data-ttu-id="37fab-2116">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2116">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2117">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2117">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2118">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2118">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2119">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2119">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2120">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2120">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2121">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2121">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2122">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2122">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2123">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2123">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2124">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2124">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2125">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2125">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2126">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2126">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2127">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2127">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2128">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera pewne wiersze danych, `Write` za pomocą funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2128">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2129">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2129">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2130">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2130">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2131">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2131">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2132">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2132">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2133">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2133">Required.</span></span> <span data-ttu-id="37fab-2134">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2134">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2135">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2135">Required.</span></span> <span data-ttu-id="37fab-2136">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2136">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2137">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2137">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2138">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2138">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2139">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2139">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2140">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2140">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2141">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2141">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2142">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2142">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2143">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2143">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2144">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2144">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2145">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2145">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2146">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2146">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2147">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2147">Data</span></span>|<span data-ttu-id="37fab-2148">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2148">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2149">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2149">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2150">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2150">Empty</span></span>|  
|<span data-ttu-id="37fab-2151">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2151">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2152">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2152">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2153">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2153">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2154">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2154">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2155">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2155">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2156">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2156">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2157">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2157">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2158">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2158">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2159">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2159">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2160">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2160">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2161">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2161">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2162">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2162">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2163">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera pewne wiersze danych, `Write` za pomocą funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2163">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2164">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2164">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2165">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2165">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2166">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2166">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2167">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2167">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2168">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2168">Required.</span></span> <span data-ttu-id="37fab-2169">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2169">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2170">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2170">Required.</span></span> <span data-ttu-id="37fab-2171">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2171">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2172">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2172">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2173">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2173">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2174">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2174">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2175">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2175">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2176">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2176">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2177">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2177">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2178">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2178">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2179">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2179">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2180">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2180">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2181">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2181">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2182">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2182">Data</span></span>|<span data-ttu-id="37fab-2183">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2183">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2184">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2184">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2185">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2185">Empty</span></span>|  
|<span data-ttu-id="37fab-2186">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2186">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2187">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2187">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2188">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2188">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2189">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2189">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2190">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2190">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2191">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2191">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2192">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2192">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2193">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2193">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2194">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2194">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2195">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2195">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2196">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2196">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2197">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2197">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2198">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2198">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2199">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2199">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2200">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2200">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2201">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2201">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2202">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2202">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2203">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2203">Required.</span></span> <span data-ttu-id="37fab-2204">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2204">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2205">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2205">Required.</span></span> <span data-ttu-id="37fab-2206">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2206">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2207">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2207">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2208">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2208">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2209">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2209">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2210">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2210">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2211">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2211">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2212">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2212">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2213">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2213">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2214">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2214">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2215">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2215">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2216">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2216">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2217">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2217">Data</span></span>|<span data-ttu-id="37fab-2218">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2218">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2219">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2219">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2220">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2220">Empty</span></span>|  
|<span data-ttu-id="37fab-2221">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2221">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2222">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2222">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2223">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2223">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2224">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2224">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2225">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2225">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2226">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2226">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2227">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2227">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2228">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2228">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2229">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2229">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2230">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2230">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2231">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2231">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2232">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2232">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2233">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2233">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2234">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2234">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2235">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2235">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2236">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2236">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2237">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2237">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2238">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2238">Required.</span></span> <span data-ttu-id="37fab-2239">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2239">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2240">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2240">Required.</span></span> <span data-ttu-id="37fab-2241">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2241">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2242">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2242">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2243">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2243">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2244">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2244">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2245">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2245">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2246">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2246">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2247">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2247">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2248">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2248">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2249">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2249">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2250">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2250">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2251">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2251">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2252">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2252">Data</span></span>|<span data-ttu-id="37fab-2253">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2253">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2254">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2254">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2255">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2255">Empty</span></span>|  
|<span data-ttu-id="37fab-2256">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2256">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2257">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2257">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2258">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2258">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2259">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2259">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2260">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2260">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2261">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2261">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2262">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2262">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2263">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2263">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2264">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2264">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2265">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2265">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2266">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2266">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2267">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2267">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2268">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2268">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2269">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2269">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2270">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2270">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2271">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2271">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2272">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2272">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2273">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2273">Required.</span></span> <span data-ttu-id="37fab-2274">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2274">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2275">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2275">Required.</span></span> <span data-ttu-id="37fab-2276">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2276">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2277">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2277">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2278">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2278">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2279">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2279">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2280">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2280">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2281">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2281">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2282">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2282">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2283">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2283">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2284">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2284">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2285">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2285">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2286">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2286">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2287">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2287">Data</span></span>|<span data-ttu-id="37fab-2288">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2288">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2289">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2289">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2290">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2290">Empty</span></span>|  
|<span data-ttu-id="37fab-2291">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2291">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2292">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2292">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2293">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2293">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2294">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2294">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2295">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2295">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2296">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2296">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2297">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2297">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2298">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2298">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2299">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2299">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2300">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2300">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2301">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2301">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2302">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2302">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2303">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2303">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2304">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2304">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2305">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2305">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2306">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2306">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2307">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2307">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2308">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2308">Required.</span></span> <span data-ttu-id="37fab-2309">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2309">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2310">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2310">Required.</span></span> <span data-ttu-id="37fab-2311">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2311">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2312">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2312">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2313">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2313">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2314">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2314">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2315">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2315">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2316">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2316">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2317">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2317">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2318">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2318">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2319">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2319">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2320">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2320">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2321">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2321">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2322">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2322">Data</span></span>|<span data-ttu-id="37fab-2323">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2323">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2324">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2324">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2325">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2325">Empty</span></span>|  
|<span data-ttu-id="37fab-2326">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2326">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2327">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2327">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2328">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2328">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2329">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2329">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2330">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2330">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2331">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2331">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2332">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2332">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2333">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2333">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2334">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2334">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2335">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2335">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2336">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2336">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2337">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2337">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2338">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2338">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2339">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2339">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2340">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2340">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2341">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2341">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2342">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2342">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2343">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2343">Required.</span></span> <span data-ttu-id="37fab-2344">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2344">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2345">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2345">Required.</span></span> <span data-ttu-id="37fab-2346">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2346">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2347">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2347">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2348">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2348">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2349">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2349">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2350">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2350">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2351">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2351">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2352">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2352">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2353">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2353">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2354">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2354">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2355">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2355">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2356">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2356">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2357">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2357">Data</span></span>|<span data-ttu-id="37fab-2358">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2358">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2359">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2359">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2360">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2360">Empty</span></span>|  
|<span data-ttu-id="37fab-2361">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2361">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2362">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2362">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2363">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2363">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2364">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2364">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2365">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2365">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2366">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2366">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2367">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2367">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2368">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2368">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2369">Na przykład w wersji niemieckiej, jeśli wprowadzasz 3, 14159, zwraca tylko 3, ponieważ przecinek jest traktowany jako separator zmiennej, a nie jako punkt dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2369">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2370">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2370">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2371">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2371">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2372">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2372">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2373">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2373">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2374">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2374">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2375">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2375">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2376">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2376">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2377">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2377">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2378">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2378">Required.</span></span> <span data-ttu-id="37fab-2379">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2379">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2380">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2380">Required.</span></span> <span data-ttu-id="37fab-2381">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2381">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2382">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2382">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2383">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2383">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2384">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2384">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2385">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2385">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2386">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2386">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2387">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2387">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2388">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2388">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2389">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2389">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2390">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2390">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2391">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2391">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2392">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2392">Data</span></span>|<span data-ttu-id="37fab-2393">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2393">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2394">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2394">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2395">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2395">Empty</span></span>|  
|<span data-ttu-id="37fab-2396">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2396">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2397">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2397">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2398">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2398">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2399">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2399">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2400">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2400">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2401">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2401">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2402">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2402">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2403">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2403">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2404">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2404">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2405">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2405">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2406">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2406">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2407">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2407">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2408">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2408">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2409">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2409">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2410">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2410">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2411">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2411">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2412">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2412">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2413">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2413">Required.</span></span> <span data-ttu-id="37fab-2414">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2414">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2415">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2415">Required.</span></span> <span data-ttu-id="37fab-2416">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2416">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2417">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2417">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2418">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2418">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2419">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2419">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2420">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2420">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2421">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2421">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2422">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2422">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2423">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2423">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2424">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2424">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2425">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2425">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2426">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2426">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2427">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2427">Data</span></span>|<span data-ttu-id="37fab-2428">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2428">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2429">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2429">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2430">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2430">Empty</span></span>|  
|<span data-ttu-id="37fab-2431">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2431">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2432">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2432">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2433">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2433">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2434">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2434">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2435">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2435">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2436">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2436">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2437">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2437">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2438">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2438">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2439">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2439">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2440">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2440">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2441">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2441">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2442">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2442">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2443">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2443">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2444">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2444">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2445">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2445">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2446">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2446">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2447">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2447">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2448">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2448">Required.</span></span> <span data-ttu-id="37fab-2449">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2449">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2450">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2450">Required.</span></span> <span data-ttu-id="37fab-2451">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2451">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2452">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2452">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2453">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2453">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2454">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2454">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2455">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2455">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2456">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2456">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2457">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2457">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2458">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2458">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2459">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2459">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2460">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2460">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2461">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2461">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2462">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2462">Data</span></span>|<span data-ttu-id="37fab-2463">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2463">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2464">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2464">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2465">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2465">Empty</span></span>|  
|<span data-ttu-id="37fab-2466">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2466">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2467">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2467">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2468">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2468">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2469">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2469">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2470">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2470">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2471">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2471">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2472">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2472">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2473">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2473">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2474">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2474">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2475">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2475">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2476">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2476">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2477">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2477">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2478">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2478">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2479">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2479">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2480">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2480">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2481">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2481">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2482">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2482">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2483">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2483">Required.</span></span> <span data-ttu-id="37fab-2484">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2484">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="37fab-2485">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2485">Required.</span></span> <span data-ttu-id="37fab-2486">Zmienna, do której przypisano wartości odczytane z pliku — nie może być tablicą ani zmienną obiektu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2486">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="37fab-2487">Wczytuje dane z otwartego pliku sekwencyjnego i przypisuje dane do zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2487">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2488">`Input` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2488">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2489">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2489">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2490">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2490">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2491">Odczytane `Input` dane są zwykle zapisywane w pliku przy użyciu `Write`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2491">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="37fab-2492">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2492">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2493">Podczas odczytu z plików nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2493">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2494">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="37fab-2494">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="37fab-2495">Podczas odczytu ciąg standardowy lub dane liczbowe przypisywane są do zmiennych bez żadnych modyfikacji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2495">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="37fab-2496">Następująca tabela ilustruje, jak postępować z innymi danymi wejściowymi.</span><span class="sxs-lookup"><span data-stu-id="37fab-2496">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="37fab-2497">Dane</span><span class="sxs-lookup"><span data-stu-id="37fab-2497">Data</span></span>|<span data-ttu-id="37fab-2498">Wartość przypisana do zmiennej</span><span class="sxs-lookup"><span data-stu-id="37fab-2498">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="37fab-2499">Przecinek rozdzielający lub pusty wiersz</span><span class="sxs-lookup"><span data-stu-id="37fab-2499">Delimiting comma or blank line</span></span>|<span data-ttu-id="37fab-2500">Pusty</span><span class="sxs-lookup"><span data-stu-id="37fab-2500">Empty</span></span>|  
|<span data-ttu-id="37fab-2501">#NULL #</span><span class="sxs-lookup"><span data-stu-id="37fab-2501">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="37fab-2502">#PRAWDA # lub #FAŁSZ #</span><span class="sxs-lookup"><span data-stu-id="37fab-2502">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="37fab-2503">`True` lub `False`</span><span class="sxs-lookup"><span data-stu-id="37fab-2503">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="37fab-2504">Data i/lub godzina reprezentowana przez wyrażenie</span><span class="sxs-lookup"><span data-stu-id="37fab-2504">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="37fab-2505">#ERROR`errornumber`#</span><span class="sxs-lookup"><span data-stu-id="37fab-2505">#ERROR `errornumber`#</span></span>|<span data-ttu-id="37fab-2506">`errornumber`(zmienna jest obiektem oznaczonym jako błąd)</span><span class="sxs-lookup"><span data-stu-id="37fab-2506">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="37fab-2507">Jeśli dojdziesz do końca pliku, w trakcie wprowadzania elementu danych, dane wejściowe zostaną zatrzymane i wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2507">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2508">`Input` Funkcja nie jest zlokalizowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2508">The `Input` function is not localized.</span></span> <span data-ttu-id="37fab-2509">Na przykład w wersji niemieckiej wpisanie wartości 3,14159 spowoduje zwrócenie liczby 3, ponieważ przecinek jest traktowany jako separator zmiennej a nie jako separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2509">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2510">Odczytywanie z pliku przy użyciu `Input` funkcji wymaga `Read` dostępu z `FileIOPermissionAccess` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2510">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2511">Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2511">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2512">W tym przykładzie `Input` funkcja służy do odczytywania danych z pliku w dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2512">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="37fab-2513">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem, który zawiera kilka wierszy danych, `Write` przy użyciu funkcji, każdy wiersz zawierający ciąg w cudzysłowach i liczbę oddzieloną przecinkami, na przykład: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="37fab-2513">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2514">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2514">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2515">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2515">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2516">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2516">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2517">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2517">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2518">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2518">Required.</span></span> <span data-ttu-id="37fab-2519">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2519">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="37fab-2520">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2520">Required.</span></span> <span data-ttu-id="37fab-2521">Dowolne prawidłowe wyrażenie liczbowe określające liczbę znaków do odczytania.</span><span class="sxs-lookup"><span data-stu-id="37fab-2521">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="37fab-2522">Zwraca <see langword="String" /> wartość zawierającą znaki z pliku otwartego w <see langword="Input" /> trybie <see langword="Binary" /> lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2522">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="37fab-2523">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="InputString" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2523">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="37fab-2524">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2524">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="37fab-2525">Ciąg zawierający znaki z pliku otwartego w lub <see langword="Input" /> <see langword="Binary" /> w trybie.</span><span class="sxs-lookup"><span data-stu-id="37fab-2525">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="37fab-2526">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="InputString" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2526">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2527">`InputString` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2527">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2528">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2528">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2529">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2529">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2530">Dane odczytane `InputString` za pomocą funkcji są zwykle zapisywane w pliku przy `Print` użyciu `FilePut`lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2530">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="37fab-2531">Tej funkcji należy używać tylko z plikami otwartymi `Binary` w `Input` trybie lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2531">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="37fab-2532">`Input` W`InputString` przeciwieństwie do funkcji, funkcja zwraca wszystkie znaki, które odczytuje.</span><span class="sxs-lookup"><span data-stu-id="37fab-2532">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="37fab-2533">Dotyczy to przecinków, znaków powrotu karetki, znaków cudzysłowu i spacji wiodących.</span><span class="sxs-lookup"><span data-stu-id="37fab-2533">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="37fab-2534">W przypadku plików otwartych `Binary` na potrzeby dostępu próbuje odczytać plik za `InputString` pomocą funkcji, dopóki funkcja Return `EOF` `True` nie wygeneruje błędu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2534">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="37fab-2535">`Loc` `InputString` `FileGet` `EOF` Użyj funkcji `LOF` i zamiast`EOF` podczas odczytywania plików binarnych za pomocą, lub użyj podczas korzystania z funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2535">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2536">Podczas odczytywania z plików nie należy podejmować decyzji dotyczących zabezpieczeń dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2536">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="37fab-2537">Na przykład plik o nazwie Form1. vb nie może być plikiem źródłowym Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-2537">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2538">Ten przykład używa funkcji `InputString` , aby odczytać jeden znak na raz z pliku i wydrukować go `Output` w oknie.</span><span class="sxs-lookup"><span data-stu-id="37fab-2538">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="37fab-2539">W tym przykładzie przyjęto założenie, że `MyFile` jest plikiem tekstowym, który zawiera kilka wierszy przykładowych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2539">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2540"><paramref name="FileNumber" />nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-2540"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-2541"><paramref name="CharCount" />&lt; 0 lub&gt; 214.</span><span class="sxs-lookup"><span data-stu-id="37fab-2541"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2542">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2542">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2543">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2543">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2544">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2544">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="37fab-2545">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2545">Required.</span></span> <span data-ttu-id="37fab-2546">Wyrażenie ciągu określające co najmniej jedną nazwę pliku do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2546">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="37fab-2547"><paramref name="PathName" />może obejmować katalog lub folder, a także dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-2547"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="37fab-2548">Usuwa pliki z dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2548">Deletes files from a disk.</span></span> <span data-ttu-id="37fab-2549">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="Kill" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2549">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="37fab-2550">Aby uzyskać więcej informacji, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-2550">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2551">`Kill`obsługuje używanie wielu znaków (`*`) i symboli wieloznacznych (`?`) do określenia wielu plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2551">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="37fab-2552">**Uwaga dotycząca zabezpieczeń** Aby można `Kill` było wykonać, funkcja wymaga `Read` i `PathDiscovery` flags <xref:System.Security.Permissions.FileIOPermission> , aby zostać przyznany kod wykonywany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2552">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="37fab-2553">Aby uzyskać więcej informacji, <xref:System.Security.SecurityException>zobacz [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="37fab-2553">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2554">Ten przykład używa funkcji `Kill` , aby usunąć plik z dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2554">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2555">Pliki docelowe zostały otwarte.</span><span class="sxs-lookup"><span data-stu-id="37fab-2555">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="37fab-2556">Nie znaleziono plików docelowych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2556">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="37fab-2557">Odmowa uprawnień.</span><span class="sxs-lookup"><span data-stu-id="37fab-2557">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2558">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2558">Required.</span></span> <span data-ttu-id="37fab-2559">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2559">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="37fab-2560">Odczytuje pojedynczy wiersz z otwartego sekwencyjnego pliku i przypisuje go do <see langword="String" /> zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2560">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="37fab-2561">Odczytuje pojedynczy wiersz z otwartego sekwencyjnego pliku i przypisuje go do <see langword="String" /> zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2561">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2562">`LineInput` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2562">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2563">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2563">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2564">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2564">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2565">Odczytane `LineInput` dane są zwykle zapisywane w pliku przy użyciu `Print`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2565">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2566">Podczas odczytu z plików, nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2566">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="37fab-2567">Na przykład plik o nazwie Form1.vb nie może być plikiem źródłowym programu Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-2567">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="37fab-2568">Funkcja odczytuje z pliku jeden znak naraz do momentu napotkania powrotu karetki (`Chr(13)`) lub powrotu karetki/wysuwu wiersza (`Chr(13) + Chr(10)`). `LineInput`</span><span class="sxs-lookup"><span data-stu-id="37fab-2568">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="37fab-2569">Sekwencje powrotu karetki i wysuwu wiersza są pomijane zamiast dołączane do ciągu znaków.</span><span class="sxs-lookup"><span data-stu-id="37fab-2569">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2570">Odczytywanie z pliku przy użyciu `LineInput` funkcji wymaga `Read` dostępu z <xref:System.Security.Permissions.FileIOPermissionAccess> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="37fab-2570">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2571">Ten przykład używa funkcji `LineInput` , aby odczytać wiersz z sekwencyjnego pliku i przypisać go do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2571">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="37fab-2572">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem tekstowym, który zawiera kilka wierszy przykładowych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2572">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="37fab-2573">Osiągnięto koniec pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2573">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2574"><paramref name="FileNumber" />nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-2574"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2575">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2575">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2576">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2576">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2577">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2577">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2578">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2578">Required.</span></span> <span data-ttu-id="37fab-2579">Dowolny prawidłowy <see langword="Integer" /> numer pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2579">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="37fab-2580">Zwraca wartość określającą bieżącą pozycję odczytu/zapisu w otwartym pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2580">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="37fab-2581">Bieżąca pozycja odczytu/zapisu w otwartym pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2581">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2582">`Loc` Funkcja jest zależna od zera; użycie jej do pobrania pierwszego bajtu w pliku zwróci wartość 0.</span><span class="sxs-lookup"><span data-stu-id="37fab-2582">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="37fab-2583">`Loc` Funkcja jest zapewniana w celu zapewnienia zgodności z poprzednimi wersjami i może mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2583">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2584">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2584">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2585">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2585">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2586">Poniżej opisano wartość zwracaną dla każdego trybu dostępu do pliku:</span><span class="sxs-lookup"><span data-stu-id="37fab-2586">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="37fab-2587">Tryb</span><span class="sxs-lookup"><span data-stu-id="37fab-2587">Mode</span></span>|<span data-ttu-id="37fab-2588">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="37fab-2588">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="37fab-2589">Numer ostatniego rekordu odczytanego lub zarejestrowanego w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2589">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="37fab-2590">Bieżąca pozycja bajtu w pliku podzielona przez 128.</span><span class="sxs-lookup"><span data-stu-id="37fab-2590">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="37fab-2591">Jednak informacje zwracane przez dla `Loc` sekwencyjnych plików nie są ani używane, ani wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2591">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="37fab-2592">Pozycja ostatniego bajtu odczytu lub zapisu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2592">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2593">Ten przykład używa funkcji `Loc` , aby zwrócić bieżącą pozycję odczytu/zapisu w otwartym pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2593">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="37fab-2594">W tym przykładzie przyjęto założenie, że `MyFile` jest plikiem tekstowym, który zawiera kilka wierszy przykładowych danych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2594">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2595">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2595">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-2596">Kontroluje dostęp przez inne procesy do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2596">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="37fab-2597">Funkcja zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach niż <see langword="Lock" /> i <see langword="Unlock" />. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2597">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="37fab-2598">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2598">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2599">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2599">Required.</span></span> <span data-ttu-id="37fab-2600">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2600">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="37fab-2601">Kontroluje dostęp przez inne procesy do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2601">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="37fab-2602">Funkcja zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach niż <see langword="Lock" /> i <see langword="Unlock" />. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="37fab-2603">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2604">Funkcje i są używane w środowiskach, `Unlock` w których kilka procesów może potrzebować dostępu do tego samego pliku. `Lock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2604">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="37fab-2605">`Lock`i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="37fab-2605">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="37fab-2606">Argumenty do `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="37fab-2606">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="37fab-2607">Jeśli `Record`lub `FromRecord` i`ToRecord` nie są podane, blokada będzie dla całego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2607">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="37fab-2608">Jeśli `Record` określono tylko jeden rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2608">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="37fab-2609">Jeśli plik został otwarty do sekwencyjnego wejścia lub `Lock` wyjścia i `Unlock` ma wpływ na cały plik, niezależnie od zakresu określonego przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2609">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2610">Ten przykład ilustruje użycie `Lock` funkcji i. `Unlock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2610">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="37fab-2611">W tym przykładzie przyjęto założenie, że `People.txt` jest plikiem zawierającym rekordy struktury. `Person`</span><span class="sxs-lookup"><span data-stu-id="37fab-2611">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2612">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2612">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2613">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2613">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2614">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2614">Required.</span></span> <span data-ttu-id="37fab-2615">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2615">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="37fab-2616">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2616">Optional.</span></span> <span data-ttu-id="37fab-2617">Numer jedynego rekordu lub bajtu do zablokowania lub odblokowania.</span><span class="sxs-lookup"><span data-stu-id="37fab-2617">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="37fab-2618">Kontroluje dostęp przez inne procesy do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2618">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="37fab-2619">Funkcja zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach niż <see langword="Lock" /> i <see langword="Unlock" />. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="37fab-2620">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2621">Funkcje i są używane w środowiskach, `Unlock` w których kilka procesów może potrzebować dostępu do tego samego pliku. `Lock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2621">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="37fab-2622">`Lock`i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="37fab-2622">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="37fab-2623">Argumenty do `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="37fab-2623">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="37fab-2624">Jeśli `Record`lub `FromRecord` i`ToRecord` nie są podane, blokada będzie dla całego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2624">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="37fab-2625">Jeśli `Record` określono tylko jeden rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2625">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="37fab-2626">Jeśli plik został otwarty do sekwencyjnego wejścia lub `Lock` wyjścia i `Unlock` ma wpływ na cały plik, niezależnie od zakresu określonego przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2626">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2627">Ten przykład ilustruje użycie `Lock` funkcji i. `Unlock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2627">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="37fab-2628">W tym przykładzie przyjęto założenie, że `People.txt` jest plikiem zawierającym rekordy struktury. `Person`</span><span class="sxs-lookup"><span data-stu-id="37fab-2628">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2629">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2629">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2630">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2630">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2631">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2631">Required.</span></span> <span data-ttu-id="37fab-2632">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2632">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="37fab-2633">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2633">Optional.</span></span> <span data-ttu-id="37fab-2634">Numer pierwszego rekordu lub bajtu do zablokowania lub odblokowania.</span><span class="sxs-lookup"><span data-stu-id="37fab-2634">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="37fab-2635">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2635">Optional.</span></span> <span data-ttu-id="37fab-2636">Numer ostatniego rekordu lub bajtu do zablokowania lub odblokowania.</span><span class="sxs-lookup"><span data-stu-id="37fab-2636">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="37fab-2637">Kontroluje dostęp przez inne procesy do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2637">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="37fab-2638">Funkcja zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach niż <see langword="Lock" /> i <see langword="Unlock" />. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2638">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="37fab-2639">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2639">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2640">Funkcje i są używane w środowiskach, `Unlock` w których kilka procesów może potrzebować dostępu do tego samego pliku. `Lock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2640">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="37fab-2641">`Lock`i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="37fab-2641">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="37fab-2642">Argumenty do `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="37fab-2642">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="37fab-2643">Jeśli `Record`lub `FromRecord` i`ToRecord` nie są podane, blokada będzie dla całego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2643">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="37fab-2644">Jeśli `Record` określono tylko jeden rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2644">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="37fab-2645">Jeśli plik został otwarty do sekwencyjnego wejścia lub `Lock` wyjścia i `Unlock` ma wpływ na cały plik, niezależnie od zakresu określonego przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2645">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2646">Ten przykład ilustruje użycie `Lock` funkcji i. `Unlock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2646">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="37fab-2647">W tym przykładzie przyjęto założenie, że `People.txt` jest plikiem zawierającym rekordy struktury. `Person`</span><span class="sxs-lookup"><span data-stu-id="37fab-2647">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2648">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2648">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2649">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2649">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2650">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2650">Required.</span></span> <span data-ttu-id="37fab-2651">Liczba całkowita, która zawiera prawidłowy numer pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2651">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="37fab-2652">Zwraca rozmiar (w bajtach) pliku otwartego przy użyciu <see langword="FileOpen" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2652">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="37fab-2653">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="LOF" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="37fab-2654">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="37fab-2655">Rozmiar pliku otwartego przy użyciu <see langword="FileOpen" /> funkcji w bajtach.</span><span class="sxs-lookup"><span data-stu-id="37fab-2655">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="37fab-2656">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="LOF" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2657">Użyj funkcji `FileLen` , aby uzyskać długość pliku, który nie jest otwarty.</span><span class="sxs-lookup"><span data-stu-id="37fab-2657">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2658">Ten przykład używa funkcji `LOF` , aby określić rozmiar otwartego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2658">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="37fab-2659">W tym przykładzie przyjęto założenie, że `TestFile` jest plikiem tekstowym zawierającym przykładowe dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2659">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2660">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-2661">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2661">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-2662">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2662">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="37fab-2663">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2663">Required.</span></span> <span data-ttu-id="37fab-2664">Wyrażenie ciągu, które identyfikuje katalog, który ma zostać utworzony.</span><span class="sxs-lookup"><span data-stu-id="37fab-2664">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="37fab-2665"><paramref name="Path" /> Może to być dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-2665">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="37fab-2666">Jeśli dysk nie zostanie określony, <see langword="MkDir" /> program tworzy nowy katalog na bieżącym dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2666">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="37fab-2667">Tworzy nowy katalog.</span><span class="sxs-lookup"><span data-stu-id="37fab-2667">Creates a new directory.</span></span> <span data-ttu-id="37fab-2668">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="MkDir" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="37fab-2669">Aby uzyskać więcej informacji, zobacz <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2669">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2670">Ta funkcja tworzy nowy katalog.</span><span class="sxs-lookup"><span data-stu-id="37fab-2670">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2671">Ten przykład używa `MkDir` funkcji do utworzenia katalogu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2671">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="37fab-2672">Jeśli stacja dysków nie jest określona, nowy katalog zostanie utworzony na bieżącym dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2672">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-2673"><paramref name="Path" />nie została określona lub jest pusta.</span><span class="sxs-lookup"><span data-stu-id="37fab-2673"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="37fab-2674">Odmowa uprawnień.</span><span class="sxs-lookup"><span data-stu-id="37fab-2674">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2675">Katalog już istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-2675">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="37fab-2676">Instrukcje: Tworzenie katalogu w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2676">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2677">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2677">Required.</span></span> <span data-ttu-id="37fab-2678">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2678">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="37fab-2679">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2679">Optional.</span></span> <span data-ttu-id="37fab-2680">Zero lub więcej wyrażeń rozdzielanych przecinkami do zapisu w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2680">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="37fab-2681">Ustawienia <paramref name="Output" /> argumentu są następujące:</span><span class="sxs-lookup"><span data-stu-id="37fab-2681">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="37fab-2682"><see langword="T:System.IO.IOException" />: Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2682"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="37fab-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="37fab-2684">Zapisuje dane w formacie wyświetlanym w postaci sekwencyjnego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2684">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2685">Funkcje `Print` i`PrintLine` są dostępne w celu zapewnienia zgodności z poprzednimi wersjami i mogą mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2685">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2686">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2686">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2687">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2687">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2688">`Print`nie zawiera kanału informacyjnego wiersza na końcu wiersza; Jednak program `PrintLine` zawiera znak wysuwu wiersza.</span><span class="sxs-lookup"><span data-stu-id="37fab-2688">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="37fab-2689">Dane zapisywane w `Print` programie są zwykle odczytywane z pliku przy `LineInput` użyciu `Input`lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2689">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="37fab-2690">Jeśli pominięto `Output` dla `PrintLine`, pusty wiersz jest drukowany do pliku; w przypadku `Print`, nic nie jest wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="37fab-2690">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="37fab-2691">Wiele wyrażeń oddzielonych przecinkami będzie wyrównanych na granicach tabulacji, ale `TAB` mogą być nastosowane niespójne wyniki.</span><span class="sxs-lookup"><span data-stu-id="37fab-2691">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="37fab-2692">Dla `Boolean` danych `True` , lub`False` jest drukowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2692">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="37fab-2693">Słowa kluczowe `False` i nie są tłumaczone, niezależnie od ustawień regionalnych. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-2693">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="37fab-2694">Dane daty są zapisywane w pliku przy użyciu standardowego formatu daty krótkiej rozpoznawanego przez system.</span><span class="sxs-lookup"><span data-stu-id="37fab-2694">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="37fab-2695">Gdy składnik daty lub godziny jest nieobecny lub równy zero, tylko podana część jest zapisywana do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2695">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="37fab-2696">Żadne elementy nie są zapisywane w pliku `Output` , jeśli dane są puste.</span><span class="sxs-lookup"><span data-stu-id="37fab-2696">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="37fab-2697">Jeśli `Output` jednak lista zawiera `DBNull`dane, `Null` jest zapisywana w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2697">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="37fab-2698">W `Error` przypadku danych dane wyjściowe są wyświetlane `Error errorcode`jako.</span><span class="sxs-lookup"><span data-stu-id="37fab-2698">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="37fab-2699">`Error` Słowo kluczowe nie jest tłumaczone niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2699">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="37fab-2700">Wszystkie dane, które są zapisywane w pliku `Print` przy użyciu, są oparte na międzynarodowej. oznacza to, że dane są poprawnie sformatowane przy użyciu odpowiedniego separatora dziesiętnego.</span><span class="sxs-lookup"><span data-stu-id="37fab-2700">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="37fab-2701">Jeśli użytkownik chce, aby dane wyjściowe były używane przez wiele ustawień regionalnych, `Write` należy użyć.</span><span class="sxs-lookup"><span data-stu-id="37fab-2701">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="37fab-2702">Zapis `Print` w pliku przy użyciu `PrintLine` funkcjilub`Write` wymaga dostępu z wyliczenia.`FileIOPermissionAccess`</span><span class="sxs-lookup"><span data-stu-id="37fab-2702">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2703">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.FileIOPermissionAccess> Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-2703">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2704">W tym przykładzie funkcja `Print` i `PrintLine` służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2704">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2705">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2705">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2706">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2706">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2707">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2707">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2708">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2708">Required.</span></span> <span data-ttu-id="37fab-2709">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2709">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="37fab-2710">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="37fab-2710">Optional.</span></span> <span data-ttu-id="37fab-2711">Zero lub więcej wyrażeń rozdzielanych przecinkami do zapisu w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2711">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="37fab-2712">Ustawienia <paramref name="Output" /> argumentu są następujące:</span><span class="sxs-lookup"><span data-stu-id="37fab-2712">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="37fab-2713"><see langword="T:System.IO.IOException" />: Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2713"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="37fab-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="37fab-2715">Zapisuje dane w formacie wyświetlanym w postaci sekwencyjnego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2715">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2716">Funkcje `Print` i`PrintLine` są dostępne w celu zapewnienia zgodności z poprzednimi wersjami i mogą mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2716">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2717">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2717">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2718">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2718">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2719">`Print`nie zawiera kanału informacyjnego wiersza na końcu wiersza; Jednak program`PrintLine` zawiera znak wysuwu wiersza.</span><span class="sxs-lookup"><span data-stu-id="37fab-2719">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="37fab-2720">Dane zapisywane w `Print` programie są zwykle odczytywane z pliku przy `LineInput` użyciu `Input`lub.</span><span class="sxs-lookup"><span data-stu-id="37fab-2720">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="37fab-2721">Jeśli pominięto `Output` dla `PrintLine`, pusty wiersz jest drukowany do pliku; w przypadku `Print`, nic nie jest wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="37fab-2721">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="37fab-2722">Wiele wyrażeń oddzielonych przecinkami będzie wyrównanych na granicach tabulacji, ale `TAB` mogą być nastosowane niespójne wyniki.</span><span class="sxs-lookup"><span data-stu-id="37fab-2722">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="37fab-2723">Dla `Boolean` danych `True` , lub`False` jest drukowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2723">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="37fab-2724">Słowa kluczowe `False` i nie są tłumaczone, niezależnie od ustawień regionalnych. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-2724">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="37fab-2725">Dane daty są zapisywane w pliku przy użyciu standardowego formatu daty krótkiej rozpoznawanego przez system.</span><span class="sxs-lookup"><span data-stu-id="37fab-2725">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="37fab-2726">Gdy składnik daty lub godziny jest nieobecny lub równy zero, tylko podana część jest zapisywana do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2726">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="37fab-2727">Żadne elementy nie są zapisywane w pliku `Output` , jeśli dane są puste.</span><span class="sxs-lookup"><span data-stu-id="37fab-2727">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="37fab-2728">Jeśli `Output` jednak lista zawiera `DBNull`dane, `Null` jest zapisywana w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2728">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="37fab-2729">W `Error` przypadku danych dane wyjściowe są wyświetlane `Error errorcode`jako.</span><span class="sxs-lookup"><span data-stu-id="37fab-2729">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="37fab-2730">`Error` Słowo kluczowe nie jest tłumaczone niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2730">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="37fab-2731">Wszystkie dane, które są zapisywane w pliku `Print` przy użyciu, są oparte na międzynarodowej. oznacza to, że dane są poprawnie sformatowane przy użyciu odpowiedniego separatora dziesiętnego.</span><span class="sxs-lookup"><span data-stu-id="37fab-2731">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="37fab-2732">Jeśli użytkownik chce, aby dane wyjściowe były używane przez wiele ustawień regionalnych, `Write` należy użyć.</span><span class="sxs-lookup"><span data-stu-id="37fab-2732">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="37fab-2733">Zapis `Print` w pliku przy użyciu `PrintLine` funkcjilub`Write` wymaga dostępu z wyliczenia.`FileIOPermissionAccess`</span><span class="sxs-lookup"><span data-stu-id="37fab-2733">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2734">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.FileIOPermissionAccess> Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-2734">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2735">W tym przykładzie funkcja `Print` i `PrintLine` służy do zapisywania danych do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2735">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2736">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2736">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2737">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2737">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2738">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2738">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="37fab-2739">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2739">Required.</span></span> <span data-ttu-id="37fab-2740">Wyrażenie ciągu określające istniejącą nazwę i lokalizację pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2740">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="37fab-2741"><paramref name="OldPath" />może zawierać katalog i dysk pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2741"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="37fab-2742">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2742">Required.</span></span> <span data-ttu-id="37fab-2743">Wyrażenie ciągu określające nową nazwę i lokalizację pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2743">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="37fab-2744"><paramref name="NewPath" />może zawierać katalog i dysk lokalizacji docelowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2744"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="37fab-2745">Nazwa pliku określona przez <paramref name="NewPath" /> nie może już istnieć.</span><span class="sxs-lookup"><span data-stu-id="37fab-2745">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="37fab-2746">Zmienia nazwę pliku lub katalogu dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2746">Renames a disk file or directory.</span></span> <span data-ttu-id="37fab-2747">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="Rename" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2747">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="37fab-2748">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2748">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2749">`Rename` Funkcja zmienia nazwę pliku i przenosi go do innego katalogu, jeśli jest to wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2749">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="37fab-2750">Funkcja może przenosić plik między dyskami, ale może zmienić nazwę istniejącego katalogu tylko wtedy, gdy `OldPath` oba `NewPath` znajdują się na tym samym dysku. `Rename`</span><span class="sxs-lookup"><span data-stu-id="37fab-2750">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="37fab-2751">`Rename`nie można utworzyć nowego pliku lub katalogu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2751">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="37fab-2752">`Rename` Użycie funkcji w otwartym pliku powoduje wystąpienie błędu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2752">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="37fab-2753">Przed zmianą nazwy należy zamknąć otwarty plik.</span><span class="sxs-lookup"><span data-stu-id="37fab-2753">You must close an open file before renaming it.</span></span> <span data-ttu-id="37fab-2754">`Rename`argumenty nie mogą zawierać wielu znaków (\*) i symboli wieloznakowych (?).</span><span class="sxs-lookup"><span data-stu-id="37fab-2754">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="37fab-2755">`Rename` W przypadku kopiowania pliku z lokalizacji niechronionej do lokalizacji chronionej plik zachowuje mniej ograniczone prawa.</span><span class="sxs-lookup"><span data-stu-id="37fab-2755">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="37fab-2756">Upewnij się, że nie wprowadzono potencjalnego zagrożenia bezpieczeństwa.</span><span class="sxs-lookup"><span data-stu-id="37fab-2756">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2757">Ten przykład używa funkcji `Rename` , aby zmienić nazwę pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2757">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="37fab-2758">Na potrzeby tego przykładu Załóżmy, że katalogi, które zostały określone, już istnieją.</span><span class="sxs-lookup"><span data-stu-id="37fab-2758">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-2759">Ścieżka jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="37fab-2759">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="37fab-2760"><paramref name="OldPath" />plik nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-2760"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2761">Nie można zmienić nazwy na inne urządzenie.</span><span class="sxs-lookup"><span data-stu-id="37fab-2761">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="37fab-2762">Instrukcje: Zmień nazwę pliku w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2762">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37fab-2763">Zamyka wszystkie pliki dysku otwierane za pomocą <see langword="FileOpen" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2763">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="37fab-2764">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="Reset" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2764">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="37fab-2765">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2765">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2766">Funkcja zamyka wszystkie aktywne pliki otwarte `FileOpen` przez funkcję i ma tę samą funkcję jak `FileClose()` bez żadnych parametrów. `Reset`</span><span class="sxs-lookup"><span data-stu-id="37fab-2766">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2767">Ten przykład używa funkcji `Reset` , aby zamknąć wszystkie otwarte pliki i zapisać zawartość wszystkich buforów plików na dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2767">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="37fab-2768">Zwróć uwagę na użycie `Object` zmiennej `FileNumber` jako ciągu i liczby.</span><span class="sxs-lookup"><span data-stu-id="37fab-2768">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="37fab-2769">End — Instrukcja</span><span class="sxs-lookup"><span data-stu-id="37fab-2769">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="37fab-2770">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2770">Required.</span></span> <span data-ttu-id="37fab-2771">Wyrażenie ciągu określające katalog lub folder, który ma zostać usunięty.</span><span class="sxs-lookup"><span data-stu-id="37fab-2771">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="37fab-2772"><paramref name="Path" />może zawierać dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-2772"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="37fab-2773">Jeśli dysk nie zostanie określony, <see langword="RmDir" /> program usuwa katalog na bieżącym dysku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2773">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="37fab-2774">Usuwa istniejący katalog.</span><span class="sxs-lookup"><span data-stu-id="37fab-2774">Removes an existing directory.</span></span> <span data-ttu-id="37fab-2775">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="RmDir" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="37fab-2776">Aby uzyskać więcej informacji, zobacz <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2776">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2777">Jeśli próbujesz użyć `RmDir` w katalogu zawierającym pliki, występuje błąd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2777">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="37fab-2778">Przed podjęciem próby usunięcia katalogu należy użyć funkcji, `Kill` aby usunąć wszystkie pliki.</span><span class="sxs-lookup"><span data-stu-id="37fab-2778">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2779">Ten przykład używa funkcji `RmDir` , aby usunąć istniejący katalog.</span><span class="sxs-lookup"><span data-stu-id="37fab-2779">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-2780"><paramref name="Path" />nie została określona lub jest pusta.</span><span class="sxs-lookup"><span data-stu-id="37fab-2780"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2781">Katalog docelowy zawiera pliki.</span><span class="sxs-lookup"><span data-stu-id="37fab-2781">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="37fab-2782">Katalog nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="37fab-2782">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-2783">Zwraca wartość <see langword="FileOpen" /> <see langword="FileOpen" /> określającą bieżącą pozycję odczytu/zapisu w pliku otwartym za pomocą funkcji lub ustawia pozycję dla następnej operacji odczytu/zapisu w pliku otwartym za pomocą funkcji. <see langword="Long" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2783">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="37fab-2784">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="Seek" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="37fab-2785">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2785">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2786">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2786">Required.</span></span> <span data-ttu-id="37fab-2787"><see langword="Integer" /> Zawiera prawidłowy numer pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2787">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="37fab-2788">Zwraca wartość <see langword="FileOpen" /> <see langword="FileOpen" /> określającą bieżącą pozycję odczytu/zapisu w pliku otwartym za pomocą funkcji lub ustawia pozycję dla następnej operacji odczytu/zapisu w pliku otwartym za pomocą funkcji. <see langword="Long" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2788">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="37fab-2789">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="Seek" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2789">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="37fab-2790">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2790">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="37fab-2791">Określanie bieżącej pozycji odczytu/zapisu w pliku otwartym za <see langword="FileOpen" /> pomocą funkcji lub ustawia pozycję dla następnej operacji odczytu/zapisu w <see langword="FileOpen" /> pliku otwartym za pomocą funkcji. <see langword="Long" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2791">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2792">`Seek`Zwraca wartość z przedziału od 1 do 2 147 483 647 (odpowiednik 2 ^ 31-1) włącznie.</span><span class="sxs-lookup"><span data-stu-id="37fab-2792">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="37fab-2793">Poniżej opisano wartości zwracane dla każdego trybu dostępu do pliku:</span><span class="sxs-lookup"><span data-stu-id="37fab-2793">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="37fab-2794">Tryb</span><span class="sxs-lookup"><span data-stu-id="37fab-2794">Mode</span></span>|<span data-ttu-id="37fab-2795">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="37fab-2795">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="37fab-2796">Numer następnego rekordu do odczytu lub zapisu</span><span class="sxs-lookup"><span data-stu-id="37fab-2796">Number of the next record read or written</span></span>|  
|<span data-ttu-id="37fab-2797">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="37fab-2797">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="37fab-2798">Położenie w bajtach, w którym występuje następna operacja.</span><span class="sxs-lookup"><span data-stu-id="37fab-2798">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="37fab-2799">Pierwszy bajt w pliku znajduje się na pozycji 1, drugi bajt znajduje się na pozycji 2 itd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2799">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2800">Ten przykład używa funkcji `Seek` , aby zwrócić bieżącą pozycję pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2800">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="37fab-2801">Przykład zakłada `TestFile` się, że jest plikiem zawierającym rekordy struktury `Record`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2801">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="37fab-2802">W przypadku plików otwartych `Random` w `Seek` trybie funkcja zwraca numer następnego rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2802">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="37fab-2803">W przypadku plików otwartych w trybie innym `Random` niż tryb `Seek` , zwraca pozycję bajtu, przy której występuje następna operacja.</span><span class="sxs-lookup"><span data-stu-id="37fab-2803">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="37fab-2804">Załóżmy `TestFile` , że plik zawiera kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2804">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="37fab-2805">Ten przykład używa funkcji `Seek` , aby ustawić położenie dla następnego odczytu lub zapisu w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2805">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="37fab-2806">W przypadku plików otwartych w trybie innym `Random` niż tryb `Seek` , ustawia pozycję bajtu, w którym występuje następna operacja.</span><span class="sxs-lookup"><span data-stu-id="37fab-2806">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="37fab-2807">Załóżmy `TestFile` , że plik zawiera kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2807">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2808">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2808">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-2809">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2809">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-2810">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2810">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2811">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2811">Required.</span></span> <span data-ttu-id="37fab-2812"><see langword="Integer" /> Zawiera prawidłowy numer pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2812">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="37fab-2813">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2813">Required.</span></span> <span data-ttu-id="37fab-2814">Liczba z zakresu od 1 do 2147483647 włącznie, która wskazuje, gdzie powinna wystąpić następna operacja odczytu/zapisu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2814">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="37fab-2815">Zwraca wartość <see langword="FileOpen" /> <see langword="FileOpen" /> określającą bieżącą pozycję odczytu/zapisu w pliku otwartym za pomocą funkcji lub ustawia pozycję dla następnej operacji odczytu/zapisu w pliku otwartym za pomocą funkcji. <see langword="Long" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2815">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="37fab-2816">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="Seek" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2816">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="37fab-2817">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2817">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2818">`Seek`Zwraca wartość z przedziału od 1 do 2 147 483 647 (odpowiednik 2 ^ 31-1) włącznie.</span><span class="sxs-lookup"><span data-stu-id="37fab-2818">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="37fab-2819">Poniżej opisano wartości zwracane dla każdego trybu dostępu do pliku:</span><span class="sxs-lookup"><span data-stu-id="37fab-2819">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="37fab-2820">Tryb</span><span class="sxs-lookup"><span data-stu-id="37fab-2820">Mode</span></span>|<span data-ttu-id="37fab-2821">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="37fab-2821">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="37fab-2822">Numer następnego rekordu do odczytu lub zapisu</span><span class="sxs-lookup"><span data-stu-id="37fab-2822">Number of the next record read or written</span></span>|  
|<span data-ttu-id="37fab-2823">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="37fab-2823">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="37fab-2824">Położenie w bajtach, w którym występuje następna operacja.</span><span class="sxs-lookup"><span data-stu-id="37fab-2824">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="37fab-2825">Pierwszy bajt w pliku znajduje się na pozycji 1, drugi bajt znajduje się na pozycji 2 itd.</span><span class="sxs-lookup"><span data-stu-id="37fab-2825">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2826">Ten przykład używa funkcji `Seek` , aby zwrócić bieżącą pozycję pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2826">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="37fab-2827">Przykład zakłada `TestFile` się, że jest plikiem zawierającym rekordy struktury `Record`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2827">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="37fab-2828">W przypadku plików otwartych `Random` w `Seek` trybie funkcja zwraca numer następnego rekordu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2828">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="37fab-2829">W przypadku plików otwartych w trybie innym `Random` niż tryb `Seek` , zwraca pozycję bajtu, przy której występuje następna operacja.</span><span class="sxs-lookup"><span data-stu-id="37fab-2829">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="37fab-2830">Załóżmy `TestFile` , że plik zawiera kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2830">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="37fab-2831">Ten przykład używa funkcji `Seek` , aby ustawić położenie dla następnego odczytu lub zapisu w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2831">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="37fab-2832">W przypadku plików otwartych w trybie innym `Random` niż tryb `Seek` , ustawia pozycję bajtu, w którym występuje następna operacja.</span><span class="sxs-lookup"><span data-stu-id="37fab-2832">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="37fab-2833">Załóżmy `TestFile` , że plik zawiera kilka wierszy tekstu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2833">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2834">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2834">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="37fab-2835">Odczyt z plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2835">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="37fab-2836">Zapisywanie w plikach w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2836">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="37fab-2837">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2837">Required.</span></span> <span data-ttu-id="37fab-2838">Wyrażenie ciągu określające nazwę pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2838">A string expression that specifies a file name.</span></span> <span data-ttu-id="37fab-2839"><paramref name="PathName" />może zawierać katalog lub folder i dysk.</span><span class="sxs-lookup"><span data-stu-id="37fab-2839"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="37fab-2840">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2840">Required.</span></span> <span data-ttu-id="37fab-2841">Wyrażenie stałe lub liczbowe, którego suma określa atrybuty pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2841">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="37fab-2842">Ustawia informacje o atrybucie dla pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2842">Sets attribute information for a file.</span></span> <span data-ttu-id="37fab-2843">Funkcja zapewnia lepszą wydajność i wydajność w <see langword="SetAttr" />operacjach we/wy na plikach. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2843">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="37fab-2844">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2844">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2845">Błąd czasu wykonywania występuje, gdy spróbujesz ustawić atrybuty otwartego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2845">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="37fab-2846">Wartości `Attributes` wyliczenia argumentów są następujące:</span><span class="sxs-lookup"><span data-stu-id="37fab-2846">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="37fab-2847">Wartość</span><span class="sxs-lookup"><span data-stu-id="37fab-2847">Value</span></span>|<span data-ttu-id="37fab-2848">Stała</span><span class="sxs-lookup"><span data-stu-id="37fab-2848">Constant</span></span>|<span data-ttu-id="37fab-2849">Opis</span><span class="sxs-lookup"><span data-stu-id="37fab-2849">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="37fab-2850">Normalne (domyślne).</span><span class="sxs-lookup"><span data-stu-id="37fab-2850">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="37fab-2851">Tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2851">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="37fab-2852">Ukryte.</span><span class="sxs-lookup"><span data-stu-id="37fab-2852">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="37fab-2853">Plik systemowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2853">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="37fab-2854">Etykieta woluminu</span><span class="sxs-lookup"><span data-stu-id="37fab-2854">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="37fab-2855">Katalog lub folder.</span><span class="sxs-lookup"><span data-stu-id="37fab-2855">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="37fab-2856">Plik został zmieniony od czasu wykonania ostatniej kopii zapasowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2856">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="37fab-2857">Plik ma inną nazwę.</span><span class="sxs-lookup"><span data-stu-id="37fab-2857">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2858">Te wyliczenia są określane przez język Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="37fab-2858">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="37fab-2859">Nazwy mogą być używane w dowolnym miejscu w kodzie, a nie rzeczywistymi wartościami.</span><span class="sxs-lookup"><span data-stu-id="37fab-2859">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2860">W tym przykładzie `SetAttr` funkcja służy do ustawiania atrybutów pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2860">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37fab-2861"><paramref name="Attribute" />Typ jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2861"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="37fab-2862">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2862">Required.</span></span> <span data-ttu-id="37fab-2863">Liczba spacji do wstawienia przed wyświetleniem lub wydrukowaniem następnego wyrażenia na liście.</span><span class="sxs-lookup"><span data-stu-id="37fab-2863">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="37fab-2864">Używany z <see langword="Print" /> funkcją lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2864">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="37fab-2865">Używany z <see langword="Print" /> funkcją lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2865">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2866">Jeśli `Count` jest mniejsza niż szerokość linii wyjściowej, następna pozycja drukowania następuje natychmiast po liczbie wydrukowanych miejsc.</span><span class="sxs-lookup"><span data-stu-id="37fab-2866">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="37fab-2867">Jeśli`Count` jest większa niż szerokość linii wyjściowej, `SPC` oblicza następną pozycję drukowania przy użyciu formuły:</span><span class="sxs-lookup"><span data-stu-id="37fab-2867">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="37fab-2868">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="37fab-2868">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="37fab-2869">Jeśli na przykład bieżąca pozycja drukowania to 24, Szerokość linii wyjściowej to 80, a `SPC(90)`następnie zostanie wybrana następna wartość wydruku zostanie rozpoczęta na pozycji 34 (bieżąca pozycja drukowania + reszta z 90/80).</span><span class="sxs-lookup"><span data-stu-id="37fab-2869">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="37fab-2870">Jeśli różnica między bieżącą pozycją drukowania a szerokością linii wyjściowej jest mniejsza niż `Count` (lub `Count` `Mod` *Szerokość*), `SPC` funkcja pomija początek następnego wiersza i generuje spacje równe `Count`-(*Szerokość* - *currentprintposition*).</span><span class="sxs-lookup"><span data-stu-id="37fab-2870">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2871">Upewnij się, że kolumny tabelaryczne są wystarczająco szerokie, aby umożliwić korzystanie z szerokich liter.</span><span class="sxs-lookup"><span data-stu-id="37fab-2871">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2872">W tym przykładzie `SPC` funkcja służy do pozycjonowania danych wyjściowych w pliku i w oknie **danych wyjściowych** .</span><span class="sxs-lookup"><span data-stu-id="37fab-2872">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="37fab-2873">Mod — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2873">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-2874">Używany z <see langword="Print" /> funkcjami lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37fab-2875">Używany z <see langword="Print" /> funkcjami lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2875">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="37fab-2876">Używany z <see langword="Print" /> funkcjami lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2877">Jeśli bieżąca pozycja drukowania w bieżącym wierszu jest większa niż `Column`, program `TAB` pomija wartość kolumny równą `Column` w następnej linii wyjściowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2877">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="37fab-2878">Jeśli `Column` jest mniejsza niż 1, `TAB` przenosi pozycję drukowania do kolumny 1.</span><span class="sxs-lookup"><span data-stu-id="37fab-2878">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="37fab-2879">Jeśli `Column` jest większa niż szerokość linii wyjściowej, `TAB` oblicza następną pozycję drukowania przy użyciu formuły:</span><span class="sxs-lookup"><span data-stu-id="37fab-2879">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="37fab-2880">Szerokość w kolumnie</span><span class="sxs-lookup"><span data-stu-id="37fab-2880">Column Mod width</span></span>  
  
 <span data-ttu-id="37fab-2881">Na przykład jeśli *Szerokość* to 80 i określisz `TAB(90)`, następne drukowanie rozpocznie się w kolumnie 10 (reszta z 90/80).</span><span class="sxs-lookup"><span data-stu-id="37fab-2881">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="37fab-2882">Jeśli `Column` jest mniejsza niż bieżąca pozycja drukowania, drukowanie rozpocznie się w następnym wierszu na obliczonej pozycji wydruku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2882">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="37fab-2883">Jeśli obliczona pozycja drukowania jest większa niż bieżąca pozycja drukowania, drukowanie rozpocznie się w obliczonej pozycji drukowania w tym samym wierszu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2883">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="37fab-2884">Pozycja drukowania z lewej strony w wierszu danych wyjściowych jest zawsze 1.</span><span class="sxs-lookup"><span data-stu-id="37fab-2884">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="37fab-2885">W przypadku użycia `Print` funkcji lub `PrintLine` do drukowania do plików, pozycja drukowania z prawej na początku jest bieżącą szerokością pliku wyjściowego, który można ustawić przy użyciu `FileWidth` funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2885">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="37fab-2886">Funkcja może być również używana `WriteLine` z funkcją. `TAB`</span><span class="sxs-lookup"><span data-stu-id="37fab-2886">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="37fab-2887">Nie można jej używać z <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> ani <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2887">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2888">Upewnij się, że kolumny tabelaryczne są wystarczająco szerokie, aby zawierały szerokie litery.</span><span class="sxs-lookup"><span data-stu-id="37fab-2888">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2889">W tym przykładzie `TAB` funkcja służy do pozycjonowania danych wyjściowych w pliku i w oknie **danych wyjściowych** .</span><span class="sxs-lookup"><span data-stu-id="37fab-2889">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="37fab-2890">Mod — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2890">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="37fab-2891">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2891">Optional.</span></span> <span data-ttu-id="37fab-2892">Numer kolumny jest przenoszony do przed wyświetleniem lub wydrukowaniem następnego wyrażenia na liście.</span><span class="sxs-lookup"><span data-stu-id="37fab-2892">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="37fab-2893">W przypadku pominięcia <see langword="TAB" /> przenosi punkt wstawiania do początku następnej strefy drukowania.</span><span class="sxs-lookup"><span data-stu-id="37fab-2893">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="37fab-2894">Używany z <see langword="Print" /> funkcjami lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2894">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="37fab-2895">Używany z <see langword="Print" /> funkcjami lub <see langword="PrintLine" /> do pozycjonowania danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2895">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2896">Jeśli bieżąca pozycja drukowania w bieżącym wierszu jest większa niż `Column`, `TAB` pomija wartość kolumny równą `Column` wartości w następnej linii wyjściowej.</span><span class="sxs-lookup"><span data-stu-id="37fab-2896">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="37fab-2897">Jeśli `Column` jest mniejsza niż 1, `TAB` przenosi pozycję drukowania do kolumny 1.</span><span class="sxs-lookup"><span data-stu-id="37fab-2897">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="37fab-2898">Jeśli `Column` jest większa niż szerokość linii wyjściowej, `TAB` oblicza następną pozycję drukowania przy użyciu formuły:</span><span class="sxs-lookup"><span data-stu-id="37fab-2898">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="37fab-2899">Szerokość w kolumnie</span><span class="sxs-lookup"><span data-stu-id="37fab-2899">Column Mod width</span></span>  
  
 <span data-ttu-id="37fab-2900">Na przykład jeśli *Szerokość* to 80 i określisz `TAB(90)`, następne drukowanie rozpocznie się w kolumnie 10 (reszta z 90/80).</span><span class="sxs-lookup"><span data-stu-id="37fab-2900">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="37fab-2901">Jeśli `Column` jest mniejsza niż bieżąca pozycja drukowania, drukowanie rozpocznie się w następnym wierszu na obliczonej pozycji wydruku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2901">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="37fab-2902">Jeśli obliczona pozycja drukowania jest większa niż bieżąca pozycja drukowania, drukowanie rozpocznie się w obliczonej pozycji drukowania w tym samym wierszu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2902">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="37fab-2903">Pozycja drukowania z lewej strony w wierszu danych wyjściowych jest zawsze 1.</span><span class="sxs-lookup"><span data-stu-id="37fab-2903">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="37fab-2904">W przypadku użycia `Print` funkcji lub `PrintLine` do drukowania do plików, pozycja drukowania z prawej na początku jest bieżącą szerokością pliku wyjściowego, który można ustawić przy użyciu `FileWidth` funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2904">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="37fab-2905">Funkcja może być również używana `WriteLine` z funkcją. `TAB`</span><span class="sxs-lookup"><span data-stu-id="37fab-2905">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="37fab-2906">Nie można jej używać z <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> ani <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="37fab-2906">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37fab-2907">Upewnij się, że kolumny tabelaryczne są wystarczająco szerokie, aby zawierały szerokie litery.</span><span class="sxs-lookup"><span data-stu-id="37fab-2907">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2908">W tym przykładzie `TAB` funkcja służy do pozycjonowania danych wyjściowych w pliku i w oknie **danych wyjściowych** .</span><span class="sxs-lookup"><span data-stu-id="37fab-2908">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="37fab-2909">Mod — Operator (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2909">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37fab-2910">Kontroluje dostęp przez inne procesy do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2910">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="37fab-2911">Funkcja zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach niż <see langword="Lock" /> i <see langword="Unlock" />. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2911">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="37fab-2912">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2912">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2913">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2913">Required.</span></span> <span data-ttu-id="37fab-2914">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2914">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="37fab-2915">Kontroluje dostęp przez inne procesy do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2915">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="37fab-2916">Funkcja zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach niż <see langword="Lock" /> i <see langword="Unlock" />. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2916">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="37fab-2917">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2917">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2918">Funkcje i są używane w środowiskach, `Unlock` w których kilka procesów może potrzebować dostępu do tego samego pliku. `Lock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2918">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="37fab-2919">`Lock`i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="37fab-2919">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="37fab-2920">Argumenty do `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="37fab-2920">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="37fab-2921">Jeśli `Record`lub `FromRecord` i`ToRecord` nie są podane, blokada będzie dla całego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2921">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="37fab-2922">Jeśli `Record` określono tylko jeden rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2922">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="37fab-2923">Jeśli plik został otwarty do sekwencyjnego wejścia lub `Lock` wyjścia i `Unlock` ma wpływ na cały plik, niezależnie od zakresu określonego przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2923">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2924">Ten przykład ilustruje użycie `Lock` funkcji i. `Unlock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2924">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="37fab-2925">W tym przykładzie przyjęto założenie, że `People.txt` jest plikiem zawierającym rekordy struktury. `Person`</span><span class="sxs-lookup"><span data-stu-id="37fab-2925">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2926">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2926">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2927">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2927">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2928">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2928">Required.</span></span> <span data-ttu-id="37fab-2929">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2929">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="37fab-2930">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2930">Optional.</span></span> <span data-ttu-id="37fab-2931">Numer jedynego rekordu lub bajtu do zablokowania lub odblokowania</span><span class="sxs-lookup"><span data-stu-id="37fab-2931">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="37fab-2932">Kontroluje dostęp przez inne procesy do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2932">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="37fab-2933">Funkcja zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach niż <see langword="Lock" /> i <see langword="Unlock" />. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2933">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="37fab-2934">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2934">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2935">Funkcje i są używane w środowiskach, `Unlock` w których kilka procesów może potrzebować dostępu do tego samego pliku. `Lock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2935">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="37fab-2936">`Lock`i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="37fab-2936">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="37fab-2937">Argumenty do `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="37fab-2937">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="37fab-2938">Jeśli `Record`lub `FromRecord` i`ToRecord` nie są podane, blokada będzie dla całego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2938">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="37fab-2939">Jeśli `Record` określono tylko jeden rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2939">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="37fab-2940">Jeśli plik został otwarty do sekwencyjnego wejścia lub `Lock` wyjścia i `Unlock` ma wpływ na cały plik, niezależnie od zakresu określonego przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2940">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2941">Ten przykład ilustruje użycie `Lock` funkcji i. `Unlock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2941">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="37fab-2942">W tym przykładzie przyjęto założenie, że `People.txt` jest plikiem zawierającym rekordy struktury. `Person`</span><span class="sxs-lookup"><span data-stu-id="37fab-2942">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2943">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2943">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2944">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2944">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2945">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2945">Required.</span></span> <span data-ttu-id="37fab-2946">Dowolna prawidłowa liczba plików.</span><span class="sxs-lookup"><span data-stu-id="37fab-2946">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="37fab-2947">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2947">Optional.</span></span> <span data-ttu-id="37fab-2948">Numer pierwszego rekordu lub bajtu do zablokowania lub odblokowania.</span><span class="sxs-lookup"><span data-stu-id="37fab-2948">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="37fab-2949">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2949">Optional.</span></span> <span data-ttu-id="37fab-2950">Numer ostatniego rekordu lub bajtu do zablokowania lub odblokowania.</span><span class="sxs-lookup"><span data-stu-id="37fab-2950">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="37fab-2951">Kontroluje dostęp przez inne procesy do całości lub części pliku otwartego przy użyciu <see langword="Open" /> funkcji.</span><span class="sxs-lookup"><span data-stu-id="37fab-2951">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="37fab-2952">Funkcja zapewnia lepszą wydajność i wydajność w operacjach we/wy na plikach niż <see langword="Lock" /> i <see langword="Unlock" />. <see langword="My" /></span><span class="sxs-lookup"><span data-stu-id="37fab-2952">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="37fab-2953">Aby uzyskać więcej informacji, zobacz <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="37fab-2953">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2954">Funkcje i są używane w środowiskach, `Unlock` w których kilka procesów może potrzebować dostępu do tego samego pliku. `Lock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2954">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="37fab-2955">`Lock`i `Unlock` funkcje są zawsze używane w parach.</span><span class="sxs-lookup"><span data-stu-id="37fab-2955">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="37fab-2956">Argumenty do `Lock` i `Unlock` muszą być identyczne.</span><span class="sxs-lookup"><span data-stu-id="37fab-2956">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="37fab-2957">Jeśli `Record`lub `FromRecord` i`ToRecord` nie są podane, blokada będzie dla całego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2957">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="37fab-2958">Jeśli `Record` określono tylko jeden rekord zostanie zablokowany/odblokowany.</span><span class="sxs-lookup"><span data-stu-id="37fab-2958">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="37fab-2959">Jeśli plik został otwarty do sekwencyjnego wejścia lub `Lock` wyjścia i `Unlock` ma wpływ na cały plik, niezależnie od zakresu określonego przez `FromRecord` i`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2959">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2960">Ten przykład ilustruje użycie `Lock` funkcji i. `Unlock`</span><span class="sxs-lookup"><span data-stu-id="37fab-2960">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="37fab-2961">W tym przykładzie przyjęto założenie, że `People.txt` jest plikiem zawierającym rekordy struktury. `Person`</span><span class="sxs-lookup"><span data-stu-id="37fab-2961">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2962">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2962">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2963">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2963">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2964">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2964">Required.</span></span> <span data-ttu-id="37fab-2965"><see langword="Integer" /> Wyrażenie zawierające dowolny prawidłowy numer pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2965">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="37fab-2966">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-2966">Optional.</span></span> <span data-ttu-id="37fab-2967">Co najmniej jedno wyrażenie rozdzielane przecinkami do zapisu w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2967">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="37fab-2968">Zapisuje dane do sekwencyjnego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2968">Writes data to a sequential file.</span></span> <span data-ttu-id="37fab-2969">Dane zapisywane w <see langword="Write" /> programie są zwykle odczytywane z pliku przy <see langword="Input" />użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-2969">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-2970">Funkcje `Write` i`WriteLine` są dostępne w celu zapewnienia zgodności z poprzednimi wersjami i mogą mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2970">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-2971">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-2971">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-2972">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-2972">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-2973">W przypadku pominięcia `Output`do pliku zostanie wydrukowany pusty wiersz.</span><span class="sxs-lookup"><span data-stu-id="37fab-2973">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="37fab-2974">Wiele wyrażeń można rozdzielić przecinkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-2974">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="37fab-2975">`Print` W`Write` przeciwieństwie do funkcji, funkcja wstawia przecinki między elementami i znakami cudzysłowu otaczającymi ciągi w miarę ich zapisywania w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2975">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="37fab-2976">Nie trzeba umieszczać jawnych ograniczników na liście.</span><span class="sxs-lookup"><span data-stu-id="37fab-2976">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="37fab-2977">Gdy `Write` jest używany do zapisywania danych do pliku, obsługiwane są tylko formaty `Boolean`liczbowe,, daty, wartości `Error` null i dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2977">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="37fab-2978">Następujące uniwersalne założenia są stosowane, aby dane były zawsze odczytywane i prawidłowo interpretowane przy `Input`użyciu, niezależnie od ustawień regionalnych:</span><span class="sxs-lookup"><span data-stu-id="37fab-2978">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="37fab-2979">Dane liczbowe są zawsze zapisywane przy użyciu kropki jako separatora dziesiętnego.</span><span class="sxs-lookup"><span data-stu-id="37fab-2979">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="37fab-2980">Dla `Boolean` danych `#TRUE#` , lub`#FALSE#` jest drukowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2980">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="37fab-2981">Słowa kluczowe `False` i nie są tłumaczone, niezależnie od ustawień regionalnych. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-2981">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="37fab-2982">Dane daty są zapisywane w pliku przy użyciu uniwersalnego formatu daty.</span><span class="sxs-lookup"><span data-stu-id="37fab-2982">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="37fab-2983">Gdy składnik daty lub godziny jest nieobecny lub równy zero, tylko podana część jest zapisywana do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2983">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="37fab-2984">Żadne elementy nie są zapisywane w pliku `Output` , jeśli dane są puste.</span><span class="sxs-lookup"><span data-stu-id="37fab-2984">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="37fab-2985">Jednak w przypadku danych `#NULL#` o wartości null jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-2985">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="37fab-2986">W `Error` przypadku danych dane wyjściowe są wyświetlane `#ERROR errorcode#`jako.</span><span class="sxs-lookup"><span data-stu-id="37fab-2986">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="37fab-2987">`Error` Słowo kluczowe nie jest tłumaczone, niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="37fab-2987">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="37fab-2988">`WriteLine`Wstawia znak nowego wiersza (oznacza to, powrotu karetki lub wysuwu wiersza lub `Chr(13) + Chr(10)`), po zapisaniu znaku końcowego w `Output` pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2988">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="37fab-2989">Znaki cudzysłowu można osadzić w ciągu przy użyciu podwójnych cudzysłowów lub "".</span><span class="sxs-lookup"><span data-stu-id="37fab-2989">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="37fab-2990">Na przykład</span><span class="sxs-lookup"><span data-stu-id="37fab-2990">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="37fab-2991">Zwraca ciąg o wartości `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="37fab-2991">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="37fab-2992">Zapis `Write` w pliku przy użyciu `WriteLine` funkcjilub`Append` wymaga dostępu z wyliczenia.`FileIOPermissionAccess`</span><span class="sxs-lookup"><span data-stu-id="37fab-2992">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-2993">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.FileIOPermissionAccess> Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-2993">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-2994">W tym przykładzie `Write` funkcja służy do zapisywania nieprzetworzonych danych do sekwencyjnego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-2994">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="37fab-2995">Tryb pliku jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="37fab-2995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-2996">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2996">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-2997">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-2997">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-2998">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-2998">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="37fab-2999">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="37fab-2999">Required.</span></span> <span data-ttu-id="37fab-3000"><see langword="Integer" /> Wyrażenie zawierające dowolny prawidłowy numer pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-3000">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="37fab-3001">Opcjonalny.</span><span class="sxs-lookup"><span data-stu-id="37fab-3001">Optional.</span></span> <span data-ttu-id="37fab-3002">Co najmniej jedno wyrażenie rozdzielane przecinkami do zapisu w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-3002">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="37fab-3003">Zapisuje dane do sekwencyjnego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-3003">Writes data to a sequential file.</span></span> <span data-ttu-id="37fab-3004">Dane zapisywane w <see langword="Write" /> programie są zwykle odczytywane z pliku przy <see langword="Input" />użyciu.</span><span class="sxs-lookup"><span data-stu-id="37fab-3004">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37fab-3005">Funkcje `Write` i`WriteLine` są dostępne w celu zapewnienia zgodności z poprzednimi wersjami i mogą mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-3005">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="37fab-3006">W przypadku aplikacji, które nie są `My.Computer.FileSystem` starsze, obiekt zapewnia lepszą wydajność.</span><span class="sxs-lookup"><span data-stu-id="37fab-3006">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="37fab-3007">Aby uzyskać więcej informacji, zobacz [dostęp do plików przy użyciu Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="37fab-3007">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="37fab-3008">W przypadku pominięcia `Output`do pliku zostanie wydrukowany pusty wiersz.</span><span class="sxs-lookup"><span data-stu-id="37fab-3008">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="37fab-3009">Wiele wyrażeń można rozdzielić przecinkami.</span><span class="sxs-lookup"><span data-stu-id="37fab-3009">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="37fab-3010">`Print` W`Write` przeciwieństwie do funkcji, funkcja wstawia przecinki między elementami i znakami cudzysłowu otaczającymi ciągi w miarę ich zapisywania w pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-3010">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="37fab-3011">Nie trzeba umieszczać jawnych ograniczników na liście.</span><span class="sxs-lookup"><span data-stu-id="37fab-3011">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="37fab-3012">Gdy `Write` jest używany do zapisywania danych do pliku, obsługiwane są tylko formaty `Boolean`liczbowe,, daty, wartości `Error` null i dane.</span><span class="sxs-lookup"><span data-stu-id="37fab-3012">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="37fab-3013">Następujące uniwersalne założenia są stosowane, aby dane były zawsze odczytywane i prawidłowo interpretowane przy `Input`użyciu, niezależnie od ustawień regionalnych:</span><span class="sxs-lookup"><span data-stu-id="37fab-3013">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="37fab-3014">Dane liczbowe są zawsze zapisywane przy użyciu kropki jako separatora dziesiętnego.</span><span class="sxs-lookup"><span data-stu-id="37fab-3014">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="37fab-3015">Dla `Boolean` danych `#TRUE#` , lub`#FALSE#` jest drukowana.</span><span class="sxs-lookup"><span data-stu-id="37fab-3015">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="37fab-3016">Słowa kluczowe `False` i nie są tłumaczone, niezależnie od ustawień regionalnych. `True`</span><span class="sxs-lookup"><span data-stu-id="37fab-3016">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="37fab-3017">Dane daty są zapisywane w pliku przy użyciu uniwersalnego formatu daty.</span><span class="sxs-lookup"><span data-stu-id="37fab-3017">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="37fab-3018">Gdy składnik daty lub godziny jest nieobecny lub równy zero, tylko podana część jest zapisywana do pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-3018">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="37fab-3019">Żadne elementy nie są zapisywane w pliku `Output` , jeśli dane są puste.</span><span class="sxs-lookup"><span data-stu-id="37fab-3019">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="37fab-3020">Jednak w przypadku danych `#NULL#` o wartości null jest zapisywana.</span><span class="sxs-lookup"><span data-stu-id="37fab-3020">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="37fab-3021">W `Error` przypadku danych dane wyjściowe są wyświetlane `#ERROR errorcode#`jako.</span><span class="sxs-lookup"><span data-stu-id="37fab-3021">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="37fab-3022">`Error` Słowo kluczowe nie jest tłumaczone, niezależnie od ustawień regionalnych.</span><span class="sxs-lookup"><span data-stu-id="37fab-3022">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="37fab-3023">`WriteLine`Wstawia znak nowego wiersza (oznacza to, powrotu karetki lub wysuwu wiersza lub `Chr(13) + Chr(10)`), po zapisaniu znaku końcowego w `Output` pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-3023">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="37fab-3024">Znaki cudzysłowu można osadzić w ciągu przy użyciu podwójnych cudzysłowów lub "".</span><span class="sxs-lookup"><span data-stu-id="37fab-3024">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="37fab-3025">Na przykład</span><span class="sxs-lookup"><span data-stu-id="37fab-3025">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="37fab-3026">Zwraca ciąg o wartości `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="37fab-3026">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="37fab-3027">Zapis `Write` w pliku przy użyciu `WriteLine` funkcjilub`Append` wymaga dostępu z wyliczenia.`FileIOPermissionAccess`</span><span class="sxs-lookup"><span data-stu-id="37fab-3027">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="37fab-3028">Aby uzyskać więcej informacji, <xref:System.Security.Permissions.FileIOPermissionAccess> Zobacz.</span><span class="sxs-lookup"><span data-stu-id="37fab-3028">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37fab-3029">W tym przykładzie `Write` funkcja służy do zapisywania nieprzetworzonych danych do sekwencyjnego pliku.</span><span class="sxs-lookup"><span data-stu-id="37fab-3029">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="37fab-3030">Dostęp do plików za pomocą Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-3030">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="37fab-3031">Instrukcje: Zapisz tekst do plików w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="37fab-3031">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="37fab-3032">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="37fab-3032">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
