<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fcc4e16366d78f3a558eeefe9933dc0ea07eb08b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317727" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Moduł zawiera właściwości i procedury używane do identyfikowania i obsługi błędów czasu wykonywania <see langword="Err" /> przy użyciu obiektu. <see langword="ErrObject" /></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject` Moduł`Err` obsługuje obiekt. Aby uzyskać więcej informacji, zobacz <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 W tym przykładzie zastosowano właściwości `Err` obiektu w konstruowaniu okna dialogowego komunikatu o błędzie. Zwróć uwagę na to, co się `Clear` dzieje, gdy najpierw używasz metody: Po wygenerowaniu Visual Basic błąd przy użyciu `Raise` metody Visual Basic wartości domyślne stają się właściwościami `Err` obiektu.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error — Instrukcja (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally — Instrukcja (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści wszystkie ustawienia <see langword="Err" /> właściwości obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `Clear` , aby jawnie `Err` wyczyścić obiekt po obsłudze błędu, na przykład w przypadku korzystania z odroczonej obsługi błędów z `On Error Resume Next`. `Clear` Metoda jest wywoływana automatycznie za każdym razem, gdy wykonywana jest jakakolwiek z następujących instrukcji:  
  
-   Dowolny typ `Resume` instrukcji  
  
-   `Exit Sub`, `Exit Function`lub`Exit Property`  
  
-   Dowolna `On Error` instrukcja  
  
-   Dowolna `Try...Catch...Finally` instrukcja  
  
    > [!NOTE]
    >  Konstrukcja może być preferowana w `On Error GoTo` przypadku obsługi błędów generowanych podczas uzyskiwania dostępu do innych obiektów. `On Error Resume Next` `Err` Po każdej interakcji z obiektem jest usuwana niejednoznaczność informacji o obiekcie, do którego miał dostęp kod: Możesz mieć pewność, który obiekt został umieszczony w `Err.Number`kodzie błędu, a także który obiekt pierwotnie wygenerował błąd (obiekt określony w `Err.Source`).  
  
   
  
## Examples  
 W tym przykładzie używa `Err` `Clear` metody obiektu do resetowania właściwości `Err` liczbowych obiektu do zera i jego właściwości ciągu do ciągów o zerowej długości. Bez wywołania do `Clear`, drugie wywołanie w celu `MsgBox` wyświetlenia tego samego komunikatu o błędzie.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="String" /> wyrażenie zawierające opisowy ciąg skojarzony z błędem. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia <see langword="String" /> wyrażenie zawierające opisowy ciąg skojarzony z błędem. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie `Description` właściwości zawiera krótki opis błędu. Użyj tej właściwości, aby ostrzec użytkownika o błędzie, którego nie można lub nie chcesz obsłużyć. Podczas generowania błędu zdefiniowanego przez użytkownika należy przypisać do `Description` właściwości Krótki opis błędu. Jeśli właściwość nie jest wypełniona, a wartość <xref:Microsoft.VisualBasic.ErrObject.Number%2A> właściwości odnosi się Visual Basic błędu czasu wykonywania, a następnie ciąg zwracany przez <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> funkcję jest ustawiany we `Description` właściwości po wygenerowaniu błędu. `Description`  
  
   
  
## Examples  
 Ten przykład przypisuje zdefiniowany przez użytkownika komunikat do `Description` właściwości `Err` obiektu.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę całkowitą wskazującą numer wiersza ostatniej wykonanej instrukcji.</summary>
        <value>Numer wiersza ostatniej wykonanej instrukcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli Visual Basic napotka numery wierszy, zwraca 0.  
  
   
  
## Examples  
 Ten przykład używa `Erl` właściwości, aby wskazać numer wiersza.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wyjątek reprezentujący błąd, który wystąpił.</summary>
        <returns>Wyjątek reprezentujący błąd, który wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcja jest dostępna tylko `Err` z klasy Object. `GetException` Działa z `Exception` właściwością `Err` obiektu, aby wyświetlić błąd, który wystąpił.  
  
   
  
## Examples  
 Poniższy kod wyświetla komunikat przypisany do wyjątku w `Err` obiekcie:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="Integer" /> zawierający identyfikator kontekstu dla tematu w pliku pomocy. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia <see langword="Integer" /> zawierający identyfikator kontekstu dla tematu w pliku pomocy. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext` Właściwość służy do wyświetlania pomocy kontekstowej dla aplikacji. Jeśli w programie `HelpFile`jest określony plik pomocy `HelpContext` , właściwość jest używana do automatycznego wyświetlania wskazanego pliku pomocy. Jeśli obie `HelpFile` właściwości i `HelpContext` są puste <xref:Microsoft.VisualBasic.ErrObject.Number%2A> , wartość właściwości jest sprawdzana. Jeśli wartość `Number` właściwości odpowiada Visual Basic wartość błędu czasu wykonywania, zostanie użyty identyfikator kontekstu pomocy Visual Basic dla danego błędu. Jeśli wartość `Number` właściwości nie odpowiada błędowi Visual Basic, zostanie wyświetlony ekran zawartość dla Visual Basic pliku pomocy.  
  
> [!NOTE]
>  Aby obsłużyć typowe błędy, należy napisać procedury w aplikacji. Podczas programowania z obiektem, można użyć pliku pomocy obiektu, aby poprawić jakość obsługi błędów lub wyświetlić zrozumiały komunikat dla użytkownika, jeśli błąd nie jest możliwy do odzyskania.  
  
   
  
## Examples  
 W tym przykładzie zastosowano `HelpContext` Właściwość `Err` obiektu, aby wyświetlić `Overflow` Visual Basic tematu pomocy dla błędu.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="String" /> wyrażenie zawierające w pełni kwalifikowaną ścieżkę do pliku pomocy. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia <see langword="String" /> wyrażenie zawierające w pełni kwalifikowaną ścieżkę do pliku pomocy. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli plik pomocy jest określony przez `HelpFile` właściwość, jest on automatycznie wywoływany, gdy użytkownik naciśnie klawisz pomocy (lub klawisz F1) w oknie dialogowym komunikatu o błędzie. `HelpContext` Jeśli właściwość zawiera prawidłowy identyfikator kontekstu dla określonego pliku, ten temat jest automatycznie wyświetlany. Jeśli nie `HelpFile` zostanie określony, zostanie wyświetlony plik pomocy Visual Basic.  
  
> [!NOTE]
>  Aby obsłużyć typowe błędy, należy napisać procedury w aplikacji. Podczas programowania z obiektem, można użyć pliku pomocy obiektu, aby poprawić jakość obsługi błędów lub wyświetlić zrozumiały komunikat dla użytkownika, jeśli błąd nie jest możliwy do odzyskania.  
  
   
  
## Examples  
 W tym przykładzie zastosowano `HelpFile` Właściwość `Err` obiektu do uruchomienia systemu pomocy. Domyślnie `HelpFile` Właściwość zawiera nazwę pliku pomocy Visual Basic.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kod błędu systemu wytwarzany przez wywołanie do biblioteki dołączanej dynamicznie (DLL).</summary>
        <value>Kod błędu systemu wytwarzany przez wywołanie do biblioteki dołączanej dynamicznie (DLL).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Właściwość dotyczy tylko wywołań dll wykonanych z Visual Basic kodzie. Gdy takie wywołanie zostało wykonane, wywoływana funkcja zwykle zwraca kod wskazujący powodzenie lub niepowodzenie, a <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> właściwość jest wypełniana. Zapoznaj się z dokumentacją funkcji biblioteki DLL, aby określić wartości zwracane wskazujące powodzenie lub niepowodzenie. Za każdym razem, gdy zwracany jest kod błędu, aplikacja Visual Basic powinna natychmiast <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> sprawdzić właściwość. Wyjątek nie jest wywoływany, <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> gdy właściwość jest ustawiona.  
  
> [!NOTE]
>  Właściwość jest chroniona przez <xref:System.Security.Permissions.SecurityAction.LinkDemand>, co uniemożliwia dostęp do nich z niezaufanego kodu. <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Jednak do uzyskania <xref:System.Security.Permissions.SecurityAction.LinkDemand> uprawnieńwymaganyjesttylko<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> bezpośredni obiekt wywołujący. Jeśli kod można wywołać z częściowo zaufanego kodu, ujawnienie wartości <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> bez sprawdzania poprawności jest ryzykowne dla bezpieczeństwa.  
>   
>  Aby uzyskać ważne ograniczenia dotyczące korzystania z <xref:System.Security.Permissions.SecurityAction.LinkDemand> elementu członkowskiego, zobacz [żądanie a LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Aby uzyskać więcej informacji o uprawnieniach <xref:System.Security.Permissions.SecurityPermission> , zobacz i [uprawnienia dostępu do kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Uwaga dla urządzeń inteligentnych ta właściwość zawsze zwraca wartość zero.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, `LastDllError` jak można użyć właściwości po wywołaniu funkcji w interfejsie API systemu Windows. Procedura przyjmuje dojście do okna i `GetWindowRect` wywołuje funkcję. `PrintWindowCoordinates` `GetWindowRect`wypełnia strukturę danych RECT długością boków prostokąta, które tworzą okno. W przypadku przekazania nieprawidłowego dojścia wystąpi błąd i numer błędu jest dostępny za pomocą `LastDllError` właściwości.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia wartość liczbową określającą błąd. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia wartość liczbową określającą błąd. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie argumenty z wyjątkiem `Number` są opcjonalne. `Raise` W przypadku pominięcia argumentów opcjonalnych, a ustawienia `Err` właściwości obiektu zawierają wartości, które nie zostały wyczyszczone, te wartości będą stanowić wartość błędu.  
  
 Ponieważ obiekt zawiera bogatsze informacje, niż w przypadku generowania błędów `Error` przy użyciu instrukcji, `Raise` jest przydatny do generowania błędów podczas pisania modułów klas. `Err` Na przykład przy użyciu `Raise` metody źródło, które wygenerowało błąd, może być określone `Source` we właściwości, można odwołać się do pomocy online dotyczącej błędu i tak dalej.  
  
 Gdy zwracasz błąd zdefiniowany przez użytkownika z obiektu, ustaw `Err.Number` , dodając wybrany numer jako kod błędu `VbObjectError` do stałej. Na przykład, użyj następującego kodu, aby zwrócić numer 1051 jako kod błędu:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 Ten przykład ilustruje typowy sposób użycia `Number` właściwości w procedurze obsługi błędu.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 W tym przykładzie zastosowano `Err` `Raise` metodę obiektu do wygenerowania oryginalnego błędu w ramach funkcji zarejestrowanej w Visual Basic. Funkcja wywołująca może przechwycić błąd i zgłosić go użytkownikowi. Należy zauważyć, `CallingProcedure` że procedura odróżni typ informacji, które można utworzyć `Err` na podstawie obiektu z informacjami, które można utworzyć na podstawie `Exception` obiektu.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />jest większa niż 65535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Long" />Liczba całkowita, która identyfikuje charakter błędu. Błędy Visual Basic są w zakresie 0-65535; zakres 0-512 jest zarezerwowany dla błędów systemowych; zakres 513-65535 jest dostępny dla błędów zdefiniowanych przez użytkownika. Podczas ustawiania <see langword="Number" /> właściwości na własny kod błędu w module klasy należy dodać numer kodu błędu <see langword="vbObjectError" /> do stałej. Na przykład, aby wygenerować numer błędu 513, przypisz <c>VbObjectError + 513</c> do <see langword="Number" /> właściwości.</param>
        <param name="Source">Opcjonalny. <see langword="String" />wyrażenie określające nazwę obiektu lub aplikacji, która spowodowała wygenerowanie błędu. Podczas ustawiania tej właściwości dla obiektu należy użyć <c>projektu</c>formularza. <c>Klasa</c>. Jeśli <paramref name="Source" /> nie jest określony, zostanie użyty identyfikator procesu bieżącego projektu Visual Basic.</param>
        <param name="Description">Opcjonalny. <see langword="String" />wyrażenie opisujące błąd. Jeśli nie zostanie określony, wartość we <see langword="Number" /> właściwości zostanie zbadana. Jeśli można ją zmapować na Visual Basic kod błędu czasu wykonywania, ciąg, który będzie zwracany przez <see langword="Error" /> funkcję, jest używany <see langword="Description" /> jako właściwość. Jeśli nie ma Visual Basic błędu odpowiadającego <see langword="Number" /> właściwości, używany jest komunikat "błąd zdefiniowany przez aplikację lub zdefiniowany obiekt".</param>
        <param name="HelpFile">Opcjonalny. W pełni kwalifikowana ścieżka do pliku pomocy, w którym można znaleźć pomoc dotyczącą tego błędu. Jeśli nie określono tego parametru, Visual Basic używa w pełni kwalifikowanego dysku, ścieżki i nazwy pliku pomocy Visual Basic.</param>
        <param name="HelpContext">Opcjonalna. Identyfikator kontekstu identyfikujący temat w programie <paramref name="HelpFile" /> , który zawiera pomoc dotyczącą tego błędu. W przypadku pominięcia zostanie użyta Visual Basic identyfikator kontekstu pliku dla błędu odpowiadającego <see langword="Number" /> właściwości, jeśli istnieje.</param>
        <summary>Generuje błąd czasu wykonywania; może być użyty zamiast <see langword="Error" /> instrukcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie argumenty z wyjątkiem `Number` są opcjonalne. `Raise` W przypadku pominięcia argumentów opcjonalnych, a ustawienia `Err` właściwości obiektu zawierają wartości, które nie zostały wyczyszczone, te wartości będą stanowić wartość błędu.  
  
 Ponieważ obiekt zawiera bogatsze informacje, niż w przypadku generowania błędów `Error` przy użyciu instrukcji, `Raise` jest przydatny do generowania błędów podczas pisania modułów klas. `Err` Na przykład przy użyciu `Raise` metody źródło, które wygenerowało błąd, może być określone `Source` we właściwości, można odwołać się do pomocy online dotyczącej błędu i tak dalej.  
  
   
  
## Examples  
 W tym przykładzie zastosowano `Err` `Raise` metodę obiektu do wygenerowania błędu w funkcji, która jest zapisywana w Visual Basic. Funkcja wywołująca może przechwycić błąd i zgłosić go użytkownikowi przy użyciu okna komunikatu.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="String" /> wyrażenie określające nazwę obiektu lub aplikacji, które pierwotnie wygenerowały błąd. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia <see langword="String" /> wyrażenie określające nazwę obiektu lub aplikacji, które pierwotnie wygenerowały błąd. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source` Właściwość`String` określa wyrażenie reprezentujące obiekt, który wygenerował błąd; wyrażenie jest zazwyczaj nazwą klasy obiektu lub identyfikatorem procesu. Użyj właściwości `Source` , aby podać informacje, gdy kod nie może obsłużyć błędu wygenerowanego w obiekcie, do którego uzyskuje się dostęp. Jeśli na przykład masz dostęp do programu Microsoft Excel i wygeneruje `Division by zero` on błąd, program Microsoft `Err.Number` Excel ustawi kod błędu dla tego błędu i ustawi `Source` wartość "Excel. Application".  
  
 Gdy aplikacja generuje błąd z kodu, `Source` jest identyfikatorem programistycznym aplikacji. W klasie `Source` powinna zawierać nazwę mającą *projekt*formularza. *Klasa*. Gdy w kodzie wystąpi nieoczekiwany błąd, `Source` właściwość jest wypełniana automatycznie. W przypadku błędów w module program `Source` zawiera nazwę projektu.  
  
   
  
## Examples  
 Ten przykład ilustruje użycie `Source` właściwości w typowej procedurze obsługi błędów. Gdy błąd jest wywoływany z `Class1`, ciąg `"Class1"` jest przypisywany `Err` do `Source` właściwości obiektu. Ten ciąg jest następnie wyświetlany w komunikatach informacyjnych informujących o źródle i numerze błędu.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
