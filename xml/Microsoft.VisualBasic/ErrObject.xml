<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99efa4f2fa97adfbbe2e2ba0ece6a60e4e9943ba" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52221921" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see langword="ErrObject" /> Moduł zawiera właściwości i procedury używane do identyfikowania i obsługi błędów czasu wykonywania przy użyciu <see langword="Err" /> obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject` Moduł obsługuje `Err` obiektu. Aby uzyskać więcej informacji, zobacz <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 W tym przykładzie użyto właściwości `Err` obiektu podczas tworzenia okno dialogowe komunikat o błędzie. Zwróć uwagę, co się stanie, gdy używasz `Clear` metoda pierwszy: gdy następnie wygenerować błąd w Visual Basic z `Raise` metody, właściwości stają się wartości domyślne języka Visual Basic `Err` obiektu.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error — Instrukcja (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally — Instrukcja (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści wszystkie ustawienia właściwości <see langword="Err" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `Clear` jawnie wyczyść `Err` obiektem błąd został obsłużony, takie jak kiedy używać obsługi za pomocą odroczonego błędów `On Error Resume Next`. `Clear` Metoda jest wywoływana automatycznie zawsze, gdy wykonuje jedną z następujących instrukcji:  
  
-   Dowolny typ `Resume` — instrukcja  
  
-   `Exit Sub`, `Exit Function`, lub `Exit Property`  
  
-   Wszelkie `On Error` — instrukcja  
  
-   Wszelkie `Try...Catch...Finally` — instrukcja  
  
    > [!NOTE]
    >  `On Error Resume Next` Konstrukcji może być korzystniejsze `On Error GoTo` podczas obsługi błędów wygenerowanych podczas uzyskiwania dostępu do innych obiektów. Sprawdzanie `Err` po każdym interakcji z obiektem usuwa niejednoznaczności o tym, które obiekt została otwarta przez kod: można zapewnić, że obiektu, który jest umieszczony kod błędu w `Err.Number`, a także obiektu, który oryginalnie błędu (obiektu określonych w `Err.Source`).  
  
   
  
## Examples  
 W tym przykładzie użyto `Err` obiektu `Clear` metodę, aby zresetować właściwości liczbowych `Err` obiekt do zera i jego właściwości parametrów na ciągi o zerowej długości. Bez wywołania `Clear`, drugie wywołanie `MsgBox` zostanie wyświetlony ten sam komunikat o błędzie.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="String" /> wyrażenia zawierającego opisowy ciąg skojarzony z błędem. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia <see langword="String" /> wyrażenia zawierającego opisowy ciąg skojarzony z błędem. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Description` Ustawienie właściwości składa się z krótkim opisem błędu. Ta właściwość służy do wyzwalania alertu, użytkownikowi błędu, który nie może lub nie chcesz obsługiwać. Podczas generowania błędach zdefiniowane przez użytkownika, należy przypisać krótki opis błędu do `Description` właściwości. Jeśli `Description` właściwość nie zostanie wypełnione, a wartością <xref:Microsoft.VisualBasic.ErrObject.Number%2A> właściwość odnosi się do błędów czasu wykonywania języka Visual Basic, a następnie ciąg zwracany przez <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> funkcja została ustawiona `Description` właściwości, gdy zostanie wygenerowany błąd.  
  
   
  
## Examples  
 W tym przykładzie przypisuje komunikatów zdefiniowanych przez użytkownika `Description` właściwość `Err` obiektu.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji. Tylko do odczytu.</summary>
        <value>Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji. Tylko do odczytu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku języka Visual Basic napotyka bez numerów wierszy, zwraca wartość 0.  
  
   
  
## Examples  
 W tym przykładzie użyto `Erl` właściwości, aby wskazać numer wiersza.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wyjątek, reprezentujący błąd, który wystąpił.</summary>
        <returns>Zwraca wyjątek, reprezentujący błąd, który wystąpił.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetException` Funkcja jest dostępna tylko z `Err` klasa obiektu. Współdziała ona z `Exception` właściwość `Err` obiektu, aby wyświetlić błąd, który wystąpił.  
  
   
  
## Examples  
 Poniższy kod wyświetla komunikat przypisane do wyjątku w `Err` obiektu:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="Integer" /> zawierający identyfikator kontekstu dla tematu w pliku pomocy. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia <see langword="Integer" /> zawierający identyfikator kontekstu dla tematu w pliku pomocy. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext` Właściwość jest używana do wyświetlania Pomoc kontekstowa do aplikacji. Jeśli określono plik pomocy w `HelpFile`, `HelpContext` właściwość jest używana do automatycznie wyświetla plik pomocy zidentyfikowane. Jeśli oba `HelpFile` i `HelpContext` właściwości są puste, wartość <xref:Microsoft.VisualBasic.ErrObject.Number%2A> właściwość jest zaznaczona. Jeśli wartość `Number` właściwość odpowiada wartości błędów czasu wykonywania języka Visual Basic, a następnie będzie stosowany jego identyfikator kontekstu Pomocy programu Visual Basic dla błędu. Jeśli wartość `Number` właściwości nie odpowiada błąd w Visual Basic, zostanie wyświetlony ekran zawartość pliku Pomocy programu Visual Basic.  
  
> [!NOTE]
>  W aplikacji do obsługi typowych błędów, należy wpisać procedury. Podczas programowania z obiektem, można użyć obiektu pliku pomocy, poprawić jakość usługi obsługi błędów lub wyświetlić komunikat istotnych do użytkownika, jeśli ten błąd nie jest możliwe do odzyskania.  
  
   
  
## Examples  
 W tym przykładzie użyto `HelpContext` właściwość `Err` obiektu, aby wyświetlić tematu Pomocy programu Visual Basic dla `Overflow` błędu.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="String" /> wyrażenia zawierającego w pełni kwalifikowana ścieżka do pliku pomocy. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia <see langword="String" /> wyrażenia zawierającego w pełni kwalifikowana ścieżka do pliku pomocy. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli plik pomocy jest określona przez `HelpFile` właściwości go jest wywoływana automatycznie, gdy użytkownik naciśnie klawisz Pomocy (lub klawisz F1) w oknie dialogowym komunikat o błędzie. Jeśli `HelpContext` właściwość zawiera prawidłowy kontekst identyfikator określonego pliku tego tematu jest automatycznie wyświetlana. Jeśli nie `HelpFile` jest określony, wyświetlany jest plik Pomocy programu Visual Basic.  
  
> [!NOTE]
>  W aplikacji do obsługi typowych błędów, należy wpisać procedury. Podczas programowania z obiektem, można użyć obiektu pliku pomocy, poprawić jakość usługi obsługi błędów lub wyświetlić komunikat istotnych do użytkownika, jeśli ten błąd nie jest możliwe do odzyskania.  
  
   
  
## Examples  
 W tym przykładzie użyto `HelpFile` właściwość `Err` obiektu, aby uruchomić system pomocy. Domyślnie `HelpFile` właściwość zawiera nazwę pliku Pomocy programu Visual Basic.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca kod błędu systemowego, tworzone przez wywołanie do biblioteki dołączanej (dynamicznie DLL). Tylko do odczytu.</summary>
        <value>Zwraca kod błędu systemowego, tworzone przez wywołanie do biblioteki dołączanej (dynamicznie DLL). Tylko do odczytu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Właściwość ma zastosowanie tylko do wywołania biblioteki DLL z kodu języka Visual Basic. Po wykonaniu tych wywołań funkcji o nazwie zwykle zwraca kod oznaczający powodzenie lub niepowodzenie, a <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> właściwość jest wypełniana. Sprawdź w dokumentacji dotyczącej funkcji DLL, które można określić zwracanej wartości, które wskazania powodzenia lub niepowodzenia. Zawsze, gdy zostanie zwrócony kod błędu, aplikacji Visual Basic należy niezwłocznie sprawdzić <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> właściwości. Nie wystąpił wyjątek podczas <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> właściwość jest ustawiona.  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Właściwość jest chroniona przez <xref:System.Security.Permissions.SecurityAction.LinkDemand>, co pomaga zapobiec uzyskiwany z niezaufanego kodu. Jednak <xref:System.Security.Permissions.SecurityAction.LinkDemand> wymaga tylko bezpośredniego wywołującego mieć <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> uprawnień. Jeśli Twój kod może być wywoływana z częściowo zaufanego kodu, udostępnianie wartość <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> bez sprawdzania poprawności stanowi zagrożenie bezpieczeństwa.  
>   
>  Aby uzyskać ważne ograniczenia dotyczące korzystania <xref:System.Security.Permissions.SecurityAction.LinkDemand> elementu członkowskiego, zobacz [popytu programu vs. Żądanie LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Aby uzyskać więcej informacji o uprawnieniach, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Uwaga dla inteligentnych urządzeń właściwość ta zwraca zawsze wartość zero.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak można użyć `LastDllError` właściwości po wywołaniu funkcji w interfejsie API Windows. `PrintWindowCoordinates` Przyjmowane przez procedurę dojścia do okna i połączeń `GetWindowRect` funkcji. `GetWindowRect` wypełnia strukturę danych Prostokąt przy użyciu długości stron prostokąta, które tworzą okna. Jeśli przekażesz nieprawidłowego dojścia, wystąpi błąd i numer błędu jest dostępna za pośrednictwem `LastDllError` właściwości.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia wartość liczbową, określając błąd. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia wartość liczbową, określając błąd. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie `Raise` argumenty, z wyjątkiem `Number` są opcjonalne. Jeżeli pominięto argumentów opcjonalnych, a ustawienia właściwości `Err` obiektu zawierają wartości, które nie zostały wyczyszczone, te wartości służą jako wartości błędu.  
  
 Ponieważ `Err` obiektu zapewnia bardziej rozbudowane informacje niż podczas generowania błędy `Error` instrukcji `Raise` generowanie błędów podczas pisania moduły klasy. Na przykład za pomocą `Raise` metoda, źródło, który wygenerował błąd może być określona w `Source` właściwości mogą być przywoływane Pomoc online dla błędu i tak dalej.  
  
 Po powrocie błędach zdefiniowane przez użytkownika z obiektu, należy ustawić `Err.Number` , dodając numer wybrany kod błędu do `VbObjectError` stałej. Na przykład użyć następujący kod, aby zwrócić liczbę 1051 kod błędu:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 Ten przykład ilustruje typowym zastosowaniem `Number` właściwości w procedurze obsługi błędów.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 W tym przykładzie użyto `Err` obiektu `Raise` metodę w celu wygenerowania oryginalny błąd w funkcji napisane w języku Visual Basic. Funkcja wywołująca może wychwycić błąd i zgłosić do użytkownika. Należy zauważyć, że procedury `CallingProcedure` zachowanie różni się od typu informacji, które może pochodzić z `Err` obiektu z informacjami, które może pochodzić z `Exception` obiektu.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> jest większy niż 65 535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Long" /> Liczba całkowita, która identyfikuje charakter błędu. Błędów w Visual Basic znajdują się w zakresie 0 – 65535; zakres 0 – 512 jest zarezerwowane dla błędów systemowych; zakres 513 – 65535 jest dostępna dla błędów zdefiniowanych przez użytkownika. Podczas ustawiania <see langword="Number" /> właściwość własnego kodu błędu w module klasy, Dodaj numer kodu błędu w celu <see langword="vbObjectError" /> stałej. Na przykład aby wygenerować numer błędu 513, należy przypisać <c>vbObjectError + 513</c> do <see langword="Number" /> właściwości.</param>
        <param name="Source">Opcjonalna. <see langword="String" /> wyrażenie nazwy obiektu lub aplikacji, który wygenerował błąd. Gdy ustawienie tej właściwości dla obiektu, należy użyć formy <c>projektu</c>.<c>Klasa</c>. Jeśli <paramref name="Source" /> nie zostanie określony, będzie stosowany jego identyfikator procesu bieżącego projektu języka Visual Basic.</param>
        <param name="Description">Opcjonalna. <see langword="String" /> wyrażenie opisem błędu. Jeśli nie zostanie podany, wartość w <see langword="Number" /> właściwości jest sprawdzany pod. Jeśli mogą być mapowane do błędów czasu wykonywania języka Visual Basic code, ciąg, który będzie zwracany przez <see langword="Error" /> funkcja jest używana jako <see langword="Description" /> właściwości. Jeśli nie ma błędu języka Visual Basic odpowiadający <see langword="Number" /> , komunikat "zdefiniowany przez aplikację lub zdefiniowane przez obiekt error" jest używana.</param>
        <param name="HelpFile">Opcjonalna. W pełni kwalifikowana ścieżka do pliku pomocy, w którym można znaleźć pomoc na temat tego błędu. Jeśli nie zostanie podany, Visual Basic używa dysku w pełni kwalifikowaną, ścieżkę i nazwę pliku Pomocy programu Visual Basic.</param>
        <param name="HelpContext">Opcjonalna. Identyfikator kontekstu, identyfikowanie tematu w <paramref name="HelpFile" /> zapewniający pomoc dla błędu. Jeśli argument jest pominięty, identyfikator kontekstu pomocy plik Visual Basic błędu odpowiadający <see langword="Number" /> właściwość jest używana, jeśli taki istnieje.</param>
        <summary>Generuje błąd w czasie wykonywania; można użyć zamiast <see langword="Error" /> instrukcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie `Raise` argumenty, z wyjątkiem `Number` są opcjonalne. Jeżeli pominięto argumentów opcjonalnych, a ustawienia właściwości `Err` obiektu zawierają wartości, które nie zostały wyczyszczone, te wartości służą jako wartości błędu.  
  
 Ponieważ `Err` obiektu zapewnia bardziej rozbudowane informacje niż podczas generowania błędy `Error` instrukcji `Raise` generowanie błędów podczas pisania moduły klasy. Na przykład za pomocą `Raise` metoda, źródło, który wygenerował błąd może być określona w `Source` właściwości mogą być przywoływane Pomoc online dla błędu i tak dalej.  
  
   
  
## Examples  
 W tym przykładzie użyto `Err` obiektu `Raise` metoda generuje błąd w funkcji napisane w języku Visual Basic. Funkcja wywołująca może wychwycić błąd i zgłosić do użytkownika za pomocą okna komunikatu.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia <see langword="String" /> wyrażenie określające nazwę obiektu lub aplikacji, który początkowo wygenerował błąd. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia <see langword="String" /> wyrażenie określające nazwę obiektu lub aplikacji, który początkowo wygenerował błąd. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source` Właściwość określa `String` reprezentujący obiekt który wygenerował błąd; wyrażenie jest zazwyczaj nazwy klasy obiektu lub identyfikatora procesu. Użyj `Source` właściwości, aby podać informacje, gdy kod jest w stanie obsłużyć błąd wygenerowany w obiekcie, do których uzyskano dostęp. Na przykład, jeśli uzyskujesz dostęp do programu Microsoft Excel i generuje `Division by zero` błąd, program Microsoft Excel ustawia `Err.Number` kodowi błędu dla tego błędu i zestawów `Source` do "Excel.Application".  
  
 Jeśli aplikacja generuje błąd w kodzie, `Source` to identyfikator programowy aplikacji W obrębie klasy `Source` powinien zawierać nazwę o postaci *projektu*. *Klasa*. Sytuacji wystąpił nieoczekiwany błąd w kodzie, `Source` właściwość jest wypełniane automatycznie. Błędy w module `Source` zawiera nazwę projektu.  
  
   
  
## Examples  
 W tym przykładzie pokazano użycie `Source` właściwości w Typowa procedura obsługi błędów. Gdy występuje błąd z `Class1`, ciąg `"Class1"` jest przypisany do `Source` właściwość `Err` obiektu. Ten ciąg jest następnie wyświetlana w komunikat informacyjny wskazujący źródła i numer błędu.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>