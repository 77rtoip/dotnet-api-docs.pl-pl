<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b956e175a057d7318656b9527a06fcf8a634d67a" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34173849" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see langword="ErrObject" /> Moduł zawiera właściwości i procedur w celu identyfikacji i obsługi błędów czasu wykonywania przy użyciu <see langword="Err" /> obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject` Moduł obsługuje `Err` obiektu. Aby uzyskać więcej informacji, zobacz <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 W tym przykładzie użyto właściwości `Err` obiektu przy konstruowaniu okno dialogowe komunikat o błędzie. Zwróć uwagę, co się dzieje, gdy używasz `Clear` — metoda pierwszy: gdy następnie wygenerować błąd w Visual Basic z `Raise` metody, właściwości stają się wartościami domyślnymi Visual Basic `Err` obiektu.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści wszystkie ustawienia właściwości <see langword="Err" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `Clear` jawnie wyczyść `Err` obiektu po błąd został obsłużony, np. Jeśli używasz obsługi z opóźnieniem błędów `On Error Resume Next`. `Clear` Metoda jest wywoływana automatycznie po każdej zmianie wykonuje żadnego z następujących instrukcji:  
  
-   Dowolny typ `Resume` — instrukcja  
  
-   `Exit Sub`, `Exit Function`, lub `Exit Property`  
  
-   Wszelkie `On Error` — instrukcja  
  
-   Wszelkie `Try...Catch...Finally` — instrukcja  
  
    > [!NOTE]
    >  `On Error Resume Next` Konstrukcja może być wskazane `On Error GoTo` podczas obsługi błędów wygenerowanych podczas dostępu do innych obiektów. Sprawdzanie `Err` po każdej interakcji z obiektem usuwa niejednoznaczności o tym, które obiektu uzyskano kod: można zapewnić, że obiekt umieścić kod błędu w `Err.Number`, a także obiektu, który pierwotnie wygenerowany błąd (obiektu określony w `Err.Source`).  
  
   
  
## Examples  
 W tym przykładzie użyto `Err` obiektu `Clear` metodę, aby zresetować właściwości liczbowych `Err` obiekt do zera i jego właściwości parametrów na ciągi o zerowej długości. Nie można wywołać `Clear`, drugie wywołanie `MsgBox` Wyświetla sam komunikat o błędzie.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje <see langword="String" /> wyrażenie zawierające ciąg opisujący skojarzony z błędem. Odczyt/zapis.</summary>
        <value>Zwraca lub konfiguruje <see langword="String" /> wyrażenie zawierające ciąg opisujący skojarzony z błędem. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Description` Ustawienie właściwości zawiera krótki opis błędu. Ta właściwość służy do użytkownika wystąpił błąd, który nie może lub nie chcesz obsługiwać. Jeśli generowany jest błąd użytkownika, należy przypisać krótki opis błędu do `Description` właściwości. Jeśli `Description` właściwość nie zostanie wypełnione, a wartością <xref:Microsoft.VisualBasic.ErrObject.Number%2A> właściwość odpowiada błędów czasu wykonywania języka Visual Basic, a następnie ciąg zwrócony przez <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> funkcji znajduje się w `Description` właściwości, gdy zostanie wygenerowany błąd.  
  
   
  
## Examples  
 W tym przykładzie przypisuje wiadomość zdefiniowane przez użytkownika w celu `Description` właściwość `Err` obiektu.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji. Tylko do odczytu.</summary>
        <value>Zwraca liczbę całkowitą określającą liczbę wierszy ostatniej wykonanej instrukcji. Tylko do odczytu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli Visual Basic napotka bez numerów wierszy, zwraca wartość 0.  
  
   
  
## Examples  
 W tym przykładzie użyto `Erl` właściwości, aby wskazać, numer wiersza.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca reprezentujący błąd, który wystąpił wyjątek.</summary>
        <returns>Zwraca reprezentujący błąd, który wystąpił wyjątek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetException` Funkcja jest dostępna wyłącznie z `Err` klasa obiektu. W przypadku `Exception` właściwość `Err` obiektu, aby wyświetlić błąd, który wystąpił.  
  
   
  
## Examples  
 Poniższy kod wyświetla komunikat przypisane do wyjątku w `Err` obiektu:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje <see langword="Integer" /> zawierający identyfikator kontekstu dla tematu w pliku pomocy. Odczyt/zapis.</summary>
        <value>Zwraca lub konfiguruje <see langword="Integer" /> zawierający identyfikator kontekstu dla tematu w pliku pomocy. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext` Właściwość jest używana do wyświetlania Pomocy kontekstowej dla aplikacji. Jeśli plik pomocy jest określona w `HelpFile`, `HelpContext` właściwość jest używana do pliku pomocy zidentyfikowane zostanie wyświetlone automatycznie. Jeśli oba `HelpFile` i `HelpContext` właściwości są puste, wartość <xref:Microsoft.VisualBasic.ErrObject.Number%2A> właściwość jest zaznaczona. Jeśli wartość `Number` właściwość odpowiada wartości błędów czasu wykonywania języka Visual Basic, a następnie użyć Identyfikatora kontekstu Pomocy programu Visual Basic dla błędu. Jeśli wartość `Number` właściwości nie odpowiada błąd Visual Basic, zostanie wyświetlony ekran zawartość pliku Pomocy programu Visual Basic.  
  
> [!NOTE]
>  Procedury należy zapisać w aplikacji do obsługi typowych błędów. Programowania z obiektem, można użyć pliku pomocy obiektu do poprawy jakości obsługi programu błędów lub do wyświetlania łatwy do rozpoznania komunikatu do użytkownika, jeśli ten błąd nie jest możliwe do odzyskania.  
  
   
  
## Examples  
 W tym przykładzie użyto `HelpContext` właściwość `Err` obiektów można wyświetlić tematu Pomocy programu Visual Basic dla `Overflow` błędu.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje <see langword="String" /> wyrażeniu zawierającym w pełni kwalifikowana ścieżka do pliku pomocy. Odczyt/zapis.</summary>
        <value>Zwraca lub konfiguruje <see langword="String" /> wyrażeniu zawierającym w pełni kwalifikowana ścieżka do pliku pomocy. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli plik pomocy jest określona przez `HelpFile` właściwości, jest ona automatycznie wywoływana, gdy użytkownik naciśnie klawisz Pomocy (lub klawisza F1) w oknie dialogowym komunikatu o. Jeśli `HelpContext` właściwość zawiera prawidłowy kontekst automatycznie zostanie wyświetlony identyfikator określonego pliku tego tematu. Jeśli nie `HelpFile` jest określona, zostanie wyświetlony w pliku Pomocy programu Visual Basic.  
  
> [!NOTE]
>  Procedury należy zapisać w aplikacji do obsługi typowych błędów. Programowania z obiektem, można użyć pliku pomocy obiektu do poprawy jakości obsługi programu błędów lub do wyświetlania łatwy do rozpoznania komunikatu do użytkownika, jeśli ten błąd nie jest możliwe do odzyskania.  
  
   
  
## Examples  
 W tym przykładzie użyto `HelpFile` właściwość `Err` obiekt, aby uruchomić system pomocy. Domyślnie `HelpFile` właściwość zawiera nazwę pliku Pomocy programu Visual Basic.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca kod błędu systemu produkowane przez wywołanie do biblioteki dołączanej (dynamicznie DLL). Tylko do odczytu.</summary>
        <value>Zwraca kod błędu systemu produkowane przez wywołanie do biblioteki dołączanej (dynamicznie DLL). Tylko do odczytu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Właściwość ma zastosowanie tylko do wywołań biblioteki DLL z kodu języka Visual Basic. Jeśli takie wywołanie wywołana funkcja zwykle zwraca kod oznaczający powodzenie lub Niepowodzenie i <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> właściwości jest wypełnione. Sprawdź w dokumentacji funkcji DLL do określenia wartości zwracane, których wskazania powodzenia lub niepowodzenia. Zawsze, gdy zostanie zwrócony kod błędu, aplikacji Visual Basic powinien natychmiastowego sprawdzenia <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> właściwości. Nie wystąpił wyjątek podczas <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> właściwość jest ustawiona.  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Właściwości jest chroniony przez <xref:System.Security.Permissions.SecurityAction.LinkDemand>, co pomaga zapobiec uzyskiwany kodzie niezaufanym. Jednak <xref:System.Security.Permissions.SecurityAction.LinkDemand> wymaga tylko bezpośredniego obiektu wywołującego ma <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> uprawnienia. Jeśli kod może być wywołana z częściowo zaufanego kodu, udostępnianie wartość <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> bez sprawdzania poprawności stanowi zagrożenie bezpieczeństwa.  
>   
>  Ważne ograniczenia o sposobie używania <xref:System.Security.Permissions.SecurityAction.LinkDemand> — członek, zobacz [żądanie vs. Żądanie LinkDemand](http://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Aby uzyskać więcej informacji dotyczących uprawnień, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu do kodu](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Uwaga dla urządzeń inteligentnych ta właściwość zawsze zwraca wartość zero.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak używasz `LastDllError` właściwości po wywołaniu funkcji interfejsu API systemu Windows. `PrintWindowCoordinates` Przyjmowane przez procedurę dojścia do okna i połączeń `GetWindowRect` funkcji. `GetWindowRect` wypełnia RECT — struktura danych przy użyciu długości krawędzi prostokąta, wchodzące w skład okna. W przypadku przekazania nieprawidłowego dojścia, wystąpi błąd, a numer błędu jest dostępna za pośrednictwem `LastDllError` właściwości.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub ustawia wartość liczbową, określając wystąpił błąd. Odczyt/zapis.</summary>
        <value>Zwraca lub ustawia wartość liczbową, określając wystąpił błąd. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie `Raise` argumentów z wyjątkiem `Number` są opcjonalne. W przypadku pominięcia Argumenty opcjonalne i ustawienia właściwości `Err` obiekt zawiera wartości, które nie zostały wyczyszczone, te wartości służyć jako wartości dla błędu.  
  
 Ponieważ `Err` obiektu zawiera bardziej rozbudowane informacje niż podczas generowania błędy `Error` instrukcji `Raise` przydaje się do generowania błędy podczas zapisywania moduły klasy. Na przykład z `Raise` metody źródłowego, który wygenerował błąd może być określony w `Source` właściwości, pomocy online tego błędu może być przywoływany i tak dalej.  
  
 Gdy zwracany jest błąd użytkownika z obiektu, ustaw `Err.Number` przez dodanie numer wybrany jako błąd o kodzie do `VbObjectError` stałej. Na przykład użyć poniższego kodu, aby otrzymać numer 1051 jako błąd o kodzie:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 W tym przykładzie przedstawiono typowy sposób użycia protokołu `Number` właściwości w procedurze obsługi błędów.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 W tym przykładzie użyto `Err` obiektu `Raise` metodę, aby wygenerować oryginalnego błąd w funkcji napisane w języku Visual Basic. Wywołania funkcji można przechwycić błąd i poinformować użytkownika. Zwróć uwagę, że procedura `CallingProcedure` zachowanie różni się od typu informacji, które mogą pochodzić od `Err` obiekt zawierający informacje, które mogą dziedziczyć po `Exception` obiektu.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> jest większy niż 65 535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Long" /> Liczba całkowita, która identyfikuje charakteru błędu. Błędy programu Visual Basic znajdują się w zakresie 0 – 65535; zakresu 0 – 512 jest zarezerwowana dla błędów systemowych; zakres 513 – 65535 jest dostępna dla błędów zdefiniowanych przez użytkownika. Podczas ustawiania <see langword="Number" /> właściwości własny kod błędu w module klasy, Dodaj numer kodu błędu do <see langword="vbObjectError" /> stałej. Na przykład aby wygenerować kod błędu 513, należy przypisać <c>vbObjectError + 513</c> do <see langword="Number" /> właściwości.</param>
        <param name="Source">Opcjonalna. <see langword="String" /> wyrażenie nazewnictwa obiektu lub aplikacji, który wygenerował błąd. Podczas ustawiania tej właściwości dla obiekt, za pomocą formularza <c>projektu</c>.<c> Klasa</c>. Jeśli <c>źródła</c> nie zostanie określony, będzie stosowany jego identyfikator procesu bieżącego projektu Visual Basic.</param>
        <param name="Description">Opcjonalna. <see langword="String" /> wyrażenie opisem błędu. Jeśli zostanie określona, wartością w <see langword="Number" /> się zbadana właściwości. Jeśli mogą być mapowane do błędów czasu wykonywania języka Visual Basic code, ciąg, który będzie zwracany przez <see langword="Error" /> funkcja jest używana jako <see langword="Description" /> właściwości. Jeśli nie było Visual Basic błędu odpowiadający <see langword="Number" /> , komunikat "error zdefiniowanym przez aplikację lub zdefiniowany przez obiekt" jest używana.</param>
        <param name="HelpFile">Opcjonalna. Pełna ścieżka do pliku pomocy, w którym można znaleźć pomoc na temat tego błędu. Jeśli nie zostanie podany, Visual Basic używa dysku w pełni kwalifikowana, ścieżka i nazwa pliku w pliku Pomocy programu Visual Basic.</param>
        <param name="HelpContext">Opcjonalna. Identyfikator kontekstu tematu w <c>HelpFile</c> zapewnia pomoc w błąd. Pominięcie identyfikator kontekstu pliku Pomocy programu Visual Basic dla błędu odpowiadającego <see langword="Number" /> właściwość jest używana, jeśli istnieje.</param>
        <summary>Generowany jest błąd czasu wykonywania; można użyć zamiast <see langword="Error" /> instrukcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie `Raise` argumentów z wyjątkiem `Number` są opcjonalne. W przypadku pominięcia Argumenty opcjonalne i ustawienia właściwości `Err` obiekt zawiera wartości, które nie zostały wyczyszczone, te wartości służyć jako wartości dla błędu.  
  
 Ponieważ `Err` obiektu zawiera bardziej rozbudowane informacje niż podczas generowania błędy `Error` instrukcji `Raise` przydaje się do generowania błędy podczas zapisywania moduły klasy. Na przykład z `Raise` metody źródłowego, który wygenerował błąd może być określony w `Source` właściwości, pomocy online tego błędu może być przywoływany i tak dalej.  
  
   
  
## Examples  
 W tym przykładzie użyto `Err` obiektu `Raise` metoda generuje błąd w funkcji napisane w języku Visual Basic. Wywołania funkcji można catch błąd i przekazać go użytkownikowi okno komunikatu.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca lub konfiguruje <see langword="String" /> wyrażenie określające nazwę obiektu lub aplikacji, która początkowo wygenerował błąd. Odczyt/zapis.</summary>
        <value>Zwraca lub konfiguruje <see langword="String" /> wyrażenie określające nazwę obiektu lub aplikacji, która początkowo wygenerował błąd. Odczyt/zapis.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source` Właściwość określa `String` reprezentujący obiekt który wygenerował błąd; wyrażenie jest zazwyczaj nazwa klasy obiektu lub identyfikatora procesu. Użyj `Source` właściwości, aby podać informacje, gdy kodu nie może obsłużyć błąd wygenerowany w uzyskał dostęp do obiektu. Na przykład, jeśli można uzyskać dostępu do programu Microsoft Excel oraz generuje `Division by zero` błąd, program Microsoft Excel ustawia `Err.Number` jego kod błędu dla tego błędu i zestawów `Source` do "Excel.Application".  
  
 Gdy aplikacja generuje błąd z kodem, `Source` jest identyfikatorem aplikacji programowe. W klasie `Source` powinien zawierać nazwą składającą się z formularza *projektu*.* Klasa*. Po wystąpieniu błędu nieoczekiwany w kodzie, `Source` właściwości jest wypełniane automatycznie. Błędy w module `Source` zawiera nazwę projektu.  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `Source` właściwości w typowej procedury obsługi błędów. Gdy występuje błąd z `Class1`, ciąg `"Class1"` jest przypisany do `Source` właściwość `Err` obiektu. Ten ciąg jest następnie wyświetlane w komunikat informacyjny wskazujący źródła i numer błędu.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
  </Members>
</Type>