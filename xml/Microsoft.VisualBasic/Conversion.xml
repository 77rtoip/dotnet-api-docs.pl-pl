<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="093db67cb3c739ef9d2f91f8d2e98f666d35387b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317880" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="216ff-101"><see langword="Conversion" /> Moduł zawiera procedury używane do wykonywania różnych operacji konwersji.</span><span class="sxs-lookup"><span data-stu-id="216ff-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-102">Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które konwertują liczby dziesiętne na inne bazy, cyfry do ciągów, ciągi znaków do liczb i jeden typ danych na inny.</span><span class="sxs-lookup"><span data-stu-id="216ff-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-103">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-104">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="216ff-105">Słowa kluczowe (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="216ff-106">Visual Basic elementy członkowskie biblioteki wykonawczej</span><span class="sxs-lookup"><span data-stu-id="216ff-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="216ff-107">Obiekt do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="216ff-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="216ff-108">Typ, do którego ma zostać przekonwertowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="216ff-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="216ff-109">Konwertuje obiekt na określony typ.</span><span class="sxs-lookup"><span data-stu-id="216ff-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="216ff-110">Obiekt, którego typem w czasie wykonywania jest żądany typ docelowy.</span><span class="sxs-lookup"><span data-stu-id="216ff-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-111">Metoda konwertuje obiekt przekazaną `Expression` jako parametr do typu określonego przez `TargetType` parametr. `CTypeDynamic`</span><span class="sxs-lookup"><span data-stu-id="216ff-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="216ff-112">Jeśli obiekt jest obiektem dynamicznym, `CTypeDynamic` Metoda stosuje dostępne konwersje dynamiczne.</span><span class="sxs-lookup"><span data-stu-id="216ff-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="216ff-113">`CTypeDynamic` Metoda stosuje konwersje dynamiczne zgodnie z semantyką konwersji zdefiniowaną przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="216ff-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="216ff-114">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject> `CTypeDynamic` , Metoda najpierw próbuje wykonać konwersję przy użyciu zdefiniowanej przez użytkownika konwersji statycznej.</span><span class="sxs-lookup"><span data-stu-id="216ff-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="216ff-115">Jeśli zdefiniowana przez użytkownika, konwersja statyczna nie powiedzie `CTypeDynamic` się, metoda próbuje wykonać konwersję przy użyciu konwersji dynamiczne.</span><span class="sxs-lookup"><span data-stu-id="216ff-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="216ff-116"><xref:System.Dynamic.IDynamicMetaObjectProvider> W`CTypeDynamic` przypadku implementowania obiektu dynamicznego Metoda daje pierwszeństwo dla konwersji dynamicznych przy użyciu konwersji statycznej zdefiniowanej przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="216ff-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-117">W poniższym przykładzie użyto `CTypeDynamic` metody do przekonwertowania obiektu dynamicznego na ciąg przy użyciu konwersji zdefiniowanej przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="216ff-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="216ff-118">Praca z obiektami dynamicznymi (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="216ff-119">Przewodnik: Tworzenie obiektów dynamicznych i posługiwanie się nimi (C# i Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="216ff-120">Typ, do którego ma zostać przekonwertowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="216ff-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="216ff-121">Obiekt do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="216ff-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="216ff-122">Konwertuje obiekt na określony typ ogólny.</span><span class="sxs-lookup"><span data-stu-id="216ff-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="216ff-123">Obiekt statycznie wpisany jako żądany typ ogólny.</span><span class="sxs-lookup"><span data-stu-id="216ff-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-124">Metoda konwertuje obiekt przekazaną `Expression` jako parametr do typu określonego przez typ parametru generycznego. `CTypeDynamic`</span><span class="sxs-lookup"><span data-stu-id="216ff-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="216ff-125">Jeśli obiekt jest obiektem dynamicznym, `CTypeDynamic` Metoda stosuje dostępne konwersje dynamiczne.</span><span class="sxs-lookup"><span data-stu-id="216ff-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="216ff-126">`CTypeDynamic` Metoda stosuje konwersje dynamiczne zgodnie z semantyką konwersji zdefiniowaną przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="216ff-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="216ff-127">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject> `CTypeDynamic` , Metoda najpierw próbuje wykonać konwersję przy użyciu zdefiniowanej przez użytkownika konwersji statycznej.</span><span class="sxs-lookup"><span data-stu-id="216ff-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="216ff-128">Jeśli zdefiniowana przez użytkownika, konwersja statyczna nie powiedzie `CTypeDynamic` się, metoda próbuje wykonać konwersję przy użyciu konwersji dynamiczne.</span><span class="sxs-lookup"><span data-stu-id="216ff-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="216ff-129"><xref:System.Dynamic.IDynamicMetaObjectProvider> W`CTypeDynamic` przypadku implementowania obiektu dynamicznego Metoda daje pierwszeństwo dla konwersji dynamicznych przy użyciu konwersji statycznej zdefiniowanej przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="216ff-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-130">W poniższym przykładzie użyto `CTypeDynamic` metody do przekonwertowania obiektu dynamicznego na ciąg przy użyciu konwersji zdefiniowanej przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="216ff-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="216ff-131">Praca z obiektami dynamicznymi (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="216ff-132">Przewodnik: Tworzenie obiektów dynamicznych i posługiwanie się nimi (C# i Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="216ff-133">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span><span class="sxs-lookup"><span data-stu-id="216ff-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="216ff-134">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span><span class="sxs-lookup"><span data-stu-id="216ff-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="216ff-135">Komunikat o błędzie, który odnosi się do ostatniego błędu czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="216ff-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-136">Funkcja bada ustawienia `Err` właściwości obiektu w celu zidentyfikowania ostatniego błędu czasu wykonywania. `ErrorToString`</span><span class="sxs-lookup"><span data-stu-id="216ff-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="216ff-137">Wartość `ErrorToString` zwracana przez funkcję odpowiada `Description` właściwości `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="216ff-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="216ff-138">Jeśli wystąpi błąd w czasie wykonywania, `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="216ff-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="216ff-139">W Visual Basic w wersji 6,0 i starszych ta funkcja była świadczona przez `Error` funkcję.</span><span class="sxs-lookup"><span data-stu-id="216ff-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-140">Poniższy kod używa `ErrorToString` funkcji do wyświetlania komunikatów o błędach, które odpowiadają określonym numerom błędów.</span><span class="sxs-lookup"><span data-stu-id="216ff-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-141"><paramref name="ErrorNumber" />jest poza zakresem.</span><span class="sxs-lookup"><span data-stu-id="216ff-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="216ff-142">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="216ff-142">Optional.</span></span> <span data-ttu-id="216ff-143">Dowolny prawidłowy numer błędu.</span><span class="sxs-lookup"><span data-stu-id="216ff-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="216ff-144">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span><span class="sxs-lookup"><span data-stu-id="216ff-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="216ff-145">Komunikat o błędzie, który odnosi się do danego numeru błędu.</span><span class="sxs-lookup"><span data-stu-id="216ff-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-146">Funkcja bada ustawienia `Err` właściwości obiektu w celu zidentyfikowania ostatniego błędu czasu wykonywania. `ErrorToString`</span><span class="sxs-lookup"><span data-stu-id="216ff-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="216ff-147">Wartość `ErrorToString` zwracana przez funkcję odpowiada `Description` właściwości `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="216ff-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="216ff-148">Jeśli `ErrorNumber` jest prawidłowym numerem błędu, ale nie jest zdefiniowany `ErrorToString` , zwraca ciąg `"Application-defined or object-defined error."` , `ErrorNumber` jeśli jest nieprawidłowy, wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="216ff-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="216ff-149">W `ErrorNumber` przypadku pominięcia zostanie zwrócony komunikat odpowiadający ostatniemu błędowi czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="216ff-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="216ff-150">Jeśli wystąpi błąd w czasie wykonywania lub `ErrorNumber` wartość 0, `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="216ff-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="216ff-151">W Visual Basic w wersji 6,0 i starszych ta funkcja była świadczona przez `Error` funkcję.</span><span class="sxs-lookup"><span data-stu-id="216ff-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-152">Poniższy kod używa `ErrorToString` funkcji do wyświetlania komunikatów o błędach, które odpowiadają określonym numerom błędów.</span><span class="sxs-lookup"><span data-stu-id="216ff-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-153"><paramref name="ErrorNumber" />jest poza zakresem.</span><span class="sxs-lookup"><span data-stu-id="216ff-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="216ff-154">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-155">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-155">Required.</span></span> <span data-ttu-id="216ff-156">Liczba <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-157">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-158">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-159">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-160">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-161">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-162">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="216ff-163">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-164">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-165">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-166">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-167">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-168">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-169">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-170">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-171">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-172">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-173">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-174">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-175">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-176">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-177">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-178">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-179">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-179">Required.</span></span> <span data-ttu-id="216ff-180">Liczba <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-181">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-182">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-183">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-184">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-185">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-186">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="216ff-187">Począwszy od Visual Basic `Double`15,8, wydajność konwersji do liczby całkowitej jest zoptymalizowana, jeśli przekazujesz wartość zwróconą `Fix` przez metodę do którejkolwiek z [funkcji](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Double` konwersji całkowitej lub jeśli zwrócona wartość przez `Fix` jest niejawnie konwertowane na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawioną na `Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="216ff-188">Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite.</span><span class="sxs-lookup"><span data-stu-id="216ff-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="216ff-189">Poniższy przykład ilustruje taką zoptymalizowaną konwersję:</span><span class="sxs-lookup"><span data-stu-id="216ff-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="216ff-190">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-191">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-192">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-193">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-194">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-195">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-196">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-197">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-198">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-199">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-200">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-201">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-202">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-203">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-204">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-205">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-206">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-206">Required.</span></span> <span data-ttu-id="216ff-207">Liczba <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-208">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-209">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-210">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-211">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-212">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-213">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-214">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-215">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-216">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-217">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-218">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-219">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-220">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-221">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-222">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-223">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-224">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-225">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-226">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-227">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-228">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-229">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-230">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-230">Required.</span></span> <span data-ttu-id="216ff-231">Liczba <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-232">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-233">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-234">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-235">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-236">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-237">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-238">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-239">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-240">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-241">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-242">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-243">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-244">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-245">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-246">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-247">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-248">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-249">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-250">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-251">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-252">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-253">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-254">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-254">Required.</span></span> <span data-ttu-id="216ff-255">Liczba <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-256">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-257">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-258">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-259">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-260">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-261">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-262">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-263">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-264">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-265">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-266">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-267">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-268">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-269">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-270">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-271">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-272">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-273">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-274">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-275">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-276">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-277">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-278">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-278">Required.</span></span> <span data-ttu-id="216ff-279">Liczba <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="216ff-280">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" /> ,<see langword="Nothing" /> jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="216ff-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="216ff-281">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-282">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-283">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-284">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-285">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-286">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="216ff-287">Począwszy od `Number` Visual Basic 15,8, jeśli argument jest obiektem, którego typem środowiska uruchomieniowego jest `Double` lub `Single`, wydajność konwersji zmiennoprzecinkowej na liczbę całkowitą jest optymalizowany, `Fix` Jeśli przekażesz wartość zwracaną przez Metoda do którejkolwiek z [funkcji konwersji całkowitej](~/docs/visual-basic/language-reference/functions/conversion-functions.md)lub jeśli wartość zwracana przez `Fix` jest automatycznie konwertowana na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawiona na off.</span><span class="sxs-lookup"><span data-stu-id="216ff-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="216ff-288">Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite.</span><span class="sxs-lookup"><span data-stu-id="216ff-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="216ff-289">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="216ff-290">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-291">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-292">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-293">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-294">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-295">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-296">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-297">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-298">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-299">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-300">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-301">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-302">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-303">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-304">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-305">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-306">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-306">Required.</span></span> <span data-ttu-id="216ff-307">Liczba <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-308">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-309">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-310">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-311">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-312">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-313">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="216ff-314">Począwszy od Visual Basic `Single`15,8, wydajność konwersji do liczby całkowitej jest zoptymalizowana, jeśli przekazujesz wartość zwróconą `Fix` przez metodę do którejkolwiek z [funkcji](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Single` konwersji całkowitej lub jeśli zwrócona wartość według `Fix` jest automatycznie konwertowane na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawioną na wartość off.</span><span class="sxs-lookup"><span data-stu-id="216ff-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="216ff-315">Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite.</span><span class="sxs-lookup"><span data-stu-id="216ff-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="216ff-316">Poniższy przykład ilustruje taką zoptymalizowaną konwersję:</span><span class="sxs-lookup"><span data-stu-id="216ff-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="216ff-317">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-318">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-319">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-320">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-321">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-322">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-323">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-324">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-325">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-326">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-327">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-328">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-329">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-330">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-331">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-332">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="216ff-333">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-334">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="216ff-334">Required.</span></span> <span data-ttu-id="216ff-335">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-336">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-337">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-338">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-339">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="216ff-339">If `Number` is</span></span>|<span data-ttu-id="216ff-340">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="216ff-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-341">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-341">Empty</span></span>|<span data-ttu-id="216ff-342">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-342">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-343">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="216ff-343">Any numeric value</span></span>|<span data-ttu-id="216ff-344">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="216ff-345">Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z.</span><span class="sxs-lookup"><span data-stu-id="216ff-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="216ff-346">Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.</span><span class="sxs-lookup"><span data-stu-id="216ff-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-347">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-348"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-349"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-350">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="216ff-351">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</span><span class="sxs-lookup"><span data-stu-id="216ff-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-352">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="216ff-352">Required.</span></span> <span data-ttu-id="216ff-353">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-354">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-355">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-356">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-357">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="216ff-357">If `Number` is</span></span>|<span data-ttu-id="216ff-358">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="216ff-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-359">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-359">Empty</span></span>|<span data-ttu-id="216ff-360">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-360">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-361">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="216ff-361">Any numeric value</span></span>|<span data-ttu-id="216ff-362">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="216ff-363">Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z.</span><span class="sxs-lookup"><span data-stu-id="216ff-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="216ff-364">Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.</span><span class="sxs-lookup"><span data-stu-id="216ff-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-365">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-366"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-367"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-368">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="216ff-369">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</span><span class="sxs-lookup"><span data-stu-id="216ff-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-370">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-370">Required.</span></span> <span data-ttu-id="216ff-371">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-372">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-373">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-374">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-375">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="216ff-375">If `Number` is</span></span>|<span data-ttu-id="216ff-376">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="216ff-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-377">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-377">Empty</span></span>|<span data-ttu-id="216ff-378">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-378">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-379">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="216ff-379">Any numeric value</span></span>|<span data-ttu-id="216ff-380">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="216ff-381">Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z.</span><span class="sxs-lookup"><span data-stu-id="216ff-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="216ff-382">Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.</span><span class="sxs-lookup"><span data-stu-id="216ff-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-383">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-384"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-385"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-386">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="216ff-387">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</span><span class="sxs-lookup"><span data-stu-id="216ff-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-388">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="216ff-388">Required.</span></span> <span data-ttu-id="216ff-389">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-390">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-391">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-392">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-393">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="216ff-393">If `Number` is</span></span>|<span data-ttu-id="216ff-394">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="216ff-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-395">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-395">Empty</span></span>|<span data-ttu-id="216ff-396">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-396">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-397">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="216ff-397">Any numeric value</span></span>|<span data-ttu-id="216ff-398">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="216ff-399">Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z.</span><span class="sxs-lookup"><span data-stu-id="216ff-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="216ff-400">Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.</span><span class="sxs-lookup"><span data-stu-id="216ff-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-401">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-402"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-403"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-404">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="216ff-405">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</span><span class="sxs-lookup"><span data-stu-id="216ff-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-406">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-406">Required.</span></span> <span data-ttu-id="216ff-407">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-408">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-409">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-410">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-411">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="216ff-411">If `Number` is</span></span>|<span data-ttu-id="216ff-412">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="216ff-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-413">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-413">Empty</span></span>|<span data-ttu-id="216ff-414">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-414">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-415">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="216ff-415">Any numeric value</span></span>|<span data-ttu-id="216ff-416">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="216ff-417">Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z.</span><span class="sxs-lookup"><span data-stu-id="216ff-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="216ff-418">Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.</span><span class="sxs-lookup"><span data-stu-id="216ff-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-419">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-420"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-421"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-422">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="216ff-423">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</span><span class="sxs-lookup"><span data-stu-id="216ff-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-424">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-424">Required.</span></span> <span data-ttu-id="216ff-425">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-426">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-427">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-428">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-429">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="216ff-429">If `Number` is</span></span>|<span data-ttu-id="216ff-430">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="216ff-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-431">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-431">Empty</span></span>|<span data-ttu-id="216ff-432">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-432">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-433">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="216ff-433">Any numeric value</span></span>|<span data-ttu-id="216ff-434">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="216ff-435">Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z.</span><span class="sxs-lookup"><span data-stu-id="216ff-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="216ff-436">Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.</span><span class="sxs-lookup"><span data-stu-id="216ff-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-437">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-438"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-439"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-440">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="216ff-441">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</span><span class="sxs-lookup"><span data-stu-id="216ff-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-442">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-442">Required.</span></span> <span data-ttu-id="216ff-443">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-444">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-445">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-446">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-447">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="216ff-447">If `Number` is</span></span>|<span data-ttu-id="216ff-448">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="216ff-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-449">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-449">Empty</span></span>|<span data-ttu-id="216ff-450">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-450">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-451">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="216ff-451">Any numeric value</span></span>|<span data-ttu-id="216ff-452">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="216ff-453">Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z.</span><span class="sxs-lookup"><span data-stu-id="216ff-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="216ff-454">Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.</span><span class="sxs-lookup"><span data-stu-id="216ff-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-455">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-456"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-457"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-458">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="216ff-459">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</span><span class="sxs-lookup"><span data-stu-id="216ff-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-460">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="216ff-460">Required.</span></span> <span data-ttu-id="216ff-461">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-462">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-463">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-464">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-465">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="216ff-465">If `Number` is</span></span>|<span data-ttu-id="216ff-466">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="216ff-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-467">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-467">Empty</span></span>|<span data-ttu-id="216ff-468">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-468">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-469">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="216ff-469">Any numeric value</span></span>|<span data-ttu-id="216ff-470">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="216ff-471">Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z.</span><span class="sxs-lookup"><span data-stu-id="216ff-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="216ff-472">Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.</span><span class="sxs-lookup"><span data-stu-id="216ff-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-473">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-474"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-475"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-476">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="216ff-477">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</span><span class="sxs-lookup"><span data-stu-id="216ff-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-478">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-478">Required.</span></span> <span data-ttu-id="216ff-479">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-480">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-481">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-482">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-483">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="216ff-483">If `Number` is</span></span>|<span data-ttu-id="216ff-484">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="216ff-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-485">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-485">Empty</span></span>|<span data-ttu-id="216ff-486">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-486">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-487">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="216ff-487">Any numeric value</span></span>|<span data-ttu-id="216ff-488">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="216ff-489">Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z.</span><span class="sxs-lookup"><span data-stu-id="216ff-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="216ff-490">Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.</span><span class="sxs-lookup"><span data-stu-id="216ff-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-491">W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-492"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-493"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-494">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="216ff-495">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</span><span class="sxs-lookup"><span data-stu-id="216ff-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="216ff-496">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-497">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="216ff-497">Required.</span></span> <span data-ttu-id="216ff-498">Liczba <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-499">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-500">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-501">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-502">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-503">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-504">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="216ff-505">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-506">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-507">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-508">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-509">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-510">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-511">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-512">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-513">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-514">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-515">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-516">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-517">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-518">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-519">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-520">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-521">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-521">Required.</span></span> <span data-ttu-id="216ff-522">Liczba <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-523">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-524">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-525">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-526">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-527">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-528">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="216ff-529">Począwszy od Visual Basic 15,8, wydajność konwersji podwójnej do liczby całkowitej jest zoptymalizowana, jeśli przekazujesz wartość zwróconą przez `Int` metodę do którejkolwiek [funkcji konwersji całkowitej](~/docs/visual-basic/language-reference/functions/conversion-functions.md)lub jeśli wartość podwójna zwracana przez `Int` jest automatycznie konwertowany na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawioną na wartość off.</span><span class="sxs-lookup"><span data-stu-id="216ff-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="216ff-530">Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite.</span><span class="sxs-lookup"><span data-stu-id="216ff-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="216ff-531">Poniższy przykład ilustruje taką zoptymalizowaną konwersję:</span><span class="sxs-lookup"><span data-stu-id="216ff-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="216ff-532">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-533">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-534">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-535">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-536">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-537">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-538">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-539">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-540">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-541">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-542">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-543">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-544">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-545">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-546">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-547">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-548">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-548">Required.</span></span> <span data-ttu-id="216ff-549">Liczba <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-550">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-551">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-552">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-553">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-554">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-555">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-556">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-557">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-558">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-559">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-560">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-561">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-562">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-563">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-564">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-565">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-566">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-567">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-568">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-569">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-570">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-571">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-572">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="216ff-572">Required.</span></span> <span data-ttu-id="216ff-573">Liczba <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-574">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-575">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-576">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-577">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-578">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-579">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-580">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-581">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-582">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-583">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-584">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-585">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-586">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-587">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-588">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-589">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-590">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-591">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-592">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-593">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-594">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-595">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-596">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-596">Required.</span></span> <span data-ttu-id="216ff-597">Liczba <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-598">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-599">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-600">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-601">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-602">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-603">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-604">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-605">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-606">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-607">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-608">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-609">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-610">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-611">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-612">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-613">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-614">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-615">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-616">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-617">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-618">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-619">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-620">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-620">Required.</span></span> <span data-ttu-id="216ff-621">Liczba <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="216ff-622">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" /> ,<see langword="Nothing" /> jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="216ff-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="216ff-623">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-624">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-625">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-626">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-627">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-628">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="216ff-629">Począwszy od `Number` Visual Basic 15,8, jeśli argument jest obiektem, którego typem środowiska uruchomieniowego jest `Double` lub `Single`, wydajność konwersji zmiennoprzecinkowej na liczbę całkowitą jest optymalizowany, `Int` Jeśli przekażesz wartość zwracaną przez Metoda do którejkolwiek z [funkcji konwersji całkowitej](~/docs/visual-basic/language-reference/functions/conversion-functions.md)lub jeśli wartość zwracana przez `Int` jest automatycznie konwertowana na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawiona na off.</span><span class="sxs-lookup"><span data-stu-id="216ff-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="216ff-630">Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite.</span><span class="sxs-lookup"><span data-stu-id="216ff-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="216ff-631">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="216ff-632">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-633">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-634">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-635">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-636">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-637">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-638">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-639">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-640">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-641">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-642">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-643">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-644">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-645">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-646">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-647">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-648">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-648">Required.</span></span> <span data-ttu-id="216ff-649">Liczba <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-650">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-651">Część całkowita liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-652">Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`</span><span class="sxs-lookup"><span data-stu-id="216ff-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="216ff-653">Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="216ff-654">Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.</span><span class="sxs-lookup"><span data-stu-id="216ff-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="216ff-655">`Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="216ff-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="216ff-656">Począwszy od Visual Basic `Single`15,8, wydajność konwersji do liczby całkowitej jest zoptymalizowana, jeśli przekazujesz wartość zwróconą `Int` przez metodę do którejkolwiek z [funkcji](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Single` konwersji całkowitej lub jeśli zwrócona wartość według `Int` jest automatycznie konwertowane na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawioną na wartość off.</span><span class="sxs-lookup"><span data-stu-id="216ff-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="216ff-657">Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite.</span><span class="sxs-lookup"><span data-stu-id="216ff-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="216ff-658">Poniższy przykład ilustruje taką zoptymalizowaną konwersję:</span><span class="sxs-lookup"><span data-stu-id="216ff-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="216ff-659">Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="216ff-660">W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie.</span><span class="sxs-lookup"><span data-stu-id="216ff-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="216ff-661">`Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`</span><span class="sxs-lookup"><span data-stu-id="216ff-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="216ff-662">Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="216ff-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="216ff-663">`CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb.</span><span class="sxs-lookup"><span data-stu-id="216ff-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="216ff-664">Przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="216ff-665">Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="216ff-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="216ff-666">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="216ff-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="216ff-667">Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="216ff-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-668">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-669">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-670">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="216ff-671">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="216ff-672">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="216ff-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="216ff-673">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="216ff-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-674">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="216ff-675">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-676">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-676">Required.</span></span> <span data-ttu-id="216ff-677">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-678">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-679">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-680">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-681">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="216ff-681">If Number is</span></span>|<span data-ttu-id="216ff-682">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="216ff-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-683">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-683">Empty</span></span>|<span data-ttu-id="216ff-684">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-684">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-685">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="216ff-685">Any other number</span></span>|<span data-ttu-id="216ff-686">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="216ff-687">Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z.</span><span class="sxs-lookup"><span data-stu-id="216ff-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="216ff-688">Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.</span><span class="sxs-lookup"><span data-stu-id="216ff-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-689">W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-690"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-691"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-692">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-693">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-694">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-694">Required.</span></span> <span data-ttu-id="216ff-695">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-696">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-697">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-698">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-699">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="216ff-699">If Number is</span></span>|<span data-ttu-id="216ff-700">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="216ff-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-701">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-701">Empty</span></span>|<span data-ttu-id="216ff-702">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-702">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-703">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="216ff-703">Any other number</span></span>|<span data-ttu-id="216ff-704">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="216ff-705">Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z.</span><span class="sxs-lookup"><span data-stu-id="216ff-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="216ff-706">Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.</span><span class="sxs-lookup"><span data-stu-id="216ff-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-707">W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-708"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-709"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-710">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-711">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-712">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-712">Required.</span></span> <span data-ttu-id="216ff-713">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-714">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-715">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-716">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-717">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="216ff-717">If Number is</span></span>|<span data-ttu-id="216ff-718">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="216ff-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-719">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-719">Empty</span></span>|<span data-ttu-id="216ff-720">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-720">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-721">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="216ff-721">Any other number</span></span>|<span data-ttu-id="216ff-722">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="216ff-723">Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z.</span><span class="sxs-lookup"><span data-stu-id="216ff-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="216ff-724">Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.</span><span class="sxs-lookup"><span data-stu-id="216ff-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-725">W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-726"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-727"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-728">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-729">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-730">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-730">Required.</span></span> <span data-ttu-id="216ff-731">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-732">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-733">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-734">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-735">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="216ff-735">If Number is</span></span>|<span data-ttu-id="216ff-736">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="216ff-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-737">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-737">Empty</span></span>|<span data-ttu-id="216ff-738">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-738">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-739">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="216ff-739">Any other number</span></span>|<span data-ttu-id="216ff-740">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="216ff-741">Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z.</span><span class="sxs-lookup"><span data-stu-id="216ff-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="216ff-742">Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.</span><span class="sxs-lookup"><span data-stu-id="216ff-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-743">W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-744"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-745"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-746">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-747">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-748">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-748">Required.</span></span> <span data-ttu-id="216ff-749">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-750">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-751">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-752">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-753">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="216ff-753">If Number is</span></span>|<span data-ttu-id="216ff-754">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="216ff-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-755">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-755">Empty</span></span>|<span data-ttu-id="216ff-756">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-756">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-757">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="216ff-757">Any other number</span></span>|<span data-ttu-id="216ff-758">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="216ff-759">Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z.</span><span class="sxs-lookup"><span data-stu-id="216ff-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="216ff-760">Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.</span><span class="sxs-lookup"><span data-stu-id="216ff-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-761">W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-762"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-763"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-764">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-765">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-766">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-766">Required.</span></span> <span data-ttu-id="216ff-767">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-768">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-769">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-770">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-771">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="216ff-771">If Number is</span></span>|<span data-ttu-id="216ff-772">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="216ff-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-773">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-773">Empty</span></span>|<span data-ttu-id="216ff-774">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-774">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-775">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="216ff-775">Any other number</span></span>|<span data-ttu-id="216ff-776">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="216ff-777">Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z.</span><span class="sxs-lookup"><span data-stu-id="216ff-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="216ff-778">Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.</span><span class="sxs-lookup"><span data-stu-id="216ff-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-779">W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-780"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-781"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-782">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-783">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-784">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-784">Required.</span></span> <span data-ttu-id="216ff-785">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-786">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-787">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-788">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-789">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="216ff-789">If Number is</span></span>|<span data-ttu-id="216ff-790">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="216ff-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-791">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-791">Empty</span></span>|<span data-ttu-id="216ff-792">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-792">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-793">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="216ff-793">Any other number</span></span>|<span data-ttu-id="216ff-794">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="216ff-795">Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z.</span><span class="sxs-lookup"><span data-stu-id="216ff-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="216ff-796">Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.</span><span class="sxs-lookup"><span data-stu-id="216ff-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-797">W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-798"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-799"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-800">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-801">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-802">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-802">Required.</span></span> <span data-ttu-id="216ff-803">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-804">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-805">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-806">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-807">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="216ff-807">If Number is</span></span>|<span data-ttu-id="216ff-808">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="216ff-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-809">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-809">Empty</span></span>|<span data-ttu-id="216ff-810">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-810">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-811">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="216ff-811">Any other number</span></span>|<span data-ttu-id="216ff-812">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="216ff-813">Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z.</span><span class="sxs-lookup"><span data-stu-id="216ff-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="216ff-814">Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.</span><span class="sxs-lookup"><span data-stu-id="216ff-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-815">W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-816"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-817"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-818">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-819">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-820">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="216ff-820">Required.</span></span> <span data-ttu-id="216ff-821">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="216ff-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="216ff-822">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-823">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-824">Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.</span><span class="sxs-lookup"><span data-stu-id="216ff-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="216ff-825">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="216ff-825">If Number is</span></span>|<span data-ttu-id="216ff-826">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="216ff-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="216ff-827">Pusty</span><span class="sxs-lookup"><span data-stu-id="216ff-827">Empty</span></span>|<span data-ttu-id="216ff-828">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="216ff-828">Zero (0)</span></span>|  
|<span data-ttu-id="216ff-829">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="216ff-829">Any other number</span></span>|<span data-ttu-id="216ff-830">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="216ff-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="216ff-831">Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z.</span><span class="sxs-lookup"><span data-stu-id="216ff-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="216ff-832">Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.</span><span class="sxs-lookup"><span data-stu-id="216ff-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-833">W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-834"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-835"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-836">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-837">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="216ff-838">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-838">Required.</span></span> <span data-ttu-id="216ff-839"><see langword="Object" /> Zawiera dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="216ff-840"><see langword="String" /> Zwraca reprezentację liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="216ff-841"><see langword="String" /> Reprezentacja liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-842">Gdy liczby są konwertowane na ciągi, początkowe miejsce jest zawsze zarezerwowane dla znaku `Number`.</span><span class="sxs-lookup"><span data-stu-id="216ff-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="216ff-843">Jeśli `Number` jest dodatnia, zwrócony ciąg zawiera spację, a znak plus jest implikowany.</span><span class="sxs-lookup"><span data-stu-id="216ff-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="216ff-844">Liczba ujemna będzie zawierać znak minus (-) i brak wiodącego miejsca.</span><span class="sxs-lookup"><span data-stu-id="216ff-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="216ff-845">`Format` Funkcja służy do konwertowania wartości liczbowych, które mają być sformatowane jako daty, godziny lub waluty lub w innych formatach zdefiniowanych przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="216ff-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="216ff-846">W przeciwieństwie `Str` do funkcji `Format` , funkcja nie zawiera `Number`spacji wiodącej dla znaku.</span><span class="sxs-lookup"><span data-stu-id="216ff-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="216ff-847">Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny. `Str`</span><span class="sxs-lookup"><span data-stu-id="216ff-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="216ff-848">Jeśli są używane różne Separatory dziesiętne (na przykład w aplikacjach międzynarodowych), użyj `CStr` funkcji lub `Format` , aby skonwertować liczbę na ciąg.</span><span class="sxs-lookup"><span data-stu-id="216ff-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="216ff-849">Aby uzyskać ciąg reprezentujący liczbę w określonej kulturze, użyj `ToString(IFormatProvider)` metody Number.</span><span class="sxs-lookup"><span data-stu-id="216ff-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="216ff-850">Na przykład, użyj <xref:System.Double.ToString%2A> podczas konwertowania wartości typu `Double` na ciąg.</span><span class="sxs-lookup"><span data-stu-id="216ff-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="216ff-851">W tym przykładzie `Str` funkcja `String` zwraca reprezentację liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="216ff-852">Gdy liczba dodatnia jest konwertowana na ciąg, początkowe miejsce jest zawsze zarezerwowane dla jego znaku.</span><span class="sxs-lookup"><span data-stu-id="216ff-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="216ff-853"><paramref name="Number" />nie została określona.</span><span class="sxs-lookup"><span data-stu-id="216ff-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="216ff-854"><paramref name="Number" />nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="216ff-855">Konwersja — podsumowanie</span><span class="sxs-lookup"><span data-stu-id="216ff-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-856">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="216ff-857">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="216ff-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="216ff-858">Wymagany.</span><span class="sxs-lookup"><span data-stu-id="216ff-858">Required.</span></span> <span data-ttu-id="216ff-859">Dowolne prawidłowe <see langword="String" /> wyrażenie, <see langword="Object" /> zmienna lub <see langword="Char" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="216ff-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="216ff-860">Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, jego wartość musi <see cref="T:System.ArgumentException" /> być możliwa do przekonwertowania na <see langword="String" /> lub wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="216ff-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="216ff-861">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="216ff-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="216ff-862">Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="216ff-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-863">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, którego nie może rozpoznać jako części liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="216ff-864">Symbole i znaki, które często są uważane za części wartości liczbowych, takich jak znaki dolara i przecinki, nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="216ff-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="216ff-865">Jednak funkcja rozpoznaje prefiksy `&O` podstawy (w przypadku wartości ósemkowych) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="216ff-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="216ff-866">Wartości puste, tabulatory i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="216ff-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="216ff-867">Następujące wywołanie zwraca wartość 1615198.</span><span class="sxs-lookup"><span data-stu-id="216ff-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="216ff-868">Następujące wywołanie zwraca wartość dziesiętną-1.</span><span class="sxs-lookup"><span data-stu-id="216ff-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="216ff-869">Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny. `Val`</span><span class="sxs-lookup"><span data-stu-id="216ff-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="216ff-870">Gdy używane są różne Separatory dziesiętne, jak w przypadku aplikacji międzynarodowych `CDbl` , `CInt` zamiast tego należy użyć lub, aby przekonwertować ciąg na liczbę.</span><span class="sxs-lookup"><span data-stu-id="216ff-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="216ff-871">Aby przekonwertować ciąg reprezentujący liczbę w określonej kulturze na wartość liczbową, użyj `Parse(String, IFormatProvider)` metody typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="216ff-872">Na przykład, użyj <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu `Double`na.</span><span class="sxs-lookup"><span data-stu-id="216ff-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="216ff-873"><xref:System.InvalidCastException> Wyjątek może być zgłaszany w odpowiedzi na niektóre rzadko stosowane formaty liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="216ff-874">Na przykład poniższy kod wywołuje ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="216ff-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="216ff-875">Konflikt między liczbą sformatowaną jako `Double` `Integer` a i znakami i `Long` zostanie przechwycony przez kompilator, jeśli nie był zawarty w ciągu.</span><span class="sxs-lookup"><span data-stu-id="216ff-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="216ff-876">Poniższy przykład używa funkcji, `Val` aby zwrócić numery zawarte w poszczególnych ciągach.</span><span class="sxs-lookup"><span data-stu-id="216ff-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="216ff-877">`Val`kończy konwersję przy pierwszym znaku, którego nie można interpretować jako cyfry numeryczne, modyfikator numeryczny, interpunkcja numeryczna lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="216ff-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="216ff-878"><paramref name="InputStr" />jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="216ff-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-879"><paramref name="Expression" />jest wyrażeniem <see langword="String" />typu,które nie jest konwertowane na. <see langword="Object" /></span><span class="sxs-lookup"><span data-stu-id="216ff-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-880">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="216ff-881">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="216ff-881">Required.</span></span> <span data-ttu-id="216ff-882">Dowolne prawidłowe <see langword="String" /> wyrażenie, <see langword="Object" /> zmienna lub <see langword="Char" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="216ff-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="216ff-883">Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, jego wartość musi <see cref="T:System.ArgumentException" /> być możliwa do przekonwertowania na <see langword="String" /> lub wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="216ff-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="216ff-884">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="216ff-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="216ff-885">Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="216ff-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-886">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, którego nie może rozpoznać jako części liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="216ff-887">Symbole i znaki, które często są uważane za części wartości liczbowych, takich jak znaki dolara i przecinki, nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="216ff-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="216ff-888">Jednak funkcja rozpoznaje prefiksy `&O` podstawy (w przypadku wartości ósemkowych) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="216ff-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="216ff-889">Wartości puste, tabulatory i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="216ff-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="216ff-890">Następujące wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="216ff-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="216ff-891">Następujące wywołanie zwraca wartość dziesiętną-1.</span><span class="sxs-lookup"><span data-stu-id="216ff-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="216ff-892">Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny. `Val`</span><span class="sxs-lookup"><span data-stu-id="216ff-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="216ff-893">Gdy używane są inne Separatory dziesiętne, jak w aplikacjach międzynarodowych, `CDbl` zamiast `CInt` konwertować ciąg na liczbę, należy użyć lub.</span><span class="sxs-lookup"><span data-stu-id="216ff-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="216ff-894">Aby przekonwertować ciąg reprezentujący liczbę w określonej kulturze na wartość liczbową, użyj `Parse(String, IFormatProvider)` metody typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="216ff-895">Na przykład, użyj <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu `Double`na.</span><span class="sxs-lookup"><span data-stu-id="216ff-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="216ff-896"><xref:System.InvalidCastException> Wyjątek może być zgłaszany w odpowiedzi na niektóre rzadko stosowane formaty liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="216ff-897">Na przykład poniższy kod wywołuje ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="216ff-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="216ff-898">Konflikt między liczbą sformatowaną jako `Double` `Integer` a i znakami i `Long` zostanie przechwycony przez kompilator, jeśli konflikt nie został zawarty w ciągach.</span><span class="sxs-lookup"><span data-stu-id="216ff-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="216ff-899">Poniższy przykład używa funkcji, `Val` aby zwrócić numery zawarte w poszczególnych ciągach.</span><span class="sxs-lookup"><span data-stu-id="216ff-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="216ff-900">`Val`kończy konwersję przy pierwszym znaku, którego nie można interpretować jako cyfry numeryczne, modyfikator numeryczny, interpunkcja numeryczna lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="216ff-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="216ff-901"><paramref name="InputStr" />jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="216ff-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-902"><paramref name="Expression" />jest wyrażeniem <see langword="String" />typu,które nie jest konwertowane na. <see langword="Object" /></span><span class="sxs-lookup"><span data-stu-id="216ff-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-903">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="216ff-904">Wymagane.</span><span class="sxs-lookup"><span data-stu-id="216ff-904">Required.</span></span> <span data-ttu-id="216ff-905">Dowolne prawidłowe <see langword="String" /> wyrażenie, <see langword="Object" /> zmienna lub <see langword="Char" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="216ff-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="216ff-906">Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, jego wartość musi <see cref="T:System.ArgumentException" /> być możliwa do przekonwertowania na <see langword="String" /> lub wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="216ff-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="216ff-907">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="216ff-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="216ff-908">Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="216ff-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="216ff-909">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, którego nie może rozpoznać jako części liczby.</span><span class="sxs-lookup"><span data-stu-id="216ff-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="216ff-910">Symbole i znaki, które często są uważane za części wartości liczbowych, takich jak znaki dolara i przecinki, nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="216ff-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="216ff-911">Jednak funkcja rozpoznaje prefiksy `&O` podstawy (w przypadku wartości ósemkowych) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="216ff-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="216ff-912">Wartości puste, tabulatory i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="216ff-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="216ff-913">Następujące wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="216ff-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="216ff-914">Następujące wywołanie zwraca wartość dziesiętną-1.</span><span class="sxs-lookup"><span data-stu-id="216ff-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="216ff-915">Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny. `Val`</span><span class="sxs-lookup"><span data-stu-id="216ff-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="216ff-916">Gdy używane są inne Separatory dziesiętne, jak w aplikacjach międzynarodowych, `CDbl` zamiast `CInt` konwertować ciąg na liczbę, należy użyć lub.</span><span class="sxs-lookup"><span data-stu-id="216ff-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="216ff-917">Aby przekonwertować ciąg reprezentujący liczbę w określonej kulturze na wartość liczbową, użyj `Parse(String, IFormatProvider)` metody typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="216ff-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="216ff-918">Na przykład, użyj <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu `Double`na.</span><span class="sxs-lookup"><span data-stu-id="216ff-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="216ff-919"><xref:System.InvalidCastException> Wyjątek może być uruchamiany w odpowiedzi na niektóre rzadko stosowane formaty liczbowe.</span><span class="sxs-lookup"><span data-stu-id="216ff-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="216ff-920">Na przykład poniższy kod wywołuje ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="216ff-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="216ff-921">Konflikt między liczbą sformatowaną jako `Double` `Integer` a i znakami i `Long` zostanie przechwycony przez kompilator, jeśli konflikt nie został zawarty w ciągach.</span><span class="sxs-lookup"><span data-stu-id="216ff-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="216ff-922">Poniższy przykład używa funkcji, `Val` aby zwrócić numery zawarte w poszczególnych ciągach.</span><span class="sxs-lookup"><span data-stu-id="216ff-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="216ff-923">`Val`kończy konwersję przy pierwszym znaku, którego nie można interpretować jako cyfry numeryczne, modyfikator numeryczny, interpunkcja numeryczna lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="216ff-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="216ff-924"><paramref name="InputStr" />jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="216ff-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="216ff-925"><paramref name="Expression" />jest wyrażeniem <see langword="String" />typu,które nie jest konwertowane na. <see langword="Object" /></span><span class="sxs-lookup"><span data-stu-id="216ff-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="216ff-926">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="216ff-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
