<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc0120340cfb097270b9032d2692b053057366ea" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52242786" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1c80b-101">
        <see langword="Conversion" /> Moduł zawiera procedur w celu wykonywania różnych operacji konwersji.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1c80b-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-102">Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które Konwertuj liczby dziesiętne na inne podstawy liczb do ciągów, ciągów na liczby i danych jednego typu na inny.</span><span class="sxs-lookup"><span data-stu-id="1c80b-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-103">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="1c80b-104">Konwersja — Podsumowanie</span>
      <span class="sxs-lookup">
        <span data-stu-id="1c80b-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="1c80b-105">Słowa kluczowe (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="1c80b-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="1c80b-106">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="1c80b-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="1c80b-107">Obiekt do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="1c80b-108">Typ, do którego należy przekonwertować obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-109">Konwertuje obiekt określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-110">Obiekt, którego typem w czasie wykonywania jest typ żądanego elementu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-111">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` typu określonego przez parametr `TargetType` parametru.</span><span class="sxs-lookup"><span data-stu-id="1c80b-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="1c80b-112">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.</span><span class="sxs-lookup"><span data-stu-id="1c80b-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="1c80b-113">`CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="1c80b-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="1c80b-114">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="1c80b-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="1c80b-115">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji.</span><span class="sxs-lookup"><span data-stu-id="1c80b-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="1c80b-116">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-117">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="1c80b-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="1c80b-118">Praca z obiektami dynamicznymi (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="1c80b-119">Wskazówki: Tworzenie obiektów dynamicznych i posługiwanie się nimi (C# i Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="1c80b-120">Typ, do którego należy przekonwertować obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="1c80b-121">Obiekt do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-122">Konwertuje obiekt określonego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-123">Obiekt, który statycznie wpisanych w formie żądanego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-124">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` parametru na typ określony przez typ parametru ogólnego.</span><span class="sxs-lookup"><span data-stu-id="1c80b-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="1c80b-125">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.</span><span class="sxs-lookup"><span data-stu-id="1c80b-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="1c80b-126">`CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="1c80b-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="1c80b-127">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="1c80b-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="1c80b-128">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji.</span><span class="sxs-lookup"><span data-stu-id="1c80b-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="1c80b-129">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-130">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="1c80b-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="1c80b-131">Praca z obiektami dynamicznymi (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="1c80b-132">Wskazówki: Tworzenie obiektów dynamicznych i posługiwanie się nimi (C# i Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1c80b-133">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1c80b-134">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-135">Komunikat o błędzie, odpowiadający ostatni błąd czasu wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-136">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="1c80b-137">Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="1c80b-138">Jeśli nie błąd czasu wykonywania `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="1c80b-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="1c80b-139">W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="1c80b-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-140">Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-141">
            <paramref name="ErrorNumber" /> jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="1c80b-142">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-142">Optional.</span>
          </span>
          <span data-ttu-id="1c80b-143">Dowolna liczba błędów prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-144">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-145">Komunikat o błędzie, który odpowiada numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-146">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="1c80b-147">Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="1c80b-148">Jeśli `ErrorNumber` jest prawidłowym numerem błędu, ale nie jest zdefiniowany, `ErrorToString` zwraca ciąg `"Application-defined or object-defined error."` Jeśli `ErrorNumber` jest nieprawidłowy, wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="1c80b-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="1c80b-149">Jeśli `ErrorNumber` zostanie pominięty, wiadomości, odpowiadający najnowszej zwracany jest błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="1c80b-150">W przypadku braku błędów czasu wykonywania lub `ErrorNumber` ma wartość 0, `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="1c80b-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="1c80b-151">W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="1c80b-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-152">Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-153">
            <paramref name="ErrorNumber" /> jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1c80b-154">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-155">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-155">Required.</span>
          </span>
          <span data-ttu-id="1c80b-156">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-157">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-157">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-158">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-159">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-160">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-161">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-162">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-163">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-164">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-165">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-166">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-167">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-168">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-169">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-170">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-171">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-172">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-173">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-174">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-175">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-176">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-177">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-178">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-179">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-180">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-180">Required.</span>
          </span>
          <span data-ttu-id="1c80b-181">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-182">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-182">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-183">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-184">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-185">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-186">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-187">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-188">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-189">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-190">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-191">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-192">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-193">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-194">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-195">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-196">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-197">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-198">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-199">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-200">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-201">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-202">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-203">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-204">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-205">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-205">Required.</span>
          </span>
          <span data-ttu-id="1c80b-206">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-207">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-207">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-208">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-209">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-210">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-211">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-212">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-213">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-214">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-215">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-216">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-217">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-218">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-219">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-220">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-221">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-222">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-223">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-224">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-225">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-226">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-227">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-228">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-229">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-230">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-230">Required.</span>
          </span>
          <span data-ttu-id="1c80b-231">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-232">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-232">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-233">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-234">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-235">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-236">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-237">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-238">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-239">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-240">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-241">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-242">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-243">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-244">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-245">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-246">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-247">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-248">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-249">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-250">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-251">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-252">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-253">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-254">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-255">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-255">Required.</span>
          </span>
          <span data-ttu-id="1c80b-256">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-257">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-257">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-258">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-259">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-260">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-261">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-262">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-263">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-264">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-265">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-266">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-267">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-268">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-269">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-270">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-271">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-272">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-273">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-274">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-275">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-276">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-277">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-278">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-279">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-280">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-280">Required.</span>
          </span>
          <span data-ttu-id="1c80b-281">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-282">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-282">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-283">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-284">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-285">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-286">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-287">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-288">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-289">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-290">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-291">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-292">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-293">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-294">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-295">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-296">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-297">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-298">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-299">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-300">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-301">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-302">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-303">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-304">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-305">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-305">Required.</span>
          </span>
          <span data-ttu-id="1c80b-306">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-307">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-307">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-308">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-309">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-310">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-311">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-312">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-313">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-314">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-315">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-316">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-317">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-318">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-319">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-320">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-321">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-322">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-323">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-324">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-325">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-326">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-327">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-328">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-329">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1c80b-330">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-331">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-331">Required.</span>
          </span>
          <span data-ttu-id="1c80b-332">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-333">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-334">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-335">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-336">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-336">If `Number` is</span></span>|<span data-ttu-id="1c80b-337">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="1c80b-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-338">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-338">Empty</span></span>|<span data-ttu-id="1c80b-339">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-339">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-340">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="1c80b-340">Any numeric value</span></span>|<span data-ttu-id="1c80b-341">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1c80b-342">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1c80b-343">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="1c80b-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-344">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-345">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-346">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-347">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="1c80b-348">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-349">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-349">Required.</span>
          </span>
          <span data-ttu-id="1c80b-350">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-351">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-352">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-353">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-354">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-354">If `Number` is</span></span>|<span data-ttu-id="1c80b-355">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="1c80b-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-356">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-356">Empty</span></span>|<span data-ttu-id="1c80b-357">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-357">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-358">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="1c80b-358">Any numeric value</span></span>|<span data-ttu-id="1c80b-359">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1c80b-360">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1c80b-361">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="1c80b-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-362">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-363">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-364">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-365">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="1c80b-366">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-367">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-367">Required.</span>
          </span>
          <span data-ttu-id="1c80b-368">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-369">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-370">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-371">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-372">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-372">If `Number` is</span></span>|<span data-ttu-id="1c80b-373">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="1c80b-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-374">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-374">Empty</span></span>|<span data-ttu-id="1c80b-375">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-375">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-376">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="1c80b-376">Any numeric value</span></span>|<span data-ttu-id="1c80b-377">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1c80b-378">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1c80b-379">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="1c80b-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-380">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-381">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-382">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-383">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="1c80b-384">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-385">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-385">Required.</span>
          </span>
          <span data-ttu-id="1c80b-386">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-387">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-388">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-389">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-390">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-390">If `Number` is</span></span>|<span data-ttu-id="1c80b-391">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="1c80b-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-392">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-392">Empty</span></span>|<span data-ttu-id="1c80b-393">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-393">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-394">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="1c80b-394">Any numeric value</span></span>|<span data-ttu-id="1c80b-395">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1c80b-396">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1c80b-397">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="1c80b-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-398">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-399">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-400">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-401">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="1c80b-402">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-403">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-403">Required.</span>
          </span>
          <span data-ttu-id="1c80b-404">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-405">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-406">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-407">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-408">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-408">If `Number` is</span></span>|<span data-ttu-id="1c80b-409">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="1c80b-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-410">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-410">Empty</span></span>|<span data-ttu-id="1c80b-411">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-411">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-412">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="1c80b-412">Any numeric value</span></span>|<span data-ttu-id="1c80b-413">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1c80b-414">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1c80b-415">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="1c80b-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-416">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-417">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-418">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-419">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="1c80b-420">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-421">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-421">Required.</span>
          </span>
          <span data-ttu-id="1c80b-422">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-423">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-424">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-425">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-426">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-426">If `Number` is</span></span>|<span data-ttu-id="1c80b-427">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="1c80b-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-428">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-428">Empty</span></span>|<span data-ttu-id="1c80b-429">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-429">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-430">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="1c80b-430">Any numeric value</span></span>|<span data-ttu-id="1c80b-431">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1c80b-432">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1c80b-433">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="1c80b-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-434">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-435">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-436">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-437">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="1c80b-438">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-439">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-439">Required.</span>
          </span>
          <span data-ttu-id="1c80b-440">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-441">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-442">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-443">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-444">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-444">If `Number` is</span></span>|<span data-ttu-id="1c80b-445">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="1c80b-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-446">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-446">Empty</span></span>|<span data-ttu-id="1c80b-447">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-447">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-448">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="1c80b-448">Any numeric value</span></span>|<span data-ttu-id="1c80b-449">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1c80b-450">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1c80b-451">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="1c80b-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-452">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-453">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-454">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-455">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="1c80b-456">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-457">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-457">Required.</span>
          </span>
          <span data-ttu-id="1c80b-458">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-459">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-460">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-461">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-462">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-462">If `Number` is</span></span>|<span data-ttu-id="1c80b-463">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="1c80b-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-464">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-464">Empty</span></span>|<span data-ttu-id="1c80b-465">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-465">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-466">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="1c80b-466">Any numeric value</span></span>|<span data-ttu-id="1c80b-467">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1c80b-468">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1c80b-469">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="1c80b-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-470">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-471">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-472">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-473">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="1c80b-474">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-475">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-475">Required.</span>
          </span>
          <span data-ttu-id="1c80b-476">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-477">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-478">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-479">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-480">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-480">If `Number` is</span></span>|<span data-ttu-id="1c80b-481">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="1c80b-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-482">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-482">Empty</span></span>|<span data-ttu-id="1c80b-483">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-483">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-484">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="1c80b-484">Any numeric value</span></span>|<span data-ttu-id="1c80b-485">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1c80b-486">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1c80b-487">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="1c80b-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-488">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-489">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-490">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-491">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="1c80b-492">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1c80b-493">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-494">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-494">Required.</span>
          </span>
          <span data-ttu-id="1c80b-495">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-496">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-496">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-497">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-498">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-499">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-500">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-501">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-502">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-503">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-504">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-505">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-506">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-507">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-508">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-509">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-510">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-511">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-512">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-513">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-514">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-515">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-516">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-517">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-518">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-519">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-519">Required.</span>
          </span>
          <span data-ttu-id="1c80b-520">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-521">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-521">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-522">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-523">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-524">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-525">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-526">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-527">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-528">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-529">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-530">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-531">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-532">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-533">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-534">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-535">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-536">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-537">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-538">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-539">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-540">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-541">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-542">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-543">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-544">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-544">Required.</span>
          </span>
          <span data-ttu-id="1c80b-545">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-546">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-546">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-547">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-548">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-549">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-550">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-551">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-552">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-553">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-554">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-555">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-556">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-557">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-558">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-559">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-560">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-561">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-562">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-563">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-564">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-565">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-566">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-567">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-568">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-569">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-569">Required.</span>
          </span>
          <span data-ttu-id="1c80b-570">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-571">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-571">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-572">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-573">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-574">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-575">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-576">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-577">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-578">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-579">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-580">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-581">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-582">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-583">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-584">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-585">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-586">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-587">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-588">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-589">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-590">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-591">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-592">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-593">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-594">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-594">Required.</span>
          </span>
          <span data-ttu-id="1c80b-595">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-596">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-596">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-597">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-598">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-599">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-600">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-601">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-602">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-603">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-604">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-605">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-606">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-607">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-608">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-609">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-610">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-611">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-612">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-613">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-614">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-615">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-616">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-617">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-618">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-619">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-619">Required.</span>
          </span>
          <span data-ttu-id="1c80b-620">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-621">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-621">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-622">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-623">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-624">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-625">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-626">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-627">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-628">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-629">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-630">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-631">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-632">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-633">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-634">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-635">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-636">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-637">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-638">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-639">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-640">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-641">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-642">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-643">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-644">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-644">Required.</span>
          </span>
          <span data-ttu-id="1c80b-645">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1c80b-646">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-646">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-647">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-648">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-649">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="1c80b-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1c80b-650">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1c80b-651">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1c80b-652">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1c80b-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-653">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1c80b-654">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="1c80b-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1c80b-655">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1c80b-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1c80b-656">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1c80b-657">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1c80b-658">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1c80b-659">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="1c80b-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1c80b-660">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="1c80b-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1c80b-661">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1c80b-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-662">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-663">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-664">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="1c80b-665">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="1c80b-666">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="1c80b-667">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-668">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1c80b-669">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-670">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-670">Required.</span>
          </span>
          <span data-ttu-id="1c80b-671">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-672">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-673">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-674">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-675">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-675">If Number is</span></span>|<span data-ttu-id="1c80b-676">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="1c80b-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-677">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-677">Empty</span></span>|<span data-ttu-id="1c80b-678">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-678">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-679">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="1c80b-679">Any other number</span></span>|<span data-ttu-id="1c80b-680">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1c80b-681">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1c80b-682">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-683">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-684">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-685">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-686">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-687">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-688">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-688">Required.</span>
          </span>
          <span data-ttu-id="1c80b-689">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-690">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-691">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-692">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-693">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-693">If Number is</span></span>|<span data-ttu-id="1c80b-694">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="1c80b-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-695">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-695">Empty</span></span>|<span data-ttu-id="1c80b-696">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-696">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-697">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="1c80b-697">Any other number</span></span>|<span data-ttu-id="1c80b-698">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1c80b-699">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1c80b-700">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-701">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-702">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-703">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-704">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-705">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-706">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-706">Required.</span>
          </span>
          <span data-ttu-id="1c80b-707">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-708">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-709">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-710">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-711">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-711">If Number is</span></span>|<span data-ttu-id="1c80b-712">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="1c80b-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-713">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-713">Empty</span></span>|<span data-ttu-id="1c80b-714">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-714">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-715">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="1c80b-715">Any other number</span></span>|<span data-ttu-id="1c80b-716">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1c80b-717">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1c80b-718">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-719">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-720">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-721">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-722">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-723">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-724">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-724">Required.</span>
          </span>
          <span data-ttu-id="1c80b-725">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-726">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-727">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-728">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-729">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-729">If Number is</span></span>|<span data-ttu-id="1c80b-730">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="1c80b-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-731">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-731">Empty</span></span>|<span data-ttu-id="1c80b-732">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-732">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-733">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="1c80b-733">Any other number</span></span>|<span data-ttu-id="1c80b-734">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1c80b-735">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1c80b-736">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-737">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-738">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-739">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-740">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-741">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-742">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-742">Required.</span>
          </span>
          <span data-ttu-id="1c80b-743">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-744">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-745">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-746">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-747">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-747">If Number is</span></span>|<span data-ttu-id="1c80b-748">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="1c80b-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-749">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-749">Empty</span></span>|<span data-ttu-id="1c80b-750">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-750">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-751">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="1c80b-751">Any other number</span></span>|<span data-ttu-id="1c80b-752">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1c80b-753">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1c80b-754">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-755">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-756">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-757">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-758">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-759">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-760">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-760">Required.</span>
          </span>
          <span data-ttu-id="1c80b-761">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-762">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-763">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-764">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-765">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-765">If Number is</span></span>|<span data-ttu-id="1c80b-766">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="1c80b-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-767">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-767">Empty</span></span>|<span data-ttu-id="1c80b-768">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-768">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-769">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="1c80b-769">Any other number</span></span>|<span data-ttu-id="1c80b-770">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1c80b-771">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1c80b-772">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-773">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-774">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-775">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-776">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-777">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-778">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-778">Required.</span>
          </span>
          <span data-ttu-id="1c80b-779">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-780">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-781">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-782">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-783">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-783">If Number is</span></span>|<span data-ttu-id="1c80b-784">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="1c80b-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-785">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-785">Empty</span></span>|<span data-ttu-id="1c80b-786">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-786">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-787">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="1c80b-787">Any other number</span></span>|<span data-ttu-id="1c80b-788">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1c80b-789">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1c80b-790">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-791">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-792">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-793">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-794">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-795">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-796">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-796">Required.</span>
          </span>
          <span data-ttu-id="1c80b-797">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-798">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-799">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-800">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-801">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-801">If Number is</span></span>|<span data-ttu-id="1c80b-802">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="1c80b-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-803">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-803">Empty</span></span>|<span data-ttu-id="1c80b-804">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-804">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-805">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="1c80b-805">Any other number</span></span>|<span data-ttu-id="1c80b-806">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1c80b-807">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1c80b-808">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-809">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-810">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-811">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-812">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-813">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-814">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-814">Required.</span>
          </span>
          <span data-ttu-id="1c80b-815">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-816">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-817">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-818">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1c80b-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1c80b-819">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="1c80b-819">If Number is</span></span>|<span data-ttu-id="1c80b-820">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="1c80b-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1c80b-821">Pusty</span><span class="sxs-lookup"><span data-stu-id="1c80b-821">Empty</span></span>|<span data-ttu-id="1c80b-822">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="1c80b-822">Zero (0)</span></span>|  
|<span data-ttu-id="1c80b-823">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="1c80b-823">Any other number</span></span>|<span data-ttu-id="1c80b-824">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="1c80b-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1c80b-825">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1c80b-826">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="1c80b-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-827">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-828">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-829">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-830">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-831">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1c80b-832">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-832">Required.</span>
          </span>
          <span data-ttu-id="1c80b-833">
            <see langword="Object" /> Zawierających dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-834">Zwraca <see langword="String" /> reprezentującym liczbę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-835">Zwraca <see langword="String" /> reprezentującym liczbę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-836">Gdy liczby są konwertowane na ciągi znaków, spacje wiodące zawsze jest zarezerwowany dla znak `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="1c80b-837">Jeśli `Number` jest dodatnia, zwrócony ciąg zawiera spacje wiodące i jest implikowane znak plus.</span><span class="sxs-lookup"><span data-stu-id="1c80b-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="1c80b-838">Obejmuje ujemna znak minus (-) i bez spacji wiodących.</span><span class="sxs-lookup"><span data-stu-id="1c80b-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="1c80b-839">Użyj `Format` funkcji konwersji wartości numerycznych, które mają być sformatowane jako daty, godziny i waluty, lub w innych formatach zdefiniowanych przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="1c80b-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="1c80b-840">W odróżnieniu od `Str` funkcji `Format` funkcja nie zawiera spacje wiodące na znak argumentu `Number`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1c80b-841">`Str` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="1c80b-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1c80b-842">Użycie innych separatorów dziesiętnych (na przykład w aplikacjach międzynarodowych) użyj `CStr` lub `Format` funkcji w celu przekonwertowania liczby na ciąg.</span><span class="sxs-lookup"><span data-stu-id="1c80b-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="1c80b-843">Aby uzyskać ciąg reprezentujący numer w danej kultury, należy użyć numeru `ToString(IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="1c80b-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="1c80b-844">Na przykład użyć <xref:System.Double.ToString%2A> podczas konwertowania wartości typu `Double` na ciąg.</span><span class="sxs-lookup"><span data-stu-id="1c80b-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-845">W tym przykładzie użyto `Str` funkcja zwraca `String` reprezentującym liczbę.</span><span class="sxs-lookup"><span data-stu-id="1c80b-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="1c80b-846">Gdy liczba dodatnia jest konwertowana na ciąg, spacje wiodące zawsze jest zarezerwowana dla znaku.</span><span class="sxs-lookup"><span data-stu-id="1c80b-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1c80b-847">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="1c80b-848">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="1c80b-849">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-850">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1c80b-851">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="1c80b-852">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-852">Required.</span>
          </span>
          <span data-ttu-id="1c80b-853">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="1c80b-854">Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-854">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-855">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-856">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-857">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="1c80b-858">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="1c80b-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="1c80b-859">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="1c80b-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="1c80b-860">Wartości puste, karty i znaki wysuwu wiersza są odrzucane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="1c80b-861">Poniższe wywołanie zwraca wartość 1615198.</span><span class="sxs-lookup"><span data-stu-id="1c80b-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="1c80b-862">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="1c80b-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="1c80b-863">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="1c80b-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1c80b-864">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="1c80b-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="1c80b-865">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="1c80b-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="1c80b-866">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1c80b-867"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="1c80b-868">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="1c80b-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="1c80b-869">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli nie zostały zawarte w ciągu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-870">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="1c80b-871">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="1c80b-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1c80b-872">
            <paramref name="InputStr" /> jest zbyt duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-873">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-874">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="1c80b-875">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-875">Required.</span>
          </span>
          <span data-ttu-id="1c80b-876">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="1c80b-877">Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-877">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-878">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-879">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-880">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="1c80b-881">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="1c80b-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="1c80b-882">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="1c80b-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="1c80b-883">Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="1c80b-884">Poniższe wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="1c80b-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="1c80b-885">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="1c80b-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="1c80b-886">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="1c80b-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1c80b-887">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="1c80b-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="1c80b-888">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="1c80b-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="1c80b-889">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1c80b-890"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="1c80b-891">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="1c80b-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="1c80b-892">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="1c80b-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-893">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="1c80b-894">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="1c80b-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1c80b-895">
            <paramref name="InputStr" /> jest zbyt duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-896">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-897">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="1c80b-898">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-898">Required.</span>
          </span>
          <span data-ttu-id="1c80b-899">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="1c80b-900">Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-900">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1c80b-901">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1c80b-902">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c80b-903">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="1c80b-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="1c80b-904">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="1c80b-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="1c80b-905">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="1c80b-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="1c80b-906">Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="1c80b-907">Poniższe wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="1c80b-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="1c80b-908">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="1c80b-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="1c80b-909">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="1c80b-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1c80b-910">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="1c80b-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="1c80b-911">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="1c80b-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="1c80b-912">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="1c80b-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1c80b-913"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="1c80b-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="1c80b-914">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="1c80b-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="1c80b-915">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="1c80b-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="1c80b-916">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="1c80b-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="1c80b-917">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="1c80b-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1c80b-918">
            <paramref name="InputStr" /> jest zbyt duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1c80b-919">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="1c80b-920">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c80b-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>