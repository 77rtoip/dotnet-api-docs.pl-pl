<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8c88114d76cfd78d171c9e5970305cf92c93395a" /><Meta Name="ms.sourcegitcommit" Value="9802d4c6745a8ae514b26f144fb3969265b224ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/22/2018" /><Meta Name="ms.locfileid" Value="53750962" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Conversion" /> Moduł zawiera procedur w celu wykonywania różnych operacji konwersji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które Konwertuj liczby dziesiętne na inne podstawy liczb do ciągów, ciągów na liczby i danych jednego typu na inny.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">Obiekt do przekonwertowania.</param>
        <param name="TargetType">Typ, do którego należy przekonwertować obiekt.</param>
        <summary>Konwertuje obiekt określonego typu.</summary>
        <returns>Obiekt, którego typem w czasie wykonywania jest typ żądanego elementu docelowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` typu określonego przez parametr `TargetType` parametru. Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.  
  
 `CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt. Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika. W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji. Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Praca z obiektami dynamicznymi (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Przewodnik: Tworzenie obiektów dynamicznych i posługiwanie (C# i Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">Typ, do którego należy przekonwertować obiekt.</typeparam>
        <param name="Expression">Obiekt do przekonwertowania.</param>
        <summary>Konwertuje obiekt określonego typu ogólnego.</summary>
        <returns>Obiekt, który statycznie wpisanych w formie żądanego typu ogólnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` parametru na typ określony przez typ parametru ogólnego. Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.  
  
 `CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt. Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika. W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji. Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Praca z obiektami dynamicznymi (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Przewodnik: Tworzenie obiektów dynamicznych i posługiwanie (C# i Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</summary>
        <returns>Komunikat o błędzie, odpowiadający ostatni błąd czasu wykonywania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania. Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu. Jeśli nie błąd czasu wykonywania `ErrorToString` zwraca ciąg o zerowej długości ("").  
  
 W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.  
  
   
  
## Examples  
 Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> jest poza zakresem.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">Opcjonalna. Dowolna liczba błędów prawidłowe.</param>
        <summary>Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</summary>
        <returns>Komunikat o błędzie, który odpowiada numerowi danego błędu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania. Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu. Jeśli `ErrorNumber` jest prawidłowym numerem błędu, ale nie jest zdefiniowany, `ErrorToString` zwraca ciąg `"Application-defined or object-defined error."` Jeśli `ErrorNumber` jest nieprawidłowy, wystąpi błąd. Jeśli `ErrorNumber` zostanie pominięty, wiadomości, odpowiadający najnowszej zwracany jest błąd czasu wykonywania. W przypadku braku błędów czasu wykonywania lub `ErrorNumber` ma wartość 0, `ErrorToString` zwraca ciąg o zerowej długości ("").  
  
 W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.  
  
   
  
## Examples  
 Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> jest poza zakresem.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca część całkowitą liczby.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  

Począwszy od Visual Basic 15.8, wydajność `Double`-do-konwersji liczba całkowita jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Fix` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli `Double`wartość zwrócona przez obiekt `Fix` jest niejawnie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) równa `Off`. Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych. Poniższy przykład ilustruje zoptymalizowane konwersji:

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe. Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  

Począwszy od 15.8 Visual Basic, jeśli `Number` argument jest obiektem o typie środowiska uruchomieniowego `Double` lub `Single`, floating-point na całkowite konwersji jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Fix` Metoda do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli wartość zwracana przez `Fix` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone. Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych. Na przykład:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
Począwszy od Visual Basic 15.8, wydajność `Single`-do-konwersji liczba całkowita jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Fix` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli `Single`wartość zwrócona przez obiekt `Fix` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone. Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych. Poniższy przykład ilustruje zoptymalizowane konwersji:
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`. Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`. Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`. Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`. Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`. Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`. Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`. Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`. Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`. Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.  
  
   
  
## Examples  
 W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca część całkowitą liczby.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
Począwszy od programu Visual Basic 15.8 wydajność podwójnej precyzji na całkowite konwersji jest zoptymalizowane pod kątem w przypadku przekazania wartości zwracanej przez `Int` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli podwójna wartość zwrócone przez `Int` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone. Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych. Poniższy przykład ilustruje zoptymalizowane konwersji:

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe. Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
Począwszy od 15.8 Visual Basic, jeśli `Number` argument jest obiektem o typie środowiska uruchomieniowego `Double` lub `Single`, floating-point na całkowite konwersji jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Int` Metoda do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli wartość zwracana przez `Int` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone. Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych. Na przykład:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba typu <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowitą liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.  
  
 Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`. Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.  
  
 `Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`  
  
Począwszy od Visual Basic 15.8, wydajność `Single`-do-konwersji liczba całkowita jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Int` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli `Single`wartość zwrócona przez obiekt `Int` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone. Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych. Poniższy przykład ilustruje zoptymalizowane konwersji:

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb. W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie. Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`. Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`. Na przykład `&O10` ósemkowy dziesiętnej 8.  
  
   
  
## Examples  
 W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`. Na przykład `&O10` ósemkowy dziesiętnej 8.  
  
   
  
## Examples  
 W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`. Na przykład `&O10` ósemkowy dziesiętnej 8.  
  
   
  
## Examples  
 W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`. Na przykład `&O10` ósemkowy dziesiętnej 8.  
  
   
  
## Examples  
 W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`. Na przykład `&O10` ósemkowy dziesiętnej 8.  
  
   
  
## Examples  
 W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`. Na przykład `&O10` ósemkowy dziesiętnej 8.  
  
   
  
## Examples  
 W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`. Na przykład `&O10` ósemkowy dziesiętnej 8.  
  
   
  
## Examples  
 W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`. Na przykład `&O10` ósemkowy dziesiętnej 8.  
  
   
  
## Examples  
 W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`. Na przykład `&O10` ósemkowy dziesiętnej 8.  
  
   
  
## Examples  
 W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Object" /> Zawierających dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca <see langword="String" /> reprezentującym liczbę.</summary>
        <returns>A <see langword="String" /> reprezentującym liczbę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy liczby są konwertowane na ciągi znaków, spacje wiodące zawsze jest zarezerwowany dla znak `Number`. Jeśli `Number` jest dodatnia, zwrócony ciąg zawiera spacje wiodące i jest implikowane znak plus. Obejmuje ujemna znak minus (-) i bez spacji wiodących.  
  
 Użyj `Format` funkcji konwersji wartości numerycznych, które mają być sformatowane jako daty, godziny i waluty, lub w innych formatach zdefiniowanych przez użytkownika. W odróżnieniu od `Str` funkcji `Format` funkcja nie zawiera spacje wiodące na znak argumentu `Number`.  
  
> [!NOTE]
>  `Str` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe. Użycie innych separatorów dziesiętnych (na przykład w aplikacjach międzynarodowych) użyj `CStr` lub `Format` funkcji w celu przekonwertowania liczby na ciąg. Aby uzyskać ciąg reprezentujący numer w danej kultury, należy użyć numeru `ToString(IFormatProvider)` metody. Na przykład użyć <xref:System.Double.ToString%2A> podczas konwertowania wartości typu `Double` na ciąg.  
  
   
  
## Examples  
 W tym przykładzie użyto `Str` funkcja zwraca `String` reprezentującym liczbę. Gdy liczba dodatnia jest konwertowana na ciąg, spacje wiodące zawsze jest zarezerwowana dla znaku.  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> nie określono.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Number" /> nie jest typu liczbowego.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</summary>
        <returns>Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby. Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane. Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych). Wartości puste, karty i znaki wysuwu wiersza są odrzucane z argumentu.  
  
 Poniższe wywołanie zwraca wartość 1615198.  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
Poniższe wywołanie zwróci wartość -1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  `Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe. Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę. Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody. Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.  
  
<xref:System.InvalidCastException> Wyjątku może zostać wygenerowany w odpowiedzi na niektóre nietypowe formaty liczb. Na przykład poniższy kod zgłasza ten wyjątek.  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli nie zostały zawarte w ciągu.  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu. `Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> jest zbyt duży.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</summary>
        <returns>Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby. Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane. Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych). Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.  
  
 Poniższe wywołanie zwraca wartość 1234123.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
Poniższe wywołanie zwróci wartość -1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  `Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe. Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę. Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody. Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.  
  
> [!NOTE]
>  <xref:System.InvalidCastException> Wyjątku może zostać wygenerowany w odpowiedzi na niektóre nietypowe formaty liczb. Na przykład poniższy kod zgłasza ten wyjątek.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu. `Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> jest zbyt duży.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">Wymagana. Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</summary>
        <returns>Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby. Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane. Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych). Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.  
  
 Poniższe wywołanie zwraca wartość 1234123.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
Poniższe wywołanie zwróci wartość -1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  `Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe. Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę. Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody. Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.  
  
> [!NOTE]
>  <xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre nietypowe formaty liczb. Na przykład poniższy kod zgłasza ten wyjątek.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu. `Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> jest zbyt duży.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
  </Members>
</Type>