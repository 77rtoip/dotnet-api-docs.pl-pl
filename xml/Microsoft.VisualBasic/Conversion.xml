<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7407bb75d7178168919956d2b89f54e76db62e99" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710291" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="61b58-101">
        <see langword="Conversion" /> Moduł zawiera procedur w celu wykonywania różnych operacji konwersji.</span>
      <span class="sxs-lookup">
        <span data-stu-id="61b58-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-102">Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które Konwertuj liczby dziesiętne na inne podstawy liczb do ciągów, ciągów na liczby i danych jednego typu na inny.</span><span class="sxs-lookup"><span data-stu-id="61b58-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-103">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="61b58-104">Obiekt do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="61b58-105">Typ, do którego należy przekonwertować obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-106">Konwertuje obiekt określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-107">Obiekt, którego typem w czasie wykonywania jest typ żądanego elementu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-108">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` typu określonego przez parametr `TargetType` parametru.</span><span class="sxs-lookup"><span data-stu-id="61b58-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="61b58-109">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.</span><span class="sxs-lookup"><span data-stu-id="61b58-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="61b58-110">`CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="61b58-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="61b58-111">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="61b58-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="61b58-112">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji.</span><span class="sxs-lookup"><span data-stu-id="61b58-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="61b58-113">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="61b58-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-114">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="61b58-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="61b58-115">Typ, do którego należy przekonwertować obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="61b58-116">Obiekt do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-117">Konwertuje obiekt określonego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-118">Obiekt, który statycznie wpisanych w formie żądanego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-119">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` parametru na typ określony przez typ parametru ogólnego.</span><span class="sxs-lookup"><span data-stu-id="61b58-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="61b58-120">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.</span><span class="sxs-lookup"><span data-stu-id="61b58-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="61b58-121">`CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="61b58-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="61b58-122">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="61b58-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="61b58-123">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji.</span><span class="sxs-lookup"><span data-stu-id="61b58-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="61b58-124">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="61b58-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-125">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="61b58-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61b58-126">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="61b58-127">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-128">Komunikat o błędzie, odpowiadający ostatni błąd czasu wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-129">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="61b58-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="61b58-130">Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="61b58-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="61b58-131">Jeśli nie błąd czasu wykonywania `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="61b58-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="61b58-132">W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="61b58-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-133">Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="61b58-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-134">
            <paramref name="ErrorNumber" /> jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="61b58-135">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-135">Optional.</span>
          </span>
          <span data-ttu-id="61b58-136">Dowolna liczba błędów prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-137">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-138">Komunikat o błędzie, który odpowiada numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-139">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="61b58-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="61b58-140">Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="61b58-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="61b58-141">Jeśli `ErrorNumber` jest prawidłowym numerem błędu, ale nie jest zdefiniowany, `ErrorToString` zwraca ciąg `"Application-defined or object-defined error."` Jeśli `ErrorNumber` jest nieprawidłowy, wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="61b58-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="61b58-142">Jeśli `ErrorNumber` zostanie pominięty, wiadomości, odpowiadający najnowszej zwracany jest błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="61b58-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="61b58-143">W przypadku braku błędów czasu wykonywania lub `ErrorNumber` ma wartość 0, `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="61b58-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="61b58-144">W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="61b58-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-145">Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="61b58-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-146">
            <paramref name="ErrorNumber" /> jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61b58-147">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-148">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-148">Required.</span>
          </span>
          <span data-ttu-id="61b58-149">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-150">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-151">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-152">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-153">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-154">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-155">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-156">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-157">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-158">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-159">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-160">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-161">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-162">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-163">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-164">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-165">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-166">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-167">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-168">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-168">Required.</span>
          </span>
          <span data-ttu-id="61b58-169">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-170">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-171">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-172">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-173">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-174">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-175">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-176">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-177">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-178">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-179">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-180">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-181">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-182">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-183">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-184">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-185">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-186">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-187">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-188">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-188">Required.</span>
          </span>
          <span data-ttu-id="61b58-189">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-190">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-191">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-192">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-193">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-194">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-195">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-196">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-197">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-198">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-199">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-200">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-201">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-202">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-203">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-204">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-205">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-206">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-207">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-208">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-208">Required.</span>
          </span>
          <span data-ttu-id="61b58-209">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-210">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-211">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-212">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-213">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-214">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-215">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-216">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-217">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-218">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-219">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-220">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-221">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-222">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-223">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-224">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-225">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-226">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-227">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-228">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-228">Required.</span>
          </span>
          <span data-ttu-id="61b58-229">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-230">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-231">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-232">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-233">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-234">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-235">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-236">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-237">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-238">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-239">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-240">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-241">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-242">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-243">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-244">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-245">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-246">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-247">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-248">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-248">Required.</span>
          </span>
          <span data-ttu-id="61b58-249">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-250">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-251">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-252">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-253">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-254">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-255">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-256">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-257">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-258">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-259">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-260">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-261">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-262">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-263">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-264">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-265">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-266">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-267">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-268">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-268">Required.</span>
          </span>
          <span data-ttu-id="61b58-269">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-270">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-271">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-272">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-273">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-274">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-275">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-276">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-277">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-278">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-279">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-280">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-281">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-282">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-283">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-284">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-285">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-286">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-287">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61b58-288">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-289">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-289">Required.</span>
          </span>
          <span data-ttu-id="61b58-290">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-291">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-292">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-293">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-294">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="61b58-294">If `Number` is</span></span>|<span data-ttu-id="61b58-295">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="61b58-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-296">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-296">Empty</span></span>|<span data-ttu-id="61b58-297">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-297">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-298">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="61b58-298">Any numeric value</span></span>|<span data-ttu-id="61b58-299">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="61b58-300">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="61b58-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="61b58-301">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="61b58-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-302">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-303">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-304">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-305">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-305">Required.</span>
          </span>
          <span data-ttu-id="61b58-306">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-307">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-308">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-309">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-310">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="61b58-310">If `Number` is</span></span>|<span data-ttu-id="61b58-311">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="61b58-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-312">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-312">Empty</span></span>|<span data-ttu-id="61b58-313">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-313">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-314">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="61b58-314">Any numeric value</span></span>|<span data-ttu-id="61b58-315">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="61b58-316">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="61b58-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="61b58-317">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="61b58-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-318">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-319">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-320">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-321">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-321">Required.</span>
          </span>
          <span data-ttu-id="61b58-322">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-323">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-324">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-325">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-326">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="61b58-326">If `Number` is</span></span>|<span data-ttu-id="61b58-327">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="61b58-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-328">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-328">Empty</span></span>|<span data-ttu-id="61b58-329">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-329">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-330">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="61b58-330">Any numeric value</span></span>|<span data-ttu-id="61b58-331">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="61b58-332">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="61b58-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="61b58-333">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="61b58-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-334">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-335">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-336">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-337">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-337">Required.</span>
          </span>
          <span data-ttu-id="61b58-338">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-339">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-340">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-341">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-342">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="61b58-342">If `Number` is</span></span>|<span data-ttu-id="61b58-343">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="61b58-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-344">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-344">Empty</span></span>|<span data-ttu-id="61b58-345">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-345">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-346">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="61b58-346">Any numeric value</span></span>|<span data-ttu-id="61b58-347">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="61b58-348">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="61b58-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="61b58-349">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="61b58-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-350">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-351">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-352">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-353">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-353">Required.</span>
          </span>
          <span data-ttu-id="61b58-354">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-355">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-356">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-357">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-358">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="61b58-358">If `Number` is</span></span>|<span data-ttu-id="61b58-359">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="61b58-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-360">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-360">Empty</span></span>|<span data-ttu-id="61b58-361">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-361">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-362">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="61b58-362">Any numeric value</span></span>|<span data-ttu-id="61b58-363">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="61b58-364">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="61b58-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="61b58-365">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="61b58-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-366">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-367">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-368">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-369">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-369">Required.</span>
          </span>
          <span data-ttu-id="61b58-370">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-371">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-372">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-373">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-374">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="61b58-374">If `Number` is</span></span>|<span data-ttu-id="61b58-375">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="61b58-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-376">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-376">Empty</span></span>|<span data-ttu-id="61b58-377">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-377">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-378">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="61b58-378">Any numeric value</span></span>|<span data-ttu-id="61b58-379">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="61b58-380">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="61b58-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="61b58-381">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="61b58-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-382">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-383">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-384">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-385">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-385">Required.</span>
          </span>
          <span data-ttu-id="61b58-386">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-387">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-388">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-389">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-390">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="61b58-390">If `Number` is</span></span>|<span data-ttu-id="61b58-391">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="61b58-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-392">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-392">Empty</span></span>|<span data-ttu-id="61b58-393">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-393">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-394">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="61b58-394">Any numeric value</span></span>|<span data-ttu-id="61b58-395">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="61b58-396">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="61b58-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="61b58-397">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="61b58-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-398">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-399">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-400">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-401">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-401">Required.</span>
          </span>
          <span data-ttu-id="61b58-402">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-403">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-404">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-405">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-406">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="61b58-406">If `Number` is</span></span>|<span data-ttu-id="61b58-407">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="61b58-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-408">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-408">Empty</span></span>|<span data-ttu-id="61b58-409">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-409">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-410">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="61b58-410">Any numeric value</span></span>|<span data-ttu-id="61b58-411">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="61b58-412">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="61b58-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="61b58-413">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="61b58-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-414">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-415">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-416">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-417">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-417">Required.</span>
          </span>
          <span data-ttu-id="61b58-418">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-419">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-420">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-421">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-422">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="61b58-422">If `Number` is</span></span>|<span data-ttu-id="61b58-423">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="61b58-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-424">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-424">Empty</span></span>|<span data-ttu-id="61b58-425">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-425">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-426">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="61b58-426">Any numeric value</span></span>|<span data-ttu-id="61b58-427">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="61b58-428">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="61b58-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="61b58-429">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="61b58-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-430">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-431">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-432">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61b58-433">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-434">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-434">Required.</span>
          </span>
          <span data-ttu-id="61b58-435">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-436">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-437">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-438">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-439">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-440">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-441">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-442">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-443">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-444">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-445">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-446">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-447">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-448">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-449">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-450">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-451">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-452">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-453">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-454">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-454">Required.</span>
          </span>
          <span data-ttu-id="61b58-455">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-456">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-457">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-458">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-459">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-460">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-461">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-462">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-463">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-464">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-465">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-466">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-467">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-468">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-469">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-470">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-471">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-472">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-473">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-474">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-474">Required.</span>
          </span>
          <span data-ttu-id="61b58-475">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-476">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-477">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-478">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-479">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-480">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-481">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-482">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-483">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-484">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-485">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-486">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-487">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-488">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-489">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-490">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-491">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-492">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-493">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-494">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-494">Required.</span>
          </span>
          <span data-ttu-id="61b58-495">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-496">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-497">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-498">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-499">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-500">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-501">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-502">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-503">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-504">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-505">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-506">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-507">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-508">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-509">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-510">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-511">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-512">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-513">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-514">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-514">Required.</span>
          </span>
          <span data-ttu-id="61b58-515">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-516">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-517">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-518">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-519">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-520">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-521">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-522">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-523">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-524">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-525">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-526">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-527">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-528">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-529">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-530">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-531">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-532">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-533">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-534">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-534">Required.</span>
          </span>
          <span data-ttu-id="61b58-535">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-536">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-537">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-538">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-539">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-540">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-541">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-542">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-543">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-544">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-545">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-546">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-547">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-548">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-549">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-550">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-551">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-552">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-553">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-554">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-554">Required.</span>
          </span>
          <span data-ttu-id="61b58-555">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="61b58-556">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-557">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-558">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-559">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="61b58-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="61b58-560">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="61b58-561">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="61b58-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="61b58-562">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="61b58-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-563">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="61b58-564">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="61b58-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="61b58-565">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="61b58-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="61b58-566">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="61b58-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="61b58-567">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="61b58-568">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="61b58-569">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="61b58-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="61b58-570">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="61b58-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="61b58-571">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61b58-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-572">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-573">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61b58-574">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-575">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-575">Required.</span>
          </span>
          <span data-ttu-id="61b58-576">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-577">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-578">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-579">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-580">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="61b58-580">If Number is</span></span>|<span data-ttu-id="61b58-581">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="61b58-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-582">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-582">Empty</span></span>|<span data-ttu-id="61b58-583">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-583">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-584">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="61b58-584">Any other number</span></span>|<span data-ttu-id="61b58-585">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="61b58-586">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="61b58-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="61b58-587">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="61b58-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-588">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-589">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-590">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-591">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-591">Required.</span>
          </span>
          <span data-ttu-id="61b58-592">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-593">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-594">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-595">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-596">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="61b58-596">If Number is</span></span>|<span data-ttu-id="61b58-597">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="61b58-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-598">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-598">Empty</span></span>|<span data-ttu-id="61b58-599">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-599">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-600">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="61b58-600">Any other number</span></span>|<span data-ttu-id="61b58-601">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="61b58-602">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="61b58-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="61b58-603">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="61b58-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-604">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-605">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-606">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-607">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-607">Required.</span>
          </span>
          <span data-ttu-id="61b58-608">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-609">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-610">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-611">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-612">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="61b58-612">If Number is</span></span>|<span data-ttu-id="61b58-613">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="61b58-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-614">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-614">Empty</span></span>|<span data-ttu-id="61b58-615">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-615">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-616">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="61b58-616">Any other number</span></span>|<span data-ttu-id="61b58-617">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="61b58-618">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="61b58-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="61b58-619">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="61b58-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-620">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-621">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-622">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-623">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-623">Required.</span>
          </span>
          <span data-ttu-id="61b58-624">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-625">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-626">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-627">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-628">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="61b58-628">If Number is</span></span>|<span data-ttu-id="61b58-629">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="61b58-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-630">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-630">Empty</span></span>|<span data-ttu-id="61b58-631">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-631">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-632">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="61b58-632">Any other number</span></span>|<span data-ttu-id="61b58-633">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="61b58-634">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="61b58-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="61b58-635">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="61b58-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-636">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-637">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-638">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-639">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-639">Required.</span>
          </span>
          <span data-ttu-id="61b58-640">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-641">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-642">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-643">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-644">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="61b58-644">If Number is</span></span>|<span data-ttu-id="61b58-645">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="61b58-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-646">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-646">Empty</span></span>|<span data-ttu-id="61b58-647">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-647">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-648">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="61b58-648">Any other number</span></span>|<span data-ttu-id="61b58-649">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="61b58-650">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="61b58-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="61b58-651">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="61b58-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-652">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-653">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-654">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-655">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-655">Required.</span>
          </span>
          <span data-ttu-id="61b58-656">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-657">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-658">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-659">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-660">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="61b58-660">If Number is</span></span>|<span data-ttu-id="61b58-661">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="61b58-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-662">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-662">Empty</span></span>|<span data-ttu-id="61b58-663">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-663">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-664">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="61b58-664">Any other number</span></span>|<span data-ttu-id="61b58-665">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="61b58-666">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="61b58-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="61b58-667">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="61b58-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-668">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-669">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-670">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-671">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-671">Required.</span>
          </span>
          <span data-ttu-id="61b58-672">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-673">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-674">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-675">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-676">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="61b58-676">If Number is</span></span>|<span data-ttu-id="61b58-677">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="61b58-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-678">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-678">Empty</span></span>|<span data-ttu-id="61b58-679">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-679">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-680">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="61b58-680">Any other number</span></span>|<span data-ttu-id="61b58-681">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="61b58-682">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="61b58-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="61b58-683">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="61b58-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-684">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-685">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-686">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-687">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-687">Required.</span>
          </span>
          <span data-ttu-id="61b58-688">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-689">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-690">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-691">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-692">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="61b58-692">If Number is</span></span>|<span data-ttu-id="61b58-693">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="61b58-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-694">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-694">Empty</span></span>|<span data-ttu-id="61b58-695">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-695">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-696">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="61b58-696">Any other number</span></span>|<span data-ttu-id="61b58-697">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="61b58-698">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="61b58-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="61b58-699">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="61b58-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-700">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-701">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-702">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-703">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-703">Required.</span>
          </span>
          <span data-ttu-id="61b58-704">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-705">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-706">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-707">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="61b58-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="61b58-708">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="61b58-708">If Number is</span></span>|<span data-ttu-id="61b58-709">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="61b58-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="61b58-710">Pusty</span><span class="sxs-lookup"><span data-stu-id="61b58-710">Empty</span></span>|<span data-ttu-id="61b58-711">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="61b58-711">Zero (0)</span></span>|  
|<span data-ttu-id="61b58-712">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="61b58-712">Any other number</span></span>|<span data-ttu-id="61b58-713">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="61b58-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="61b58-714">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="61b58-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="61b58-715">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="61b58-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-716">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-717">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-718">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="61b58-719">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-719">Required.</span>
          </span>
          <span data-ttu-id="61b58-720">
            <see langword="Object" /> Zawierających dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-721">Zwraca <see langword="String" /> reprezentującym liczbę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-722">Zwraca <see langword="String" /> reprezentującym liczbę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-723">Gdy liczby są konwertowane na ciągi znaków, spacje wiodące zawsze jest zarezerwowany dla znak `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="61b58-724">Jeśli `Number` jest dodatnia, zwrócony ciąg zawiera spacje wiodące i jest implikowane znak plus.</span><span class="sxs-lookup"><span data-stu-id="61b58-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="61b58-725">Obejmuje ujemna znak minus (-) i bez spacji wiodących.</span><span class="sxs-lookup"><span data-stu-id="61b58-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="61b58-726">Użyj `Format` funkcji konwersji wartości numerycznych, które mają być sformatowane jako daty, godziny i waluty, lub w innych formatach zdefiniowanych przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="61b58-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="61b58-727">W odróżnieniu od `Str` funkcji `Format` funkcja nie zawiera spacje wiodące na znak argumentu `Number`.</span><span class="sxs-lookup"><span data-stu-id="61b58-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61b58-728">`Str` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="61b58-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="61b58-729">Użycie innych separatorów dziesiętnych (na przykład w aplikacjach międzynarodowych) użyj `CStr` lub `Format` funkcji w celu przekonwertowania liczby na ciąg.</span><span class="sxs-lookup"><span data-stu-id="61b58-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="61b58-730">Aby uzyskać ciąg reprezentujący numer w danej kultury, należy użyć numeru `ToString(IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="61b58-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="61b58-731">Na przykład użyć <xref:System.Double.ToString%2A> podczas konwertowania wartości typu `Double` na ciąg.</span><span class="sxs-lookup"><span data-stu-id="61b58-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b58-732">W tym przykładzie użyto `Str` funkcja zwraca `String` reprezentującym liczbę.</span><span class="sxs-lookup"><span data-stu-id="61b58-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="61b58-733">Gdy liczba dodatnia jest konwertowana na ciąg, spacje wiodące zawsze jest zarezerwowana dla znaku.</span><span class="sxs-lookup"><span data-stu-id="61b58-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b58-734">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="61b58-735">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61b58-736">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="61b58-737">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-737">Required.</span>
          </span>
          <span data-ttu-id="61b58-738">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="61b58-739">Jeśli <c>wyrażenie</c> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-740">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-741">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-742">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="61b58-743">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="61b58-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="61b58-744">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="61b58-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="61b58-745">Wartości puste, karty i znaki wysuwu wiersza są odrzucane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="61b58-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="61b58-746">Poniższe wywołanie zwraca wartość 1615198.</span><span class="sxs-lookup"><span data-stu-id="61b58-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="61b58-747">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="61b58-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="61b58-748">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="61b58-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="61b58-749">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="61b58-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="61b58-750">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="61b58-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="61b58-751">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="61b58-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61b58-752"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="61b58-753">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="61b58-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="61b58-754">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli nie zostały zawarte w ciągu.</span><span class="sxs-lookup"><span data-stu-id="61b58-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="61b58-755">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="61b58-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="61b58-756">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="61b58-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="61b58-757">
            <paramref name="InputStr" /> jest zbyt duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-758">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="61b58-759">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-759">Required.</span>
          </span>
          <span data-ttu-id="61b58-760">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="61b58-761">Jeśli <c>wyrażenie</c> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-762">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-763">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-764">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="61b58-765">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="61b58-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="61b58-766">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="61b58-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="61b58-767">Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="61b58-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="61b58-768">Poniższe wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="61b58-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="61b58-769">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="61b58-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="61b58-770">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="61b58-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="61b58-771">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="61b58-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="61b58-772">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="61b58-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="61b58-773">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="61b58-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61b58-774"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="61b58-775">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="61b58-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="61b58-776">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="61b58-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="61b58-777">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="61b58-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="61b58-778">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="61b58-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="61b58-779">
            <paramref name="InputStr" /> jest zbyt duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-780">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="61b58-781">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-781">Required.</span>
          </span>
          <span data-ttu-id="61b58-782">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="61b58-783">Jeśli <c>wyrażenie</c> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b58-784">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b58-785">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b58-786">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="61b58-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="61b58-787">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="61b58-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="61b58-788">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="61b58-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="61b58-789">Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="61b58-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="61b58-790">Poniższe wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="61b58-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="61b58-791">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="61b58-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="61b58-792">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="61b58-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="61b58-793">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="61b58-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="61b58-794">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="61b58-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="61b58-795">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="61b58-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61b58-796"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="61b58-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="61b58-797">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="61b58-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="61b58-798">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="61b58-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="61b58-799">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="61b58-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="61b58-800">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="61b58-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="61b58-801">
            <paramref name="InputStr" /> jest zbyt duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b58-802">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b58-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>