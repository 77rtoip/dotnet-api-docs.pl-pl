<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8e0e14960480e0249f53d698cc92d75e8301b99" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659024" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d0f99-101">
        <see langword="Conversion" /> Moduł zawiera procedury używany do wykonywania różnych operacji konwersji.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d0f99-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-102">Ten moduł obsługuje słów kluczowych języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które konwertuje dziesiętne innych baz wpisz numery ciągi ciągów na liczby i jednego danych do innego.</span><span class="sxs-lookup"><span data-stu-id="d0f99-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-103">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="d0f99-104">Obiekt do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="d0f99-105">Typ, do którego można przekonwertować obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-106">Konwertuje obiekt określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-107">Obiekt, którego typem w czasie wykonywania jest typ żądanego elementu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-108">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` parametru na typ określony przez `TargetType` parametru.</span><span class="sxs-lookup"><span data-stu-id="d0f99-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="d0f99-109">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersji.</span><span class="sxs-lookup"><span data-stu-id="d0f99-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="d0f99-110">`CTypeDynamic` Metoda stosowana dynamiczne konwersje zgodnie z semantyki konwersja zdefiniowana przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="d0f99-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="d0f99-111">Jeśli obiekt dynamiczny dziedziczy <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda najpierw próbuje dokonać konwersji za pomocą konwersji zdefiniowanej przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="d0f99-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="d0f99-112">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda próbuje dokonać konwersji przy użyciu dynamicznych konwersji.</span><span class="sxs-lookup"><span data-stu-id="d0f99-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="d0f99-113">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metody daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="d0f99-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-114">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg za pomocą konwersji zdefiniowany przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="d0f99-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="d0f99-115">Typ, do którego można przekonwertować obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="d0f99-116">Obiekt do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-117">Konwertuje obiekt określonego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-118">Obiekt typu statycznie żądanego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-119">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` parametru na typ określony przez typ parametru ogólnego.</span><span class="sxs-lookup"><span data-stu-id="d0f99-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="d0f99-120">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersji.</span><span class="sxs-lookup"><span data-stu-id="d0f99-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="d0f99-121">`CTypeDynamic` Metoda stosowana dynamiczne konwersje zgodnie z semantyki konwersja zdefiniowana przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="d0f99-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="d0f99-122">Jeśli obiekt dynamiczny dziedziczy <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda najpierw próbuje dokonać konwersji za pomocą konwersji zdefiniowanej przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="d0f99-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="d0f99-123">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda próbuje dokonać konwersji przy użyciu dynamicznych konwersji.</span><span class="sxs-lookup"><span data-stu-id="d0f99-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="d0f99-124">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metody daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="d0f99-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-125">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg za pomocą konwersji zdefiniowany przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="d0f99-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f99-126">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d0f99-127">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-128">Komunikat o błędzie umożliwiająca ostatni błąd czasu wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-129">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektem w celu identyfikacji ostatni błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="d0f99-130">Wartość zwracana `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="d0f99-131">Jeśli nie ma wystąpił żaden błąd czasu wykonywania, `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="d0f99-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="d0f99-132">W języku Visual Basic w wersji 6.0 i starsze wersje tej funkcji został dostarczony przez `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="d0f99-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-133">Poniższy kod używa `ErrorToString` funkcji, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-134">
            <paramref name="ErrorNumber" /> jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="d0f99-135">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-135">Optional.</span>
          </span>
          <span data-ttu-id="d0f99-136">Dowolna liczba prawidłowy błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-137">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-138">Komunikat o błędzie, który odpowiada numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-139">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektem w celu identyfikacji ostatni błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="d0f99-140">Wartość zwracana `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="d0f99-141">Jeśli `ErrorNumber` jest prawidłowym numerem błędu, ale nie jest zdefiniowana, `ErrorToString` zwraca ciąg `"Application-defined or object-defined error."` Jeśli `ErrorNumber` jest nieprawidłowy, wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="d0f99-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="d0f99-142">Jeśli `ErrorNumber` pominięcia komunikatu odpowiadającego najnowszej zwracany jest błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="d0f99-143">Jeśli wystąpił błąd czasu wykonywania nie lub `ErrorNumber` ma wartość 0, `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="d0f99-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="d0f99-144">W języku Visual Basic w wersji 6.0 i starsze wersje tej funkcji został dostarczony przez `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="d0f99-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-145">Poniższy kod używa `ErrorToString` funkcji, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-146">
            <paramref name="ErrorNumber" /> jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f99-147">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-148">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-148">Required.</span>
          </span>
          <span data-ttu-id="d0f99-149">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-150">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-151">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-152">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-153">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-154">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-155">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-156">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-157">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-158">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-159">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-160">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-161">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-162">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-163">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-164">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-165">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-166">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-167">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-168">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-168">Required.</span>
          </span>
          <span data-ttu-id="d0f99-169">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-170">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-171">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-172">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-173">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-174">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-175">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-176">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-177">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-178">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-179">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-180">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-181">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-182">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-183">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-184">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-185">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-186">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-187">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-188">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-188">Required.</span>
          </span>
          <span data-ttu-id="d0f99-189">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-190">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-191">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-192">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-193">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-194">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-195">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-196">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-197">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-198">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-199">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-200">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-201">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-202">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-203">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-204">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-205">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-206">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-207">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-208">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-208">Required.</span>
          </span>
          <span data-ttu-id="d0f99-209">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-210">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-211">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-212">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-213">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-214">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-215">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-216">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-217">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-218">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-219">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-220">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-221">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-222">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-223">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-224">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-225">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-226">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-227">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-228">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-228">Required.</span>
          </span>
          <span data-ttu-id="d0f99-229">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-230">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-231">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-232">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-233">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-234">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-235">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-236">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-237">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-238">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-239">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-240">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-241">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-242">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-243">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-244">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-245">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-246">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-247">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-248">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-248">Required.</span>
          </span>
          <span data-ttu-id="d0f99-249">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-250">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-251">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-252">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-253">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-254">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-255">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-256">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-257">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-258">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-259">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-260">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-261">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-262">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-263">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-264">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-265">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-266">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-267">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-268">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-268">Required.</span>
          </span>
          <span data-ttu-id="d0f99-269">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-270">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-271">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-272">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-273">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-274">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-275">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-276">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-277">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-278">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-279">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-280">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-281">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-282">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-283">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-284">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-285">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-286">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-287">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f99-288">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-289">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-289">Required.</span>
          </span>
          <span data-ttu-id="d0f99-290">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-291">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-292">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-293">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-294">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-294">If `Number` is</span></span>|<span data-ttu-id="d0f99-295">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="d0f99-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-296">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-296">Empty</span></span>|<span data-ttu-id="d0f99-297">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-297">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-298">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="d0f99-298">Any numeric value</span></span>|<span data-ttu-id="d0f99-299">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d0f99-300">Szesnastkowe może reprezentować bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&H`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d0f99-301">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w formacie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="d0f99-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-302">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-303">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-304">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-305">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-305">Required.</span>
          </span>
          <span data-ttu-id="d0f99-306">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-307">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-308">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-309">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-310">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-310">If `Number` is</span></span>|<span data-ttu-id="d0f99-311">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="d0f99-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-312">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-312">Empty</span></span>|<span data-ttu-id="d0f99-313">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-313">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-314">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="d0f99-314">Any numeric value</span></span>|<span data-ttu-id="d0f99-315">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d0f99-316">Szesnastkowe może reprezentować bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&H`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d0f99-317">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w formacie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="d0f99-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-318">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-319">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-320">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-321">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-321">Required.</span>
          </span>
          <span data-ttu-id="d0f99-322">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-323">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-324">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-325">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-326">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-326">If `Number` is</span></span>|<span data-ttu-id="d0f99-327">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="d0f99-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-328">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-328">Empty</span></span>|<span data-ttu-id="d0f99-329">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-329">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-330">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="d0f99-330">Any numeric value</span></span>|<span data-ttu-id="d0f99-331">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d0f99-332">Szesnastkowe może reprezentować bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&H`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d0f99-333">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w formacie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="d0f99-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-334">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-335">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-336">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-337">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-337">Required.</span>
          </span>
          <span data-ttu-id="d0f99-338">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-339">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-340">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-341">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-342">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-342">If `Number` is</span></span>|<span data-ttu-id="d0f99-343">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="d0f99-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-344">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-344">Empty</span></span>|<span data-ttu-id="d0f99-345">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-345">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-346">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="d0f99-346">Any numeric value</span></span>|<span data-ttu-id="d0f99-347">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d0f99-348">Szesnastkowe może reprezentować bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&H`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d0f99-349">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w formacie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="d0f99-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-350">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-351">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-352">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-353">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-353">Required.</span>
          </span>
          <span data-ttu-id="d0f99-354">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-355">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-356">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-357">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-358">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-358">If `Number` is</span></span>|<span data-ttu-id="d0f99-359">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="d0f99-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-360">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-360">Empty</span></span>|<span data-ttu-id="d0f99-361">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-361">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-362">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="d0f99-362">Any numeric value</span></span>|<span data-ttu-id="d0f99-363">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d0f99-364">Szesnastkowe może reprezentować bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&H`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d0f99-365">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w formacie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="d0f99-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-366">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-367">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-368">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-369">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-369">Required.</span>
          </span>
          <span data-ttu-id="d0f99-370">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-371">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-372">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-373">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-374">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-374">If `Number` is</span></span>|<span data-ttu-id="d0f99-375">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="d0f99-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-376">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-376">Empty</span></span>|<span data-ttu-id="d0f99-377">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-377">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-378">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="d0f99-378">Any numeric value</span></span>|<span data-ttu-id="d0f99-379">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d0f99-380">Szesnastkowe może reprezentować bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&H`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d0f99-381">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w formacie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="d0f99-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-382">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-383">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-384">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-385">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-385">Required.</span>
          </span>
          <span data-ttu-id="d0f99-386">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-387">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-388">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-389">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-390">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-390">If `Number` is</span></span>|<span data-ttu-id="d0f99-391">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="d0f99-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-392">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-392">Empty</span></span>|<span data-ttu-id="d0f99-393">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-393">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-394">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="d0f99-394">Any numeric value</span></span>|<span data-ttu-id="d0f99-395">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d0f99-396">Szesnastkowe może reprezentować bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&H`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d0f99-397">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w formacie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="d0f99-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-398">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-399">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-400">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-401">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-401">Required.</span>
          </span>
          <span data-ttu-id="d0f99-402">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-403">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-404">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-405">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-406">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-406">If `Number` is</span></span>|<span data-ttu-id="d0f99-407">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="d0f99-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-408">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-408">Empty</span></span>|<span data-ttu-id="d0f99-409">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-409">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-410">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="d0f99-410">Any numeric value</span></span>|<span data-ttu-id="d0f99-411">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d0f99-412">Szesnastkowe może reprezentować bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&H`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d0f99-413">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w formacie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="d0f99-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-414">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-415">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-416">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-417">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-417">Required.</span>
          </span>
          <span data-ttu-id="d0f99-418">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-419">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-420">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-421">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-422">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-422">If `Number` is</span></span>|<span data-ttu-id="d0f99-423">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="d0f99-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-424">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-424">Empty</span></span>|<span data-ttu-id="d0f99-425">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-425">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-426">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="d0f99-426">Any numeric value</span></span>|<span data-ttu-id="d0f99-427">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d0f99-428">Szesnastkowe może reprezentować bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&H`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d0f99-429">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w formacie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="d0f99-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-430">W tym przykładzie użyto `Hex` funkcja zwracająca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-431">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-432">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f99-433">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-434">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-434">Required.</span>
          </span>
          <span data-ttu-id="d0f99-435">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-436">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-437">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-438">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-439">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-440">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-441">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-442">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-443">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-444">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-445">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-446">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-447">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-448">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-449">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-450">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-451">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-452">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-453">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-454">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-454">Required.</span>
          </span>
          <span data-ttu-id="d0f99-455">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-456">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-457">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-458">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-459">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-460">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-461">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-462">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-463">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-464">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-465">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-466">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-467">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-468">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-469">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-470">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-471">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-472">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-473">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-474">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-474">Required.</span>
          </span>
          <span data-ttu-id="d0f99-475">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-476">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-477">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-478">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-479">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-480">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-481">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-482">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-483">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-484">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-485">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-486">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-487">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-488">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-489">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-490">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-491">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-492">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-493">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-494">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-494">Required.</span>
          </span>
          <span data-ttu-id="d0f99-495">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-496">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-497">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-498">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-499">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-500">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-501">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-502">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-503">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-504">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-505">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-506">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-507">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-508">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-509">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-510">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-511">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-512">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-513">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-514">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-514">Required.</span>
          </span>
          <span data-ttu-id="d0f99-515">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-516">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-517">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-518">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-519">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-520">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-521">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-522">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-523">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-524">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-525">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-526">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-527">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-528">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-529">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-530">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-531">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-532">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-533">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-534">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-534">Required.</span>
          </span>
          <span data-ttu-id="d0f99-535">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-536">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-537">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-538">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-539">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-540">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-541">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-542">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-543">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-544">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-545">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-546">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-547">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-548">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-549">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-550">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-551">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-552">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-553">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-554">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-554">Required.</span>
          </span>
          <span data-ttu-id="d0f99-555">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d0f99-556">Jeśli <c>numer</c> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-557">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-558">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-559">Zarówno `Int` i `Fix` funkcje usuwanie ułamkowa część `Number` i zwracać wartość wynikowa liczba całkowita.</span><span class="sxs-lookup"><span data-stu-id="d0f99-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d0f99-560">Różnica między `Int` i `Fix` funkcji jest, że jeśli `Number` jest ujemna, `Int` zwraca pierwszej ujemnej liczby całkowitej mniejsze niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszej ujemnej liczby całkowitej większa niż lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d0f99-561">Na przykład `Int` konwertuje-8.4 -9, a `Fix` konwertuje-8.4 -8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d0f99-562">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d0f99-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-563">W tym przykładzie przedstawiono sposób `Int` i `Fix` zwracają części liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d0f99-564">W przypadku ujemna argument liczbowy `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba; `Fix` funkcja zwraca pierwszy ujemna liczba całkowita większa lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="d0f99-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d0f99-565">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawną konwersję z typu `Double` na typ `Integer` nie są dozwolone w obszarze `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d0f99-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d0f99-566">Można użyć `CInt` funkcji, aby jawnie przekonwertować na typ innych typów danych `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d0f99-567">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej zamiast obcinanie ułamkową część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d0f99-568">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d0f99-569">Można użyć `CInt` funkcja wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji do liczby całkowitej bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d0f99-570">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="d0f99-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d0f99-571">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d0f99-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-572">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-573">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f99-574">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-575">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-575">Required.</span>
          </span>
          <span data-ttu-id="d0f99-576">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-577">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-578">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-579">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-580">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-580">If Number is</span></span>|<span data-ttu-id="d0f99-581">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="d0f99-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-582">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-582">Empty</span></span>|<span data-ttu-id="d0f99-583">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-583">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-584">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="d0f99-584">Any other number</span></span>|<span data-ttu-id="d0f99-585">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d0f99-586">Może reprezentować liczby ósemkowe bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&O`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d0f99-587">Na przykład `&O10` jest ósemkowe notacji dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-588">W tym przykładzie użyto `Oct` funkcja zwracająca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-589">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-590">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-591">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-591">Required.</span>
          </span>
          <span data-ttu-id="d0f99-592">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-593">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-594">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-595">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-596">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-596">If Number is</span></span>|<span data-ttu-id="d0f99-597">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="d0f99-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-598">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-598">Empty</span></span>|<span data-ttu-id="d0f99-599">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-599">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-600">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="d0f99-600">Any other number</span></span>|<span data-ttu-id="d0f99-601">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d0f99-602">Może reprezentować liczby ósemkowe bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&O`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d0f99-603">Na przykład `&O10` jest ósemkowe notacji dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-604">W tym przykładzie użyto `Oct` funkcja zwracająca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-605">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-606">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-607">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-607">Required.</span>
          </span>
          <span data-ttu-id="d0f99-608">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-609">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-610">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-611">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-612">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-612">If Number is</span></span>|<span data-ttu-id="d0f99-613">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="d0f99-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-614">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-614">Empty</span></span>|<span data-ttu-id="d0f99-615">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-615">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-616">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="d0f99-616">Any other number</span></span>|<span data-ttu-id="d0f99-617">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d0f99-618">Może reprezentować liczby ósemkowe bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&O`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d0f99-619">Na przykład `&O10` jest ósemkowe notacji dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-620">W tym przykładzie użyto `Oct` funkcja zwracająca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-621">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-622">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-623">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-623">Required.</span>
          </span>
          <span data-ttu-id="d0f99-624">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-625">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-626">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-627">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-628">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-628">If Number is</span></span>|<span data-ttu-id="d0f99-629">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="d0f99-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-630">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-630">Empty</span></span>|<span data-ttu-id="d0f99-631">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-631">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-632">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="d0f99-632">Any other number</span></span>|<span data-ttu-id="d0f99-633">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d0f99-634">Może reprezentować liczby ósemkowe bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&O`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d0f99-635">Na przykład `&O10` jest ósemkowe notacji dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-636">W tym przykładzie użyto `Oct` funkcja zwracająca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-637">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-638">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-639">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-639">Required.</span>
          </span>
          <span data-ttu-id="d0f99-640">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-641">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-642">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-643">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-644">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-644">If Number is</span></span>|<span data-ttu-id="d0f99-645">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="d0f99-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-646">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-646">Empty</span></span>|<span data-ttu-id="d0f99-647">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-647">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-648">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="d0f99-648">Any other number</span></span>|<span data-ttu-id="d0f99-649">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d0f99-650">Może reprezentować liczby ósemkowe bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&O`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d0f99-651">Na przykład `&O10` jest ósemkowe notacji dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-652">W tym przykładzie użyto `Oct` funkcja zwracająca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-653">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-654">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-655">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-655">Required.</span>
          </span>
          <span data-ttu-id="d0f99-656">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-657">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-658">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-659">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-660">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-660">If Number is</span></span>|<span data-ttu-id="d0f99-661">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="d0f99-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-662">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-662">Empty</span></span>|<span data-ttu-id="d0f99-663">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-663">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-664">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="d0f99-664">Any other number</span></span>|<span data-ttu-id="d0f99-665">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d0f99-666">Może reprezentować liczby ósemkowe bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&O`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d0f99-667">Na przykład `&O10` jest ósemkowe notacji dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-668">W tym przykładzie użyto `Oct` funkcja zwracająca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-669">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-670">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-671">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-671">Required.</span>
          </span>
          <span data-ttu-id="d0f99-672">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-673">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-674">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-675">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-676">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-676">If Number is</span></span>|<span data-ttu-id="d0f99-677">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="d0f99-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-678">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-678">Empty</span></span>|<span data-ttu-id="d0f99-679">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-679">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-680">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="d0f99-680">Any other number</span></span>|<span data-ttu-id="d0f99-681">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d0f99-682">Może reprezentować liczby ósemkowe bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&O`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d0f99-683">Na przykład `&O10` jest ósemkowe notacji dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-684">W tym przykładzie użyto `Oct` funkcja zwracająca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-685">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-686">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-687">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-687">Required.</span>
          </span>
          <span data-ttu-id="d0f99-688">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-689">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-690">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-691">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-692">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-692">If Number is</span></span>|<span data-ttu-id="d0f99-693">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="d0f99-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-694">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-694">Empty</span></span>|<span data-ttu-id="d0f99-695">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-695">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-696">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="d0f99-696">Any other number</span></span>|<span data-ttu-id="d0f99-697">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d0f99-698">Może reprezentować liczby ósemkowe bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&O`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d0f99-699">Na przykład `&O10` jest ósemkowe notacji dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-700">W tym przykładzie użyto `Oct` funkcja zwracająca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-701">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-702">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-703">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-703">Required.</span>
          </span>
          <span data-ttu-id="d0f99-704">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-705">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-706">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-707">Jeśli `Number` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="d0f99-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d0f99-708">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="d0f99-708">If Number is</span></span>|<span data-ttu-id="d0f99-709">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="d0f99-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d0f99-710">Pusty</span><span class="sxs-lookup"><span data-stu-id="d0f99-710">Empty</span></span>|<span data-ttu-id="d0f99-711">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="d0f99-711">Zero (0)</span></span>|  
|<span data-ttu-id="d0f99-712">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="d0f99-712">Any other number</span></span>|<span data-ttu-id="d0f99-713">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="d0f99-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d0f99-714">Może reprezentować liczby ósemkowe bezpośrednio, poprzedzając liczby prawidłowego zakresu z `&O`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d0f99-715">Na przykład `&O10` jest ósemkowe notacji dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="d0f99-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-716">W tym przykładzie użyto `Oct` funkcja zwracająca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-717">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-718">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d0f99-719">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-719">Required.</span>
          </span>
          <span data-ttu-id="d0f99-720">
            <see langword="Object" /> Zawierający wszystkie prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-721">Zwraca <see langword="String" /> reprezentujący liczbę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-722">Zwraca <see langword="String" /> reprezentujący liczbę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-723">Podczas konwertowania liczb na ciągi, spacje wiodące zawsze jest zarezerwowany dla znak `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="d0f99-724">Jeśli `Number` jest dodatnia, zwracany ciąg zawiera spację i znak plus jest domyślny.</span><span class="sxs-lookup"><span data-stu-id="d0f99-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="d0f99-725">Wartość ujemną będzie zawierać znak minus (-) i bez spacji początkowych.</span><span class="sxs-lookup"><span data-stu-id="d0f99-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="d0f99-726">Użyj `Format` funkcji konwersji wartości liczbowe ma być sformatowany jako daty, godziny i waluty lub inne formaty zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="d0f99-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="d0f99-727">W odróżnieniu od `Str` funkcji `Format` funkcja nie zawiera spacje wiodące dla znak `Number`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0f99-728">`Str` Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="d0f99-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d0f99-729">Jeśli używane są różne separatorów dziesiętnych (na przykład w aplikacjach międzynarodowych), użyj `CStr` lub `Format` funkcje do konwertowania wartości na ciąg.</span><span class="sxs-lookup"><span data-stu-id="d0f99-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="d0f99-730">Aby uzyskać reprezentację liczby w określonej kultury, użyj numeru `ToString(IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="d0f99-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="d0f99-731">Na przykład użyć <xref:System.Double.ToString%2A> podczas konwertowania wartości typu `Double` na ciąg.</span><span class="sxs-lookup"><span data-stu-id="d0f99-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-732">W tym przykładzie użyto `Str` funkcja zwracająca `String` reprezentujący liczbę.</span><span class="sxs-lookup"><span data-stu-id="d0f99-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="d0f99-733">Gdy dodatnia liczba jest konwertowana na ciąg, spacje wiodące zawsze jest zarezerwowana dla znaku.</span><span class="sxs-lookup"><span data-stu-id="d0f99-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0f99-734">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="d0f99-735">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0f99-736">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="d0f99-737">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-737">Required.</span>
          </span>
          <span data-ttu-id="d0f99-738">Wszystkie prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="d0f99-739">Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, jego wartość musi być możliwe do przekonwertowania na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-740">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-741">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-742">`Val` Funkcja zatrzymuje odczytywania ciągu pierwszego znaku nie jest rozpoznawana jako część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d0f99-743">Symbole i znaki, które często są traktowane jako elementy wartości liczbowych, takie jak znak dolara i przecinek, nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="d0f99-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d0f99-744">Jednak funkcja rozpoznaje prefiksy podstaw `&O` (dla ósemkowe) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="d0f99-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d0f99-745">Spacje, tabulatory i znaki wysuwu wiersza są odrzucane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="d0f99-746">Następujące wywołanie zwraca wartość 1615198.</span><span class="sxs-lookup"><span data-stu-id="d0f99-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="d0f99-747">Następujące wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="d0f99-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d0f99-748">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="d0f99-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d0f99-749">W przypadku używania różnych separatorów jak aplikacje międzynarodowe, użyj `CDbl` lub `CInt` zamiast tego do przekonwertowania ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="d0f99-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d0f99-750">Aby przekonwertować reprezentację liczby w określonej kultury w wartość liczbową, użyj typ liczbowy `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="d0f99-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d0f99-751">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu na `Double`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0f99-752"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre formaty liczbowe rzadko.</span><span class="sxs-lookup"><span data-stu-id="d0f99-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d0f99-753">Na przykład następujący kod wywołuje ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d0f99-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d0f99-754">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaków typu czy przechwycony przez kompilator, jeśli nie zostały zawarte w ciągu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-755">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d0f99-756">`Val` Zatrzymuje Konwertowanie pierwszego znaku, który nie może zostać zinterpretowany jako cyfrę, modyfikator liczbowego, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="d0f99-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="d0f99-757">
            <paramref name="InputStr" /> jest za duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-758">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest możliwe do przekonwertowania na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="d0f99-759">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-759">Required.</span>
          </span>
          <span data-ttu-id="d0f99-760">Wszystkie prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="d0f99-761">Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, jego wartość musi być możliwe do przekonwertowania na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-762">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-763">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-764">`Val` Funkcja zatrzymuje odczytywania ciągu pierwszego znaku nie jest rozpoznawana jako część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d0f99-765">Symbole i znaki, które często są traktowane jako elementy wartości liczbowych, takie jak znak dolara i przecinek, nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="d0f99-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d0f99-766">Jednak funkcja rozpoznaje prefiksy podstaw `&O` (dla ósemkowe) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="d0f99-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d0f99-767">Spacje, tabulatory i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="d0f99-768">Następujące wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="d0f99-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="d0f99-769">Następujące wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="d0f99-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d0f99-770">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="d0f99-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d0f99-771">W przypadku używania innych separatorów w aplikacjach międzynarodowych, użyj `CDbl` lub `CInt` zamiast tego do przekonwertowania ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="d0f99-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d0f99-772">Aby przekonwertować reprezentację liczby w określonej kultury w wartość liczbową, użyj typ liczbowy `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="d0f99-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d0f99-773">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu na `Double`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0f99-774"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre formaty liczbowe rzadko.</span><span class="sxs-lookup"><span data-stu-id="d0f99-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d0f99-775">Na przykład następujący kod wywołuje ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d0f99-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d0f99-776">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaków typu czy przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="d0f99-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-777">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d0f99-778">`Val` Zatrzymuje Konwertowanie pierwszego znaku, który nie może zostać zinterpretowany jako cyfrę, modyfikator liczbowego, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="d0f99-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="d0f99-779">
            <paramref name="InputStr" /> jest za duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-780">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest możliwe do przekonwertowania na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="d0f99-781">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-781">Required.</span>
          </span>
          <span data-ttu-id="d0f99-782">Wszystkie prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="d0f99-783">Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, jego wartość musi być możliwe do przekonwertowania na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0f99-784">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0f99-785">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0f99-786">`Val` Funkcja zatrzymuje odczytywania ciągu pierwszego znaku nie jest rozpoznawana jako część liczby.</span><span class="sxs-lookup"><span data-stu-id="d0f99-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d0f99-787">Symbole i znaki, które często są traktowane jako elementy wartości liczbowych, takie jak znak dolara i przecinek, nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="d0f99-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d0f99-788">Jednak funkcja rozpoznaje prefiksy podstaw `&O` (dla ósemkowe) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="d0f99-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d0f99-789">Spacje, tabulatory i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="d0f99-790">Następujące wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="d0f99-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="d0f99-791">Następujące wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="d0f99-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d0f99-792">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="d0f99-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d0f99-793">W przypadku używania innych separatorów w aplikacjach międzynarodowych, użyj `CDbl` lub `CInt` zamiast tego do przekonwertowania ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="d0f99-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d0f99-794">Aby przekonwertować reprezentację liczby w określonej kultury w wartość liczbową, użyj typ liczbowy `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="d0f99-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d0f99-795">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu na `Double`.</span><span class="sxs-lookup"><span data-stu-id="d0f99-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0f99-796"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre formaty liczbowe rzadko.</span><span class="sxs-lookup"><span data-stu-id="d0f99-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d0f99-797">Na przykład następujący kod wywołuje ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d0f99-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d0f99-798">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaków typu czy przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="d0f99-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d0f99-799">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="d0f99-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d0f99-800">`Val` Zatrzymuje Konwertowanie pierwszego znaku, który nie może zostać zinterpretowany jako cyfrę, modyfikator liczbowego, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="d0f99-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="d0f99-801">
            <paramref name="InputStr" /> jest za duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0f99-802">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest możliwe do przekonwertowania na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0f99-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>