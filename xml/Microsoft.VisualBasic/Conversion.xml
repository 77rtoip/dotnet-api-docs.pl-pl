<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="17f9663df373a96bd0268bb9ac91da83c9a425cc" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55358631" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0a6b3-101"><see langword="Conversion" /> Moduł zawiera procedur w celu wykonywania różnych operacji konwersji.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-102">Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które Konwertuj liczby dziesiętne na inne podstawy liczb do ciągów, ciągów na liczby i danych jednego typu na inny.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-103">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-104">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="0a6b3-105">Słowa kluczowe (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="0a6b3-106">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</span><span class="sxs-lookup"><span data-stu-id="0a6b3-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="0a6b3-107">Obiekt do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="0a6b3-108">Typ, do którego należy przekonwertować obiekt.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="0a6b3-109">Konwertuje obiekt określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-110">Obiekt, którego typem w czasie wykonywania jest typ żądanego elementu docelowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-111">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` typu określonego przez parametr `TargetType` parametru.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="0a6b3-112">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="0a6b3-113">`CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="0a6b3-114">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="0a6b3-115">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="0a6b3-116">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-117">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="0a6b3-118">Praca z obiektami dynamicznymi (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="0a6b3-119">Przewodnik: Tworzenie obiektów dynamicznych i posługiwanie (C# i Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="0a6b3-120">Typ, do którego należy przekonwertować obiekt.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="0a6b3-121">Obiekt do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="0a6b3-122">Konwertuje obiekt określonego typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-123">Obiekt, który statycznie wpisanych w formie żądanego typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-124">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` parametru na typ określony przez typ parametru ogólnego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="0a6b3-125">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="0a6b3-126">`CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="0a6b3-127">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="0a6b3-128">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="0a6b3-129">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-130">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="0a6b3-131">Praca z obiektami dynamicznymi (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="0a6b3-132">Przewodnik: Tworzenie obiektów dynamicznych i posługiwanie (C# i Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0a6b3-133">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0a6b3-134">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-135">Komunikat o błędzie, odpowiadający ostatni błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-136">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="0a6b3-137">Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="0a6b3-138">Jeśli nie błąd czasu wykonywania `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="0a6b3-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="0a6b3-139">W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-140">Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-141"><paramref name="ErrorNumber" /> jest poza zakresem.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="0a6b3-142">Opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-142">Optional.</span></span> <span data-ttu-id="0a6b3-143">Dowolna liczba błędów prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="0a6b3-144">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-145">Komunikat o błędzie, który odpowiada numerowi danego błędu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-146">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="0a6b3-147">Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="0a6b3-148">Jeśli `ErrorNumber` jest prawidłowym numerem błędu, ale nie jest zdefiniowany, `ErrorToString` zwraca ciąg `"Application-defined or object-defined error."` Jeśli `ErrorNumber` jest nieprawidłowy, wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="0a6b3-149">Jeśli `ErrorNumber` zostanie pominięty, wiadomości, odpowiadający najnowszej zwracany jest błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="0a6b3-150">W przypadku braku błędów czasu wykonywania lub `ErrorNumber` ma wartość 0, `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="0a6b3-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="0a6b3-151">W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-152">Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-153"><paramref name="ErrorNumber" /> jest poza zakresem.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0a6b3-154">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-155">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-155">Required.</span></span> <span data-ttu-id="0a6b3-156">Liczba typu <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-157">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-158">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-159">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-160">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-161">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-162">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="0a6b3-163">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-164">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-165">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-166">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-167">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-168">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-169">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-170">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-171">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-172">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-173">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-174">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-175">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-176">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-177">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-178">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-179">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-179">Required.</span></span> <span data-ttu-id="0a6b3-180">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-181">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-182">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-183">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-184">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-185">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-186">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="0a6b3-187">Począwszy od Visual Basic 15.8, wydajność `Double`-do-konwersji liczba całkowita jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Fix` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli `Double`wartość zwrócona przez obiekt `Fix` jest niejawnie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) równa `Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="0a6b3-188">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="0a6b3-189">Poniższy przykład ilustruje zoptymalizowane konwersji:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="0a6b3-190">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-191">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-192">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-193">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-194">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-195">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-196">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-197">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-198">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-199">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-200">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-201">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-202">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-203">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-204">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-205">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-206">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-206">Required.</span></span> <span data-ttu-id="0a6b3-207">Liczba typu <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-208">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-209">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-210">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-211">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-212">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-213">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-214">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-215">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-216">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-217">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-218">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-219">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-220">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-221">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-222">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-223">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-224">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-225">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-226">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-227">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-228">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-229">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-230">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-230">Required.</span></span> <span data-ttu-id="0a6b3-231">Liczba typu <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-232">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-233">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-234">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-235">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-236">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-237">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-238">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-239">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-240">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-241">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-242">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-243">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-244">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-245">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-246">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-247">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-248">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-249">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-250">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-251">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-252">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-253">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-254">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-254">Required.</span></span> <span data-ttu-id="0a6b3-255">Liczba typu <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-256">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-257">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-258">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-259">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-260">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-261">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-262">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-263">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-264">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-265">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-266">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-267">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-268">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-269">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-270">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-271">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-272">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-273">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-274">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-275">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-276">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-277">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-278">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-278">Required.</span></span> <span data-ttu-id="0a6b3-279">Liczba typu <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="0a6b3-280">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="0a6b3-281">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-282">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-283">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-284">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-285">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-286">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="0a6b3-287">Począwszy od 15.8 Visual Basic, jeśli `Number` argument jest obiektem o typie środowiska uruchomieniowego `Double` lub `Single`, floating-point na całkowite konwersji jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Fix` Metoda do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli wartość zwracana przez `Fix` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="0a6b3-288">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="0a6b3-289">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="0a6b3-290">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-291">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-292">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-293">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-294">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-295">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-296">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-297">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-298">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-299">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-300">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-301">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-302">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-303">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-304">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-305">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-306">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-306">Required.</span></span> <span data-ttu-id="0a6b3-307">Liczba typu <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-308">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-309">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-310">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-311">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-312">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-313">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="0a6b3-314">Począwszy od Visual Basic 15.8, wydajność `Single`-do-konwersji liczba całkowita jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Fix` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli `Single`wartość zwrócona przez obiekt `Fix` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="0a6b3-315">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="0a6b3-316">Poniższy przykład ilustruje zoptymalizowane konwersji:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="0a6b3-317">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-318">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-319">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-320">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-321">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-322">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-323">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-324">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-325">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-326">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-327">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-328">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-329">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-330">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-331">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-332">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0a6b3-333">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-334">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-334">Required.</span></span> <span data-ttu-id="0a6b3-335">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-336">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-337">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-338">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-339">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-339">If `Number` is</span></span>|<span data-ttu-id="0a6b3-340">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="0a6b3-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-341">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-341">Empty</span></span>|<span data-ttu-id="0a6b3-342">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-342">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-343">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="0a6b3-343">Any numeric value</span></span>|<span data-ttu-id="0a6b3-344">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-345">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="0a6b3-346">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-347">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-348"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-349"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-350">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="0a6b3-351">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</span><span class="sxs-lookup"><span data-stu-id="0a6b3-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-352">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-352">Required.</span></span> <span data-ttu-id="0a6b3-353">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-354">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-355">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-356">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-357">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-357">If `Number` is</span></span>|<span data-ttu-id="0a6b3-358">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="0a6b3-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-359">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-359">Empty</span></span>|<span data-ttu-id="0a6b3-360">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-360">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-361">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="0a6b3-361">Any numeric value</span></span>|<span data-ttu-id="0a6b3-362">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-363">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="0a6b3-364">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-365">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-366"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-367"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-368">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="0a6b3-369">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</span><span class="sxs-lookup"><span data-stu-id="0a6b3-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-370">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-370">Required.</span></span> <span data-ttu-id="0a6b3-371">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-372">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-373">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-374">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-375">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-375">If `Number` is</span></span>|<span data-ttu-id="0a6b3-376">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="0a6b3-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-377">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-377">Empty</span></span>|<span data-ttu-id="0a6b3-378">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-378">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-379">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="0a6b3-379">Any numeric value</span></span>|<span data-ttu-id="0a6b3-380">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-381">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="0a6b3-382">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-383">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-384"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-385"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-386">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="0a6b3-387">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</span><span class="sxs-lookup"><span data-stu-id="0a6b3-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-388">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-388">Required.</span></span> <span data-ttu-id="0a6b3-389">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-390">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-391">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-392">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-393">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-393">If `Number` is</span></span>|<span data-ttu-id="0a6b3-394">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="0a6b3-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-395">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-395">Empty</span></span>|<span data-ttu-id="0a6b3-396">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-396">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-397">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="0a6b3-397">Any numeric value</span></span>|<span data-ttu-id="0a6b3-398">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-399">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="0a6b3-400">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-401">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-402"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-403"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-404">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="0a6b3-405">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</span><span class="sxs-lookup"><span data-stu-id="0a6b3-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-406">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-406">Required.</span></span> <span data-ttu-id="0a6b3-407">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-408">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-409">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-410">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-411">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-411">If `Number` is</span></span>|<span data-ttu-id="0a6b3-412">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="0a6b3-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-413">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-413">Empty</span></span>|<span data-ttu-id="0a6b3-414">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-414">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-415">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="0a6b3-415">Any numeric value</span></span>|<span data-ttu-id="0a6b3-416">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-417">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="0a6b3-418">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-419">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-420"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-421"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-422">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="0a6b3-423">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</span><span class="sxs-lookup"><span data-stu-id="0a6b3-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-424">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-424">Required.</span></span> <span data-ttu-id="0a6b3-425">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-426">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-427">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-428">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-429">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-429">If `Number` is</span></span>|<span data-ttu-id="0a6b3-430">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="0a6b3-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-431">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-431">Empty</span></span>|<span data-ttu-id="0a6b3-432">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-432">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-433">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="0a6b3-433">Any numeric value</span></span>|<span data-ttu-id="0a6b3-434">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-435">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="0a6b3-436">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-437">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-438"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-439"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-440">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="0a6b3-441">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</span><span class="sxs-lookup"><span data-stu-id="0a6b3-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-442">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-442">Required.</span></span> <span data-ttu-id="0a6b3-443">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-444">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-445">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-446">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-447">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-447">If `Number` is</span></span>|<span data-ttu-id="0a6b3-448">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="0a6b3-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-449">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-449">Empty</span></span>|<span data-ttu-id="0a6b3-450">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-450">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-451">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="0a6b3-451">Any numeric value</span></span>|<span data-ttu-id="0a6b3-452">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-453">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="0a6b3-454">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-455">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-456"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-457"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-458">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="0a6b3-459">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</span><span class="sxs-lookup"><span data-stu-id="0a6b3-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-460">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-460">Required.</span></span> <span data-ttu-id="0a6b3-461">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-462">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-463">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-464">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-465">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-465">If `Number` is</span></span>|<span data-ttu-id="0a6b3-466">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="0a6b3-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-467">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-467">Empty</span></span>|<span data-ttu-id="0a6b3-468">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-468">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-469">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="0a6b3-469">Any numeric value</span></span>|<span data-ttu-id="0a6b3-470">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-471">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="0a6b3-472">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-473">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-474"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-475"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-476">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="0a6b3-477">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</span><span class="sxs-lookup"><span data-stu-id="0a6b3-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-478">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-478">Required.</span></span> <span data-ttu-id="0a6b3-479">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-480">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-481">Ciąg reprezentujący wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-482">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-483">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-483">If `Number` is</span></span>|<span data-ttu-id="0a6b3-484">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="0a6b3-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-485">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-485">Empty</span></span>|<span data-ttu-id="0a6b3-486">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-486">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-487">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="0a6b3-487">Any numeric value</span></span>|<span data-ttu-id="0a6b3-488">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-489">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="0a6b3-490">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-491">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-492"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-493"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-494">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="0a6b3-495">Instrukcje: Konwertowanie ciągów szestnastkowych na numery</span><span class="sxs-lookup"><span data-stu-id="0a6b3-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0a6b3-496">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-497">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-497">Required.</span></span> <span data-ttu-id="0a6b3-498">Liczba typu <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-499">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-500">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-501">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-502">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-503">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-504">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="0a6b3-505">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-506">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-507">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-508">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-509">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-510">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-511">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-512">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-513">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-514">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-515">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-516">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-517">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-518">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-519">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-520">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-521">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-521">Required.</span></span> <span data-ttu-id="0a6b3-522">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-523">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-524">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-525">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-526">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-527">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-528">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="0a6b3-529">Począwszy od programu Visual Basic 15.8 wydajność podwójnej precyzji na całkowite konwersji jest zoptymalizowane pod kątem w przypadku przekazania wartości zwracanej przez `Int` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli podwójna wartość zwrócone przez `Int` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="0a6b3-530">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="0a6b3-531">Poniższy przykład ilustruje zoptymalizowane konwersji:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="0a6b3-532">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-533">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-534">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-535">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-536">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-537">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-538">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-539">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-540">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-541">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-542">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-543">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-544">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-545">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-546">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-547">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-548">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-548">Required.</span></span> <span data-ttu-id="0a6b3-549">Liczba typu <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-550">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-551">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-552">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-553">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-554">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-555">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-556">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-557">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-558">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-559">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-560">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-561">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-562">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-563">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-564">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-565">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-566">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-567">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-568">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-569">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-570">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-571">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-572">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-572">Required.</span></span> <span data-ttu-id="0a6b3-573">Liczba typu <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-574">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-575">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-576">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-577">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-578">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-579">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-580">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-581">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-582">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-583">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-584">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-585">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-586">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-587">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-588">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-589">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-590">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-591">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-592">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-593">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-594">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-595">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-596">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-596">Required.</span></span> <span data-ttu-id="0a6b3-597">Liczba typu <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-598">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-599">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-600">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-601">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-602">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-603">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-604">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-605">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-606">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-607">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-608">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-609">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-610">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-611">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-612">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-613">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-614">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-615">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-616">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-617">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-618">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-619">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-620">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-620">Required.</span></span> <span data-ttu-id="0a6b3-621">Liczba typu <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="0a6b3-622">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="0a6b3-623">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-624">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-625">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-626">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-627">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-628">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="0a6b3-629">Począwszy od 15.8 Visual Basic, jeśli `Number` argument jest obiektem o typie środowiska uruchomieniowego `Double` lub `Single`, floating-point na całkowite konwersji jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Int` Metoda do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli wartość zwracana przez `Int` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="0a6b3-630">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="0a6b3-631">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="0a6b3-632">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-633">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-634">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-635">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-636">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-637">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-638">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-639">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-640">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-641">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-642">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-643">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-644">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-645">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-646">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-647">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-648">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-648">Required.</span></span> <span data-ttu-id="0a6b3-649">Liczba typu <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-650">Zwraca część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-651">Część całkowitą liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-652">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="0a6b3-653">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="0a6b3-654">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="0a6b3-655">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="0a6b3-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="0a6b3-656">Począwszy od Visual Basic 15.8, wydajność `Single`-do-konwersji liczba całkowita jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Int` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli `Single`wartość zwrócona przez obiekt `Int` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="0a6b3-657">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="0a6b3-658">Poniższy przykład ilustruje zoptymalizowane konwersji:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="0a6b3-659">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="0a6b3-660">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="0a6b3-661">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="0a6b3-662">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="0a6b3-663">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="0a6b3-664">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="0a6b3-665">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="0a6b3-666">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="0a6b3-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="0a6b3-667">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-668">Nie określono parametru Number.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-669">Parametr Number nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-670">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="0a6b3-671">Typ danych — Podsumowanie (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="0a6b3-672">Podsumowanie matematyczne</span><span class="sxs-lookup"><span data-stu-id="0a6b3-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="0a6b3-673">Funkcje matematyczne (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-674">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0a6b3-675">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-676">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-676">Required.</span></span> <span data-ttu-id="0a6b3-677">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-678">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-679">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-680">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-681">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-681">If Number is</span></span>|<span data-ttu-id="0a6b3-682">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="0a6b3-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-683">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-683">Empty</span></span>|<span data-ttu-id="0a6b3-684">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-684">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-685">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="0a6b3-685">Any other number</span></span>|<span data-ttu-id="0a6b3-686">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-687">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="0a6b3-688">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-689">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-690"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-691"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-692">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-693">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-694">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-694">Required.</span></span> <span data-ttu-id="0a6b3-695">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-696">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-697">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-698">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-699">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-699">If Number is</span></span>|<span data-ttu-id="0a6b3-700">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="0a6b3-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-701">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-701">Empty</span></span>|<span data-ttu-id="0a6b3-702">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-702">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-703">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="0a6b3-703">Any other number</span></span>|<span data-ttu-id="0a6b3-704">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-705">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="0a6b3-706">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-707">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-708"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-709"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-710">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-711">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-712">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-712">Required.</span></span> <span data-ttu-id="0a6b3-713">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-714">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-715">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-716">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-717">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-717">If Number is</span></span>|<span data-ttu-id="0a6b3-718">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="0a6b3-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-719">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-719">Empty</span></span>|<span data-ttu-id="0a6b3-720">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-720">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-721">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="0a6b3-721">Any other number</span></span>|<span data-ttu-id="0a6b3-722">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-723">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="0a6b3-724">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-725">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-726"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-727"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-728">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-729">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-730">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-730">Required.</span></span> <span data-ttu-id="0a6b3-731">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-732">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-733">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-734">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-735">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-735">If Number is</span></span>|<span data-ttu-id="0a6b3-736">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="0a6b3-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-737">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-737">Empty</span></span>|<span data-ttu-id="0a6b3-738">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-738">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-739">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="0a6b3-739">Any other number</span></span>|<span data-ttu-id="0a6b3-740">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-741">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="0a6b3-742">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-743">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-744"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-745"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-746">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-747">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-748">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-748">Required.</span></span> <span data-ttu-id="0a6b3-749">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-750">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-751">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-752">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-753">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-753">If Number is</span></span>|<span data-ttu-id="0a6b3-754">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="0a6b3-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-755">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-755">Empty</span></span>|<span data-ttu-id="0a6b3-756">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-756">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-757">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="0a6b3-757">Any other number</span></span>|<span data-ttu-id="0a6b3-758">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-759">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="0a6b3-760">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-761">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-762"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-763"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-764">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-765">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-766">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-766">Required.</span></span> <span data-ttu-id="0a6b3-767">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-768">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-769">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-770">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-771">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-771">If Number is</span></span>|<span data-ttu-id="0a6b3-772">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="0a6b3-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-773">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-773">Empty</span></span>|<span data-ttu-id="0a6b3-774">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-774">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-775">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="0a6b3-775">Any other number</span></span>|<span data-ttu-id="0a6b3-776">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-777">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="0a6b3-778">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-779">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-780"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-781"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-782">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-783">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-784">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-784">Required.</span></span> <span data-ttu-id="0a6b3-785">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-786">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-787">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-788">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-789">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-789">If Number is</span></span>|<span data-ttu-id="0a6b3-790">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="0a6b3-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-791">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-791">Empty</span></span>|<span data-ttu-id="0a6b3-792">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-792">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-793">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="0a6b3-793">Any other number</span></span>|<span data-ttu-id="0a6b3-794">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-795">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="0a6b3-796">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-797">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-798"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-799"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-800">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-801">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-802">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-802">Required.</span></span> <span data-ttu-id="0a6b3-803">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-804">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-805">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-806">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-807">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-807">If Number is</span></span>|<span data-ttu-id="0a6b3-808">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="0a6b3-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-809">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-809">Empty</span></span>|<span data-ttu-id="0a6b3-810">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-810">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-811">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="0a6b3-811">Any other number</span></span>|<span data-ttu-id="0a6b3-812">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-813">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="0a6b3-814">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-815">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-816"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-817"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-818">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-819">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-820">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-820">Required.</span></span> <span data-ttu-id="0a6b3-821">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-822">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-823">Ciąg reprezentujący wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-824">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="0a6b3-825">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="0a6b3-825">If Number is</span></span>|<span data-ttu-id="0a6b3-826">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="0a6b3-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="0a6b3-827">Pusty</span><span class="sxs-lookup"><span data-stu-id="0a6b3-827">Empty</span></span>|<span data-ttu-id="0a6b3-828">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="0a6b3-828">Zero (0)</span></span>|  
|<span data-ttu-id="0a6b3-829">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="0a6b3-829">Any other number</span></span>|<span data-ttu-id="0a6b3-830">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="0a6b3-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="0a6b3-831">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="0a6b3-832">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-833">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-834"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-835"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-836">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-837">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="0a6b3-838">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-838">Required.</span></span> <span data-ttu-id="0a6b3-839"><see langword="Object" /> Zawierających dowolne prawidłowe wyrażenie liczbowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="0a6b3-840">Zwraca <see langword="String" /> reprezentującym liczbę.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-841">A <see langword="String" /> reprezentującym liczbę.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-842">Gdy liczby są konwertowane na ciągi znaków, spacje wiodące zawsze jest zarezerwowany dla znak `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="0a6b3-843">Jeśli `Number` jest dodatnia, zwrócony ciąg zawiera spacje wiodące i jest implikowane znak plus.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="0a6b3-844">Obejmuje ujemna znak minus (-) i bez spacji wiodących.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="0a6b3-845">Użyj `Format` funkcji konwersji wartości numerycznych, które mają być sformatowane jako daty, godziny i waluty, lub w innych formatach zdefiniowanych przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="0a6b3-846">W odróżnieniu od `Str` funkcji `Format` funkcja nie zawiera spacje wiodące na znak argumentu `Number`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0a6b3-847">`Str` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="0a6b3-848">Użycie innych separatorów dziesiętnych (na przykład w aplikacjach międzynarodowych) użyj `CStr` lub `Format` funkcji w celu przekonwertowania liczby na ciąg.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="0a6b3-849">Aby uzyskać ciąg reprezentujący numer w danej kultury, należy użyć numeru `ToString(IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="0a6b3-850">Na przykład użyć <xref:System.Double.ToString%2A> podczas konwertowania wartości typu `Double` na ciąg.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-851">W tym przykładzie użyto `Str` funkcja zwraca `String` reprezentującym liczbę.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="0a6b3-852">Gdy liczba dodatnia jest konwertowana na ciąg, spacje wiodące zawsze jest zarezerwowana dla znaku.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a6b3-853"><paramref name="Number" /> nie określono.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="0a6b3-854"><paramref name="Number" /> nie jest typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="0a6b3-855">Konwersja — Podsumowanie</span><span class="sxs-lookup"><span data-stu-id="0a6b3-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-856">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0a6b3-857">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="0a6b3-858">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-858">Required.</span></span> <span data-ttu-id="0a6b3-859">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="0a6b3-860">Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="0a6b3-861">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-862">Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-863">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="0a6b3-864">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="0a6b3-865">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="0a6b3-866">Wartości puste, karty i znaki wysuwu wiersza są odrzucane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="0a6b3-867">Poniższe wywołanie zwraca wartość 1615198.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="0a6b3-868">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="0a6b3-869">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="0a6b3-870">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="0a6b3-871">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="0a6b3-872">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="0a6b3-873"><xref:System.InvalidCastException> Wyjątku może zostać wygenerowany w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="0a6b3-874">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="0a6b3-875">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli nie zostały zawarte w ciągu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-876">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="0a6b3-877">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="0a6b3-878"><paramref name="InputStr" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-879"><paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-880">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="0a6b3-881">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-881">Required.</span></span> <span data-ttu-id="0a6b3-882">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="0a6b3-883">Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="0a6b3-884">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-885">Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-886">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="0a6b3-887">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="0a6b3-888">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="0a6b3-889">Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="0a6b3-890">Poniższe wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="0a6b3-891">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="0a6b3-892">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="0a6b3-893">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="0a6b3-894">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="0a6b3-895">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0a6b3-896"><xref:System.InvalidCastException> Wyjątku może zostać wygenerowany w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="0a6b3-897">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="0a6b3-898">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-899">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="0a6b3-900">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="0a6b3-901"><paramref name="InputStr" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-902"><paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-903">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="0a6b3-904">Wymagana.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-904">Required.</span></span> <span data-ttu-id="0a6b3-905">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="0a6b3-906">Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="0a6b3-907">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="0a6b3-908">Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a6b3-909">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="0a6b3-910">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="0a6b3-911">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="0a6b3-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="0a6b3-912">Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="0a6b3-913">Poniższe wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="0a6b3-914">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="0a6b3-915">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="0a6b3-916">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="0a6b3-917">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="0a6b3-918">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0a6b3-919"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="0a6b3-920">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="0a6b3-921">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="0a6b3-922">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="0a6b3-923">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="0a6b3-924"><paramref name="InputStr" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a6b3-925"><paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="0a6b3-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="0a6b3-926">Funkcje konwersji typu</span><span class="sxs-lookup"><span data-stu-id="0a6b3-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>