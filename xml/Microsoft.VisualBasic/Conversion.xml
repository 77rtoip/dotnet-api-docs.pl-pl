<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="093db67cb3c739ef9d2f91f8d2e98f666d35387b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317880" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Conversion" /> Moduł zawiera procedury używane do wykonywania różnych operacji konwersji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które konwertują liczby dziesiętne na inne bazy, cyfry do ciągów, ciągi znaków do liczb i jeden typ danych na inny.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Obiekt do przekonwertowania.</param>
        <param name="TargetType">Typ, do którego ma zostać przekonwertowany obiekt.</param>
        <summary>Konwertuje obiekt na określony typ.</summary>
        <returns>Obiekt, którego typem w czasie wykonywania jest żądany typ docelowy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda konwertuje obiekt przekazaną `Expression` jako parametr do typu określonego przez `TargetType` parametr. `CTypeDynamic` Jeśli obiekt jest obiektem dynamicznym, `CTypeDynamic` Metoda stosuje dostępne konwersje dynamiczne.  
  
 `CTypeDynamic` Metoda stosuje konwersje dynamiczne zgodnie z semantyką konwersji zdefiniowaną przez sam obiekt. Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject> `CTypeDynamic` , Metoda najpierw próbuje wykonać konwersję przy użyciu zdefiniowanej przez użytkownika konwersji statycznej. Jeśli zdefiniowana przez użytkownika, konwersja statyczna nie powiedzie `CTypeDynamic` się, metoda próbuje wykonać konwersję przy użyciu konwersji dynamiczne. <xref:System.Dynamic.IDynamicMetaObjectProvider> W`CTypeDynamic` przypadku implementowania obiektu dynamicznego Metoda daje pierwszeństwo dla konwersji dynamicznych przy użyciu konwersji statycznej zdefiniowanej przez użytkownika.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `CTypeDynamic` metody do przekonwertowania obiektu dynamicznego na ciąg przy użyciu konwersji zdefiniowanej przez obiekt dynamiczny.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Praca z obiektami dynamicznymi (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Przewodnik: Tworzenie obiektów dynamicznych i posługiwanie się nimi (C# i Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">Typ, do którego ma zostać przekonwertowany obiekt.</typeparam>
        <param name="Expression">Obiekt do przekonwertowania.</param>
        <summary>Konwertuje obiekt na określony typ ogólny.</summary>
        <returns>Obiekt statycznie wpisany jako żądany typ ogólny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda konwertuje obiekt przekazaną `Expression` jako parametr do typu określonego przez typ parametru generycznego. `CTypeDynamic` Jeśli obiekt jest obiektem dynamicznym, `CTypeDynamic` Metoda stosuje dostępne konwersje dynamiczne.  
  
 `CTypeDynamic` Metoda stosuje konwersje dynamiczne zgodnie z semantyką konwersji zdefiniowaną przez sam obiekt. Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject> `CTypeDynamic` , Metoda najpierw próbuje wykonać konwersję przy użyciu zdefiniowanej przez użytkownika konwersji statycznej. Jeśli zdefiniowana przez użytkownika, konwersja statyczna nie powiedzie `CTypeDynamic` się, metoda próbuje wykonać konwersję przy użyciu konwersji dynamiczne. <xref:System.Dynamic.IDynamicMetaObjectProvider> W`CTypeDynamic` przypadku implementowania obiektu dynamicznego Metoda daje pierwszeństwo dla konwersji dynamicznych przy użyciu konwersji statycznej zdefiniowanej przez użytkownika.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `CTypeDynamic` metody do przekonwertowania obiektu dynamicznego na ciąg przy użyciu konwersji zdefiniowanej przez obiekt dynamiczny.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Praca z obiektami dynamicznymi (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Przewodnik: Tworzenie obiektów dynamicznych i posługiwanie się nimi (C# i Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</summary>
        <returns>Komunikat o błędzie, który odnosi się do ostatniego błędu czasu wykonywania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcja bada ustawienia `Err` właściwości obiektu w celu zidentyfikowania ostatniego błędu czasu wykonywania. `ErrorToString` Wartość `ErrorToString` zwracana przez funkcję odpowiada `Description` właściwości `Err` obiektu. Jeśli wystąpi błąd w czasie wykonywania, `ErrorToString` zwraca ciąg o zerowej długości ("").  
  
 W Visual Basic w wersji 6,0 i starszych ta funkcja była świadczona przez `Error` funkcję.  
  
   
  
## Examples  
 Poniższy kod używa `ErrorToString` funkcji do wyświetlania komunikatów o błędach, które odpowiadają określonym numerom błędów.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" />jest poza zakresem.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">Opcjonalna. Dowolny prawidłowy numer błędu.</param>
        <summary>Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</summary>
        <returns>Komunikat o błędzie, który odnosi się do danego numeru błędu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcja bada ustawienia `Err` właściwości obiektu w celu zidentyfikowania ostatniego błędu czasu wykonywania. `ErrorToString` Wartość `ErrorToString` zwracana przez funkcję odpowiada `Description` właściwości `Err` obiektu. Jeśli `ErrorNumber` jest prawidłowym numerem błędu, ale nie jest zdefiniowany `ErrorToString` , zwraca ciąg `"Application-defined or object-defined error."` , `ErrorNumber` jeśli jest nieprawidłowy, wystąpi błąd. W `ErrorNumber` przypadku pominięcia zostanie zwrócony komunikat odpowiadający ostatniemu błędowi czasu wykonywania. Jeśli wystąpi błąd w czasie wykonywania lub `ErrorNumber` wartość 0, `ErrorToString` zwraca ciąg o zerowej długości ("").  
  
 W Visual Basic w wersji 6,0 i starszych ta funkcja była świadczona przez `Error` funkcję.  
  
   
  
## Examples  
 Poniższy kod używa `ErrorToString` funkcji do wyświetlania komunikatów o błędach, które odpowiadają określonym numerom błędów.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" />jest poza zakresem.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca część całkowitą liczby.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Liczba <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Liczba <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  

Począwszy od Visual Basic `Double`15,8, wydajność konwersji do liczby całkowitej jest zoptymalizowana, jeśli przekazujesz wartość zwróconą `Fix` przez metodę do którejkolwiek z [funkcji](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Double` konwersji całkowitej lub jeśli zwrócona wartość przez `Fix` jest niejawnie konwertowane na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawioną na `Off`. Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite. Poniższy przykład ilustruje taką zoptymalizowaną konwersję:

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Liczba <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Liczba <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Liczba <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Liczba <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe. Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" /> ,<see langword="Nothing" /> jest zwracana.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  

Począwszy od `Number` Visual Basic 15,8, jeśli argument jest obiektem, którego typem środowiska uruchomieniowego jest `Double` lub `Single`, wydajność konwersji zmiennoprzecinkowej na liczbę całkowitą jest optymalizowany, `Fix` Jeśli przekażesz wartość zwracaną przez Metoda do którejkolwiek z [funkcji konwersji całkowitej](~/docs/visual-basic/language-reference/functions/conversion-functions.md)lub jeśli wartość zwracana przez `Fix` jest automatycznie konwertowana na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawiona na off. Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite. Przykład:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Liczba <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
Począwszy od Visual Basic `Single`15,8, wydajność konwersji do liczby całkowitej jest zoptymalizowana, jeśli przekazujesz wartość zwróconą `Fix` przez metodę do którejkolwiek z [funkcji](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Single` konwersji całkowitej lub jeśli zwrócona wartość według `Fix` jest automatycznie konwertowane na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawioną na wartość off. Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite. Poniższy przykład ilustruje taką zoptymalizowaną konwersję:
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z. Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z. Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z. Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z. Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z. Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z. Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z. Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z. Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentujący wartość szesnastkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość szesnastkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli `Number` jest|Funkcja Hex zwraca|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna wartość liczbowa|Do szesnastu znaków szesnastkowych|  
  
 Można reprezentować liczby szesnastkowe bezpośrednio przez poprzednie numery w prawidłowym `&H`zakresie z. Na przykład `&H10` reprezentuje dziesiętną 16 w notacji szesnastkowej.  
  
   
  
## Examples  
 W tym przykładzie `Hex` funkcja zwraca wartość szesnastkową liczby.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Instrukcje: konwertowanie ciągów szesnastkowych na liczby</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca część całkowitą liczby.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Liczba <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
Począwszy od Visual Basic 15,8, wydajność konwersji podwójnej do liczby całkowitej jest zoptymalizowana, jeśli przekazujesz wartość zwróconą przez `Int` metodę do którejkolwiek [funkcji konwersji całkowitej](~/docs/visual-basic/language-reference/functions/conversion-functions.md)lub jeśli wartość podwójna zwracana przez `Int` jest automatycznie konwertowany na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawioną na wartość off. Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite. Poniższy przykład ilustruje taką zoptymalizowaną konwersję:

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Liczba <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Liczba <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Liczba <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Liczba <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe. Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" /> ,<see langword="Nothing" /> jest zwracana.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
Począwszy od `Number` Visual Basic 15,8, jeśli argument jest obiektem, którego typem środowiska uruchomieniowego jest `Double` lub `Single`, wydajność konwersji zmiennoprzecinkowej na liczbę całkowitą jest optymalizowany, `Int` Jeśli przekażesz wartość zwracaną przez Metoda do którejkolwiek z [funkcji konwersji całkowitej](~/docs/visual-basic/language-reference/functions/conversion-functions.md)lub jeśli wartość zwracana przez `Int` jest automatycznie konwertowana na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawiona na off. Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite. Na przykład:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Na przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Liczba <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary>Zwraca część całkowitą liczby.</summary>
        <returns>Część całkowita liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obie funkcje `Fix` `Number` i usuwają część ułamkową i zwracają wynikową wartość całkowitą. `Int`  
  
 Różnica między `Int` funkcjami a `Fix` jest wartością ujemną, `Number` `Int` która zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą `Number`, `Fix` która zwraca pierwszą ujemną liczbę całkowitą większe niż lub równe `Number`. Na przykład `Int` konwertuje-8,4 do-9 i `Fix` konwertuje-8,4 do-8.  
  
 `Fix(number)`jest równoważne`Sign(number) * Int(Abs(number)).`  
  
Począwszy od Visual Basic `Single`15,8, wydajność konwersji do liczby całkowitej jest zoptymalizowana, jeśli przekazujesz wartość zwróconą `Int` przez metodę do którejkolwiek z [funkcji](~/docs/visual-basic/language-reference/functions/conversion-functions.md) `Single` konwersji całkowitej lub jeśli zwrócona wartość według `Int` jest automatycznie konwertowane na liczbę całkowitą z [opcją Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) ustawioną na wartość off. Ta optymalizacja umożliwia szybsze uruchamianie kodu — maksymalnie dwa razy w przypadku kodu, który wykonuje dużą liczbę konwersji na typy całkowite. Poniższy przykład ilustruje taką zoptymalizowaną konwersję:

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 Ten przykład ilustruje sposób, `Int` w `Fix` jaki funkcje i zwracają liczbę całkowitą liczby. W przypadku argumentu `Int` liczb ujemnych funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą lub równą liczbie `Fix` ; funkcja zwraca pierwszą ujemną liczbę całkowitą większą lub równą liczbie. `Option Strict Off` Poniższy przykład wymaga określenia, ponieważ niejawne konwersje z typu `Double` do typu `Integer` są niedozwolone w: `Option Strict On`  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Możesz użyć funkcji, `CInt` aby jawnie skonwertować inne typy danych na typ `Integer` z `Option Strict Off`. `CInt` Jednakże zaokrągla do najbliższej liczby całkowitej zamiast obciąć część ułamkową liczb. Przykład:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Można użyć `CInt` funkcji w wyniku `Fix` wywołania lub `Int` , aby wykonać jawną konwersję na liczbę całkowitą bez zaokrąglania. Na przykład:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Aby uzyskać więcej informacji `CInt`na temat, zobacz [funkcje konwersji typów](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono parametru Number.</exception>
        <exception cref="T:System.ArgumentException">Parametr Number nie jest typu liczbowego.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Podsumowanie matematyczne</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funkcje matematyczne (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z. Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.  
  
   
  
## Examples  
 W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z. Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.  
  
   
  
## Examples  
 W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z. Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.  
  
   
  
## Examples  
 W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z. Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.  
  
   
  
## Examples  
 W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z. Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.  
  
   
  
## Examples  
 W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z. Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.  
  
   
  
## Examples  
 W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z. Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.  
  
   
  
## Examples  
 W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z. Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.  
  
   
  
## Examples  
 W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg reprezentującą wartość ósemkową liczby.</summary>
        <returns>Ciąg reprezentujący wartość ósemkową liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Number` nie jest jeszcze liczbą całkowitą, jest zaokrąglana do najbliższej liczby całkowitej przed oceną.  
  
|Jeśli parametr Number jest|Zwraca wartość ósemkową|  
|-|-|  
|Pusty|Zero (0)|  
|Dowolna inna liczba|Do 22 znaków ósemkowych|  
  
 Liczby ósemkowe mogą być reprezentowane bezpośrednio przez poprzednie numery w prawidłowym zakresie `&O`z. Na przykład `&O10` jest notacją ósemkową dla dziesiętnego 8.  
  
   
  
## Examples  
 W `Oct` tym przykładzie funkcja zwraca wartość ósemkową liczby.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. <see langword="Object" /> Zawiera dowolne prawidłowe wyrażenie liczbowe.</param>
        <summary><see langword="String" /> Zwraca reprezentację liczby.</summary>
        <returns><see langword="String" /> Reprezentacja liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy liczby są konwertowane na ciągi, początkowe miejsce jest zawsze zarezerwowane dla znaku `Number`. Jeśli `Number` jest dodatnia, zwrócony ciąg zawiera spację, a znak plus jest implikowany. Liczba ujemna będzie zawierać znak minus (-) i brak wiodącego miejsca.  
  
 `Format` Funkcja służy do konwertowania wartości liczbowych, które mają być sformatowane jako daty, godziny lub waluty lub w innych formatach zdefiniowanych przez użytkownika. W przeciwieństwie `Str` do funkcji `Format` , funkcja nie zawiera `Number`spacji wiodącej dla znaku.  
  
> [!NOTE]
>  Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny. `Str` Jeśli są używane różne Separatory dziesiętne (na przykład w aplikacjach międzynarodowych), użyj `CStr` funkcji lub `Format` , aby skonwertować liczbę na ciąg. Aby uzyskać ciąg reprezentujący liczbę w określonej kulturze, użyj `ToString(IFormatProvider)` metody Number. Na przykład, użyj <xref:System.Double.ToString%2A> podczas konwertowania wartości typu `Double` na ciąg.  
  
   
  
## Examples  
 W tym przykładzie `Str` funkcja `String` zwraca reprezentację liczby. Gdy liczba dodatnia jest konwertowana na ciąg, początkowe miejsce jest zawsze zarezerwowane dla jego znaku.  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />nie została określona.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Number" />nie jest typu liczbowego.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Konwersja — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagany. Dowolne prawidłowe <see langword="String" /> wyrażenie, <see langword="Object" /> zmienna lub <see langword="Char" /> wartość. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, jego wartość musi <see cref="T:System.ArgumentException" /> być możliwa do przekonwertowania na <see langword="String" /> lub wystąpi błąd.</param>
        <summary>Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</summary>
        <returns>Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, którego nie może rozpoznać jako części liczby. Symbole i znaki, które często są uważane za części wartości liczbowych, takich jak znaki dolara i przecinki, nie są rozpoznawane. Jednak funkcja rozpoznaje prefiksy `&O` podstawy (w przypadku wartości ósemkowych) i `&H` (w przypadku wartości szesnastkowych). Wartości puste, tabulatory i znaki wysuwu wiersza są usuwane z argumentu.  
  
 Następujące wywołanie zwraca wartość 1615198.  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
Następujące wywołanie zwraca wartość dziesiętną-1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny. `Val` Gdy używane są różne Separatory dziesiętne, jak w przypadku aplikacji międzynarodowych `CDbl` , `CInt` zamiast tego należy użyć lub, aby przekonwertować ciąg na liczbę. Aby przekonwertować ciąg reprezentujący liczbę w określonej kulturze na wartość liczbową, użyj `Parse(String, IFormatProvider)` metody typu liczbowego. Na przykład, użyj <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu `Double`na.  
  
<xref:System.InvalidCastException> Wyjątek może być zgłaszany w odpowiedzi na niektóre rzadko stosowane formaty liczbowe. Na przykład poniższy kod wywołuje ten wyjątek.  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

Konflikt między liczbą sformatowaną jako `Double` `Integer` a i znakami i `Long` zostanie przechwycony przez kompilator, jeśli nie był zawarty w ciągu.  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Val` aby zwrócić numery zawarte w poszczególnych ciągach. `Val`kończy konwersję przy pierwszym znaku, którego nie można interpretować jako cyfry numeryczne, modyfikator numeryczny, interpunkcja numeryczna lub biały znak.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" />jest zbyt duży.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" />jest wyrażeniem <see langword="String" />typu,które nie jest konwertowane na. <see langword="Object" /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Dowolne prawidłowe <see langword="String" /> wyrażenie, <see langword="Object" /> zmienna lub <see langword="Char" /> wartość. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, jego wartość musi <see cref="T:System.ArgumentException" /> być możliwa do przekonwertowania na <see langword="String" /> lub wystąpi błąd.</param>
        <summary>Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</summary>
        <returns>Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, którego nie może rozpoznać jako części liczby. Symbole i znaki, które często są uważane za części wartości liczbowych, takich jak znaki dolara i przecinki, nie są rozpoznawane. Jednak funkcja rozpoznaje prefiksy `&O` podstawy (w przypadku wartości ósemkowych) i `&H` (w przypadku wartości szesnastkowych). Wartości puste, tabulatory i znaki wysuwu wiersza są usuwane z argumentu.  
  
 Następujące wywołanie zwraca wartość 1234123.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
Następujące wywołanie zwraca wartość dziesiętną-1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny. `Val` Gdy używane są inne Separatory dziesiętne, jak w aplikacjach międzynarodowych, `CDbl` zamiast `CInt` konwertować ciąg na liczbę, należy użyć lub. Aby przekonwertować ciąg reprezentujący liczbę w określonej kulturze na wartość liczbową, użyj `Parse(String, IFormatProvider)` metody typu liczbowego. Na przykład, użyj <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu `Double`na.  
  
> [!NOTE]
>  <xref:System.InvalidCastException> Wyjątek może być zgłaszany w odpowiedzi na niektóre rzadko stosowane formaty liczbowe. Na przykład poniższy kod wywołuje ten wyjątek.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Konflikt między liczbą sformatowaną jako `Double` `Integer` a i znakami i `Long` zostanie przechwycony przez kompilator, jeśli konflikt nie został zawarty w ciągach.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Val` aby zwrócić numery zawarte w poszczególnych ciągach. `Val`kończy konwersję przy pierwszym znaku, którego nie można interpretować jako cyfry numeryczne, modyfikator numeryczny, interpunkcja numeryczna lub biały znak.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" />jest zbyt duży.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" />jest wyrażeniem <see langword="String" />typu,które nie jest konwertowane na. <see langword="Object" /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">Wymagane. Dowolne prawidłowe <see langword="String" /> wyrażenie, <see langword="Object" /> zmienna lub <see langword="Char" /> wartość. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, jego wartość musi <see cref="T:System.ArgumentException" /> być możliwa do przekonwertowania na <see langword="String" /> lub wystąpi błąd.</param>
        <summary>Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</summary>
        <returns>Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, którego nie może rozpoznać jako części liczby. Symbole i znaki, które często są uważane za części wartości liczbowych, takich jak znaki dolara i przecinki, nie są rozpoznawane. Jednak funkcja rozpoznaje prefiksy `&O` podstawy (w przypadku wartości ósemkowych) i `&H` (w przypadku wartości szesnastkowych). Wartości puste, tabulatory i znaki wysuwu wiersza są usuwane z argumentu.  
  
 Następujące wywołanie zwraca wartość 1234123.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
Następujące wywołanie zwraca wartość dziesiętną-1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Funkcja rozpoznaje tylko kropkę (`.`) jako prawidłowy separator dziesiętny. `Val` Gdy używane są inne Separatory dziesiętne, jak w aplikacjach międzynarodowych, `CDbl` zamiast `CInt` konwertować ciąg na liczbę, należy użyć lub. Aby przekonwertować ciąg reprezentujący liczbę w określonej kulturze na wartość liczbową, użyj `Parse(String, IFormatProvider)` metody typu liczbowego. Na przykład, użyj <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu `Double`na.  
  
> [!NOTE]
>  <xref:System.InvalidCastException> Wyjątek może być uruchamiany w odpowiedzi na niektóre rzadko stosowane formaty liczbowe. Na przykład poniższy kod wywołuje ten wyjątek.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Konflikt między liczbą sformatowaną jako `Double` `Integer` a i znakami i `Long` zostanie przechwycony przez kompilator, jeśli konflikt nie został zawarty w ciągach.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Val` aby zwrócić numery zawarte w poszczególnych ciągach. `Val`kończy konwersję przy pierwszym znaku, którego nie można interpretować jako cyfry numeryczne, modyfikator numeryczny, interpunkcja numeryczna lub biały znak.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" />jest zbyt duży.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" />jest wyrażeniem <see langword="String" />typu,które nie jest konwertowane na. <see langword="Object" /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
  </Members>
</Type>
