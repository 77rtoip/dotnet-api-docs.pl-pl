<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="65720e28354cf9fe68efb56839ebd7d07c6348ef" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52381419" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8c4c9-101">
        <see langword="Conversion" /> Moduł zawiera procedur w celu wykonywania różnych operacji konwersji.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c4c9-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-102">Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które Konwertuj liczby dziesiętne na inne podstawy liczb do ciągów, ciągów na liczby i danych jednego typu na inny.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-103">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="8c4c9-104">Konwersja — Podsumowanie</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c4c9-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="8c4c9-105">Słowa kluczowe (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c4c9-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="8c4c9-106">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c4c9-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="8c4c9-107">Obiekt do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="8c4c9-108">Typ, do którego należy przekonwertować obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-109">Konwertuje obiekt określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-110">Obiekt, którego typem w czasie wykonywania jest typ żądanego elementu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-111">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` typu określonego przez parametr `TargetType` parametru.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="8c4c9-112">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="8c4c9-113">`CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="8c4c9-114">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="8c4c9-115">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="8c4c9-116">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-117">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="8c4c9-118">Praca z obiektami dynamicznymi (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="8c4c9-119">Wskazówki: Tworzenie obiektów dynamicznych i posługiwanie się nimi (C# i Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="8c4c9-120">Typ, do którego należy przekonwertować obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="8c4c9-121">Obiekt do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-122">Konwertuje obiekt określonego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-123">Obiekt, który statycznie wpisanych w formie żądanego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-124">`CTypeDynamic` Metoda Konwertuje obiekt przekazany jako `Expression` parametru na typ określony przez typ parametru ogólnego.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="8c4c9-125">Jeśli obiekt jest obiekt dynamiczny `CTypeDynamic` metoda stosowana jest dostępne dynamiczne konwersje.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="8c4c9-126">`CTypeDynamic` Metoda stosowana jest dynamiczne konwersje, zgodnie z semantyką konwersji zdefiniowanych przez sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="8c4c9-127">Jeśli obiekt dynamiczny dziedziczy z <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metoda próbuje najpierw dokonać konwersji za pomocą konwersji statycznej, zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="8c4c9-128">W przypadku niepowodzenia konwersji zdefiniowanej przez użytkownika, statycznej `CTypeDynamic` metoda podejmuje próbę wykonania konwersji przy użyciu dynamicznej konwersji.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="8c4c9-129">Jeśli obiekt dynamiczny implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metoda daje pierwszeństwo dynamiczne konwersje za pośrednictwem konwersje zdefiniowane przez użytkownika, statycznej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-130">W poniższym przykładzie użyto `CTypeDynamic` metodę, aby przekonwertować obiekt dynamiczny na ciąg przy użyciu konwersji zdefiniowane przez obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="8c4c9-131">Praca z obiektami dynamicznymi (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="8c4c9-132">Wskazówki: Tworzenie obiektów dynamicznych i posługiwanie się nimi (C# i Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8c4c9-133">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8c4c9-134">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-135">Komunikat o błędzie, odpowiadający ostatni błąd czasu wykonywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-136">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="8c4c9-137">Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="8c4c9-138">Jeśli nie błąd czasu wykonywania `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="8c4c9-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="8c4c9-139">W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-140">Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-141">
            <paramref name="ErrorNumber" /> jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="8c4c9-142">Opcjonalna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-142">Optional.</span>
          </span>
          <span data-ttu-id="8c4c9-143">Dowolna liczba błędów prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-144">Zwraca komunikat o błędzie odpowiadający numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-145">Komunikat o błędzie, który odpowiada numerowi danego błędu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-146">`ErrorToString` Funkcja sprawdza ustawienia właściwości `Err` obiektu do identyfikowania najnowszych błędów czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="8c4c9-147">Wartość zwracana przez `ErrorToString` funkcja odpowiada `Description` właściwość `Err` obiektu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="8c4c9-148">Jeśli `ErrorNumber` jest prawidłowym numerem błędu, ale nie jest zdefiniowany, `ErrorToString` zwraca ciąg `"Application-defined or object-defined error."` Jeśli `ErrorNumber` jest nieprawidłowy, wystąpi błąd.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="8c4c9-149">Jeśli `ErrorNumber` zostanie pominięty, wiadomości, odpowiadający najnowszej zwracany jest błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="8c4c9-150">W przypadku braku błędów czasu wykonywania lub `ErrorNumber` ma wartość 0, `ErrorToString` zwraca ciąg o zerowej długości ("").</span><span class="sxs-lookup"><span data-stu-id="8c4c9-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="8c4c9-151">W języku Visual Basic 6.0 lub starszej, ta funkcja przekazała `Error` funkcji.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-152">Poniższy kod używa `ErrorToString` funkcję, aby wyświetlić komunikaty o błędach, które odpowiadają na liczby określonego błędu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-153">
            <paramref name="ErrorNumber" /> jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8c4c9-154">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-154">Returns the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-155">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-155">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-156">Liczba typu <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-157">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-157">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-158">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-158">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-159">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-160">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-161">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-162">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="8c4c9-163">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-164">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-165">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-166">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-167">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-168">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-169">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-170">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-171">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-172">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-172">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-173">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-173">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-174">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-174">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-175">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-175">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-176">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-176">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-177">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-177">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-178">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-178">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-179">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-179">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-180">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-180">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-181">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-181">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-182">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-182">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-183">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-184">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-185">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-186">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="8c4c9-187">Począwszy od Visual Basic 15.8, wydajność `Double`-do-konwersji liczba całkowita jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Fix` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli `Double`wartość zwrócona przez obiekt `Fix` jest niejawnie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) równa `Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="8c4c9-188">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8c4c9-189">Poniższy przykład ilustruje zoptymalizowane konwersji:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="8c4c9-190">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-191">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-192">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-193">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-194">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-195">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-196">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-197">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-198">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-199">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-199">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-200">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-200">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-201">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-201">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-202">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-202">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-203">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-203">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-204">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-204">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-205">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-205">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-206">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-206">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-207">Liczba typu <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-207">A number of type <see langword="Short" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-208">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-208">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-209">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-209">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-210">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-211">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-212">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-213">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-214">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-215">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-216">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-217">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-218">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-219">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-220">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-221">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-222">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-223">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-224">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-225">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-226">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-227">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-228">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-229">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-230">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-230">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-231">Liczba typu <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-232">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-232">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-233">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-233">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-234">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-235">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-236">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-237">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-238">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-239">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-240">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-241">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-242">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-243">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-244">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-245">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-246">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-247">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-247">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-248">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-248">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-249">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-249">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-250">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-250">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-251">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-251">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-252">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-252">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-253">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-253">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-254">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-254">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-255">Liczba typu <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-255">A number of type <see langword="Long" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-256">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-256">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-257">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-257">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-258">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-259">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-260">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-261">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-262">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-263">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-264">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-265">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-266">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-267">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-268">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-269">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-270">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-271">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-271">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-272">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-272">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-273">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-273">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-274">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-274">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-275">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-275">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-276">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-276">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-277">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-277">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-278">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-278">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-279">Liczba typu <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-279">A number of type <see langword="Object" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="8c4c9-280">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-281">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-281">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-282">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-282">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-283">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-284">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-285">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-286">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="8c4c9-287">Począwszy od 15.8 Visual Basic, jeśli `Number` argument jest obiektem o typie środowiska uruchomieniowego `Double` lub `Single`, floating-point na całkowite konwersji jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Fix` Metoda do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli wartość zwracana przez `Fix` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8c4c9-288">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8c4c9-289">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="8c4c9-290">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-291">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-292">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-293">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-294">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-295">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-296">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-297">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-298">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-299">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-299">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-300">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-300">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-301">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-301">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-302">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-302">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-303">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-303">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-304">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-304">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-305">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-305">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-306">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-306">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-307">Liczba typu <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-307">A number of type <see langword="Single" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-308">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-308">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-309">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-309">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-310">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-311">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-312">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-313">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="8c4c9-314">Począwszy od Visual Basic 15.8, wydajność `Single`-do-konwersji liczba całkowita jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Fix` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli `Single`wartość zwrócona przez obiekt `Fix` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8c4c9-315">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8c4c9-316">Poniższy przykład ilustruje zoptymalizowane konwersji:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="8c4c9-317">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-318">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-319">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-320">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-321">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-322">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-323">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-324">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-325">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-326">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-326">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-327">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-327">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-328">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-328">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-329">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-329">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-330">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-330">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-331">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-331">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-332">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-332">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8c4c9-333">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-334">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-334">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-335">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-335">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-336">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-336">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-337">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-337">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-338">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-339">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-339">If `Number` is</span></span>|<span data-ttu-id="8c4c9-340">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="8c4c9-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-341">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-341">Empty</span></span>|<span data-ttu-id="8c4c9-342">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-342">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-343">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="8c4c9-343">Any numeric value</span></span>|<span data-ttu-id="8c4c9-344">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-345">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8c4c9-346">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-347">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-348">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-348">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-349">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-349">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-350">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-350">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="8c4c9-351">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-351">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-352">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-352">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-353">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-353">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-354">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-354">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-355">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-356">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-357">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-357">If `Number` is</span></span>|<span data-ttu-id="8c4c9-358">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="8c4c9-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-359">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-359">Empty</span></span>|<span data-ttu-id="8c4c9-360">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-360">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-361">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="8c4c9-361">Any numeric value</span></span>|<span data-ttu-id="8c4c9-362">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-363">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8c4c9-364">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-365">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-366">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-366">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-367">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-367">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-368">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-368">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="8c4c9-369">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-369">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-370">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-370">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-371">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-371">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-372">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-373">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-373">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-374">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-375">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-375">If `Number` is</span></span>|<span data-ttu-id="8c4c9-376">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="8c4c9-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-377">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-377">Empty</span></span>|<span data-ttu-id="8c4c9-378">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-378">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-379">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="8c4c9-379">Any numeric value</span></span>|<span data-ttu-id="8c4c9-380">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-381">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8c4c9-382">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-383">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-384">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-384">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-385">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-385">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-386">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-386">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="8c4c9-387">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-387">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-388">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-388">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-389">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-389">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-390">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-390">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-391">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-391">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-392">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-393">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-393">If `Number` is</span></span>|<span data-ttu-id="8c4c9-394">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="8c4c9-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-395">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-395">Empty</span></span>|<span data-ttu-id="8c4c9-396">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-396">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-397">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="8c4c9-397">Any numeric value</span></span>|<span data-ttu-id="8c4c9-398">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-399">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8c4c9-400">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-401">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-402">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-402">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-403">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-403">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-404">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-404">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="8c4c9-405">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-405">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-406">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-406">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-407">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-407">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-408">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-408">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-409">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-409">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-410">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-411">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-411">If `Number` is</span></span>|<span data-ttu-id="8c4c9-412">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="8c4c9-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-413">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-413">Empty</span></span>|<span data-ttu-id="8c4c9-414">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-414">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-415">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="8c4c9-415">Any numeric value</span></span>|<span data-ttu-id="8c4c9-416">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-417">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8c4c9-418">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-419">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-420">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-420">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-421">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-421">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-422">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-422">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="8c4c9-423">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-423">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-424">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-424">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-425">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-425">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-426">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-426">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-427">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-427">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-428">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-429">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-429">If `Number` is</span></span>|<span data-ttu-id="8c4c9-430">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="8c4c9-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-431">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-431">Empty</span></span>|<span data-ttu-id="8c4c9-432">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-432">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-433">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="8c4c9-433">Any numeric value</span></span>|<span data-ttu-id="8c4c9-434">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-435">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8c4c9-436">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-437">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-438">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-438">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-439">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-439">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-440">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-440">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="8c4c9-441">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-441">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-442">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-442">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-443">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-443">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-444">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-444">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-445">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-445">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-446">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-447">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-447">If `Number` is</span></span>|<span data-ttu-id="8c4c9-448">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="8c4c9-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-449">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-449">Empty</span></span>|<span data-ttu-id="8c4c9-450">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-450">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-451">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="8c4c9-451">Any numeric value</span></span>|<span data-ttu-id="8c4c9-452">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-453">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8c4c9-454">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-455">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-456">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-456">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-457">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-457">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-458">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-458">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="8c4c9-459">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-459">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-460">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-460">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-461">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-461">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-462">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-462">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-463">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-463">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-464">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-465">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-465">If `Number` is</span></span>|<span data-ttu-id="8c4c9-466">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="8c4c9-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-467">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-467">Empty</span></span>|<span data-ttu-id="8c4c9-468">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-468">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-469">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="8c4c9-469">Any numeric value</span></span>|<span data-ttu-id="8c4c9-470">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-471">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8c4c9-472">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-473">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-474">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-474">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-475">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-475">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-476">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-476">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="8c4c9-477">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-477">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-478">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-478">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-479">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-479">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-480">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-480">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-481">Zwraca ciąg reprezentujący wartość szesnastkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-481">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-482">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-483">Jeśli `Number` jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-483">If `Number` is</span></span>|<span data-ttu-id="8c4c9-484">Funkcja Hex zwraca</span><span class="sxs-lookup"><span data-stu-id="8c4c9-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-485">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-485">Empty</span></span>|<span data-ttu-id="8c4c9-486">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-486">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-487">Dowolna wartość liczbowa</span><span class="sxs-lookup"><span data-stu-id="8c4c9-487">Any numeric value</span></span>|<span data-ttu-id="8c4c9-488">Do szesnastu znaków szesnastkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-489">Liczby szesnastkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&H`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="8c4c9-490">Na przykład `&H10` reprezentuje liczbę dziesiętną 16 w zapisie szesnastkowym.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-491">W tym przykładzie użyto `Hex` funkcja zwraca wartość szesnastkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-492">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-492">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-493">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-493">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-494">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-494">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="8c4c9-495">Porady: konwertowanie ciągów szestnastkowych na numery</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-495">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8c4c9-496">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-496">Returns the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-497">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-497">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-498">Liczba typu <see langword="Decimal" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-499">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-499">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-500">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-500">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-501">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-502">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-503">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-504">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="8c4c9-505">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-506">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-507">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-508">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-509">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-510">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-511">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-512">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-513">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-514">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-514">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-515">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-515">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-516">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-516">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-517">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-517">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-518">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-518">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-519">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-519">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-520">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-520">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-521">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-521">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-522">Liczba typu <see langword="Double" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-522">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-523">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-523">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-524">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-524">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-525">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-526">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-527">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-528">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="8c4c9-529">Począwszy od programu Visual Basic 15.8 wydajność podwójnej precyzji na całkowite konwersji jest zoptymalizowane pod kątem w przypadku przekazania wartości zwracanej przez `Int` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli podwójna wartość zwrócone przez `Int` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8c4c9-530">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8c4c9-531">Poniższy przykład ilustruje zoptymalizowane konwersji:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="8c4c9-532">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-533">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-534">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-535">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-536">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-537">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-538">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-539">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-540">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-541">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-541">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-542">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-542">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-543">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-543">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-544">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-544">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-545">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-545">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-546">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-546">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-547">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-547">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-548">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-548">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-549">Liczba typu <see langword="Short" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-549">A number of type <see langword="Short" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-550">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-550">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-551">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-551">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-552">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-553">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-554">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-555">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-556">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-557">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-558">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-559">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-560">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-561">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-562">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-563">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-564">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-565">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-565">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-566">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-566">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-567">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-567">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-568">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-568">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-569">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-569">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-570">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-570">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-571">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-571">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-572">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-572">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-573">Liczba typu <see langword="Integer" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-574">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-574">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-575">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-575">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-576">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-577">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-578">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-579">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-580">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-581">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-582">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-583">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-584">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-585">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-586">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-587">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-588">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-589">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-589">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-590">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-590">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-591">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-591">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-592">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-592">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-593">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-593">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-594">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-594">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-595">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-595">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-596">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-596">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-597">Liczba typu <see langword="Long" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-597">A number of type <see langword="Long" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-598">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-598">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-599">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-599">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-600">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-601">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-602">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-603">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-604">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-605">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-606">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-607">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-608">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-609">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-610">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-611">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-612">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-613">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-613">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-614">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-614">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-615">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-615">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-616">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-616">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-617">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-617">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-618">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-618">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-619">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-619">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-620">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-620">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-621">Liczba typu <see langword="Object" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-621">A number of type <see langword="Object" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="8c4c9-622">Jeśli <paramref name="Number" /> zawiera <see langword="Nothing" />, <see langword="Nothing" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-623">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-623">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-624">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-624">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-625">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-626">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-627">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-628">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="8c4c9-629">Począwszy od 15.8 Visual Basic, jeśli `Number` argument jest obiektem o typie środowiska uruchomieniowego `Double` lub `Single`, floating-point na całkowite konwersji jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Int` Metoda do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli wartość zwracana przez `Int` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8c4c9-630">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8c4c9-631">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="8c4c9-632">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-633">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-634">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-635">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-636">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-637">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-638">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-639">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-640">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-641">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-641">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-642">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-642">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-643">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-643">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-644">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-644">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-645">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-645">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-646">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-646">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-647">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-647">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-648">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-648">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-649">Liczba typu <see langword="Single" /> lub dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-649">A number of type <see langword="Single" /> or any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-650">Zwraca część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-650">Returns the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-651">Część całkowitą liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-651">The integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-652">Zarówno `Int` i `Fix` funkcje Usuń część ułamkowa `Number` i zwracają wynikową wartość całkowitą.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="8c4c9-653">Różnica między `Int` i `Fix` functions to, że jeśli `Number` jest ujemna, `Int` zwraca pierwszą ujemną liczbę całkowitą mniejszą niż lub równe `Number`, podczas gdy `Fix` zwraca pierwszą ujemną liczbę całkowitą większa lub równa `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="8c4c9-654">Na przykład `Int` konwertuje wartość -8,4 na -9, a `Fix` konwertuje wartość -8,4 na -8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="8c4c9-655">`Fix(number)` jest odpowiednikiem `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="8c4c9-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="8c4c9-656">Począwszy od Visual Basic 15.8, wydajność `Single`-do-konwersji liczba całkowita jest zoptymalizowana w przypadku przekazania wartości zwracanej przez `Int` metody do któregokolwiek elementu [funkcje konwersji typu całkowitego](~/docs/visual-basic/language-reference/functions/conversion-functions.md), lub jeśli `Single`wartość zwrócona przez obiekt `Int` jest automatycznie konwertowany na liczbę całkowitą z [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) wartość wyłączone.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="8c4c9-657">Tego rodzaju optymalizacji umożliwia kod wymagany do uruchomienia szybciej — maksymalnie dwa razy, jak szybko uzyskać kod, który obsługuje dużą liczbę konwersji na typy liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="8c4c9-658">Poniższy przykład ilustruje zoptymalizowane konwersji:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="8c4c9-659">Ten przykład ilustruje sposób, w jaki `Int` i `Fix` funkcje zwracają części całkowite liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="8c4c9-660">W przypadku argumentów o liczbie ujemnej `Int` funkcja zwraca pierwszą ujemną liczbę całkowitą mniejszą niż liczba `Fix` funkcja zwraca pierwszą ujemną liczbę całkowitą większą niż lub równa liczbie.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="8c4c9-661">Poniższy przykład wymaga określenia `Option Strict Off` ponieważ niejawna konwersja z typu `Double` na typ `Integer` nie są dozwolone w ramach `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="8c4c9-662">Możesz użyć `CInt` funkcję, aby jawnie przekonwertować inne typy danych typ `Integer` z `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="8c4c9-663">Jednak `CInt` powoduje zaokrąglenie do najbliższej liczby całkowitej, a nie obcina część ułamkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="8c4c9-664">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8c4c9-665">Możesz użyć `CInt` funkcji w wyniku wywołania `Fix` lub `Int` do wykonania jawnej konwersji na liczbę całkowitą bez zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="8c4c9-666">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="8c4c9-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8c4c9-667">Aby uzyskać więcej informacji na temat `CInt`, zobacz [funkcje konwersji typu](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-668">Nie określono parametru Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-668">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-669">Parametr Number nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-669">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-670">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-670">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="8c4c9-671">Typ danych — Podsumowanie (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-671">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="8c4c9-672">Podsumowanie matematyczne</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-672">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="8c4c9-673">Funkcje matematyczne (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-673">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-674">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-674">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8c4c9-675">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-675">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-676">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-676">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-677">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-677">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-678">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-678">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-679">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-679">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-680">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-681">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-681">If Number is</span></span>|<span data-ttu-id="8c4c9-682">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="8c4c9-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-683">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-683">Empty</span></span>|<span data-ttu-id="8c4c9-684">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-684">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-685">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="8c4c9-685">Any other number</span></span>|<span data-ttu-id="8c4c9-686">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-687">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8c4c9-688">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-689">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-690">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-690">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-691">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-691">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-692">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-692">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-693">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-693">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-694">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-694">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-695">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-695">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-696">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-696">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-697">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-697">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-698">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-699">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-699">If Number is</span></span>|<span data-ttu-id="8c4c9-700">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="8c4c9-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-701">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-701">Empty</span></span>|<span data-ttu-id="8c4c9-702">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-702">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-703">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="8c4c9-703">Any other number</span></span>|<span data-ttu-id="8c4c9-704">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-705">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8c4c9-706">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-707">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-708">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-708">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-709">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-709">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-710">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-710">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-711">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-711">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-712">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-712">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-713">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-713">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-714">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-714">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-715">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-715">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-716">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-717">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-717">If Number is</span></span>|<span data-ttu-id="8c4c9-718">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="8c4c9-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-719">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-719">Empty</span></span>|<span data-ttu-id="8c4c9-720">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-720">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-721">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="8c4c9-721">Any other number</span></span>|<span data-ttu-id="8c4c9-722">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-723">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8c4c9-724">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-725">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-726">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-726">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-727">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-727">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-728">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-728">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-729">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-729">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-730">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-730">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-731">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-731">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-732">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-732">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-733">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-733">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-734">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-735">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-735">If Number is</span></span>|<span data-ttu-id="8c4c9-736">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="8c4c9-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-737">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-737">Empty</span></span>|<span data-ttu-id="8c4c9-738">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-738">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-739">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="8c4c9-739">Any other number</span></span>|<span data-ttu-id="8c4c9-740">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-741">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8c4c9-742">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-743">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-744">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-744">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-745">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-745">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-746">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-746">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-747">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-747">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-748">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-748">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-749">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-749">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-750">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-750">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-751">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-751">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-752">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-753">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-753">If Number is</span></span>|<span data-ttu-id="8c4c9-754">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="8c4c9-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-755">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-755">Empty</span></span>|<span data-ttu-id="8c4c9-756">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-756">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-757">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="8c4c9-757">Any other number</span></span>|<span data-ttu-id="8c4c9-758">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-759">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8c4c9-760">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-761">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-762">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-762">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-763">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-763">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-764">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-764">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-765">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-765">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-766">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-766">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-767">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-767">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-768">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-768">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-769">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-769">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-770">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-771">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-771">If Number is</span></span>|<span data-ttu-id="8c4c9-772">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="8c4c9-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-773">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-773">Empty</span></span>|<span data-ttu-id="8c4c9-774">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-774">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-775">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="8c4c9-775">Any other number</span></span>|<span data-ttu-id="8c4c9-776">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-777">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8c4c9-778">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-779">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-780">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-780">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-781">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-781">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-782">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-782">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-783">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-783">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-784">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-784">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-785">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-785">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-786">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-786">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-787">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-787">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-788">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-789">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-789">If Number is</span></span>|<span data-ttu-id="8c4c9-790">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="8c4c9-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-791">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-791">Empty</span></span>|<span data-ttu-id="8c4c9-792">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-792">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-793">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="8c4c9-793">Any other number</span></span>|<span data-ttu-id="8c4c9-794">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-795">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8c4c9-796">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-797">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-798">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-798">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-799">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-799">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-800">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-800">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-801">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-801">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-802">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-802">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-803">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-803">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-804">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-804">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-805">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-805">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-806">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-807">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-807">If Number is</span></span>|<span data-ttu-id="8c4c9-808">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="8c4c9-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-809">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-809">Empty</span></span>|<span data-ttu-id="8c4c9-810">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-810">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-811">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="8c4c9-811">Any other number</span></span>|<span data-ttu-id="8c4c9-812">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-813">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8c4c9-814">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-815">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-816">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-816">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-817">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-817">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-818">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-818">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-819">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-819">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-820">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-820">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-821">Dowolne prawidłowe wyrażenie liczbowe lub <see langword="String" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-821">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-822">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-822">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-823">Zwraca ciąg reprezentującą wartość ósemkową liczby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-823">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-824">Jeśli `Number` nie jest jeszcze liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="8c4c9-825">Jeśli parametr Number jest</span><span class="sxs-lookup"><span data-stu-id="8c4c9-825">If Number is</span></span>|<span data-ttu-id="8c4c9-826">Zwraca wartość ósemkową</span><span class="sxs-lookup"><span data-stu-id="8c4c9-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="8c4c9-827">Pusty</span><span class="sxs-lookup"><span data-stu-id="8c4c9-827">Empty</span></span>|<span data-ttu-id="8c4c9-828">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="8c4c9-828">Zero (0)</span></span>|  
|<span data-ttu-id="8c4c9-829">Dowolna inna liczba</span><span class="sxs-lookup"><span data-stu-id="8c4c9-829">Any other number</span></span>|<span data-ttu-id="8c4c9-830">Do 22 znaków ósemkowych</span><span class="sxs-lookup"><span data-stu-id="8c4c9-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="8c4c9-831">Liczby ósemkowe mogą być reprezentowane bezpośrednio w celu przed liczbami we właściwym zakresie Wstaw przedrostek `&O`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="8c4c9-832">Na przykład `&O10` ósemkowy dziesiętnej 8.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-833">W tym przykładzie użyto `Oct` funkcja zwraca wartość ósemkową liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-834">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-834">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-835">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-835">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-836">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-836">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-837">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-837">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="8c4c9-838">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-838">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-839">
            <see langword="Object" /> Zawierających dowolne prawidłowe wyrażenie liczbowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-839">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-840">Zwraca <see langword="String" /> reprezentującym liczbę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-840">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-841">Zwraca <see langword="String" /> reprezentującym liczbę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-841">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-842">Gdy liczby są konwertowane na ciągi znaków, spacje wiodące zawsze jest zarezerwowany dla znak `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="8c4c9-843">Jeśli `Number` jest dodatnia, zwrócony ciąg zawiera spacje wiodące i jest implikowane znak plus.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="8c4c9-844">Obejmuje ujemna znak minus (-) i bez spacji wiodących.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="8c4c9-845">Użyj `Format` funkcji konwersji wartości numerycznych, które mają być sformatowane jako daty, godziny i waluty, lub w innych formatach zdefiniowanych przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="8c4c9-846">W odróżnieniu od `Str` funkcji `Format` funkcja nie zawiera spacje wiodące na znak argumentu `Number`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8c4c9-847">`Str` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="8c4c9-848">Użycie innych separatorów dziesiętnych (na przykład w aplikacjach międzynarodowych) użyj `CStr` lub `Format` funkcji w celu przekonwertowania liczby na ciąg.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="8c4c9-849">Aby uzyskać ciąg reprezentujący numer w danej kultury, należy użyć numeru `ToString(IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="8c4c9-850">Na przykład użyć <xref:System.Double.ToString%2A> podczas konwertowania wartości typu `Double` na ciąg.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-851">W tym przykładzie użyto `Str` funkcja zwraca `String` reprezentującym liczbę.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="8c4c9-852">Gdy liczba dodatnia jest konwertowana na ciąg, spacje wiodące zawsze jest zarezerwowana dla znaku.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8c4c9-853">
            <paramref name="Number" /> nie określono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-853">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="8c4c9-854">
            <paramref name="Number" /> nie jest typu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-854">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="8c4c9-855">Konwersja — Podsumowanie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-855">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-856">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-856">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8c4c9-857">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="8c4c9-858">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-858">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-859">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="8c4c9-860">Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-861">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-862">Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-862">The numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-863">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="8c4c9-864">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="8c4c9-865">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="8c4c9-866">Wartości puste, karty i znaki wysuwu wiersza są odrzucane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="8c4c9-867">Poniższe wywołanie zwraca wartość 1615198.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="8c4c9-868">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="8c4c9-869">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="8c4c9-870">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="8c4c9-871">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="8c4c9-872">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="8c4c9-873"><xref:System.InvalidCastException> Wyjątku może zostać wygenerowany w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="8c4c9-874">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="8c4c9-875">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli nie zostały zawarte w ciągu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-876">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="8c4c9-877">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="8c4c9-878">
            <paramref name="InputStr" /> jest zbyt duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-878">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-879">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-879">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-880">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-880">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="8c4c9-881">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-881">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-882">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="8c4c9-883">Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-884">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-885">Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-885">The numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-886">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="8c4c9-887">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="8c4c9-888">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="8c4c9-889">Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="8c4c9-890">Poniższe wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="8c4c9-891">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="8c4c9-892">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="8c4c9-893">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="8c4c9-894">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="8c4c9-895">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8c4c9-896"><xref:System.InvalidCastException> Wyjątku może zostać wygenerowany w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="8c4c9-897">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="8c4c9-898">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-899">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="8c4c9-900">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="8c4c9-901">
            <paramref name="InputStr" /> jest zbyt duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-901">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-902">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-902">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-903">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-903">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="8c4c9-904">Wymagana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-904">Required.</span>
          </span>
          <span data-ttu-id="8c4c9-905">Dowolne, prawidłowe <see langword="String" /> wyrażenie <see langword="Object" /> zmiennej lub <see langword="Char" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="8c4c9-906">Jeśli <paramref name="Expression" /> typu <see langword="Object" />, jego wartość musi być konwertowany na <see langword="String" /> lub <see cref="T:System.ArgumentException" /> wystąpi błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c4c9-907">Zwraca liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8c4c9-908">Liczby zawarte w ciągu jako wartość liczbową odpowiedniego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-908">The numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4c9-909">`Val` Funkcja przestaje odczytywać ciąg przy pierwszym znaku, nie może rozpoznać jako elementu liczby.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="8c4c9-910">Symbole i znaki, które są często traktowane jako części wartości liczbowe, takie jak znaki dolara i przecinki oraz znaki nie są rozpoznawane.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="8c4c9-911">Jednak funkcja rozpoznaje prefiksy podstawy `&O` (dla ósemkową) i `&H` (w przypadku wartości szesnastkowych).</span><span class="sxs-lookup"><span data-stu-id="8c4c9-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="8c4c9-912">Wartości puste, karty i znaki wysuwu wiersza są usuwane z argumentu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="8c4c9-913">Poniższe wywołanie zwraca wartość 1234123.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="8c4c9-914">Poniższe wywołanie zwróci wartość -1.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="8c4c9-915">`Val` Funkcja rozpoznaje tylko kropkę (`.`) jako separator dziesiętny prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="8c4c9-916">Użyj przy innych separatorów dziesiętnych, tak jak w aplikacjach międzynarodowych `CDbl` lub `CInt` zamiast tego do konwersji ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="8c4c9-917">Aby przekonwertować ciąg reprezentujący numer w danej kultury na wartość liczbową, należy użyć typu liczbowego `Parse(String, IFormatProvider)` metody.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="8c4c9-918">Na przykład użyć <xref:System.Double.Parse%2A?displayProperty=nameWithType> podczas konwertowania ciągu do `Double`.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8c4c9-919"><xref:System.InvalidCastException> Wyjątku może zostać wywołane w odpowiedzi na niektóre nietypowe formaty liczb.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="8c4c9-920">Na przykład poniższy kod zgłasza ten wyjątek.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="8c4c9-921">Konflikt między liczbą w formacie `Double` i `Integer` i `Long` znaki typu może zostać przechwycony przez kompilator, jeśli konflikt nie zostały zawarte w ciągach.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="8c4c9-922">W poniższym przykładzie użyto `Val` funkcja zwraca liczby zawarte w każdym ciągu.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="8c4c9-923">`Val` Zatrzymuje Konwertowanie przy pierwszym znaku, który nie może być interpretowane jako zawierać cyfrę, modyfikator numeryczne, liczbową znaków interpunkcyjnych lub biały znak.</span><span class="sxs-lookup"><span data-stu-id="8c4c9-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="8c4c9-924">
            <paramref name="InputStr" /> jest zbyt duży.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-924">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8c4c9-925">
            <paramref name="Expression" /> jest <see langword="Object" /> wpisz wyrażenie, które nie jest konwertowany na <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-925">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="8c4c9-926">Funkcje konwersji typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c4c9-926">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>