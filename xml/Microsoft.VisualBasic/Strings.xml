<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6b720a5c53d27944cd3cd053d3b53983622209fc" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32090364" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Strings" /> Moduł zawiera procedury używany do wykonywania operacji na ciągach.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słów kluczowych języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które manipulowania ciągami.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak podzielić ciąg na jego spacji.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Wymagana. Wszystkie prawidłowe <see langword="Char" /> lub <see langword="String" /> wyrażenia. Jeśli <c>ciąg</c> jest <see langword="String" /> wyrażenie, pierwszego znaku ciągu jest używane dla danych wejściowych. Jeśli <c>ciąg</c> jest <see langword="Nothing" /> lub nie zawiera znaków, <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Zwraca *punktem kodu*, lub kod znaku, wprowadzany znak. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW` Zwraca punkt kodu Unicode dla znak wejściowy. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Asc` funkcja zwracająca `Integer` kody odpowiadający pierwszej litery każdego ciągu znaków.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Wymagana. Wszystkie prawidłowe <see langword="Char" /> lub <see langword="String" /> wyrażenia. Jeśli <c>ciąg</c> jest <see langword="String" /> wyrażenie, pierwszego znaku ciągu jest używane dla danych wejściowych. Jeśli <c>ciąg</c> jest <see langword="Nothing" /> lub nie zawiera znaków, <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Zwraca *punktem kodu*, lub kod znaku, wprowadzany znak. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW` Zwraca punkt kodu Unicode dla znak wejściowy. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Asc` funkcja zwracająca `Integer` kody odpowiadający pierwszej litery każdego ciągu znaków.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Wymagana. Wszystkie prawidłowe <see langword="Char" /> lub <see langword="String" /> wyrażenia. Jeśli <c>ciąg</c> jest <see langword="String" /> wyrażenie, pierwszego znaku ciągu jest używane dla danych wejściowych. Jeśli <c>ciąg</c> jest <see langword="Nothing" /> lub nie zawiera znaków, <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Zwraca *punktem kodu*, lub kod znaku, wprowadzany znak. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW` Zwraca punkt kodu Unicode dla znak wejściowy. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Asc` funkcja zwracająca `Integer` kody odpowiadający pierwszej litery każdego ciągu znaków.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Wymagana. Wszystkie prawidłowe <see langword="Char" /> lub <see langword="String" /> wyrażenia. Jeśli <c>ciąg</c> jest <see langword="String" /> wyrażenie, pierwszego znaku ciągu jest używane dla danych wejściowych. Jeśli <c>ciąg</c> jest <see langword="Nothing" /> lub nie zawiera znaków, <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Zwraca <see langword="Integer" /> wartość reprezentującą kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Zwraca *punktem kodu*, lub kod znaku, wprowadzany znak. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW` Zwraca punkt kodu Unicode dla znak wejściowy. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Asc` funkcja zwracająca `Integer` kody odpowiadający pierwszej litery każdego ciągu znaków.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Wymagana. <see langword="Integer" /> Reprezentujący wyrażenie <c>punktem kodu</c>, lub kodu, znaku.</param>
        <summary>Zwraca znak skojarzony z podanym kodem znaku.</summary>
        <returns>Zwraca znak skojarzony z podanym kodem znaku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaakceptowane asymetrycznego zakresu `CharCode` kompensuje magazynu różnice między `Short` i `Integer`. Na przykład jest-29183 `Short` , ale jest +36353 `Integer`. Ułatwia to również zgodność z Visual Basic 6.0.  
  
 `Chr` używa <xref:System.Text.Encoding> klasy w <xref:System.Text?displayProperty=nameWithType> przestrzeni nazw, aby określić, czy bieżący wątek używa zestaw znaków jednobajtowych (SBCS) lub znaków dwubajtowych Ustaw (DBCS). Następnie przyjmuje `CharCode` jako kod punktów w odpowiednim zestawie. Może on zawierać cyfry od 0 do 255 znaków SBCS i -32768 do 65535 znaków zestawów znaków Dwubajtowych.  
  
 Zwracana wartość zależy od strony kodowej dla bieżącego wątku, który jest zawarty w <xref:System.Globalization.TextInfo.ANSICodePage%2A> właściwość <xref:System.Globalization.TextInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Możesz uzyskać <xref:System.Globalization.TextInfo.ANSICodePage%2A> , określając `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` Trwa `CharCode` jako Unicode punktem kodu. Zakres jest niezależne od kultury i kod ustawień strony dla bieżącego wątku. Wartości od -32768 do-1 są traktowane identycznie do wartości w zakresie +32768 za pośrednictwem +65535.  
  
 Cyfry z przedziału od 0 do 31 są takie same jak standardowe niedrukowalne kodów ASCII. Na przykład `Chr(10)` zwraca znak wysuwu wiersza.  
  
> [!NOTE]
>  `ChrB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca pojedynczy bajt. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi w Visual Basic i .NET Framework są w formacie Unicode, i `ChrB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Chr` funkcja zwraca znak skojarzony z podanym kodem znaku.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; 0 lub &gt; 255 dla <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Wymagana. <see langword="Integer" /> Reprezentujący wyrażenie <c>punktem kodu</c>, lub kodu, znaku.</param>
        <summary>Zwraca znak skojarzony z podanym kodem znaku.</summary>
        <returns>Zwraca znak skojarzony z podanym kodem znaku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaakceptowane asymetrycznego zakresu `CharCode` kompensuje magazynu różnice między `Short` i `Integer`. Na przykład jest-29183 `Short` , ale jest +36353 `Integer`. Ułatwia to również zgodność z Visual Basic 6.0.  
  
 `Chr` używa <xref:System.Text.Encoding> klasy w <xref:System.Text?displayProperty=nameWithType> przestrzeni nazw, aby określić, czy bieżący wątek używa zestaw znaków jednobajtowych (SBCS) lub znaków dwubajtowych Ustaw (DBCS). Następnie przyjmuje `CharCode` jako kod punktów w odpowiednim zestawie. Może on zawierać cyfry od 0 do 255 znaków SBCS i -32768 do 65535 znaków zestawów znaków Dwubajtowych.  
  
 Zwracana wartość zależy od strony kodowej dla bieżącego wątku, który jest zawarty w <xref:System.Globalization.TextInfo.ANSICodePage%2A> właściwość <xref:System.Globalization.TextInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Możesz uzyskać <xref:System.Globalization.TextInfo.ANSICodePage%2A> , określając `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` Trwa `CharCode` jako Unicode punktem kodu. Zakres jest niezależne od kultury i kod ustawień strony dla bieżącego wątku. Wartości od -32768 do-1 są traktowane identycznie do wartości w zakresie +32768 za pośrednictwem +65535.  
  
 Cyfry z przedziału od 0 do 31 są takie same jak standardowe niedrukowalne kodów ASCII. Na przykład `Chr(10)` zwraca znak wysuwu wiersza.  
  
> [!NOTE]
>  `ChrB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca pojedynczy bajt. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi w Visual Basic i .NET Framework są w formacie Unicode, i `ChrB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Chr` funkcja zwraca znak skojarzony z podanym kodem znaku.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; -32768 lub &gt; 65535 dla <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablicy oparciu o określone kryteria filtru.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. Jednowymiarowa tablica ciągów do wyszukania.</param>
        <param name="Match">Wymagana. Ciąg do wyszukania.</param>
        <param name="Include">Opcjonalna. <see langword="Boolean" /> Wartość wskazująca, czy mają być zwracane podciągów Dołącz lub Wyklucz <c>dopasowania</c>. Jeśli <c>Include</c> jest <see langword="True" />, <see langword="Filter" /> funkcja zwraca podzbiór tablicy, która zawiera <c>dopasowania</c> jako podciąg. Jeśli <c>Include</c> jest <see langword="False" />, <see langword="Filter" /> funkcja zwraca podzbiór tablicy, która nie zawiera <c>dopasowania</c> jako podciąg.</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa określająca sposób porównywania ciągów. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablicy oparciu o określone kryteria filtru.</summary>
        <returns>Zwraca tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablicy oparciu o określone kryteria filtru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie dopasowania `Match` znajdują się w obrębie `Source`, `Filter` funkcja zwraca pustą tablicę. Jeśli wystąpi błąd `Source` ma ustawioną wartość `Nothing` lub nie jest tablicą jednowymiarową.  
  
 Tablica zwrócona przez `Filter` funkcja zawiera tylko za mało elementów zawiera Liczba pasujących elementów.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|Stała|Opis|  
|`CompareMethod.Binary`|Wykonuje porównanie binarne|  
|`CompareMethod.Text`|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `Filter` funkcji.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> jest <see langword="Nothing" /> lub nie jest tablicą jednowymiarową.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. Jednowymiarowa tablica ciągów do wyszukania.</param>
        <param name="Match">Wymagana. Ciąg do wyszukania.</param>
        <param name="Include">Opcjonalna. <see langword="Boolean" /> Wartość wskazująca, czy mają być zwracane podciągów Dołącz lub Wyklucz <c>dopasowania</c>. Jeśli <c>Include</c> jest <see langword="True" />, <see langword="Filter" /> funkcja zwraca podzbiór tablicy, która zawiera <c>dopasowania</c> jako podciąg. Jeśli <c>Include</c> jest <see langword="False" />, <see langword="Filter" /> funkcja zwraca podzbiór tablicy, która nie zawiera <c>dopasowania</c> jako podciąg.</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa określająca sposób porównywania ciągów. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablicy oparciu o określone kryteria filtru.</summary>
        <returns>Zwraca tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablicy oparciu o określone kryteria filtru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie dopasowania `Match` znajdują się w obrębie `Source`, `Filter` funkcja zwraca pustą tablicę. Jeśli wystąpi błąd `Source` ma ustawioną wartość `Nothing` lub nie jest tablicą jednowymiarową.  
  
 Tablica zwrócona przez `Filter` funkcja zawiera tylko za mało elementów zawiera Liczba pasujących elementów.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|`CompareMethod.Binary`|Wykonuje porównanie binarne|  
|`CompareMethod.Text`|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `Filter` funkcji.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> jest <see langword="Nothing" /> lub nie jest tablicą jednowymiarową.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Dowolne prawidłowe wyrażenie.</param>
        <param name="Style">Opcjonalna. Nieprawidłowy format nazwanych lub zdefiniowanej przez użytkownika <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg sformatowany zgodnie z instrukcjami zawartymi w formacie <see langword="String" /> wyrażenia.</summary>
        <returns>Zwraca ciąg sformatowany zgodnie z instrukcjami zawartymi w formacie <see langword="String" /> wyrażenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> Metody również oferuje podobne funkcje.  
  
 Formatowania niezlokalizowanej ciągu numerycznego, aby mieć pewność, że odpowiedni wygląd należy używać zdefiniowane przez użytkownika format liczbowy.  
  
 Jeśli spróbujesz formatowanie liczby bez określania `Style`, `Format` funkcja udostępnia funkcjonalność podobną do `Str` działanie, mimo że uwzględnia ustawienia regionalne. Jednak liczby dodatnie w formacie ciągów za pomocą `Format` funkcja nie zawierają zarezerwowanej na znak spacje początkowe wartości, te konwertowane przy użyciu `Str` funkcja zachować spacje wiodące.  
  
## <a name="different-formats-for-different-numeric-values"></a>Różne formaty dla różnych wartości liczbowych  
 Wyrażenie zdefiniowane przez użytkownika format liczb może mieć od jednej do trzech sekcje oddzielone średnikami. Jeśli `Style` argument `Format` funkcja zawiera jeden z wstępnie zdefiniowanych formatów liczbowych, jest dozwolona tylko jedna sekcja.  
  
|Jeśli używasz|Jest to wynik|  
|-|-|  
|Tylko jedną sekcję|Wyrażenie formatu ma zastosowanie do wszystkich wartości.|  
|Dwie sekcje|Pierwsza część dotyczy wartości dodatnie i zer; druga stosuje się do wartości ujemnych.|  
|Trzy sekcje|Pierwsza część dotyczy wartości dodatnie, druga stosuje się do wartości ujemnych i trzeci ma zastosowanie do zera.|  
  
 W poniższym przykładzie przedstawiono dwie sekcje: pierwszy definiuje format wartości dodatnie i zer; Druga sekcja definiuje format wartości ujemnych. Ponieważ `Style` argument `Format` funkcja przyjmuje ciąg, jest ujęta w cudzysłów.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Jeśli dołączysz średnikami bez żadnych składników między nimi, Brak sekcji jest drukowany w formacie wartość dodatnią. Na przykład następujący format wyświetla dodatnie i ujemne wartości w formacie w pierwszej sekcji i wyświetla `Zero` Jeśli wartość wynosi zero.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Wstępnie zdefiniowane formaty liczbowe  
 W poniższej tabeli przedstawiono nazwy formatu liczbowego wstępnie zdefiniowane. Te mogą być używane przez nazwę jako `Style` argument `Format` funkcji:  
  
|Nazwa formatu|Opis|  
|-|-|  
|`General Number`, `G`, lub `g`|Wyświetla liczbę bez separatora tysięcy.<br /><br /> Na przykład `Format(&H3FA, "g")` zwraca `1018`.|  
|`Currency`, `C`, lub `c`|Wyświetla liczbę z separatorem tysięcy, jeśli są one; Wyświetla dwóch cyfr z prawej strony separatora dziesiętnego. Dane wyjściowe zależy od ustawień regionalnych systemu.<br /><br /> Na przykład `Format(1234567, "c")` zwraca `$1,234,567.00`.|  
|`Fixed`, `F`, lub `f`|Wyświetla co najmniej jedną cyfrę w lewo i dwóch cyfr z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(1234567, "f")` zwraca `1234567.00`.|  
|`Standard`, `N`, lub `n`|Wyświetla liczbę z separatorem tysięcy, co najmniej jedną cyfrę z lewej strony i dwie cyfry z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(1234567, "n")` zwraca `1,234,567.00`.|  
|`Percent`|Wyświetla liczbę pomnożona przez 100 z znaku procentu (%) dołączona od razu po prawej stronie; zawsze wyświetla dwóch cyfr z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(0.4744, "Percent")` zwraca `47.44%`.|  
|`P`, lub `p`|Wyświetla liczbę z separatorem tysięczne pomnożona przez 100 z znaku procentu (%) dołączona do prawej i rozdzielonych przez pojedyncze spacje; zawsze wyświetla dwóch cyfr z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(0.80345, "p")` zwraca `80.35 %`.|  
|`Scientific`|Używa standardowych notacji naukowej, zapewniając dwóch cyfr znaczących.<br /><br /> Na przykład `Format(1234567, "Scientific")` zwraca `1.23E+06`.|  
|`E`, lub `e`|Używa standardowych notacji naukowej, zapewniając sześć cyfr znaczących.<br /><br /> Na przykład `Format(1234567, "e")` zwraca `1.234567e+006`.|  
|`D`, lub `d`|Wyświetla liczbę jako ciąg, który zawiera wartość numeru w formacie dziesiętnym (o podstawie 10). Ta opcja jest obsługiwana w przypadku typów całkowitych (`Byte`, `Short`, `Integer`, `Long`) tylko.<br /><br /> Na przykład `Format(&H7F, "d")` zwraca `127`.|  
|`X`, lub `x`|Wyświetla liczbę jako ciąg, który zawiera wartość numeru w formacie szesnastkowym (podstawa 16). Ta opcja jest obsługiwana w przypadku typów całkowitych (`Byte`, `Short`, `Integer`, `Long`) tylko.<br /><br /> Na przykład `Format(127, "x")` zwraca `7f`.|  
|`Yes/No`|Wyświetla `No` Jeśli liczba jest 0; w przeciwnym razie, wyświetla `Yes`.<br /><br /> Na przykład `Format(0, "Yes/No")` zwraca `No`.|  
|`True/False`|Wyświetla `False` Jeśli liczba jest 0; w przeciwnym razie, wyświetla `True`.<br /><br /> Na przykład `Format(1, "True/False")` zwraca `True`.|  
|`On/Off`|Wyświetla `Off` Jeśli liczba jest 0; w przeciwnym razie, wyświetla `On`.<br /><br /> Na przykład `Format(1, "On/Off")` zwraca `On`.|  
  
### <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Yes/No`, `True/False`, I `On/Off` formaty nie są obsługiwane.  
  
## <a name="user-defined-numeric-formats"></a>Zdefiniowane przez użytkownika formaty liczbowe  
 Poniższa tabela zawiera znaki, które umożliwia utworzenie zdefiniowanej przez użytkownika formatów. Te mogą służyć do tworzenia `Style` argument `Format` funkcji:  
  
|Znak|Opis|  
|-|-|  
|Brak|Wyświetla liczbę bez formatowania.|  
|(`0`)|Symbol zastępczy cyfry. Wyświetla cyfrę lub zero. Jeśli wyrażenie ma cyfrę w miejscu, w którym pojawi się zero w ciągu formatu, wyświetl ją; w przeciwnym razie wyświetla wartość zero, w tym miejscu.<br /><br /> Jeśli liczba ma mniej cyfr niż dostępne są zer (po obu stronach dziesiętnego) w wyrażeniu format wyświetla początkowe lub końcowe zera. Jeśli kod zawiera więcej cyfr z prawej strony separatora dziesiętnego niż jest zer z prawej strony separatora dziesiętnego w wyrażeniu format zaokrąglenie do liczby miejsc dziesiętnych są zer. Jeśli liczba ma więcej cyfr w lewą stronę separatora dziesiętnego niż Brak zerami z lewej strony separatora dziesiętnego w wyrażeniu format wyświetla dodatkowe cyfry bez żadnych modyfikacji.|  
|(`#`)|Symbol zastępczy cyfry. Wyświetla cyfry lub jej brak. Jeśli wyrażenie ma cyfry na pozycji gdzie `#` znak pojawia się w ciągu formatu wyświetla go; w przeciwnym razie nie wyświetla żadnego obrazu w tej lokalizacji.<br /><br /> Ten symbol działa jak `0` symbol zastępczy cyfry, z wyjątkiem który zera wiodące i końcowe nie są wyświetlane, jeśli liczba ma mniejszą liczbę cyfr, niż jest `#` znaki po obu stronach z separatorem dziesiętnym w wyrażeniu formatu.|  
|(`.`)|Decimal — symbol zastępczy. Dziesiętny symbol zastępczy określa liczbę cyfr są wyświetlane w lewo i prawo z separatorem dziesiętnym. Jeśli wyrażenie formatu zawiera tylko `#` znaków z lewej strony tego symbolu; mniejszy niż 1 zaczynać separator dziesiętny liczb. Aby wyświetlić zerem wyświetlony z liczbami ułamkowymi, użyj wartości zero jako pierwszy symbol zastępczy cyfry z lewej strony separatora dziesiętnego. W kilku lokalizacjach przecinek jest używany jako separator dziesiętny. Rzeczywiste znak używany jako element zastępczy dziesiętne w sformatowane wyniki zależy od liczby rozpoznany przez system. W związku z tym należy używać okresu jako dziesiętne symbol zastępczy w formatach z nawet jeśli znajdują się w ustawień regionalnych, których używa przecinka jako symbol zastępczy dziesiętną. Ciąg sformatowany będą wyświetlane w formacie poprawne dla ustawień regionalnych.|  
|(`%`)|Symbol zastępczy procentu. Mnoży wyrażenie przez 100. Znaku procentu (`%`) dodaje się w miejscu, gdzie jest dostępny w ciągu formatu.|  
|(`,`)|Separator tysięcy. Separator tysięcy oddziela tysiące od setek w liczba, która ma cztery lub więcej miejsca po lewej stronie separatora dziesiętnego. Określono standardowego stosowania separator tysięcy czy format zawiera separator tysięcy otoczona cyfr (`0` lub `#`).<br /><br /> Separator tysięcy natychmiast po lewej stronie separatora dziesiętnego (czy wartości dziesiętnej określono) lub jako ostatni znak w ciągu oznacza "skalować liczbę przez podzielenie go przez 1000, zaokrąglania zgodnie z potrzebami." Liczby mniejsze niż 1000, ale większa lub równa 500 są wyświetlane jako `1`i numery mniejszych niż 500 są wyświetlane jako `0`. Skalowanie dwóch sąsiadujących ze sobą separatory tysięcy w tym miejscu przez współczynnik 1 milion i dodatkowy czynnik 1000 dla każdego dodatkowego separatora.<br /><br /> Wiele separatorów w dowolnym miejscu innym niż bezpośrednio po lewej stronie separatora dziesiętnego lub po prawej stronie pozycji w ciągu są traktowane jako sposób wykorzystania separator tysięcy. W kilku lokalizacjach okres jest używany jako separator tysięcy. Rzeczywiste znak używany jako separator tysięcy sformatowanych danych wyjściowych zależy od formatu numer rozpoznany przez system. W związku z tym należy używać przecinek jako separator tysięcy w formatach sieci, nawet jeśli znajdują się w ustawieniach regionalnych okres jako separator tysięcy. Ciąg sformatowany będą wyświetlane w formacie poprawne dla ustawień regionalnych.<br /><br /> Rozważmy na przykład trzy następujące ciągi formatu:<br /><br /> -   `"#,0."`, które separator tysięcy używa liczbę 100 milionów w formacie ciągu "100 000 000".<br />-   `"#0,."`, który używa skalowania przez współczynnik tysiąca Aby sformatować liczbę 100 milionów jako ciąg "100000".<br />-   `"#,0,."`, które separator tysięcy używa i skalować przez tysiąca Aby sformatować liczbę 100 milionów jako ciąg "100 000".|  
|(`:`)|Separator czasu. W kilku lokalizacjach innych znaków może być używany do reprezentowania separator godziny. Separator godziny oddziela godziny, minuty i sekundy podczas formatowania wartości czasu. Rzeczywiste znak używany jako separator godziny w danych wyjściowych sformatowany zależy od ustawień systemu.|  
|(`/`)|Separator daty. W kilku lokalizacjach innych znaków może być używany do reprezentowania separatora daty. Separator daty oddziela dzień, miesiąc i rok, gdy wartości daty sformatowane. Rzeczywiste znak używany jako separator daty w danych wyjściowych sformatowany zależy od ustawień systemu.|  
|(`E-``E+``e-``e+`)|Notacja naukowa. Jeśli wyrażenie formatu zawiera co najmniej jeden symbol zastępczy cyfry (`0` lub `#`) z lewej strony `E-`, `E+`, `e-`, lub `e+`, liczba jest wyświetlana w formatu naukowe i `E` lub `e` dodaje się pomiędzy jego wykładnik. Liczba cyfr po lewej stronie określa liczbę cyfr wykładnika. Użyj `E-` lub `e-` można umieścić znakiem minus obok wykładniki ujemna. Użyj `E+` lub `e+` do umieszczania znakiem minus obok ujemna wykładniki i znakiem plus obok wykładniki dodatnią. Należy również uwzględnić pozycje cyfr z prawej strony tego symbolu uzyskać poprawny formatowania.|  
|`-` `+` `$` ( )|Literał znaków. Następujące znaki są wyświetlane dokładnie tak jak w ciągu formatu. Aby wyświetlić znak inną niż wymienione, należy poprzedzić go znakiem kreski ułamkowej odwróconej (`\`) lub ująć w podwójny cudzysłów ("").|  
|(`\`)|Przedstawia następny znak w ciągu formatu. Aby wyświetlić znak, który ma specjalne znaczenie jako znak literałowy, należy poprzedzić go znakiem kreski ułamkowej odwróconej (`\`). Ukośnik odwrotny, sam nie są wyświetlane. Przy użyciu ukośnik odwrotny jest taka sama jak otaczającej następny znak w podwójny cudzysłów. Aby wyświetlić ukośnik odwrotny, użyj dwóch kresek ułamkowych odwróconych (`\\`).<br /><br /> Przykłady znaków, których nie można wyświetlić jako literał znaków są formatowania daty i czasu, formatowanie znaków (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, i `:`), znaków formatowanie liczbowe (`#`, `0`, `%`, `E`, `e`, przecinkami i okres) i formatowania ciągu znaków (`@`, `&`, `<`, `>`, i `!`).|  
|(`"``ABC``"`)|Wyświetla ciąg w podwójny cudzysłów (""). Aby dołączyć ciąg argument stylu z kodem, należy użyć `Chr(34)` należy ująć tekst (`34` jest kod znaku cudzysłowu (")).|  
  
### <a name="legacy-code-example"></a>Przykład starszego kodu  
 Poniższa tabela zawiera niektóre przykładowe wyrażenia format liczb. (Te przykłady dają zakładać, że ustawień regionalnych systemu jest angielski-US) Pierwsza kolumna zawiera ciągi formatu dla `Style` argumentu `Format` funkcji; innych kolumn, które zawierają dane wyjściowe, jeśli sformatowanych danych ma wartość podana w nagłówki kolumn.  
  
|Format (`Style`)|"5" w formacie|"-5" w formacie|"0,5" w formacie|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Wstępnie zdefiniowane formaty daty/godziny  
 Poniższa tabela zawiera wstępnie zdefiniowane daty i czasu nazwy formatu. Te mogą być używane przez nazwę jako argument stylu `Format` funkcji:  
  
|Nazwa formatu|Opis|  
|-|-|  
|`General Date`, lub `G`|Wyświetla datę i/lub godzinę. Na przykład `3/12/2008 11:07:31 AM`. Wyświetlanie dat zależy od wartości bieżącej kultury aplikacji.|  
|`Long Date`, `Medium Date`, lub `D`|Wyświetla datę ustawioną w formacie daty długiej bieżącej kultury. Na przykład `Wednesday, March 12, 2008`.|  
|`Short Date`, lub `d`|Wyświetla datę w formacie daty krótkiej bieżącej kultury. Na przykład `3/12/2008`.<br /><br /> `d` Znak Wyświetla dzień w formacie daty zdefiniowane przez użytkownika.|  
|`Long Time`, `Medium Time`, lub `T`|Godzina w formacie bieżącej kultury długi czas; zwykle obejmuje godziny, minuty, sekundy. Na przykład `11:07:31 AM`.|  
|`Short Time` lub `t`|Wyświetla czas, w formacie godziny krótkiej bieżącej kultury. Na przykład `11:07 AM`.<br /><br /> `t` Znak Wyświetla `AM` lub `PM` wartości dla ustawień regionalnych wykorzystujących 12-godzinnym, w formacie czasu zdefiniowanych przez użytkownika.|  
|`f`|Wyświetla daty długiej i godziny krótkiej zgodnie z formacie bieżącej kultury. Na przykład `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Wyświetla daty długiej i długi czas zgodnie z formacie bieżącej kultury. Na przykład `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Wyświetla daty krótkiej i godziny krótkiej zgodnie z formacie bieżącej kultury. Na przykład `3/12/2008 11:07 AM`.|  
|`M`, `m`|Wyświetla miesiąc i dzień daty. Na przykład `March 12`.<br /><br /> `M` Znak Wyświetla miesiąca w formacie daty zdefiniowane przez użytkownika. `m` Znak Wyświetla minut w formacie czasu zdefiniowanych przez użytkownika.|  
|`R`, `r`|Formaty daty, zgodnie z <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> właściwości. Na przykład `Wed, 12 Mar 2008 11:07:31 GMT`. Daty sformatowane nie Dostosuj wartość daty i godziny. Należy dostosować wartość daty/godziny GMT przed wywołaniem `Format` funkcji.|  
|`s`|Formaty daty i godziny jako indeks sortowania. Na przykład `2008-03-12T11:07:31`.<br /><br /> `s` Znak Wyświetla sekund w formacie czasu zdefiniowanych przez użytkownika.|  
|`u`|Formaty daty i godziny jako indeks sortowania GMT. Na przykład `2008-03-12 11:07:31Z`.|  
|`U`|Formaty daty i godziny długie i długi czas jako GMT. Na przykład `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Formaty daty w postaci rok i miesiąc. Na przykład `March, 2008`.<br /><br /> `Y` i `y` znaków wyświetlania roku w formacie daty zdefiniowane przez użytkownika.|  
  
 Aby uzyskać więcej informacji o aplikacji bieżącej kultury, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Zdefiniowane przez użytkownika formaty daty/godziny  
 W poniższej tabeli przedstawiono znaki, których można użyć do utworzenia formaty daty/godziny zdefiniowane przez użytkownika. W odróżnieniu od we wcześniejszych wersjach programu Visual Basic, te znaki format jest rozróżniana wielkość liter.  
  
|Znak|Opis|  
|-|-|  
|(`:`)|Separator czasu. W kilku lokalizacjach innych znaków może być używany do reprezentowania separator godziny. Separator godziny oddziela godziny, minuty i sekundy podczas formatowania wartości czasu. Rzeczywiste znak, który jest używany jako separator godziny sformatowane danych wyjściowych jest określany przez wartości bieżącej kultury aplikacji.|  
|(`/`)|Separator daty. W kilku lokalizacjach innych znaków może być używany do reprezentowania separatora daty. Separator daty oddziela dzień, miesiąc i rok, gdy wartości daty sformatowane. Rzeczywiste znak, który jest używany jako separator daty w danych wyjściowych sformatowany zależy od bieżącej kultury aplikacji.|  
|(`%`)|Służy do wskazania, że następujący znak są odczytywane formacie pojedynczego litery niezależnie od wszelkich końcowych litery. Również służy do wskazania, że format litery jednym jest do odczytu jako zdefiniowane przez użytkownika format. Zobacz, co następuje, aby uzyskać dodatkowe szczegóły.|  
|`d`|Wyświetla dzień w postaci liczby bez zerem (na przykład `1`). Użyj `%d` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`dd`|Wyświetla dzień w postaci liczby z zerem (na przykład `01`).|  
|`ddd`|Wyświetla dzień w postaci skrótu (na przykład `Sun`).|  
|`dddd`|Wyświetla dzień w postaci pełnej nazwy (na przykład `Sunday`).|  
|`M`|Wyświetla liczbę bez zerem miesiąca (na przykład stycznia jest reprezentowany jako `1`). Użyj `%M` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`MM`|Wyświetla miesiąc w postaci liczby z zerem (na przykład `01/12/01`).|  
|`MMM`|Wyświetla miesiąc w postaci skrótu (na przykład `Jan`).|  
|`MMMM`|Wyświetla nazwę pełny miesiąc miesiąca (na przykład `January`).|  
|`gg`|Wyświetla ciąg okresu/era (na przykład `A.D.`).|  
|`h`|Wyświetla godzinę jako liczbę bez zerami 12-godzinnym (na przykład `1:15:15 PM`). Użyj `%h` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`hh`|Wyświetla godzinę jako liczbę z zerami 12-godzinnym (na przykład `01:15:15 PM`).|  
|`H`|Wyświetla godzinę jako liczbę bez zerami 24-godzinnym (na przykład `1:15:15`). Użyj `%H` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`HH`|Wyświetla godzinę jako liczbę z zerami 24-godzinnym (na przykład `01:15:15`).|  
|`m`|Wyświetla minuty w postaci liczby bez zerami (na przykład `12:1:15`). Użyj `%m` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`mm`|Wyświetla minuty w postaci liczby zerami prowadzącymi (na przykład `12:01:15`).|  
|`s`|Wyświetla drugi w postaci liczby bez zerami (na przykład `12:15:5`). Użyj `%s` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`ss`|Wyświetla drugi w postaci liczby zerami prowadzącymi (na przykład `12:15:05`).|  
|`f`|Wyświetla części sekundy. Na przykład `ff` Wyświetla setnych sekund, podczas gdy `ffff` wyświetla 10-000 sekund. Można użyć do siedmiu `f` symbole w formacie programu zdefiniowane przez użytkownika. Użyj `%f` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`t`|Używa 12-godzinnym i wyświetla wielką `A` dla dowolnego godziny przed południe; Wyświetla wielką `P` wszystkie godziny między południe i 11:59 PM Użyj `%t` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`tt`|Dla ustawień regionalnych, które używają 12-godzinnym, wyświetla wielką `AM` z dowolnym godzina przed południe; Wyświetla wielką `PM` z dowolnym godziny między południe i 11:59 PM<br /><br /> Dla ustawień regionalnych, korzystających z 24-godzinnym Wyświetla nothing.|  
|`y`|Wyświetla liczbę roku (0 – 9) bez zerami. Użyj `%y` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`yy`|Wyświetla roku w formacie liczbowym dwucyfrowe z zerem, jeśli ma to zastosowanie.|  
|`yyy`|Wyświetla roku w formacie liczbowym czterech cyfr.|  
|`yyyy`|Wyświetla roku w formacie liczbowym czterech cyfr.|  
|`z`|Wyświetla przesunięcie strefy czasowej bez zerem (na przykład `-8`). Użyj `%z` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika format liczby.|  
|`zz`|Wyświetla przesunięcie strefy czasowej z zerem (na przykład `-08`)|  
|`zzz`|Wyświetla przesunięcie strefy czasowej Pełna (na przykład `-08:00`)|  
  
### <a name="legacy-code-example"></a>Przykład starszego kodu  
 Poniżej przedstawiono przykłady zdefiniowane przez użytkownika formaty daty i godziny dla `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Format|Wyświetla|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 Minimalny czas rozwiązania dla urządzenia jest określana przez producenta urządzenia. Jeśli rozdzielczość czasu dla urządzenia jest wystarczająco, grubą `f` format znak zwraca 0 uruchamianych na tym urządzeniu.  
  
   
  
## Examples  
 W tym przykładzie pokazano różnych zastosowań `Format` funkcji, aby obie wartości formatu `String` formaty i formaty zdefiniowane przez użytkownika. Separatora daty (`/`), czas separatora (`:`) oraz wskaźniki AM/PM (`t` i `tt`), rzeczywiste sformatowane wyniki wyświetlane w systemie zależy od ustawień regionalnych jest przy użyciu kodu. Gdy godziny i daty są wyświetlane w środowisku programistycznym, format godziny krótkiej i format daty krótkiej kod ustawień regionalnych są używane.  
  
> [!NOTE]
>  Dla ustawień regionalnych, korzystających z 24-godzinnym, wskaźniki AM/PM (`t` i `tt`) wyświetlić pustą.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. wyrażenie, które ma być sformatowany.</param>
        <param name="NumDigitsAfterDecimal">Opcjonalna. Wartość liczbowa wskazujący, ile miejsca są wyświetlane z prawej strony dziesiętnego. Wartość domyślna to 1, co wskazuje, że używane są ustawienia regionalne tego komputera.</param>
        <param name="IncludeLeadingDigit">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Wyliczenie wskazującą, czy jest wyświetlana zerem ułamkowa. Wartości można znaleźć w temacie "Uwagi".</param>
        <param name="UseParensForNegativeNumbers">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> wyliczenie, która wskazuje, czy należy umieścić wartości ujemnych wewnątrz nawiasów. Wartości można znaleźć w temacie "Uwagi".</param>
        <param name="GroupDigits">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> wyliczenie, która wskazuje, czy numery są grupowane przy użyciu określonego w ustawieniach regionalnych komputera ogranicznik grupy. Wartości można znaleźć w temacie "Uwagi".</param>
        <summary>Zwraca wyrażenie sformatowane jako wartość walutowa używająca symbolu waluty zdefiniowanego w Panelu sterowania systemu.</summary>
        <returns>Zwraca wyrażenie sformatowane jako wartość walutowa używająca symbolu waluty zdefiniowanego w Panelu sterowania systemu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jeden lub więcej argumentów opcjonalnych zostaną pominięte, pasujących wartości ustawienia regionalne tego komputera są używane zamiast tego.  
  
 Pozycja symbolu waluty względem wartości walutowej zależy od ustawień regionalnych systemu.  
  
> [!NOTE]
>  Wszystkie informacje o ustawieniach pochodzi z ustawieniami regionalnymi aplikacji. Domyślnie, który będzie ustawieniami regionalnymi w Panelu sterowania. Jednak może zostać zmieniona programowo przy użyciu programu .NET Framework, z wyjątkiem zerem, która pochodzi z `Number` kartę.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, I `GroupDigits` argumenty przyjmować następujące wartości wyliczenia trzy stany.  
  
|Wartość|Opis|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Ustawienia regionalne tego komputera|  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie `FormatCurrency` funkcji.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Liczba cyfr po punkcie dziesiętnym jest większa niż 99.</exception>
        <exception cref="T:System.InvalidCastException">Typ nie jest liczbą.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Date" /> wyrażenie, które ma być sformatowany.</param>
        <param name="NamedFormat">Opcjonalna. Liczbowa wartość, która wskazuje format daty i godziny używany. Pominięcie <see langword="DateFormat.GeneralDate" /> jest używany.</param>
        <summary>Zwraca ciąg reprezentujący wartość daty/godziny.</summary>
        <returns>Zwraca ciąg reprezentujący wartość daty/godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` — Typ danych zawsze zawiera informacje zarówno datę i godzinę. W celu konwersji typu, Visual Basic uwzględnia 1/1/1 (1 stycznia roku, 1) być neutralne wartość daty i 00:00:00 (północ) jako neutralny wartość po raz. Po sformatowaniu `Date` wartość jako ciąg daty i godziny `FormatDateTime` nie ma wartości neutralne w ciągu wynikowym. Na przykład, jeśli Konwertuj #1/1/0001 9:30:00 # na ciąg, wynik jest "9:30:00 AM"; informacje o dacie zostało pominięte. Jednak informacje o dacie jest nadal znajdują się w oryginalnym `Date` wartości i może zostać przywrócona z funkcji takich jak `DatePart`.  
  
> [!NOTE]
>  W przypadku przekazania `Expression` argument jako `String` literału, `FormatDateTime` zinterpretuje ją zgodnie z <xref:System.Globalization.CultureInfo.CurrentCulture%2A> ustawienie aplikacji. Jednak w przypadku przekazania go jako `Date` literału, użyj formatu #mm/dd/rrrr # ponieważ `FormatDateTime` zawsze będą interpretowane przez `Date` literału zgodnie z kulturą języka angielskiego (US). Jest to konieczne, ponieważ, jeśli aplikacja jest opracowany i zakodowane przy użyciu `Date` literały z jednego kultury, ale następnie jest wykonywane na platformie z inną kulturę, `Date` literały może być analizowana niepoprawnie.  
  
 `NamedFormat` Argument ma następujące ustawienia.  
  
|Stała|Opis|  
|-|-|  
|`DateFormat.GeneralDate`|Wyświetla datę i/lub godzinę. Część daty są wyświetlane jako daty krótkiej. W przypadku część czasu, wyświetl ją jako dużo czasu. Jeśli jest obecny, Wyświetl obie części.|  
|`DateFormat.LongDate`|Wyświetla datę w formacie daty długiej określonego w ustawieniach regionalnych komputera.|  
|`DateFormat.ShortDate`|Wyświetla datę w formacie daty krótkiej określonego w ustawieniach regionalnych komputera.|  
|`DateFormat.LongTime`|Wyświetla godzinę w formacie czasu określonego w ustawieniach regionalnych komputera.|  
|`DateFormat.ShortTime`|Wyświetla godzinę w formacie 24-godzinnym (gg: mm).|  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `FormatDateTime` funkcji.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NamedFormat" /> ustawienie jest nieprawidłowe.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. wyrażenie, które ma być sformatowany.</param>
        <param name="NumDigitsAfterDecimal">Opcjonalna. Wartość liczbowa wskazujący, ile miejsca są wyświetlane z prawej strony dziesiętnego. Wartość domyślna to 1, co wskazuje, że używane są ustawienia regionalne tego komputera.</param>
        <param name="IncludeLeadingDigit">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy cyfry 0 nie będą wyświetlane wartości ułamkowych. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="UseParensForNegativeNumbers">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy można umieścić wartości ujemnych wewnątrz nawiasów. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="GroupDigits">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy numery są grupowane przy użyciu określonego w ustawieniach regionalnych ogranicznik grupy. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca wyrażenie sformatowane jako liczby.</summary>
        <returns>Zwraca wyrażenie sformatowane jako liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jeden lub więcej argumentów opcjonalnych zostały pominięte wartości pominiętych argumentów są dostarczane przez ustawienia regionalne.  
  
> [!NOTE]
>  Wszystkie informacje o ustawieniach pochodzi z ustawieniami regionalnymi aplikacji. Domyślnie, który będzie ustawieniami regionalnymi w Panelu sterowania. Jednak może zostać zmieniona programowo przy użyciu programu .NET Framework.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, I `GroupDigits` argumenty mają następujące ustawienia.  
  
|Stała|Opis|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Ustawienia regionalne tego komputera|  
  
   
  
## Examples  
 W tym przykładzie przedstawiono `FormatNumber` funkcji.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ nie jest liczbą.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. wyrażenie, które ma być sformatowany.</param>
        <param name="NumDigitsAfterDecimal">Opcjonalna. Wartość liczbowa wskazująca liczbę miejsc po prawej stronie dziesiętnego są wyświetlane. Wartość domyślna to 1, co wskazuje, że ustawienia regionalne są używane.</param>
        <param name="IncludeLeadingDigit">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, wskazującą, czy zerem przedstawia ułamkowa. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="UseParensForNegativeNumbers">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy należy umieścić wartości ujemnych wewnątrz nawiasów. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="GroupDigits">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy numery są grupowane przy użyciu określonego w ustawieniach regionalnych ogranicznik grupy. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca wyrażenie sformatowane jako wartość procentowa (tzn. pomnożona przez 100) znakiem %.</summary>
        <returns>Zwraca wyrażenie sformatowane jako wartość procentowa (tzn. pomnożona przez 100) znakiem %.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jeden lub więcej argumentów opcjonalnych zostaną pominięte, wartości pominiętych argumentów są dostarczane przez ustawienia regionalne.  
  
> [!NOTE]
>  Wszystkie informacje o ustawieniach pochodzi z ustawieniami regionalnymi aplikacji. Domyślnie, który będzie ustawieniami regionalnymi w Panelu sterowania. Jednak może zostać zmieniona programowo przy użyciu programu .NET Framework.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, I `GroupDigits` argumenty mają następujące ustawienia.  
  
|Stała|Opis|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|Ustawienia regionalne tego komputera|  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `FormatPercent` funkcji.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ nie jest liczbą.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Wszystkie prawidłowe <see langword="String" /> wyrażenia.</param>
        <param name="Index">Wymagana. <see langword="Integer" /> Wyrażenie. Indeks (w oparciu o 1) po znaku <c>str</c> ma zostać zwrócona.</param>
        <summary>Zwraca <see langword="Char" /> wartość reprezentującą znak ze wskazanego miejsca w podanym ciągu.</summary>
        <returns>
          <see langword="Char" /> wartość reprezentującą znak ze wskazanego miejsca w podanym ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Index` jest mniejszy niż 1 lub większą niż indeksu po ostatnim znaku `str`, `ArgumentException` jest generowany.  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia `GetChar` funkcja zwraca znak z określonym indeksem `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> jest <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, lub <paramref name="Index" /> jest większa niż indeksu ostatni znak <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczbę całkowitą określającą początkowe położenie pierwszego wystąpienia jednego ciągu w innym.  Liczba całkowita jest indeks jedynki, przypadku znalezienia dopasowania.  Jeśli nie znaleziono, funkcja zwraca wartość zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Wymagana. <see langword="String" /> wyrażenie jest przeszukiwany.</param>
        <param name="String2">Wymagana. <see langword="String" /> szukane wyrażenie.</param>
        <param name="Compare">Opcjonalna. Określa typ porównania ciągów. Jeśli <c>porównania</c> zostanie pominięty, <see langword="Option Compare" /> ustawienie określa typ porównania.</param>
        <summary>Zwraca liczbę całkowitą określającą początkowe położenie pierwszego wystąpienia jednego ciągu w innym.</summary>
        <returns>
          <list type="table">
            <item>
              <term> IF  
  
 </term>
              <description> InStr zwraca  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> ma zerową długość lub <see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> ma zerową długość lub <see langword="Nothing" /></term>
              <description> Pozycja początkowa wyszukiwania, która domyślnie Określa pierwszą pozycję znaku.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> Nie znaleziono  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> zostanie znaleziony w <paramref name="String1" /></term>
              <description> Położenie, w którym rozpoczyna się niezgodne  
  
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj `InStr` funkcja jest używana podczas analizowania ciągów.  
  
> [!NOTE]
>  `InStrB` Funkcji w poprzednich wersjach programu Visual Basic zwraca liczbę bajtów, a nie w pozycji znaku. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `InStrB` nie jest już obsługiwana.  
  
 `Compare` Ustawienia argumentu są:  
  
|Stała|Wartość|Opis|  
|-|-|-|  
|`Binary`|0|Wykonuje porównanie binarne|  
|`Text`|1|Przeprowadza porównanie tekstu|  
  
   
  
## Examples  
 W tym przykładzie użyto `InStr` funkcja zwraca pozycję pierwszego wystąpienia jednego ciągu w innym.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Opcjonalna. Wyrażenie liczbowe, która ustawia pozycję początkową każdego wyszukiwania. Pominięcie wyszukiwanie rozpoczyna się od pozycji pierwszego znaku. Indeks początkowy jest oparte na 1.</param>
        <param name="String1">Wymagana. <see langword="String" /> wyrażenie jest przeszukiwany.</param>
        <param name="String2">Wymagana. <see langword="String" /> szukane wyrażenie.</param>
        <param name="Compare">Opcjonalna. Określa typ porównania ciągów. Jeśli <c>porównania</c> zostanie pominięty, <see langword="Option Compare" /> ustawienie określa typ porównania.</param>
        <summary>Zwraca liczbę całkowitą określającą początkowe położenie pierwszego wystąpienia jednego ciągu w innym.</summary>
        <returns>
          <list type="table">
            <item>
              <term> IF  
  
 </term>
              <description> InStr zwraca  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> ma zerową długość lub <see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> ma zerową długość lub <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> Nie znaleziono  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> zostanie znaleziony w <paramref name="String1" /></term>
              <description> Położenie, w którym rozpoczyna się niezgodne  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; długość <paramref name="String1" /></term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj `InStr` funkcja jest używana podczas analizowania ciągów.  
  
> [!NOTE]
>  `InStrB` Funkcji w poprzednich wersjach programu Visual Basic zwraca liczbę bajtów, a nie w pozycji znaku. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `InStrB` nie jest już obsługiwana.  
  
 `Compare` Ustawienia argumentu są:  
  
|Stała|Wartość|Opis|  
|-|-|-|  
|`Binary`|0|Wykonuje porównanie binarne|  
|`Text`|1|Przeprowadza porównanie tekstu|  
  
   
  
## Examples  
 W tym przykładzie użyto `InStr` funkcja zwraca pozycję pierwszego wystąpienia jednego ciągu w innym.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Wymagana. Przeszukiwany wyrażenia ciągu.</param>
        <param name="StringMatch">Wymagana. Wyszukane wyrażenia ciągu.</param>
        <param name="Start">Opcjonalna. Wyrażenie liczbowe, ustawienie pozycja początkowa jedynki każdego wyszukiwania, zaczynając od lewego końca ciągu. Jeśli <c>Start</c> zostanie pominięty, zostanie użyta -1, co oznacza wyszukiwanie rozpoczyna się od ostatniej pozycji znaku. Wyszukiwanie następnie rozpoczynające się od prawej do lewej.</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa wskazujący rodzaj porównywania podczas podciągów. Pominięcie odbywa się porównanie binarne. Wartości można znaleźć w temacie Ustawienia.</param>
        <summary>Zwraca pozycję pierwszego wystąpienia jednego ciągu w innym, licząc od prawego końca ciągu.</summary>
        <returns>
          <list type="table">
            <item>
              <term> IF  
  
 </term>
              <description> Zwraca InStrRev  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> jest o zerowej długości  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> jest o zerowej długości  
  
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> Nie znaleziono  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> zostanie znaleziony w <paramref name="StringCheck" /></term>
              <description> Pozycja jaką pierwszego dopasowania zostanie znaleziony, począwszy od prawego końca ciągu.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> jest większa niż długość <paramref name="StringMatch" /></term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że składnia `InStrRev` funkcja nie jest taka sama składnia `InStr` funkcji.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|`Binary`|Przeprowadza porównanie binarne.|  
|`Text`|Przeprowadza porównanie tekstowe.|  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `InStrRev` funkcji.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 lub <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Wymagana. Jednowymiarowa tablica zawierająca podciągi ma zostać umieszczony.</param>
        <param name="Delimiter">Opcjonalna. Dowolny ciąg używany do rozdzielania podciągów w zwracany ciąg. Pominięcie znak spacji ("") jest używany. Jeśli <c>ogranicznik</c> jest ciągiem o zerowej długości ("") lub <see langword="Nothing" />, wszystkie elementy na liście są połączone z ogranicznikami nie.</param>
        <summary>Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</summary>
        <returns>Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Występuje parzystość między `Join` i `Split` funkcji. `Join` Funkcja pobiera tablicę ciągów i dołącza je za pomocą ciągu ogranicznik, aby zwrócić pojedynczy ciąg. `Split` Funkcji ciąg znaków i oddziela go na ogranicznik, aby zwracało tablicę ciągów. Jednak klucza różnicą jest to, że `Join` można ciągów z dowolnego ciągu ogranicznik `Split` tylko rozdzielić ciągów za pomocą pojedynczy znak ogranicznika.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia `Join` funkcja umożliwia utworzenie listy z kilku ciągów.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> nie jest jedną wymiarów.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Wymagana. Jednowymiarowa tablica zawierająca podciągi ma zostać umieszczony.</param>
        <param name="Delimiter">Opcjonalna. Dowolny ciąg używany do rozdzielania podciągów w zwracany ciąg. Pominięcie znak spacji ("") jest używany. Jeśli <c>ogranicznik</c> jest ciągiem o zerowej długości ("") lub <see langword="Nothing" />, wszystkie elementy na liście są połączone z ogranicznikami nie.</param>
        <summary>Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</summary>
        <returns>Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Występuje parzystość między `Join` i `Split` funkcji. `Join` Funkcja pobiera tablicę ciągów i dołącza je za pomocą ciągu ogranicznik, aby zwrócić pojedynczy ciąg. `Split` Funkcji ciąg znaków i oddziela go na ogranicznik, aby zwracało tablicę ciągów. Jednak klucza różnicą jest to, że `Join` można ciągów z dowolnego ciągu ogranicznik `Split` tylko rozdzielić ciągów za pomocą pojedynczy znak ogranicznika.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia `Join` funkcja umożliwia utworzenie listy z kilku ciągów.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> nie jest jedną wymiarów.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg lub znak przekonwertowany na małe litery.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagana. Wszystkie prawidłowe <see langword="String" /> lub <see langword="Char" /> wyrażenia.</param>
        <summary>Zwraca ciąg lub znak przekonwertowany na małe litery.</summary>
        <returns>Zwraca ciąg lub znak przekonwertowany na małe litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyłącznie z wielkich liter są konwertowane na małe litery; wszystkie znaki niebędące znaki i małe litery pozostają niezmienione.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=nameWithType> — metoda i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 W tym przykładzie użyto `LCase` funkcja zwraca wersję małe litery w ciągu.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagana. Wszystkie prawidłowe <see langword="String" /> lub <see langword="Char" /> wyrażenia.</param>
        <summary>Zwraca ciąg lub znak przekonwertowany na małe litery.</summary>
        <returns>Zwraca ciąg lub znak przekonwertowany na małe litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyłącznie z wielkich liter są konwertowane na małe litery; wszystkie znaki niebędące znaki i małe litery pozostają niezmienione.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=nameWithType> — metoda i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 W tym przykładzie użyto `LCase` funkcja zwraca wersję małe litery w ciągu.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, z którego są zwracane po lewej stronie znaków.</param>
        <param name="Length">Wymagana. <see langword="Integer" /> Wyrażenie. Wyrażenie liczbowe wskazujący, ile znaków ma być zwracanych. Jeśli jest to 0, ciąg o zerowej długości ("") jest zwracany. Jeśli większa lub równa liczbie znaków <c>str</c>, zostanie zwrócony cały ciąg.</param>
        <summary>Zwraca ciąg zawierający określoną liczbę znaków od lewego końca ciągu.</summary>
        <returns>Zwraca ciąg zawierający określoną liczbę znaków od lewego końca ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, użyj `Len` funkcji. Jeśli używana w aplikacji formularzy systemu Windows lub klasy, która ma `Left` właściwości, użytkownik musi pełnej kwalifikacji funkcji z `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  `LeftB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg w bajtach zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LeftB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `Left` funkcja zwraca podciąg z danym `String`. W klasie, która ma `Left` właściwości, może być konieczne do pełnej kwalifikacji `Left` funkcji.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Wszystkie prawidłowe <see langword="String" /> nazwę wyrażenia lub zmiennej. Jeśli <c>wyrażenie</c> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar będą zapisywane do pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów inteligentnych urządzeń  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` do zwrócenia liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. <see langword="String" /> Wyrażenie. Nazwa zmiennej ciągu.</param>
        <param name="Length">Wymagana. <see langword="Integer" /> Wyrażenie. Długość ciągu zwróconego.</param>
        <summary>Zwraca ciąg wyrównany do lewej zawierający podany ciąg skorygowany do zadanej długości.</summary>
        <returns>Zwraca ciąg wyrównany do lewej zawierający podany ciąg skorygowany do zadanej długości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określony ciąg jest dłuższy niż określony czas, zwrócony ciąg jest obcinana do określonej długości. Jeśli określonego ciągu jest mniejszy niż określony czas, spacje są dodawane do prawego końca zwracany ciąg do utworzenia odpowiednich długości.  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `LSet` funkcji.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Wszystkie prawidłowe <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie początkowe lub końcowe spacje (<see langword="Trim" />).</summary>
        <returns>Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie początkowe lub końcowe spacje (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, I `Trim` funkcji Usuń spacje z końców ciągów.  
  
   
  
## Examples  
 W tym przykładzie użyto `LTrim` funkcji spacje początkowe i `RTrim` funkcji końcowe spacje ze zmienną typu string. Używa `Trim` funkcji obu typów spacji.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg zawierający znaki z określonego ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, z którego są zwracane znaki.</param>
        <param name="Start">Wymagana. <see langword="Integer" /> Wyrażenie. Położenie początkowe zwracanych znaków. Jeśli <c>Start</c> jest większa niż liczba znaków w <c>str</c>, <see langword="Mid" /> funkcja zwraca ciąg o zerowej długości (""). <c>Uruchom</c> jest oparta na jeden.</param>
        <summary>Zwraca ciąg zawierający znaki, zaczynając od określonej pozycji w ciągu.</summary>
        <returns>Ciąg, który zawiera wszystkie znaki, zaczynając od określonej pozycji w ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, użyj `Len` funkcji.  
  
 Visual Basic ma `Mid` funkcji i `Mid` instrukcji. Te elementy jednocześnie działać na określoną liczbę znaków w ciągu, ale `Mid` funkcja zwraca znaków podczas `Mid` instrukcji zastępuje znaki. Aby uzyskać więcej informacji, zobacz [Mid — instrukcja](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg w bajtach zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic są w formacie Unicode, i `MidB` nie jest już obsługiwana.  
  
   
  
## Examples  
 Ostatni wiersz w tym przykładzie używa tego przeciążenia `Mid` funkcja zwracająca piątego do kolejnych znaków z ciągu.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 lub <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, z którego są zwracane znaki.</param>
        <param name="Start">Wymagana. <see langword="Integer" /> Wyrażenie. Położenie początkowe zwracanych znaków. Jeśli <c>Start</c> jest większa niż liczba znaków w <c>str</c>, <see langword="Mid" /> funkcja zwraca ciąg o zerowej długości (""). <c>Uruchom</c> jednej podstawie.</param>
        <param name="Length">Opcjonalna. <see langword="Integer" /> Wyrażenie. Liczba znaków do zwrócenia. Pominięcie lub, jeśli jest dostępnych mniej niż <c>długość</c> znaków w tekście (w tym znak na pozycji <c>Start</c>), zwracane są wszystkie znaki od pozycji początkowej na końcu ciągu.</param>
        <summary>Zwraca ciąg zawierający określoną liczbę znaków od określonej pozycji w ciągu.</summary>
        <returns>Ciąg, który składa się z określoną liczbę znaków, zaczynając od określonej pozycji w ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, użyj `Len` funkcji.  
  
 Visual Basic ma `Mid` funkcji i `Mid` instrukcji. Te elementy jednocześnie działać na określoną liczbę znaków w ciągu, ale `Mid` funkcja zwraca znaków podczas `Mid` instrukcji zastępuje znaki. Aby uzyskać więcej informacji, zobacz [Mid — instrukcja](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg w bajtach zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic są w formacie Unicode, i `MidB` nie jest już obsługiwana.  
  
   
  
## Examples  
 Pierwsze dwie `Mid` funkcji w tym przykładzie zwraca określoną liczbę znaków z ciągu, zaczynając od danej pozycji. (Przedstawiono ostatniej funkcji <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> przeciążenia i tylko określa punkt początkowy wyodrębniania ciąg.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 lub <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Ciąg zawierający podciąg, aby zastąpić wyrażenia.</param>
        <param name="Find">Wymagana. Poszukiwany podciąg.</param>
        <param name="Replacement">Wymagana. Zastąpienie podciąg.</param>
        <param name="Start">Opcjonalna. Umieść w <c>wyrażenie</c> zaczynającym się ciąg używany do zastąpienia. Wartość zwracana <see langword="Replace" /> jest ciągiem, który rozpoczyna się od <c>Start</c>, z odpowiednie zmiany. Jeśli pominięta, przyjmowana jest wartość 1.</param>
        <param name="Count">Opcjonalna. Liczba zamian podciągów do wykonania. W przypadku pominięcia będzie używana wartość domyślna to 1, co oznacza "wykonanie wszystkich możliwych zamian".</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa wskazujący rodzaj porównywania podczas podciągów. Wartości można znaleźć w temacie Ustawienia.</param>
        <summary>Zwraca wartość typu ciąg, w której określony podciąg został zamieniony na inny podciąg określoną liczbę razy.</summary>
        <returns>
          <see langword="Replace" /> zwraca następujące wartości.  
  
 <list type="table"><item><term> Jeśli  
  
 </term><description> Zwraca Zamień  
  
 </description></item><item><term><paramref name="Find" /> jest pusty lub <see langword="Nothing" /></term><description> kopię <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> jest o zerowej długości  
  
 </term><description> Kopię <paramref name="Expression" /> z nie wystąpień <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> jest pusty lub <see langword="Nothing" />, lub <paramref name="Start" /> jest większa niż długość <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> wynosi 0  
  
 </term><description> Kopię <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana `Replace` funkcji jest ciągiem, który rozpoczyna się od pozycji określony przez `Start` i kończy się na końcu `Expression` ciąg z podstawień wprowadzone określone przez `Find` i `Replace` wartości.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|`Binary`|Wykonuje porównanie binarne|  
|`Text`|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie przedstawiono `Replace` funkcji.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; -1 lub <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, z którego są zwracane po prawej stronie znaków.</param>
        <param name="Length">Wymagana. <see langword="Integer" />. Wyrażenie liczbowe wskazujący, ile znaków ma być zwracanych. Jeśli jest to 0, ciąg o zerowej długości ("") jest zwracany. Jeśli większa lub równa liczbie znaków <c>str</c>, zostanie zwrócony cały ciąg.</param>
        <summary>Zwraca ciąg zawierający określoną liczbę znaków od prawego końca ciągu.</summary>
        <returns>Zwraca ciąg zawierający określoną liczbę znaków od prawego końca ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, użyj `Len` funkcji. Jeśli używana w formularzu systemu Windows lub klasy, która ma `Right` właściwości, użytkownik musi pełnej kwalifikacji funkcji z `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  `RightB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg znaków, a nie w bajtach. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `RightB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `Right` funkcja zwraca podciąg z danym `String`. W klasie, która ma `Right` właściwości, może być konieczne do pełnej kwalifikacji `Right` funkcji.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. <see langword="String" /> Wyrażenie. Nazwa zmiennej ciągu.</param>
        <param name="Length">Wymagana. <see langword="Integer" /> Wyrażenie. Długość ciągu zwróconego.</param>
        <summary>Zwraca ciąg wyrównany do prawej zawierający podany ciąg skorygowany do zadanej długości.</summary>
        <returns>Zwraca ciąg wyrównany do prawej zawierający podany ciąg skorygowany do zadanej długości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Source` jest dłuższa niż `Length`, `RSet` umieszcza tylko po lewej stronie znaków, maksymalnie do długości `Source`, w zwracanym ciągu. Jeśli określonego ciągu jest mniejszy niż określony czas, spacje są dodawane do lewego końca ciągu do utworzenia odpowiednich długości. Jeśli określony ciąg jest dłuższy niż określony czas, jest obcinana do zadanej długości.  
  
   
  
## Examples  
 W tym przykładzie przedstawiono użycie `RSet` funkcji.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Wszystkie prawidłowe <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie początkowe lub końcowe spacje (<see langword="Trim" />).</summary>
        <returns>Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie początkowe lub końcowe spacje (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, I `Trim` funkcji Usuń spacje z końców ciągów.  
  
   
  
## Examples  
 W tym przykładzie użyto `LTrim` funkcji spacje początkowe i `RTrim` funkcji końcowe spacje ze zmienną typu string. Używa `Trim` funkcji obu typów spacji.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Integer" /> Wyrażenie. Liczba spacji, w ciągu.</param>
        <summary>Zwraca ciąg zawierający podaną liczbę spacji.</summary>
        <returns>Zwraca ciąg zawierający podaną liczbę spacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` Funkcja jest przydatna do formatowania danych wyjściowych i czyszczenia danych w ciągi o stałej długości.  
  
   
  
## Examples  
 W tym przykładzie użyto `Space` funkcja zwraca ciąg zawierający podaną liczbę spacji.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="String" /> wyrażenie zawierające podciągi i ograniczniki.</param>
        <param name="Delimiter">Opcjonalna. Dowolny pojedynczy znak używany do identyfikowania limity podciąg. Jeśli <c>ogranicznik</c> zostanie pominięty, znak spacji ("") jest zakłada się, że ogranicznikiem.</param>
        <param name="Limit">Opcjonalna. Maksymalna liczba podciągów, w których można podzielić ciąg wejściowy. Wartość domyślna -1, wskazuje, czy ciąg wejściowy powinny być podzielone przy każdym wystąpieniu <c>ogranicznik</c> ciągu.</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa wskazujący porównywania podczas podciągów. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca nieujemną jednowymiarową tablicę zawierającą podaną liczbę podciągów.</summary>
        <returns>
          <see langword="String" /> Tablica. Jeśli <paramref name="Expression" /> jest ciągiem o zerowej długości (""), <see langword="Split" /> zwraca tablicę pojedynczego elementu zawierającą ciąg o zerowej długości. Jeśli <paramref name="Delimiter" /> jest ciągiem o zerowej długości lub jeśli on nie występować w dowolnym miejscu na w <paramref name="Expression" />, <see langword="Split" /> zwraca tablicę pojedynczego elementu zawierającego pełny <paramref name="Expression" /> ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie lub gdy `Limit` równa -1, `Split` funkcja dzieli ciąg wejściowy przy każdym wystąpieniu ogranicznika ciągu i zwraca podciągów w tablicy. Podczas `Limit` parametru jest większa od zera, `Split` funkcja dzieli ciąg przy pierwszym `Limit`wystąpienia ogranicznik,-1 i zwraca tablicę z wynikowy podciągów. Na przykład `Split("a:b:c", ":")` zwraca tablicę `{"a", "b", "c"}`, podczas gdy `Split("a:b:c", ":", 2)` zwraca tablicę `{"a", "b:c"}`.  
  
 Gdy `Split` funkcja napotka dwa ograniczniki w wierszu lub ogranicznik na początku lub na końcu ciągu, interpretuje je jako otaczającego ciąg pusty (""). Na przykład `Split("xx", "x")` zwraca tablicę zawierającą trzy puste ciągi: jeden znajdujące początku ciąg i pierwszy "x", co znajdujące dwa "ciągi x", a drugi znajdujące ostatniego "x" i na końcu ciągu.  
  
 Ta tabela pokazuje, jak opcjonalny `Delimiter`, `Limit`, i `Compare` parametrów można zmienić zachowanie `Split` funkcji.  
  
|Wywołanie podziału|Wartość zwracana|  
|-|-|  
|`Split("42, 12, 19")`|{"42,", "12", "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alicja i Robert"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alicja", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"ktoś", "example.com"}|  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|Wartość|  
|-|-|-|  
|`CompareMethod.Binary`|Wykonuje porównanie binarne|0|  
|`CompareMethod.Text`|Wykonuje porównanie tekstowe|1|  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak podzielić ciąg na jego spacji.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 W poniższym przykładzie pokazano sposób dzielenie ciągów z wieloma ograniczniki w wierszu i odfiltrować puste ciągi.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Wymagana. Wszystkie prawidłowe <see langword="String" /> wyrażenia.</param>
        <param name="String2">Wymagana. Wszystkie prawidłowe <see langword="String" /> wyrażenia.</param>
        <param name="Compare">Opcjonalna. Określa typ porównania ciągów. Jeśli <c>porównania</c> zostanie pominięty, <see langword="Option Compare" /> ustawienie określa typ porównania.</param>
        <summary>Zwraca wartość -1, 0 lub 1, na podstawie wyniku porównania ciągów.</summary>
        <returns>
          <see langword="StrComp" /> Funkcja ma następujące wartości zwracanych.  
  
 <list type="table"><item><term> Jeśli  
  
 </term><description> Zwraca StrComp  
  
 </description></item><item><term><paramref name="String1" /> Sortuje wyprzedzenia <paramref name="String2" /></term><description> -1  
  
 </description></item><item><term><paramref name="String1" /> jest równa <paramref name="String2" /></term><description> 0  
  
 </description></item><item><term><paramref name="String1" /> Sortuje po <paramref name="String2" /></term><description> 1  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciągi są porównywane przez wartości alfanumeryczne sortowania, począwszy od pierwszego znaku. Aby uzyskać więcej informacji na temat binarne porównania i porównania tekstową i kolejność sortowania, zobacz [instrukcji porównanie opcji](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 `Compare` Ustawienia argumentu są:  
  
|Stała|Opis|  
|-|-|  
|`Binary`|Przeprowadza porównanie binarne, w oparciu o porządek sortowania, pochodzi z wewnętrznego reprezentacje binarne znaków.|  
|`Text`|Przeprowadza porównanie tekstu, na podstawie kolejności sortowania bez uwzględniania wielkości liter tekstu, określony przez dany system `LocaleID` wartość.|  
  
   
  
## Examples  
 W tym przykładzie użyto `StrComp` funkcja zwraca wyniki porównania ciągów.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Compare" /> wartość jest nieprawidłowa.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, które ma zostać przekonwertowany.</param>
        <param name="Conversion">Wymagana. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> element członkowski. Wartość wyliczenia określenie typu konwersji do wykonania.</param>
        <param name="LocaleID">Opcjonalna. <see langword="LocaleID" /> Wartość, jeśli jest inny niż system <see langword="LocaleID" /> wartość. (System <see langword="LocaleID" /> wartość jest wartością domyślną.)</param>
        <summary>Zwraca ciąg przekonwertowany WE wskazany.</summary>
        <returns>Zwraca ciąg przekonwertowany WE wskazany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stałe `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, i `VbStrConv.Hiragana` może powodować błędy środowiska wykonawczego stosowania ustawień regionalnych, których nie mają zastosowania, ale nie zawsze: stałe `VbStrConv.Katakana` i `VbStrConv.Hiragana`może być używany w systemie nie japoński z zainstalowany pakiet języka japońskiego. Ponadto używać stałych `VbStrConv.Wide` i `VbStrConv.Narrow` jest obsługiwana w każdym systemie o wschodnioazjatyckich język zainstalowany.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=nameWithType> — metoda i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 `Conversion` Ustawienia argumentu są:  
  
|Element członkowski wyliczenia|Opis|  
|-|-|  
|`VbStrConv.None`|Wykonuje bez konwersji|  
|`VbStrConv.LinguisticCasing`|Stosuje się reguły językowe wielkości liter, a nie systemu plików (ustawienie domyślne). Prawidłowe `VbStrConv.UpperCase` i `VbStrConv.LowerCase` tylko.|  
|`VbStrConv.UpperCase`|Konwertuje ciąg na wielkie litery.|  
|`VbStrConv.LowerCase`|Konwertuje ciąg na małe litery.|  
|`VbStrConv.ProperCase`|Zamienia pierwszą literę każdego wyrazu w ciągu na wielkie litery.|  
|`VbStrConv.Wide` <sup>*</sup>|Konwertuje wąskie znaków (połówkowej szerokości) w ciągu znaków całej (pełnej szerokości). [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Konwertuje znaki całej (pełnej szerokości) w ciągu, aby zawęzić zakres znaków (połówkowej szerokości).|  
|`VbStrConv.Katakana` <sup>**</sup>|Konwertuje znaki Hiragana w ciągu znakami Katakana.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Konwertuje znaki Hiragana znakami Katakana w ciągu.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Konwertuje znaki języka chińskiego tradycyjnego języka chińskiego uproszczonego.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Konwertuje znaki języka chińskiego uproszczonego języka chińskiego tradycyjnego.|  
  
 <sup>*</sup> Zastosowanie ustawień regionalnych Azji.  
  
 <sup>**</sup> Dotyczy tylko Japonii.  
  
> [!NOTE]
>  Te stałe są określone w .NET Framework środowisko uruchomieniowe języka wspólnego. W związku z tym użyciem dowolnego miejsca w kodzie zamiast wartości rzeczywistych. Większość można łączyć (na przykład `UpperCase + Wide`), z wyjątkiem przypadków, gdy są one wykluczają się wzajemnie (na przykład `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Poniżej przedstawiono separatorach wyrazów prawidłowe dla odpowiednich wielkości liter: Null (`Chr$(0)`), tabulator poziomy (`Chr$(9)`), wiersz źródła danych (`Chr$(10)`), tabulator pionowy (`Chr$(11)`), Nowa strona (`Chr$(12)`), znaków powrotu karetki (`Chr$(13)`), miejsce ( zestaw znaków jednobajtowych) (`Chr$(32)`). Rzeczywista wartość z parzystością, co może być pełny lub pełnej szerokości, jest zależna od kraju/regionu, dla kultury wschodnioazjatyckim.  
  
   
  
## Examples  
 W tym przykładzie konwertuje tekst małych liter.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nieobsługiwany <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 lub &gt; 2048 lub nieobsługiwany konwersji dla określonych ustawień regionalnych.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Integer" /> Wyrażenie. Długość ciągu ma zostać zwrócona.</param>
        <param name="Character">Wymagana. Wszystkie prawidłowe <see langword="Char" />, <see langword="String" />, lub <see langword="Object" /> wyrażenia. Pierwszy znak wyrażenie, które będą używane. Jeśli znak jest typu <see langword="Object" />, musi zawierać element <see langword="Char" /> lub <see langword="String" /> wartość.</param>
        <summary>Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy.</summary>
        <returns>Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja zwraca `String` składają się z powtarzające się znaki. Znak, który stanowi ciąg to pierwszy znak w `Character` jest zduplikowany argument, a `Number` liczbę razy.  
  
   
  
## Examples  
 W tym przykładzie użyto `StrDup` zduplikowane, funkcja zwraca ciąg znaków.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> jest mniejsza niż 0 lub <paramref name="Character" /> typ jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Integer" /> Wyrażenie. Długość ciągu ma zostać zwrócona.</param>
        <param name="Character">Wymagana. Wszystkie prawidłowe <see langword="Char" />, <see langword="String" />, lub <see langword="Object" /> wyrażenia. Pierwszy znak wyrażenie, które będą używane. Jeśli znak jest typu <see langword="Object" />, musi zawierać element <see langword="Char" /> lub <see langword="String" /> wartość.</param>
        <summary>Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy.</summary>
        <returns>Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja zwraca `String` składają się z powtarzające się znaki. Znak, który stanowi ciąg to pierwszy znak w `Character` jest zduplikowany argument, a `Number` liczbę razy.  
  
   
  
## Examples  
 W tym przykładzie użyto `StrDup` zduplikowane, funkcja zwraca ciąg znaków.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> jest mniejsza niż 0 lub <paramref name="Character" /> typ jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Integer" /> Wyrażenie. Długość ciągu ma zostać zwrócona.</param>
        <param name="Character">Wymagana. Wszystkie prawidłowe <see langword="Char" />, <see langword="String" />, lub <see langword="Object" /> wyrażenia. Pierwszy znak wyrażenie, które będą używane. Jeśli znak jest typu <see langword="Object" />, musi zawierać element <see langword="Char" /> lub <see langword="String" /> wartość.</param>
        <summary>Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy.</summary>
        <returns>Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja zwraca `String` składają się z powtarzające się znaki. Znak, który stanowi ciąg to pierwszy znak w `Character` jest zduplikowany argument, a `Number` liczbę razy.  
  
   
  
## Examples  
 W tym przykładzie użyto `StrDup` zduplikowane, funkcja zwraca ciąg znaków.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> jest mniejsza niż 0 lub <paramref name="Character" /> typ jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Wyrażenia ciągu, którego znaki mają zostać wycofane. Jeśli <c>wyrażenie</c> jest ciągiem o zerowej długości (""), zostanie zwrócony ciąg o zerowej długości.</param>
        <summary>Zwraca wartość typu ciąg, w którym została odwrócona kolejność znaków określonego ciągu.</summary>
        <returns>Zwraca wartość typu ciąg, w którym została odwrócona kolejność znaków określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse` Funkcja zwraca ciąg, który zawiera te same znaki jako `Expression`, w przeciwnym kolejności.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Wszystkie prawidłowe <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie początkowe lub końcowe spacje (<see langword="Trim" />).</summary>
        <returns>Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie początkowe lub końcowe spacje (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, I `Trim` funkcji Usuń spacje z końców ciągów.  
  
   
  
## Examples  
 W tym przykładzie użyto `LTrim` funkcji spacje początkowe i `RTrim` funkcji końcowe spacje ze zmienną typu string. Używa `Trim` funkcji obu typów spacji.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg lub znak odpowiadający wybranemu ciągowi po konwersji na wielkie litery.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagana. Wszystkie prawidłowe <see langword="String" /> lub <see langword="Char" /> wyrażenia.</param>
        <summary>Zwraca ciąg lub znak odpowiadający wybranemu ciągowi po konwersji na wielkie litery.</summary>
        <returns>Zwraca ciąg lub znak odpowiadający wybranemu ciągowi po konwersji na wielkie litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko małe litery są konwertowane na wielkie litery; wszystkie znaki niebędące znaki i wielkich liter pozostają niezmienione.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=nameWithType> — metoda i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 W tym przykładzie użyto `UCase` funkcja zwracająca wielkie wersji ciągu.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagana. Wszystkie prawidłowe <see langword="String" /> lub <see langword="Char" /> wyrażenia.</param>
        <summary>Zwraca ciąg lub znak odpowiadający wybranemu ciągowi po konwersji na wielkie litery.</summary>
        <returns>Zwraca ciąg lub znak odpowiadający wybranemu ciągowi po konwersji na wielkie litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko małe litery są konwertowane na wielkie litery; wszystkie znaki niebędące znaki i wielkich liter pozostają niezmienione.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=nameWithType> — metoda i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 W tym przykładzie użyto `UCase` funkcja zwracająca wielkie wersji ciągu.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>