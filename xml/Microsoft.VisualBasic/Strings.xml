<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6bfe81f4c2306d87ac9913c45c7389d68b53f1c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317247" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Strings" /> Moduł zawiera procedury używane do wykonywania operacji na ciągach.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej służące do manipulowania ciągami.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób dzielenia ciągu na spacje.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczbę całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Wymagane. Dowolne prawidłowe <see langword="Char" /> wyrażenie <see langword="String" /> or. <paramref name="String" /> Jeśli<see langword="String" /> jest wyrażeniem, tylko pierwszy znak ciągu jest używany do wprowadzania danych. Jeśli <paramref name="String" /> ma <see langword="Nothing" /> lub nie<see cref="T:System.ArgumentException" /> zawiera żadnych znaków, wystąpi błąd.</param>
        <summary>Zwraca liczbę całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`zwraca *punkt kodu*lub kod znaku dla znaku wejściowego. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW`Zwraca punkt kodu Unicode dla znaku wejściowego. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji Visual Basic zwraca kod dla bajtu, a nie znak. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode i `AscB` nie są już obsługiwane.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Asc` aby zwrócić `Integer` kody znaków odpowiadające pierwszej literze w każdym ciągu.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funkcje (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Wymagane. Dowolne prawidłowe <see langword="Char" /> wyrażenie <see langword="String" /> or. <paramref name="String" /> Jeśli<see langword="String" /> jest wyrażeniem, tylko pierwszy znak ciągu jest używany do wprowadzania danych. Jeśli <paramref name="String" /> ma <see langword="Nothing" /> lub nie<see cref="T:System.ArgumentException" /> zawiera żadnych znaków, wystąpi błąd.</param>
        <summary>Zwraca liczbę całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`zwraca *punkt kodu*lub kod znaku dla znaku wejściowego. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW`Zwraca punkt kodu Unicode dla znaku wejściowego. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji Visual Basic zwraca kod dla bajtu, a nie znak. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode i `AscB` nie są już obsługiwane.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Asc` aby zwrócić `Integer` kody znaków odpowiadające pierwszej literze w każdym ciągu.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funkcje (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczbę całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Wymagane. Dowolne prawidłowe <see langword="Char" /> wyrażenie <see langword="String" /> or. <paramref name="String" /> Jeśli<see langword="String" /> jest wyrażeniem, tylko pierwszy znak ciągu jest używany do wprowadzania danych. Jeśli <paramref name="String" /> ma <see langword="Nothing" /> lub nie<see cref="T:System.ArgumentException" /> zawiera żadnych znaków, wystąpi błąd.</param>
        <summary>Zwraca liczbę całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`zwraca *punkt kodu*lub kod znaku dla znaku wejściowego. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW`Zwraca punkt kodu Unicode dla znaku wejściowego. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji Visual Basic zwraca kod dla bajtu, a nie znak. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode i `AscB` nie są już obsługiwane.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Asc` aby zwrócić `Integer` kody znaków odpowiadające pierwszej literze w każdym ciągu.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funkcje (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Wymagana. Dowolne prawidłowe <see langword="Char" /> wyrażenie <see langword="String" /> or. <paramref name="String" /> Jeśli<see langword="String" /> jest wyrażeniem, tylko pierwszy znak ciągu jest używany do wprowadzania danych. Jeśli <paramref name="String" /> ma <see langword="Nothing" /> lub nie<see cref="T:System.ArgumentException" /> zawiera żadnych znaków, wystąpi błąd.</param>
        <summary>Zwraca liczbę całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`zwraca *punkt kodu*lub kod znaku dla znaku wejściowego. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW`Zwraca punkt kodu Unicode dla znaku wejściowego. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji Visual Basic zwraca kod dla bajtu, a nie znak. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode i `AscB` nie są już obsługiwane.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Asc` aby zwrócić `Integer` kody znaków odpowiadające pierwszej literze w każdym ciągu.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funkcje (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="CharCode">Wymagany. Wyrażenie reprezentujące <c>punkt kodu</c>lub znak, dla znaku. <see langword="Integer" /></param>
        <summary>Zwraca znak skojarzony z podanym kodem znaku.</summary>
        <returns>Znak skojarzony z podanym kodem znaku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zakres asymetryczny zaakceptowany `CharCode` w przypadku kompensowania różnic `Short` między i `Integer`. Na przykład-29183 to a `Short` , ale + 36353 `Integer`to. Ułatwia to również zgodność z Visual Basic 6,0.  
  
 `Chr`<xref:System.Text.Encoding> używa klasy<xref:System.Text?displayProperty=nameWithType> w przestrzeni nazw, aby określić, czy bieżący wątek używa zestawu znaków jednobajtowych (SBCS) czy zestawu znaków dwubajtowych (DBCS). Następnie przyjmuje `CharCode` jako punkt kodu w odpowiednim zestawie. Zakres może mieć wartość od 0 do 255 dla znaków SBCS i-32768 do 65535 dla znaków DBCS.  
  
 Zwracana wartość zależy od strony kodowej bieżącego wątku, która jest zawarta we <xref:System.Globalization.TextInfo.ANSICodePage%2A> właściwości <xref:System.Globalization.TextInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Można uzyskać <xref:System.Globalization.TextInfo.ANSICodePage%2A> , określając `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW`przyjmuje `CharCode` jako punkt kodu Unicode. Zakres jest niezależny od ustawień kultury i strony kodowej dla bieżącego wątku. Wartości od-32768 do-1 są traktowane tak samo jak wartości z zakresu + 32768 przez + 65535.  
  
 Liczby od 0 do 31 są takie same jak w przypadku standardowych kodów ASCII niedrukowalnych. Na przykład `Chr(10)` zwraca znak wysuwu wiersza.  
  
> [!NOTE]
>  `ChrB` Funkcja we wcześniejszych wersjach Visual Basic zwraca pojedynczy bajt. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi w Visual Basic i .NET Framework są w formacie Unicode i `ChrB` nie są już obsługiwane.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Chr` aby zwrócić znak skojarzony z podanym kodem znaku.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" />0 lub &gt; 255 dla<see langword="Chr" />. &lt;</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Wymagana. Wyrażenie reprezentujące <c>punkt kodu</c>lub znak, dla znaku. <see langword="Integer" /></param>
        <summary>Zwraca znak skojarzony z podanym kodem znaku.</summary>
        <returns>Znak skojarzony z podanym kodem znaku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zakres asymetryczny zaakceptowany `CharCode` w przypadku kompensowania różnic `Short` między i `Integer`. Na przykład-29183 to a `Short` , ale + 36353 `Integer`to. Ułatwia to również zgodność z Visual Basic 6,0.  
  
 `Chr`<xref:System.Text.Encoding> używa klasy<xref:System.Text?displayProperty=nameWithType> w przestrzeni nazw, aby określić, czy bieżący wątek używa zestawu znaków jednobajtowych (SBCS) czy zestawu znaków dwubajtowych (DBCS). Następnie przyjmuje `CharCode` jako punkt kodu w odpowiednim zestawie. Zakres może mieć wartość od 0 do 255 dla znaków SBCS i-32768 do 65535 dla znaków DBCS.  
  
 Zwracana wartość zależy od strony kodowej bieżącego wątku, która jest zawarta we <xref:System.Globalization.TextInfo.ANSICodePage%2A> właściwości <xref:System.Globalization.TextInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Można uzyskać <xref:System.Globalization.TextInfo.ANSICodePage%2A> , określając `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW`przyjmuje `CharCode` jako punkt kodu Unicode. Zakres jest niezależny od ustawień kultury i strony kodowej dla bieżącego wątku. Wartości od-32768 do-1 są traktowane tak samo jak wartości z zakresu + 32768 przez + 65535.  
  
 Liczby od 0 do 31 są takie same jak w przypadku standardowych kodów ASCII niedrukowalnych. Na przykład `Chr(10)` zwraca znak wysuwu wiersza.  
  
> [!NOTE]
>  `ChrB` Funkcja we wcześniejszych wersjach Visual Basic zwraca pojedynczy bajt. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi w Visual Basic i .NET Framework są w formacie Unicode i `ChrB` nie są już obsługiwane.  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Chr` aby zwrócić znak skojarzony z podanym kodem znaku.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" />-32768 lub &gt; 65535 dla <see langword="ChrW" />. &lt;</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca tablicę opartą na zero, zawierającą podzbiór <see langword="String" /> tablicy na podstawie określonych kryteriów filtrowania.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. Jednowymiarowa tablica ciągów do przeszukania.</param>
        <param name="Match">Wymagana. Ciąg do wyszukania.</param>
        <param name="Include">Opcjonalny. <see langword="Boolean" />wartość wskazująca, czy mają być zwracane podciągi, <paramref name="Match" />które obejmują lub wykluczają. Jeśli <paramref name="Include" /> jest <see langword="True" /> <paramref name="Match" /> , Funkcjazwracapodzbiórtablicy,którazawierajakopodciąg.<see langword="Filter" /> Jeśli <paramref name="Include" /> jest <see langword="False" /> <paramref name="Match" /> , Funkcjazwracapodzestawtablicy,któraniezawierajakopodciąg.<see langword="Filter" /></param>
        <param name="Compare">Opcjonalny. Wartość liczbowa wskazująca rodzaj porównania ciągów do użycia. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca tablicę opartą na zero, zawierającą podzbiór <see langword="String" /> tablicy na podstawie określonych kryteriów filtrowania.</summary>
        <returns>Tablica bazująca na zero zawierająca podzestaw <see langword="String" /> tablicy na podstawie określonych kryteriów filtrowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znaleziono żadnych `Match` dopasowań w `Source`, `Filter` funkcja zwraca pustą tablicę. Jeśli `Source` jest ustawiona na `Nothing` lub nie jest tablicą jednowymiarową, występuje błąd.  
  
 Tablica zwrócona przez `Filter` funkcję zawiera tylko wystarczające elementy, aby można było zawierać liczbę pasujących elementów.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|Stała|Opis|  
|`CompareMethod.Binary`|Wykonuje porównanie binarne|  
|`CompareMethod.Text`|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie pokazano sposób użycia `Filter` funkcji.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" />jest <see langword="Nothing" /> lub nie jest tablicą jednowymiarową.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. Jednowymiarowa tablica ciągów do przeszukania.</param>
        <param name="Match">Wymagany. Ciąg do wyszukania.</param>
        <param name="Include">Opcjonalna. <see langword="Boolean" />wartość wskazująca, czy mają być zwracane podciągi, <paramref name="Match" />które obejmują lub wykluczają. Jeśli <paramref name="Include" /> jest <see langword="True" /> <paramref name="Match" /> , Funkcjazwracapodzbiórtablicy,którazawierajakopodciąg.<see langword="Filter" /> Jeśli <paramref name="Include" /> jest <see langword="False" /> <paramref name="Match" /> , Funkcjazwracapodzestawtablicy,któraniezawierajakopodciąg.<see langword="Filter" /></param>
        <param name="Compare">Opcjonalna. Wartość liczbowa wskazująca rodzaj porównania ciągów do użycia. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca tablicę opartą na zero, zawierającą podzbiór <see langword="String" /> tablicy na podstawie określonych kryteriów filtrowania.</summary>
        <returns>Tablica bazująca na zero zawierająca podzestaw <see langword="String" /> tablicy na podstawie określonych kryteriów filtrowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znaleziono żadnych `Match` dopasowań w `Source`, `Filter` funkcja zwraca pustą tablicę. Jeśli `Source` jest ustawiona na `Nothing` lub nie jest tablicą jednowymiarową, występuje błąd.  
  
 Tablica zwrócona przez `Filter` funkcję zawiera tylko wystarczające elementy, aby można było zawierać liczbę pasujących elementów.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|`CompareMethod.Binary`|Wykonuje porównanie binarne|  
|`CompareMethod.Text`|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie pokazano sposób użycia `Filter` funkcji.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" />jest <see langword="Nothing" /> lub nie jest tablicą jednowymiarową.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagany. Dowolne prawidłowe wyrażenie.</param>
        <param name="Style">Opcjonalny. Prawidłowe wyrażenie w formacie <see langword="String" /> określonym lub zdefiniowanym przez użytkownika.</param>
        <summary>Zwraca ciąg sformatowany zgodnie z instrukcjami zawartymi w wyrażeniu formatu <see langword="String" /> .</summary>
        <returns>Ciąg sformatowany zgodnie z instrukcjami zawartymi w wyrażeniu formatu <see langword="String" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> Metoda zapewnia również podobną funkcjonalność.  
  
 W przypadku formatowania nielokalnego ciągu liczbowego należy użyć zdefiniowanego przez użytkownika formatu liczbowego, aby upewnić się, że uzyskasz odpowiedni wygląd.  
  
 Jeśli spróbujesz sformatować liczbę bez określenia `Style` `Format` , funkcja `Str` udostępnia funkcje podobne do funkcji, chociaż jest ona międzynarodowa. Jednak liczby dodatnie sformatowane jako ciągi przy użyciu `Format` funkcji nie zawierają wiodącego miejsca zarezerwowanego dla znaku wartości; te konwertowane `Str` przy użyciu funkcji zachowują początkowe miejsce.  
  
## <a name="different-formats-for-different-numeric-values"></a>Różne formaty dla różnych wartości liczbowych  
 Zdefiniowane przez użytkownika wyrażenie formatu dla liczb może zawierać od jednej do trzech sekcji rozdzielonych średnikami. `Style` Jeśli argument `Format` funkcji zawiera jeden ze wstępnie zdefiniowanych formatów liczbowych, dozwolona jest tylko jedna sekcja.  
  
|Jeśli używasz|Jest to wynik|  
|-|-|  
|Tylko jedna sekcja|Wyrażenie formatu ma zastosowanie do wszystkich wartości.|  
|Dwie sekcje|Pierwsza sekcja dotyczy wartości dodatnich i zer; sekunda dotyczy wartości ujemnych.|  
|Trzy sekcje|Pierwsza sekcja ma zastosowanie do wartości dodatnich, a druga dotyczy wartości ujemnych, a trzecia dotyczy zer.|  
  
 Poniższy przykład ma dwie sekcje: pierwszy definiuje format dla wartości dodatnich i zer. Druga sekcja definiuje format wartości ujemnych. `Style` Ponieważ argument `Format` funkcji Pobiera ciąg, jest on ujęty w cudzysłów.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 W przypadku uwzględnienia średników bez żadnych między nimi, brakująca sekcja jest drukowana przy użyciu formatu wartości dodatniej. Na przykład następujący format wyświetla wartości dodatnie i ujemne przy użyciu formatu w pierwszej sekcji i wyświetla `Zero` , czy wartość jest równa zero.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Wstępnie zdefiniowane formaty liczbowe  
 W poniższej tabeli przedstawiono wstępnie zdefiniowane nazwy formatu liczbowego. Mogą one być używane przez nazwę jako `Style` argument `Format` dla funkcji:  
  
|Nazwa formatu|Opis|  
|-|-|  
|`General Number`, `G`lub`g`|Wyświetla liczbę bez separatora tysięcy.<br /><br /> Na przykład `Format(&H3FA, "g")` zwraca wartość `1018`.|  
|`Currency`, `C`lub`c`|Wyświetla liczbę z separatorem tysięcy, jeśli jest to odpowiednie; Wyświetla dwie cyfry z prawej strony separatora dziesiętnego. Dane wyjściowe są zależne od ustawień regionalnych systemu.<br /><br /> Na przykład `Format(1234567, "c")` zwraca wartość `$1,234,567.00`.|  
|`Fixed`, `F`lub`f`|Wyświetla co najmniej jedną cyfrę z lewej i dwie cyfry z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(1234567, "f")` zwraca wartość `1234567.00`.|  
|`Standard`, `N`lub`n`|Wyświetla liczbę z separatorem tysięcy, co najmniej jedną cyfrę z lewej i dwie cyfry po prawej stronie separatora dziesiętnego.<br /><br /> Na przykład `Format(1234567, "n")` zwraca wartość `1,234,567.00`.|  
|`Percent`|Wyświetla liczbę pomnożoną przez 100 za pomocą znaku procentu (%) bezpośrednio dołączone do prawej strony; zawsze wyświetla dwie cyfry z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(0.4744, "Percent")` zwraca wartość `47.44%`.|  
|`P`lub`p`|Wyświetla liczbę z separatorem stutysięcznych pomnożoną przez 100 przy użyciu znaku procentu (%) dołączone do prawej i rozdzielone pojedynczym odstępem; zawsze wyświetla dwie cyfry z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(0.80345, "p")` zwraca wartość `80.35 %`.|  
|`Scientific`|Używa standardowej notacji naukowej, która udostępnia dwie znaczące cyfry.<br /><br /> Na przykład `Format(1234567, "Scientific")` zwraca wartość `1.23E+06`.|  
|`E`lub`e`|Używa standardowej notacji naukowej, co daje sześć cyfr znaczących.<br /><br /> Na przykład `Format(1234567, "e")` zwraca wartość `1.234567e+006`.|  
|`D`lub`d`|Wyświetla liczbę jako ciąg, który zawiera wartość liczby w formacie dziesiętnym (podstawowa 10). Ta opcja jest obsługiwana tylko w przypadku typów`Byte`całkowitych `Integer`( `Long`, `Short`,,).<br /><br /> Na przykład `Format(&H7F, "d")` zwraca wartość `127`.|  
|`X`lub`x`|Wyświetla liczbę jako ciąg, który zawiera wartość liczby w formacie szesnastkowym (Base 16). Ta opcja jest obsługiwana tylko w przypadku typów`Byte`całkowitych `Integer`( `Long`, `Short`,,).<br /><br /> Na przykład `Format(127, "x")` zwraca wartość `7f`.|  
|`Yes/No`|Wyświetla `No` , czy liczba jest równa 0; `Yes`w przeciwnym razie wyświetla.<br /><br /> Na przykład `Format(0, "Yes/No")` zwraca wartość `No`.|  
|`True/False`|Wyświetla `False` , czy liczba jest równa 0; `True`w przeciwnym razie wyświetla.<br /><br /> Na przykład `Format(1, "True/False")` zwraca wartość `True`.|  
|`On/Off`|Wyświetla `Off` , czy liczba jest równa 0; `On`w przeciwnym razie wyświetla.<br /><br /> Na przykład `Format(1, "On/Off")` zwraca wartość `On`.|  
  
### <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Formaty `Yes/No`, `True/False` i`On/Off` nie są obsługiwane.  
  
## <a name="user-defined-numeric-formats"></a>Zdefiniowane przez użytkownika formaty liczbowe  
 W poniższej tabeli przedstawiono znaki, których można użyć do tworzenia formatów liczb zdefiniowanych przez użytkownika. Mogą one służyć do kompilowania `Style` argumentu `Format` dla funkcji:  
  
|Znak|Opis|  
|-|-|  
|Brak|Wyświetla liczbę bez formatowania.|  
|(`0`)|Symbol zastępczy cyfry. Wyświetla cyfrę lub zero. Jeśli wyrażenie ma cyfrę w miejscu, gdzie zero pojawia się w ciągu formatu, Wyświetl go; w przeciwnym razie program wyświetla zero w tym położeniu.<br /><br /> Jeśli liczba ma mniej cyfr niż wynosi zero (po obu stronach dziesiętnej) w wyrażeniu formatu, wyświetla zera wiodące lub końcowe. Jeśli liczba ma więcej cyfr po prawej stronie separatora dziesiętnego niż w prawej części separatora dziesiętnego w wyrażeniu formatu, zaokrągla liczbę do tak wielu miejsc dziesiętnych, ile nie ma zer. Jeśli liczba ma więcej cyfr z lewej strony separatora dziesiętnego niż w lewej części separatora dziesiętnego w wyrażeniu formatu, program wyświetla dodatkowe cyfry bez modyfikacji.|  
|(`#`)|Symbol zastępczy cyfry. Wyświetla cyfrę lub wartość Nothing. Jeśli wyrażenie ma cyfrę w miejscu, gdzie `#` znak pojawia się w ciągu formatu, wyświetla ją; w przeciwnym razie nie wyświetla niczego w tym miejscu.<br /><br /> Ten symbol działa jak `0` symbol zastępczy cyfry, z tą różnicą, że zera wiodące i końcowe nie są wyświetlane, jeśli liczba ma mniej cyfr niż `#` znaki po obu stronach separatora dziesiętnego w wyrażeniu formatu.|  
|(`.`)|Symbol zastępczy dziesiętnej. Symbol zastępczy dziesiętnej określa liczbę cyfr wyświetlanych po lewej i prawej stronie separatora dziesiętnego. Jeśli wyrażenie formatu zawiera tylko `#` znaki z lewej strony tego symbolu; liczby mniejsze od 1 zaczynają się separatorem dziesiętnym. Aby wyświetlić wiodące zero wyświetlane z liczbami ułamkowymi, należy użyć zera jako pierwszej cyfry zastępczej z lewej strony separatora dziesiętnego. W niektórych ustawieniach regionalnych przecinek jest używany jako separator dziesiętny. Rzeczywisty znak używany jako Dziesiętny symbol zastępczy w sformatowanym danych wyjściowych zależy od formatu liczby rozpoznawanego przez system. W tym celu należy użyć kropki jako symbolu zastępczego dziesiętnego w Twoich formatach, nawet jeśli używasz ustawień regionalnych, które używają przecinka jako symbolu zastępczego dziesiętnego. Sformatowany ciąg będzie wyświetlany w formacie prawidłowym dla ustawień regionalnych.|  
|(`%`)|Symbol zastępczy procentu. Mnoży wyrażenie według 100. Znak procentu (`%`) zostanie wstawiony w miejscu, gdzie pojawia się w ciągu formatu.|  
|(`,`)|Separator tysięcy. Separator tysięcy oddziela tysiące od setek w obrębie liczby, która ma cztery lub więcej miejsc z lewej strony separatora dziesiętnego. Użycie standardowego separatora tysięcy jest określone, jeśli format zawiera separator tysięcy otoczony cyframi zastępczymi (`0` lub `#`).<br /><br /> Separator tysięcy bezpośrednio z lewej strony separatora dziesiętnego (bez względu na to, czy określono lub nie jest liczbą dziesiętną), czy jako ostatni znak w ciągu oznacza "Skaluj liczbę przez podzielenie jej przez 1 000, zaokrąglenie w razie potrzeby". Liczby mniejsze niż 1 000, ale większe lub równe 500 są wyświetlane jako `1`, a liczby mniejsze niż 500 są wyświetlane jako `0`. Dwa sąsiadujące separatory tysięcy w tym miejscu są skalowane przez współczynnik 1 000 000 i dodatkowy czynnik 1 000 dla każdego dodatkowego separatora.<br /><br /> Wiele separatorów w dowolnym położeniu innym niż bezpośrednio po lewej stronie separatora dziesiętnego lub pozycji z prawej strony ciągu jest traktowany po prostu jako określenie użycia separatora tysięcy. W przypadku niektórych ustawień regionalnych okres jest używany jako separator tysięcy. Rzeczywisty znak używany jako separator tysięcy w sformatowanym danych wyjściowych zależy od formatu liczby rozpoznawanego przez system. W tym celu należy użyć przecinka jako separatora tysięcy w formatach, nawet jeśli używasz ustawień regionalnych, które używają kropki jako separatora tysięcy. Sformatowany ciąg będzie wyświetlany w formacie prawidłowym dla ustawień regionalnych.<br /><br /> Rozważmy na przykład trzy następujące ciągi formatu:<br /><br /> -   `"#,0."`, który używa separatora tysięcy do formatowania liczby 100 000 000 jako ciągu "100 000 000".<br />-   `"#0,."`, który używa skalowania przez współczynnik 1000 do formatowania liczby 100 000 000 jako ciągu "100000".<br />-   `"#,0,."`, który używa separatora tysięcy i skalowania przez 1000 w celu sformatowania liczby 100 000 000 jako ciągu "100 000".|  
|(`:`)|Separator czasu. W przypadku niektórych ustawień regionalnych inne znaki mogą być używane do reprezentowania separatora czasu. Separator czasu oddziela godziny, minuty i sekundy, gdy wartości czasu są formatowane. Rzeczywisty znak używany jako separator czasu w sformatowanym danych wyjściowych jest określany przez ustawienia systemu.|  
|(`/`)|Separator daty. W przypadku niektórych ustawień regionalnych inne znaki mogą być używane do reprezentowania separatora daty. Separator daty oddziela dzień, miesiąc i rok, gdy wartości daty są sformatowane. Rzeczywisty znak używany jako separator dat w sformatowanym danych wyjściowych jest określany przez ustawienia systemu.|  
|(`E-``E+``e-``e+`)|Format naukowy. Jeśli wyrażenie formatu zawiera co najmniej jeden symbol zastępczy cyfry`0` ( `#`lub `E-`) z lewej strony, `E+`, `e-`, lub `e+`, liczba jest wyświetlana w formacie naukowym i `E` lub `e` jest wstawiany między liczbą a wykładnikiem. Liczba symboli zastępczych cyfr po lewej stronie określa liczbę cyfr w wykładniku. Użyj `E-` lub`e-` , aby umieścić znak minus obok wartości wykładnika ujemna. Użyj `E+` lub`e+` , aby umieścić znak minus obok wartości wykładników ujemnych i znak plus obok wykładników dodatnich. W celu uzyskania poprawnego formatowania należy również dołączyć symbole zastępcze cyfr z prawej strony tego symbolu.|  
|`-` `+` `$` ( )|Znaki literału. Te znaki są wyświetlane dokładnie tak, jak wpisano w ciągu formatu. Aby wyświetlić znak inny niż jeden z wymienionych powyżej, poprzedź go ukośnikiem odwrotnym (`\`) lub umieść go w podwójnym cudzysłowie ("").|  
|(`\`)| Wyświetla następny znak w ciągu formatu. Aby wyświetlić znak, który ma specjalne znaczenie jako znak literału, poprzedź go ukośnikiem odwrotnym (`\`). Sam ukośnik nie jest wyświetlany. Użycie ukośnika odwrotnego jest takie samo, jak otaczający następny znak w podwójnym cudzysłowie. Aby wyświetlić ukośnik odwrotny, użyj dwóch ukośników odwrotnych`\\`().<br /><br /> Przykłady znaków, które nie mogą być wyświetlane jako znaki literału są znakami formatowania daty i formatowaniem czasu`a`( `c`, `d` `p`, `h` `m` `n`,,,,, `q`, ,`s` ,,`%`, i),`#`znaki formatowania liczbowego ( ,`0`,, `:` `t` `w` `y` `/` `E`, `>` `!``@` `<` `&`, przecinek i kropka) oraz znaki formatowania ciągu (,,, i). `e`|  
|(`"``ABC``"`)|Wyświetla ciąg w podwójnym cudzysłowie (""). Aby dołączyć ciąg w argumencie stylu z wewnątrz kodu, należy użyć `Chr(34)` , aby ująć tekst (`34` jest kodem znaku cudzysłowu (")).|  
  
### <a name="legacy-code-example"></a>Przykład starszego kodu  
 Poniższa tabela zawiera przykładowe wyrażenia formatu liczb. (W poniższych przykładach założono, że ustawienie regionalne systemu to angielski-U. S). Pierwsza kolumna zawiera ciągi formatu dla `Style` argumentu `Format` funkcji; inne kolumny zawierają wynikowe dane wyjściowe, jeśli sformatowane dane mają wartość podaną w nagłówkach kolumn.  
  
|Format (`Style`)|"5" sformatowane jako|"-5" sformatowane jako|"0,5" sformatowane jako|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Wstępnie zdefiniowane formaty daty/godziny  
 W poniższej tabeli przedstawiono wstępnie zdefiniowane nazwy formatów daty i godziny. Mogą one być używane przez nazwę jako argument stylu dla `Format` funkcji:  
  
|Nazwa formatu|Opis|  
|-|-|  
|`General Date`lub`G`|Wyświetla datę i/lub godzinę. Na przykład `3/12/2008 11:07:31 AM`. Wyświetlanie dat zależy od bieżącej wartości kultury aplikacji.|  
|`Long Date`, `Medium Date`lub`D`|Wyświetla datę zgodnie z formatem daty długiej bieżącej kultury. Na przykład `Wednesday, March 12, 2008`.|  
|`Short Date`lub`d`|Wyświetla datę przy użyciu formatu daty krótkiej bieżącej kultury. Na przykład `3/12/2008`.<br /><br /> Ten `d` znak wyświetla dzień w formacie daty zdefiniowanej przez użytkownika.|  
|`Long Time`, `Medium Time`lub`T`|Wyświetla godzinę przy użyciu formatu godziny długiej bieżącej kultury; zazwyczaj obejmuje godziny, minuty i sekundy. Na przykład `11:07:31 AM`.|  
|`Short Time` lub `t`|Wyświetla godzinę przy użyciu krótkiego formatu czasu obecnej kultury. Na przykład `11:07 AM`.<br /><br /> Wyświetla `t` znak`AM` lub`PM` wartości ustawień regionalnych, które używają zegara 12-godzinnego w formacie czasu zdefiniowanego przez użytkownika.|  
|`f`|Wyświetla datę długą i krótki czas zgodnie z bieżącą formatem kultury. Na przykład `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Wyświetla datę długową i godzinę długią zgodnie z formatem bieżącej kultury. Na przykład `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Wyświetla krótką datę i krótki czas zgodnie z bieżącą formatem kultury. Na przykład `3/12/2008 11:07 AM`.|  
|`M`, `m`|Wyświetla miesiąc i dzień daty. Na przykład `March 12`.<br /><br /> Ten `M` znak wyświetla miesiąc w formacie daty zdefiniowanej przez użytkownika. Ten `m` znak Wyświetla minuty w formacie czasu zdefiniowanego przez użytkownika.|  
|`R`, `r`|Formatuje datę zgodnie <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> z właściwością. Na przykład `Wed, 12 Mar 2008 11:07:31 GMT`. Sformatowana Data nie dostosowuje wartości daty i godziny. Przed wywołaniem `Format` funkcji należy dostosować wartość daty/godziny do GMT.|  
|`s`|Formatuje datę i godzinę jako indeks do sortowania. Na przykład `2008-03-12T11:07:31`.<br /><br /> Ten `s` znak wyświetla sekundy w formacie czasu zdefiniowanego przez użytkownika.|  
|`u`|Formatuje datę i godzinę w indeksie czasu GMT. Na przykład `2008-03-12 11:07:31Z`.|  
|`U`|Formatuje datę i godzinę w długim dniu i długim czasie jako GMT. Na przykład `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Formatuje datę jako rok i miesiąc. Na przykład `March, 2008`.<br /><br /> Znaki `Y` i`y` wyświetlają rok w formacie daty zdefiniowanej przez użytkownika.|  
  
 Aby uzyskać więcej informacji na temat bieżących informacji o kulturze aplikacji, zobacz [wpływ kultury na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Zdefiniowane przez użytkownika formaty daty/godziny  
 W poniższej tabeli przedstawiono znaki, których można użyć do tworzenia formatów daty/godziny zdefiniowanej przez użytkownika. W przeciwieństwie do starszych wersji Visual Basic, te znaki formatu są rozróżniane wielkości liter.  
  
|Znak|Opis|  
|-|-|  
|(`:`)|Separator czasu. W przypadku niektórych ustawień regionalnych inne znaki mogą być używane do reprezentowania separatora czasu. Separator czasu oddziela godziny, minuty i sekundy, gdy wartości czasu są formatowane. Faktyczny znak, który jest używany jako separator czasu w sformatowanym danych wyjściowych jest określany przez bieżącą wartość kultury aplikacji.|  
|(`/`)|Separator daty. W przypadku niektórych ustawień regionalnych inne znaki mogą być używane do reprezentowania separatora daty. Separator daty oddziela dzień, miesiąc i rok, gdy wartości daty są sformatowane. Faktyczny znak, który jest używany jako separator dat w sformatowanym danych wyjściowych jest określany przez bieżącą kulturę aplikacji.|  
|(`%`)|Służy do wskazywania, że następujący znak powinien być odczytany w postaci pojedynczej litery, bez względu na literę końcową. Używany również do wskazania, że format pojedynczej litery jest odczytywany jako format zdefiniowany przez użytkownika. Więcej informacji można znaleźć w poniższych tematach.|  
|`d`|Wyświetla dzień jako liczbę bez wiodącego zera (na przykład `1`). Użyj `%d` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`dd`|Wyświetla dzień jako liczbę z zerem wiodącym (na przykład `01`).|  
|`ddd`|Wyświetla dzień jako skrót (na przykład `Sun`).|  
|`dddd`|Wyświetla dzień jako pełną nazwę (na przykład `Sunday`).|  
|`M`|Wyświetla miesiąc jako liczbę bez wiodącego zera (na przykład Styczeń jest reprezentowany jako `1`). Użyj `%M` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`MM`|Wyświetla miesiąc jako liczbę z zerem wiodącym (na przykład `01/12/01`).|  
|`MMM`|Wyświetla miesiąc jako skrót (na przykład `Jan`).|  
|`MMMM`|Wyświetla miesiąc jako pełną nazwę miesiąca (na przykład `January`).|  
|`gg`|Wyświetla ciąg okres/ERA (na przykład `A.D.`).|  
|`h`|Wyświetla godzinę jako liczbę bez wiodących zer przy użyciu zegara 12-godzinnego (na przykład `1:15:15 PM`). Użyj `%h` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`hh`|Wyświetla godzinę jako liczbę z zerami wiodącymi przy użyciu zegara 12-godzinnego (na przykład `01:15:15 PM`).|  
|`H`|Wyświetla godzinę jako liczbę bez wiodących zer przy użyciu zegara 24-godzinnego (na przykład `1:15:15`). Użyj `%H` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`HH`|Wyświetla godzinę jako liczbę z zerami wiodącymi przy użyciu zegara 24-godzinnego (na przykład `01:15:15`).|  
|`m`|Wyświetla minutę jako liczbę bez wiodących zer (na przykład `12:1:15`). Użyj `%m` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`mm`|Wyświetla minutę jako liczbę z zerami wiodącymi (na przykład `12:01:15`).|  
|`s`|Wyświetla sekundy jako liczbę bez wiodących zer (na przykład `12:15:5`). Użyj `%s` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`ss`|Wyświetla sekundy jako liczbę z zerami wiodącymi (na przykład `12:15:05`).|  
|`f`|Wyświetla ułamki sekund. Na przykład `ff` wyświetla setne sekundy `ffff` , gdzie wyświetla dziesięć stutysięcznych sekund. W formacie zdefiniowanym przez użytkownika `f` można używać maksymalnie siedmiu symboli. Użyj `%f` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`t`|Używa zegara 12-godzinnego i wyświetla wielkie litery `A` dla każdej godziny przed południem; Wyświetla wielkie `P` litery dla każdej godziny od 12:00 do 11:59 P.M. Użyj `%t` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`tt`|W przypadku ustawień regionalnych korzystających z zegara 12-godzinnego program wyświetla `AM` wielkie litery z każdą godziną przed południem `PM` ; Wyświetla wielkie litery w godzinach od 12:00 do 11:59 P.M.<br /><br /> W przypadku ustawień regionalnych, które używają zegara 24-godzinnego, nie są wyświetlane żadne elementy.|  
|`y`|Wyświetla numer roku (0-9) bez zer wiodących. Użyj `%y` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`yy`|Wyświetla rok w dwucyfrowym formacie liczbowym z zerem wiodącym, jeśli ma zastosowanie.|  
|`yyy`|Wyświetla rok w formacie liczbowym czterech cyfr.|  
|`yyyy`|Wyświetla rok w formacie liczbowym czterech cyfr.|  
|`z`|Wyświetla przesunięcie strefy czasowej bez zera wiodącego (na przykład `-8`). Użyj `%z` , jeśli jest to jedyna litera w formacie liczbowym zdefiniowanym przez użytkownika.|  
|`zz`|Wyświetla przesunięcie strefy czasowej z zerem wiodącym (na przykład `-08`).|  
|`zzz`|Wyświetla pełne przesunięcie strefy czasowej (na przykład `-08:00`)|  
  
### <a name="legacy-code-example"></a>Przykład starszego kodu  
 Poniżej przedstawiono przykłady formatów daty i godziny zdefiniowanych przez użytkownika dla `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Format|Listę|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Minimalny czas rozpoznawania urządzenia zależy od producenta urządzenia. Jeśli rozdzielczość urządzenia jest dostatecznie Gruba, `f` znak formatu zwraca 0 w przypadku uruchamiania na tym urządzeniu.  
  
   
  
## Examples  
 W tym przykładzie pokazano różne zastosowania `Format` funkcji do formatowania wartości `String` przy użyciu formatów i formatów zdefiniowanych przez użytkownika. W przypadku separatora daty`/`(), separatora`:`czasu () i wskaźników am/pm (`t` i `tt`) rzeczywiste sformatowane dane wyjściowe wyświetlane przez system są zależne od ustawień regionalnych, których używa kod. Gdy godziny i daty są wyświetlane w środowisku deweloperskim, używany jest format krótki czas i krótki format daty dla ustawień regionalnych.  
  
> [!NOTE]
>  Dla ustawień regionalnych, które używają zegara 24-godzinnego, wskaźniki am/pm (`t` i `tt`) nie wyświetlają niczego.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagane. Wyrażenie, które ma zostać sformatowane.</param>
        <param name="NumDigitsAfterDecimal">Opcjonalny. Wartość liczbowa wskazująca, ile miejsc jest wyświetlanych po prawej stronie wartości dziesiętnej. Wartość domyślna to-1, co oznacza, że są używane ustawienia regionalne komputera.</param>
        <param name="IncludeLeadingDigit">Opcjonalny. <see cref="T:Microsoft.VisualBasic.TriState" />Wyliczenie wskazujące, czy dla wartości ułamkowych jest wyświetlany wiodący zero. Aby uzyskać wartości, zobacz "uwagi".</param>
        <param name="UseParensForNegativeNumbers">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" />Wyliczenie wskazujące, czy umieścić wartości ujemne w nawiasach. Aby uzyskać wartości, zobacz "uwagi".</param>
        <param name="GroupDigits">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" />Wyliczenie, które wskazuje, czy liczby są zgrupowane przy użyciu ogranicznika grupy określonego w ustawieniach regionalnych komputera. Aby uzyskać wartości, zobacz "uwagi".</param>
        <summary>Zwraca wyrażenie sformatowane jako wartość walutowa przy użyciu symbolu waluty zdefiniowanego w panelu sterowania systemem.</summary>
        <returns>Wyrażenie sformatowane jako wartość walutowa przy użyciu symbolu waluty zdefiniowanego w panelu sterowania systemem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku pominięcia co najmniej jednego opcjonalnego argumentu są używane odpowiednie wartości ustawień regionalnych.  
  
 Pozycja symbolu waluty względem wartości walutowej zależy od ustawień regionalnych systemu.  
  
> [!NOTE]
>  Wszystkie informacje o ustawieniach pochodzą z ustawień regionalnych aplikacji. Domyślnie będą to ustawienia regionalne w panelu sterowania. Można jednak zmienić programowo przy użyciu .NET Framework, z wyjątkiem wiodącego zera, które pochodzi z `Number` karty.  
  
 Argumenty `IncludeLeadingDigit`, `UseParensForNegativeNumbers` i`GroupDigits` przyjmują następujące wartości wyliczenia trzy stany.  
  
|Wartość|Opis|  
|-|-|  
|`TriState.True`|Prawda|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Ustawienia regionalne komputera|  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie `FormatCurrency` funkcji.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Liczba cyfr po przecinku jest większa niż 99.</exception>
        <exception cref="T:System.InvalidCastException">Typ nie jest wartością numeryczną.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagane. <see langword="Date" />wyrażenie, które ma zostać sformatowane.</param>
        <param name="NamedFormat">Opcjonalny. Wartość liczbowa, która wskazuje używany format daty i godziny. W <see langword="DateFormat.GeneralDate" /> przypadku pominięcia jest używana.</param>
        <summary>Zwraca wyrażenie ciągu reprezentujące wartość daty/godziny.</summary>
        <returns>Wyrażenie ciągu reprezentujące wartość daty/godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typ `Date` danych zawsze zawiera informacje o dacie i godzinie. Na potrzeby konwersji typów Visual Basic uznaje, że 1/1/1 (1 stycznia roku 1) jest wartością neutralną dla daty oraz 00:00:00 (północy) jako wartość neutralną czasu. Jeśli `Date` wartość zostanie sformatowana jako ciąg daty/godziny, `FormatDateTime` nie zawiera ona neutralnych wartości w ciągu będącym wynikiem. Na przykład w przypadku konwersji #1/1/0001 9:30:00 # na ciąg, wynikiem jest "9:30:00 AM"; Informacje o dacie są pomijane. Jednak informacje o dacie są nadal obecne w pierwotnej `Date` wartości i mogą być odzyskiwane za pomocą funkcji, takich jak. `DatePart`  
  
> [!NOTE]
>  Jeśli `Expression` argument jest przekazywany `String` jako literał, `FormatDateTime` interpretuje go zgodnie <xref:System.Globalization.CultureInfo.CurrentCulture%2A> z ustawieniem aplikacji. Jednakże jeśli przekażesz go jako `Date` literał, użyj formatu #mm/dd/yyyy #, ponieważ `FormatDateTime` program zawsze interpretuje `Date` literał zgodnie z kulturą w języku angielskim (USA). Jest to konieczne, ponieważ w przypadku opracowania i kodowanej aplikacji przy `Date` użyciu literałów z jednej kultury, ale jest ona wykonywana na platformie z inną kulturą `Date` , literały mogą być nieprawidłowo analizowane.  
  
 `NamedFormat` Argument ma następujące ustawienia.  
  
|Stała|Opis|  
|-|-|  
|`DateFormat.GeneralDate`|Wyświetl datę i/lub godzinę. Wyświetlanie części daty jako daty krótkiej. Jeśli jest częścią czasu, Wyświetl ją jako długi czas. Jeśli jest obecny, obie części wyświetlają.|  
|`DateFormat.LongDate`|Wyświetl datę przy użyciu formatu daty długiej określonego w ustawieniach regionalnych Twojego komputera.|  
|`DateFormat.ShortDate`|Wyświetl datę przy użyciu formatu daty krótkiej określonego w ustawieniach regionalnych Twojego komputera.|  
|`DateFormat.LongTime`|Wyświetla godzinę przy użyciu formatu czasu określonego w ustawieniach regionalnych komputera.|  
|`DateFormat.ShortTime`|Wyświetla godzinę przy użyciu formatu 24-godzinnego (hh: mm).|  
  
   
  
## Examples  
 W tym przykładzie pokazano sposób użycia `FormatDateTime` funkcji.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NamedFormat" />ustawienie jest nieprawidłowe.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagany. Wyrażenie, które ma zostać sformatowane.</param>
        <param name="NumDigitsAfterDecimal">Opcjonalny. Wartość liczbowa wskazująca, ile miejsc jest wyświetlanych po prawej stronie wartości dziesiętnej. Wartość domyślna to-1, co oznacza, że są używane ustawienia regionalne komputera.</param>
        <param name="IncludeLeadingDigit">Opcjonalny. <see cref="T:Microsoft.VisualBasic.TriState" />stała wskazująca, czy dla wartości ułamkowych jest wyświetlany wiodąca wartość 0. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="UseParensForNegativeNumbers">Opcjonalny. <see cref="T:Microsoft.VisualBasic.TriState" />stała wskazująca, czy umieścić wartości ujemne w nawiasach. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="GroupDigits">Opcjonalny. <see cref="T:Microsoft.VisualBasic.TriState" />stała wskazująca, czy liczby są zgrupowane przy użyciu ogranicznika grupy określonego w ustawieniach regionalnych. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca wyrażenie sformatowane jako liczba.</summary>
        <returns>Wyrażenie sformatowane jako liczba.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku pominięcia co najmniej jednego opcjonalnego argumentu wartości pominiętych argumentów są udostępniane przez ustawienia regionalne.  
  
> [!NOTE]
>  Wszystkie informacje o ustawieniach pochodzą z ustawień regionalnych aplikacji. Domyślnie będą to ustawienia regionalne w panelu sterowania. Można go jednak zmienić programowo przy użyciu .NET Framework.  
  
 Argumenty `IncludeLeadingDigit`, `UseParensForNegativeNumbers` i`GroupDigits` mają następujące ustawienia.  
  
|Stała|Opis|  
|-|-|  
|`TriState.True`|Prawda|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Ustawienia regionalne komputera|  
  
   
  
## Examples  
 Ten przykład ilustruje `FormatNumber` funkcję.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ nie jest wartością numeryczną.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagany. Wyrażenie, które ma zostać sformatowane.</param>
        <param name="NumDigitsAfterDecimal">Opcjonalny. Wartość liczbowa wskazująca, ile miejsc po prawej stronie wartości dziesiętnej są wyświetlane. Wartość domyślna to-1, co oznacza, że są używane ustawienia regionalne.</param>
        <param name="IncludeLeadingDigit">Opcjonalny. <see cref="T:Microsoft.VisualBasic.TriState" />stała wskazująca, czy wiodące zero wyświetla wartości ułamkowe. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="UseParensForNegativeNumbers">Opcjonalny. <see cref="T:Microsoft.VisualBasic.TriState" />stała wskazująca, czy umieścić wartości ujemne w nawiasach. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="GroupDigits">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" />stała wskazująca, czy liczby są zgrupowane przy użyciu ogranicznika grupy określonego w ustawieniach regionalnych. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca wyrażenie sformatowane jako wartość procentowa (czyli pomnożona przez 100) z końcowym znakiem%.</summary>
        <returns>Wyrażenie sformatowane jako wartość procentowa (czyli pomnożona przez 100) z końcowym znakiem%.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku pominięcia co najmniej jednego opcjonalnego argumentu wartości pominiętych argumentów są udostępniane przez ustawienia regionalne.  
  
> [!NOTE]
>  Wszystkie informacje o ustawieniach pochodzą z ustawień regionalnych aplikacji. Domyślnie będą to ustawienia regionalne w panelu sterowania. Można go jednak zmienić programowo przy użyciu .NET Framework.  
  
 Argumenty `IncludeLeadingDigit`, `UseParensForNegativeNumbers` i`GroupDigits` mają następujące ustawienia.  
  
|Stała|Opis|  
|-|-|  
|`TriState.True`|Prawda|  
|`TriState.False`|False|  
|`TriState.Default`|Ustawienia regionalne komputera|  
  
   
  
## Examples  
 Ten przykład ilustruje użycie `FormatPercent` funkcji.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ nie jest wartością numeryczną.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Dowolne prawidłowe <see langword="String" /> wyrażenie.</param>
        <param name="Index">Wymagany. <see langword="Integer" />wyrażenia. Indeks (1-based) znaku <paramref name="str" /> , który ma zostać zwrócony.</param>
        <summary><see langword="Char" /> Zwraca wartość reprezentującą znak z określonego indeksu w podanym ciągu.</summary>
        <returns><see langword="Char" />wartość reprezentująca znak z określonego indeksu w podanym ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Index` wartość jest mniejsza niż 1 lub większa niż wartość indeksu ostatniego znaku w `str`, `ArgumentException` zostanie zgłoszony.  
  
   
  
## Examples  
 W tym przykładzie pokazano, `GetChar` jak za pomocą funkcji zwrócić znak z określonego indeksu w. `String`  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" />ma <see langword="Nothing" />wartość <paramref name="Index" /> , <paramref name="str" />1 lub jest<paramref name="Index" /> większa niż indeks ostatniego znaku. &lt;</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczbę całkowitą określającą pozycję początkową pierwszego wystąpienia jednego ciągu w innym.  Liczba całkowita jest indeksem jednokrotnym w przypadku znalezienia dopasowania.  Jeśli dopasowanie nie zostanie znalezione, funkcja zwróci wartość zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Wymagany. <see langword="String" />Wyszukiwane wyrażenie.</param>
        <param name="String2">Wymagana. <see langword="String" />Wyszukiwane wyrażenie.</param>
        <param name="Compare">Opcjonalny. Określa typ porównania ciągów. Jeśli <paramref name="Compare" /> parametr zostanie pominięty <see langword="Option Compare" /> , ustawienie określa typ porównania.</param>
        <summary>Zwraca liczbę całkowitą określającą pozycję początkową pierwszego wystąpienia jednego ciągu w innym.</summary>
        <returns><list type="table">
            <item>
              <term> IF 
 </term>
              <description> Funkcja InStr zwraca 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" />ma zerową długość lub<see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />ma zerową długość lub<see langword="Nothing" /></term>
              <description> Pozycja początkowa dla wyszukiwania, która domyślnie jest pierwszą pozycją znaku.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />nie znaleziono 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />znajduje się w<paramref name="String1" /></term>
              <description> Położenie, w którym rozpoczyna się dopasowanie 
 </description>
            </item>
            <item>
              <term>
              </term>
              <description>
              </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `InStr` Zwykle funkcja jest używana podczas analizowania ciągów.  
  
> [!NOTE]
>  `InStrB` Funkcja w poprzednich wersjach Visual Basic zwraca liczbę bajtów, a nie pozycję znaku. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode i `InStrB` nie są już obsługiwane.  
  
 Ustawienia `Compare` argumentu są następujące:  
  
|Stała|Wartość|Opis|  
|-|-|-|  
|`Binary`|0|Wykonuje porównanie binarne|  
|`Text`|1|Wykonuje porównanie tekstu|  
  
   
  
## Examples  
 Ten przykład używa funkcji `InStr` , aby zwrócić pozycję pierwszego wystąpienia jednego ciągu w innym.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Opcjonalny. Wyrażenie liczbowe ustawiające pozycję początkową dla każdego wyszukiwania. W przypadku pominięcia wyszukiwanie rozpoczyna się od pierwszego pozycji znaku. Indeks początkowy jest oparty na 1.</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">Wymagana. <see langword="String" />Wyszukiwane wyrażenie.</param>
        <param name="String2">Wymagana. <see langword="String" />Wyszukiwane wyrażenie.</param>
        <param name="Compare">Opcjonalny. Określa typ porównania ciągów. Jeśli <paramref name="Compare" /> parametr zostanie pominięty <see langword="Option Compare" /> , ustawienie określa typ porównania.</param>
        <summary>Zwraca liczbę całkowitą określającą pozycję początkową pierwszego wystąpienia jednego ciągu w innym.</summary>
        <returns><list type="table">
            <item>
              <term> IF 
 </term>
              <description> Funkcja InStr zwraca 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" />ma zerową długość lub<see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />ma zerową długość lub<see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />nie znaleziono 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />znajduje się w<paramref name="String1" /></term>
              <description> Położenie, w którym rozpoczyna się dopasowanie 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" />&gt; Długość<paramref name="String1" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `InStr` Zwykle funkcja jest używana podczas analizowania ciągów.  
  
> [!NOTE]
>  `InStrB` Funkcja w poprzednich wersjach Visual Basic zwraca liczbę bajtów, a nie pozycję znaku. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic 2005 są w formacie Unicode i `InStrB` nie są już obsługiwane.  
  
 Ustawienia `Compare` argumentu są następujące:  
  
|Stała|Wartość|Opis|  
|-|-|-|  
|`Binary`|0|Wykonuje porównanie binarne|  
|`Text`|1|Wykonuje porównanie tekstu|  
  
   
  
## Examples  
 Ten przykład używa funkcji `InStr` , aby zwrócić pozycję pierwszego wystąpienia jednego ciągu w innym.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Wymagany. Wyszukiwane wyrażenie ciągu.</param>
        <param name="StringMatch">Wymagane. Wyszukiwane wyrażenie ciągu.</param>
        <param name="Start">Opcjonalna. Wyrażenie liczbowe ustawiające jedną pozycję początkową dla każdego wyszukiwania, zaczynając od lewej strony ciągu. W <paramref name="Start" /> przypadku pominięcia zostanie użyta wartość-1, co oznacza, że wyszukiwanie zaczyna się od ostatniej pozycji znaku. Następnie wyszukaj od prawej do lewej.</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa wskazująca rodzaj porównania do użycia podczas obliczania podciągów. W przypadku pominięcia zostanie wykonane porównanie binarne. Zobacz ustawienia wartości.</param>
        <summary>Zwraca pozycję pierwszego wystąpienia jednego ciągu w innym, rozpoczynając od prawej strony ciągu.</summary>
        <returns><list type="table">
            <item>
              <term> IF 
 </term>
              <description> InStrRev zwraca 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" />ma długość zero 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" />ma długość zero 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" />nie znaleziono 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" />znajduje się w<paramref name="StringCheck" /></term>
              <description> Położenie, w którym zostanie znalezione pierwsze dopasowanie, zaczynając od prawej strony ciągu.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" />jest większe niż długość<paramref name="StringMatch" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zauważyć, że składnia `InStrRev` funkcji nie jest taka sama jak składnia `InStr` funkcji.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|`Binary`|Wykonuje porównanie binarne.|  
|`Text`|Wykonuje porównanie tekstowe.|  
  
   
  
## Examples  
 W tym przykładzie pokazano sposób użycia `InStrRev` funkcji.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" />= 0 lub <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg utworzony przez przyłączenie kilku podciągów zawartych w tablicy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Wymagany. Tablica Jednowymiarowa zawierająca podciągi, które mają być sprzężone.</param>
        <param name="Delimiter">Opcjonalny. Dowolny ciąg, używany do oddzielania podciągów w zwracanym ciągu. W przypadku pominięcia zostanie użyty znak spacji (""). Jeśli <paramref name="Delimiter" /> jest ciągiem o zerowej długości ("") lub <see langword="Nothing" />, wszystkie elementy na liście są łączone bez ograniczników.</param>
        <summary>Zwraca ciąg utworzony przez przyłączenie kilku podciągów zawartych w tablicy.</summary>
        <returns>Ciąg utworzony przez przyłączenie kilku podciągów zawartych w tablicy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Występuje parzystość między `Join` funkcjami i `Split` . `Join` Funkcja przyjmuje tablicę ciągów i sprzęga je przy użyciu ciągu ogranicznika, aby zwrócić pojedynczy ciąg. `Split` Funkcja przyjmuje ciąg i oddziela ją od ogranicznika, aby zwrócić tablicę ciągów. Jednak kluczową różnicą jest to `Join` , że można łączyć ciągi z dowolnym ciągiem ogranicznika, `Split` aby można było oddzielić tylko ciągi przy użyciu pojedynczego ogranicznika znaków.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, `Join` jak za pomocą funkcji utworzyć listę z kilku ciągów.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" />nie jest jednym wymiarem.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Wymagana. Tablica Jednowymiarowa zawierająca podciągi, które mają być sprzężone.</param>
        <param name="Delimiter">Opcjonalny. Dowolny ciąg, używany do oddzielania podciągów w zwracanym ciągu. W przypadku pominięcia zostanie użyty znak spacji (""). Jeśli <paramref name="Delimiter" /> jest ciągiem o zerowej długości ("") lub <see langword="Nothing" />, wszystkie elementy na liście są łączone bez ograniczników.</param>
        <summary>Zwraca ciąg utworzony przez przyłączenie kilku podciągów zawartych w tablicy.</summary>
        <returns>Ciąg utworzony przez przyłączenie kilku podciągów zawartych w tablicy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Występuje parzystość między `Join` funkcjami i `Split` . `Join` Funkcja przyjmuje tablicę ciągów i sprzęga je przy użyciu ciągu ogranicznika, aby zwrócić pojedynczy ciąg. `Split` Funkcja przyjmuje ciąg i oddziela ją od ogranicznika, aby zwrócić tablicę ciągów. Jednak kluczową różnicą jest to `Join` , że można łączyć ciągi z dowolnym ciągiem ogranicznika, `Split` aby można było oddzielić tylko ciągi przy użyciu pojedynczego ogranicznika znaków.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, `Join` jak za pomocą funkcji utworzyć listę z kilku ciągów.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" />nie jest jednym wymiarem.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg lub znak przekonwertowany na małe litery.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagane. Dowolne prawidłowe <see langword="String" /> wyrażenie <see langword="Char" /> or.</param>
        <summary>Zwraca ciąg lub znak przekonwertowany na małe litery.</summary>
        <returns>Ciąg lub znak przekonwertowany na małe litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko wielkie litery są konwertowane na małe. wszystkie małe litery i znaki nielitery nie ulegają zmianie.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące zabezpieczeń w oparciu o wynik porównania lub operacji zmiany wielkości liter, operacja powinna <xref:System.String.Compare%2A?displayProperty=nameWithType> używać metody i nie może <xref:System.StringComparison.OrdinalIgnoreCase> przekazywać <xref:System.StringComparison.Ordinal> `comparisonType` tego argumentu. Aby uzyskać więcej informacji, zobacz wpływ [kultury na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Ten przykład używa funkcji `LCase` , aby zwrócić małą wersję ciągu.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagana. Dowolne prawidłowe <see langword="String" /> wyrażenie <see langword="Char" /> or.</param>
        <summary>Zwraca ciąg lub znak przekonwertowany na małe litery.</summary>
        <returns>Ciąg lub znak przekonwertowany na małe litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko wielkie litery są konwertowane na małe. wszystkie małe litery i znaki nielitery nie ulegają zmianie.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące zabezpieczeń w oparciu o wynik porównania lub operacji zmiany wielkości liter, operacja powinna <xref:System.String.Compare%2A?displayProperty=nameWithType> używać metody i nie może <xref:System.StringComparison.OrdinalIgnoreCase> przekazywać <xref:System.StringComparison.Ordinal> `comparisonType` tego argumentu. Aby uzyskać więcej informacji, zobacz wpływ [kultury na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Ten przykład używa funkcji `LCase` , aby zwrócić małą wersję ciągu.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Wymagane. <see langword="String" />wyrażenie, z którego są zwracane znaki z lewej strony.</param>
        <param name="Length">Wymagana. <see langword="Integer" />wyrażenia. Wyrażenie liczbowe wskazujące liczbę znaków do zwrócenia. Jeśli 0, zwracany jest ciąg o zerowej długości (""). Jeśli jest większa lub równa liczbie znaków w <paramref name="str" />, zwracany jest cały ciąg.</param>
        <summary>Zwraca ciąg zawierający określoną liczbę znaków z lewej strony ciągu.</summary>
        <returns>Ciąg zawierający określoną liczbę znaków z lewej strony ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, `Len` Użyj funkcji. Jeśli używany w aplikacji Windows Forms lub jakakolwiek inna Klasa, która ma `Left` właściwość, należy w pełni kwalifikować funkcję przy użyciu. `Microsoft.VisualBasic.Left`  
  
> [!NOTE]
>  `LeftB` Funkcja w poprzednich wersjach Visual Basic zwraca ciąg w bajtach, a nie znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LeftB` nie są już obsługiwane.  
  
   
  
## Examples  
 Ten przykład ilustruje użycie `Left` funkcji do zwrócenia podciągu danego `String`elementu. W klasie, która ma `Left` właściwość, może być konieczne w pełni `Left` kwalifikowanie funkcji.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolna <see langword="String" /> prawidłowa nazwa wyrażenia lub zmiennej. Jeśli <paramref name="Expression" /> jest typu <see langword="Object" />, <see langword="Len" /> funkcja zwraca rozmiar, ponieważ <see langword="FilePut" /> zostanie zapisany w pliku przez funkcję.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca liczbę znaków w ciągu lub nominalną liczbę bajtów wymaganą do zapisania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku typów i `Object` zmiennych `Len` zdefiniowanych przez użytkownika funkcja zwraca rozmiar, który zostanie zapisany w pliku przez `FilePut` funkcję. `Object` Jeśli`String`zawiera, zwróci długość ciągu. Jeśli zawiera inny typ, zwróci rozmiar obiektu, ponieważ zostanie on zapisany w pliku `FilePut` przez funkcję. `Object`  
  
 Ten `VBFixedString` atrybut może być stosowany do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy jest zapisywana na dysku. Funkcja używa atrybutu, jeśli jest dostępny, `Object` podczas określania rozmiaru zmiennych. `VBFixedString` `Len`  
  
> [!NOTE]
>  `Len` Funkcja może nie być w stanie ustalić rzeczywistej liczby bajtów magazynu wymaganych w przypadku używania z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcja we wcześniejszych wersjach Visual Basic zwraca liczbę bajtów w ciągu zamiast znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `LenB` nie są już obsługiwane.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Funkcja akceptuje tylko `String` zmienne i `Object` jako parametry. `Len` `Object` Jeśli zawiera,`String`zwrócidługość. `String` Jeśli parametr jest odwołaniem o `Object` wartości null, funkcja zwraca wartość zero. `Object` Jeśli zawiera inny typ, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Ten przykład używa `Len` do zwracania liczby znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. <see langword="String" />wyrażenia. Nazwa zmiennej ciągu.</param>
        <param name="Length">Wymagana. <see langword="Integer" />wyrażenia. Długość zwracanego ciągu.</param>
        <summary>Zwraca ciąg wyrównany do lewej zawierający określony ciąg dostosowany do określonej długości.</summary>
        <returns>Ciąg wyrównany do lewej zawierający określony ciąg dostosowany do określonej długości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określony ciąg jest dłuższy niż określona długość, zwracany ciąg zostanie skrócony do określonej długości. Jeśli określony ciąg jest krótszy niż określona długość, spacje są dodawane do prawego końca zwracanego ciągu, aby utworzyć odpowiednią długość.  
  
   
  
## Examples  
 W tym przykładzie pokazano sposób użycia `LSet` funkcji.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Skuteczne stosowanie typów danych</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Wymagany. Dowolne prawidłowe <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg zawierający kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), bez spacji końcowych (<see langword="RTrim" />) ani spacji wiodących i końcowych (<see langword="Trim" />).</summary>
        <returns>Ciąg zawierający kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), bez spacji końcowych (<see langword="RTrim" />) ani spacji wiodących i końcowych (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcje `LTrim`, `RTrim` i`Trim` usuwają spacje z końca ciągów.  
  
   
  
## Examples  
 Ten przykład używa funkcji `LTrim` , aby rozdzielić wiodące spacje i funkcję, `RTrim` aby rozdzielić spacje ze zmiennej ciągu. Używa funkcji, `Trim` aby rozdzielić oba typy spacji.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg zawierający znaki z określonego ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" />wyrażenie, z którego są zwracane znaki.</param>
        <param name="Start">Wymagany. <see langword="Integer" />wyrażenia. Pozycja początkowa znaków do zwrócenia. Jeśli <paramref name="Start" /> jest większa niż liczba znaków w <paramref name="str" />, <see langword="Mid" /> funkcja zwraca ciąg o zerowej długości (""). <paramref name="Start" />jest oparty na jednym z nich.</param>
        <summary>Zwraca ciąg, który zawiera wszystkie znaki zaczynające się od określonej pozycji w ciągu.</summary>
        <returns>Ciąg, który składa się ze wszystkich znaków, zaczynając od określonej pozycji w ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, `Len` Użyj funkcji.  
  
 Visual Basic ma `Mid` funkcję `Mid` i instrukcję. Te elementy działają na określonej liczbie znaków w ciągu, ale `Mid` funkcja zwraca znaki, `Mid` gdy instrukcja zastępuje znaki. Aby uzyskać więcej informacji, zobacz [Mid — instrukcja](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Funkcja w poprzednich wersjach Visual Basic zwraca ciąg w bajtach, a nie znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic są w formacie Unicode i `MidB` nie są już obsługiwane.  
  
   
  
## Examples  
 Ostatni wiersz w tym przykładzie używa tego przeciążenia `Mid` funkcji do zwrócenia piątego i kolejnego znaku z ciągu.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" />= 0 <paramref name="Length" /> lub&lt; 0. &lt;</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Wymagany. <see langword="String" />wyrażenie, z którego są zwracane znaki.</param>
        <param name="Start">Wymagane. <see langword="Integer" />wyrażenia. Pozycja początkowa znaków do zwrócenia. Jeśli <paramref name="Start" /> jest większa niż liczba znaków w <paramref name="str" />, <see langword="Mid" /> funkcja zwraca ciąg o zerowej długości (""). <paramref name="Start" />jest oparty na jednym z nich.</param>
        <param name="Length">Opcjonalny. <see langword="Integer" />wyrażenia. Liczba znaków do zwrócenia. W przypadku pominięcia lub jeśli w tekście <paramref name="Length" /> jest mniej niż znaków (łącznie z znakiem w <paramref name="Start" />położeniu), zwracane są wszystkie znaki od pozycji początkowej do końca ciągu.</param>
        <summary>Zwraca ciąg zawierający określoną liczbę znaków, zaczynając od określonej pozycji w ciągu.</summary>
        <returns>Ciąg, który składa się z określonej liczby znaków, zaczynając od określonej pozycji w ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, `Len` Użyj funkcji.  
  
 Visual Basic ma `Mid` funkcję `Mid` i instrukcję. Te elementy działają na określonej liczbie znaków w ciągu, ale `Mid` funkcja zwraca znaki, `Mid` gdy instrukcja zastępuje znaki. Aby uzyskać więcej informacji, zobacz [Mid — instrukcja](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Funkcja w poprzednich wersjach Visual Basic zwraca ciąg w bajtach, a nie znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi Visual Basic są w formacie Unicode i `MidB` nie są już obsługiwane.  
  
   
  
## Examples  
 Pierwsze dwie `Mid` funkcje w tym przykładzie zwracają określoną liczbę znaków z ciągu, rozpoczynając od danego położenia. (Ostatnia funkcja ilustruje <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> Przeciążenie i określa tylko punkt początkowy dla wyodrębniania ciągu).  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" />= 0 <paramref name="Length" /> lub&lt; 0. &lt;</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Wymagane. Wyrażenie ciągu zawierające podciąg, który ma zostać zamieniony.</param>
        <param name="Find">Wymagana. Wyszukiwany podciąg.</param>
        <param name="Replacement">Wymagane. Zastępczy podciąg.</param>
        <param name="Start">Opcjonalna. Pozycja w <paramref name="Expression" /> obrębie, która uruchamia podciąg używany do zamiany. Wartość <see langword="Replace" /> zwracana przez to ciąg zaczynający się od <paramref name="Start" />, z odpowiednimi podstawiami. W przypadku pominięcia przyjmowana jest wartość 1.</param>
        <param name="Count">Opcjonalna. Liczba podciągów, które mają zostać wykonane. W przypadku pominięcia wartość domyślna to-1, co oznacza, że można wykonać wszystkie możliwe podstawianie.</param>
        <param name="Compare">Opcjonalny. Wartość liczbowa wskazująca rodzaj porównania do użycia podczas obliczania podciągów. Zobacz ustawienia wartości.</param>
        <summary>Zwraca ciąg, w którym określony podciąg został zamieniony na inny podciąg określoną liczbę razy.</summary>
        <returns><see langword="Replace" />zwraca następujące wartości.  
  
 <list type="table"><item><term> IF 
 </term><description> Zamień zwraca 
 </description></item><item><term><paramref name="Find" />ma długość zero lub<see langword="Nothing" /></term><description> Kopia<paramref name="Expression" /></description></item><item><term><paramref name="Replace" />ma długość zero 
 </term><description> <paramref name="Expression" /> Kopia bez wystąpień<paramref name="Find" /></description></item><item><term><paramref name="Expression" />ma długość zero lub <see langword="Nothing" /> <paramref name="Start" /> lub jest większa niż długość<paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" />jest 0 
 </term><description> Kopia<paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość `Replace` zwracana przez funkcję jest ciągiem, który rozpoczyna się w pozycji określonej przez `Start` i kończy się `Expression` na końcu ciągu, z podstawieniem wykonanym przez `Find` i `Replace` wartości.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|`Binary`|Wykonuje porównanie binarne|  
|`Text`|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 Ten przykład ilustruje `Replace` funkcję.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" />-1 <paramref name="Start" /> lub&lt;=0. &lt;</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" />wyrażenie, z którego są zwracane znaki po prawej stronie.</param>
        <param name="Length">Wymagane. <see langword="Integer" />. Wyrażenie liczbowe wskazujące liczbę znaków do zwrócenia. Jeśli 0, zwracany jest ciąg o zerowej długości (""). Jeśli jest większa lub równa liczbie znaków w <paramref name="str" />, zwracany jest cały ciąg.</param>
        <summary>Zwraca ciąg zawierający określoną liczbę znaków z prawej strony ciągu.</summary>
        <returns>Ciąg zawierający określoną liczbę znaków z prawej strony ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, `Len` Użyj funkcji. Jeśli jest używana w formularzu systemu Windows lub jakakolwiek inna Klasa, która ma `Right` właściwość, należy w pełni kwalifikować funkcję przy użyciu `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  `RightB` Funkcja we wcześniejszych wersjach Visual Basic zwraca ciąg w bajtach, a nie znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie bieżące ciągi Visual Basic są w formacie Unicode i `RightB` nie są już obsługiwane.  
  
   
  
## Examples  
 Ten przykład ilustruje użycie `Right` funkcji do zwrócenia podciągu danego `String`elementu. W klasie, która ma `Right` właściwość, może być konieczne w pełni `Right` kwalifikowanie funkcji.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. <see langword="String" />wyrażenia. Nazwa zmiennej ciągu.</param>
        <param name="Length">Wymagana. <see langword="Integer" />wyrażenia. Długość zwracanego ciągu.</param>
        <summary>Zwraca ciąg wyrównany do prawej zawierający określony ciąg dostosowany do określonej długości.</summary>
        <returns>Ciąg wyrównany do prawej zawierający określony ciąg dostosowany do określonej długości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Source` jest dłuższa `Length`niż `RSet` , program umieszcza tylko znaki z `Source`lewej strony, do długości w zwracanym ciągu. Jeśli określony ciąg jest krótszy niż określona długość, spacje są dodawane do lewego końca ciągu, aby utworzyć odpowiednią długość. Jeśli określony ciąg jest dłuższy niż określona długość, zostanie skrócony do określonej długości.  
  
   
  
## Examples  
 W tym przykładzie pokazano sposób użycia `RSet` funkcji.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Skuteczne stosowanie typów danych</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Dowolne prawidłowe <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg zawierający kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), bez spacji końcowych (<see langword="RTrim" />) ani spacji wiodących i końcowych (<see langword="Trim" />).</summary>
        <returns>Ciąg zawierający kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), bez spacji końcowych (<see langword="RTrim" />) ani spacji wiodących i końcowych (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcje `LTrim`, `RTrim` i`Trim` usuwają spacje z końca ciągów.  
  
   
  
## Examples  
 Ten przykład używa funkcji `LTrim` , aby rozdzielić wiodące spacje i funkcję, `RTrim` aby rozdzielić spacje ze zmiennej ciągu. Używa funkcji, `Trim` aby rozdzielić oba typy spacji.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. <see langword="Integer" />wyrażenia. Liczba spacji w ciągu.</param>
        <summary>Zwraca ciąg zawierający podaną liczbę spacji.</summary>
        <returns>Ciąg składający się z określonej liczby spacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` Funkcja jest przydatna do formatowania danych wyjściowych i czyszczenia ich w ciągach o stałej długości.  
  
   
  
## Examples  
 W `Space` tym przykładzie funkcja zwraca ciąg składający się z określonej liczby spacji.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Wymagane. <see langword="String" />wyrażenie zawierające podciągi i ograniczniki.</param>
        <param name="Delimiter">Opcjonalna. Dowolny pojedynczy znak używany do identyfikowania limitów podciągów. W <paramref name="Delimiter" /> przypadku pominięcia zostanie przyjęty znak spacji ("") jako ogranicznik.</param>
        <param name="Limit">Opcjonalny. Maksymalna liczba podciągów, w których należy podzielić ciąg wejściowy. Wartość domyślna-1 oznacza, że ciąg wejściowy powinien być podzielony przy każdym wystąpieniu <paramref name="Delimiter" /> ciągu.</param>
        <param name="Compare">Opcjonalny. Wartość liczbowa wskazująca porównanie do użycia podczas obliczania podciągów. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca tablicę jednowymiarową (od zera) zawierającą określoną liczbę podciągów.</summary>
        <returns><see langword="String" />macierzy. Jeśli <paramref name="Expression" /> jest ciągiem o zerowej długości (""), <see langword="Split" /> zwraca tablicę jednoelementową zawierającą ciąg o zerowej długości. Jeśli <paramref name="Delimiter" /> jest ciągiem o zerowej długości lub jeśli nie występuje w <paramref name="Expression" />żadnym miejscu, <see langword="Split" /> zwraca tablicę jednoelementową zawierającą cały <paramref name="Expression" /> ciąg.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie, lub gdy `Limit` jest równa-1 `Split` , funkcja dzieli ciąg wejściowy przy każdym wystąpieniu ciągu ogranicznika i zwraca podciągi w tablicy. Gdy parametr jest większy od zera `Split` , funkcja dzieli ciąg na pierwsze `Limit`-1 wystąpienie ogranicznika i zwraca tablicę z wynikowymi podciągami. `Limit` Na przykład `Split("a:b:c", ":")` zwraca tablicę `{"a", "b", "c"}`, podczas gdy `Split("a:b:c", ":", 2)` zwraca tablicę `{"a", "b:c"}`.  
  
 `Split` Gdy funkcja napotka dwa ograniczniki w wierszu lub ogranicznik na początku lub na końcu ciągu, interpretuje je jako otaczający pusty ciąg (""). Na przykład `Split("xx", "x")` zwraca tablicę zawierającą trzy puste ciągi: jeden od początku ciągu i pierwsze "x", jeden z dwóch ciągów "x" i jeden z między ostatni "x" i końcem ciągu.  
  
 W tej tabeli przedstawiono, jak `Delimiter`opcjonalne `Limit`, i `Compare` parametry mogą zmieniać zachowanie `Split` funkcji.  
  
|Wywołanie Split|Wartość zwracana|  
|-|-|  
|`Split("42, 12, 19")`|{"42,", "12", "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alicja i Robert"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alicja", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"ktoś", "example.com"}|  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|Wartość|  
|-|-|-|  
|`CompareMethod.Binary`|Wykonuje porównanie binarne|0|  
|`CompareMethod.Text`|Wykonuje porównanie tekstowe|1|  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób dzielenia ciągu na spacje.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 W poniższym przykładzie pokazano, jak podzielić ciągi z wieloma ogranicznikami w wierszu i odfiltrować puste ciągi.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Wymagany. Dowolne prawidłowe <see langword="String" /> wyrażenie.</param>
        <param name="String2">Wymagana. Dowolne prawidłowe <see langword="String" /> wyrażenie.</param>
        <param name="Compare">Opcjonalna. Określa typ porównania ciągów. Jeśli <paramref name="Compare" /> parametr zostanie pominięty <see langword="Option Compare" /> , ustawienie określa typ porównania.</param>
        <summary>Zwraca wartość-1, 0 lub 1, na podstawie wyniku porównania ciągów.</summary>
        <returns><see langword="StrComp" /> Funkcja ma następujące wartości zwracane.  
  
 <list type="table"><item><term> IF 
 </term><description> StrComp zwraca 
 </description></item><item><term><paramref name="String1" />Sortuje przed<paramref name="String2" /></term><description> -1 
 </description></item><item><term><paramref name="String1" />równa się<paramref name="String2" /></term><description> 0 
 </description></item><item><term><paramref name="String1" />Sortuje po<paramref name="String2" /></term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciągi są porównywane przez alfanumeryczne wartości sortowania zaczynające się od pierwszego znaku. Aby uzyskać więcej informacji na temat porównań binarnych, porównywania tekstu i kolejności sortowania, zobacz [Option Compare instrukcji](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 Ustawienia `Compare` argumentu są następujące:  
  
|Stała|Opis|  
|-|-|  
|`Binary`|Wykonuje porównanie binarne na podstawie kolejności sortowania pochodzącej z wewnętrznych reprezentacji binarnych znaków.|  
|`Text`|Wykonuje porównanie tekstu na podstawie kolejności sortowania tekstu niezależnego od wielkości liter, określonego przez `LocaleID` wartość System.|  
  
   
  
## Examples  
 W tym przykładzie `StrComp` funkcja zwraca wyniki porównania ciągów.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Compare" />wartość jest nieprawidłowa.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">Wymagany. <see langword="String" />wyrażenie, które ma zostać przekonwertowane.</param>
        <param name="Conversion">Wymagana. <see cref="T:Microsoft.VisualBasic.VbStrConv" />członkiem. Wartość wyliczenia określająca typ konwersji do wykonania.</param>
        <param name="LocaleID">Opcjonalna. Wartość, jeśli różni się od wartości systemowej <see langword="LocaleID" />. <see langword="LocaleID" /> (Wartość systemowa <see langword="LocaleID" /> jest wartością domyślną).</param>
        <summary>Zwraca ciąg przekonwertowany jako określony.</summary>
        <returns>Ciąg przekonwertowany jako określony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbStrConv.Wide`Stałe `VbStrConv.Katakana` , `VbStrConv.Narrow`, ,`VbStrConv.SimplifiedChinese` ,i`VbStrConv.Hiragana` mogą spowodować błędy czasu wykonywania, jeśli są używane w ustawieniach regionalnych, gdzie nie mają zastosowania, ale nie zawsze: stałe i `VbStrConv.TraditionalChinese` `VbStrConv.Katakana` `VbStrConv.Hiragana`może być używany w systemie innym niż język japoński z zainstalowanym japońskim pakietem językowym. Dodatkowo użycie stałych `VbStrConv.Wide` i `VbStrConv.Narrow` jest obsługiwane w dowolnym systemie z zainstalowanym językiem wschodnioazjatyckim.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące zabezpieczeń w oparciu o wynik porównania lub operacji zmiany wielkości liter, operacja powinna <xref:System.String.Compare%2A?displayProperty=nameWithType> używać metody i nie może <xref:System.StringComparison.OrdinalIgnoreCase> przekazywać <xref:System.StringComparison.Ordinal> `comparisonType` tego argumentu. Aby uzyskać więcej informacji, zobacz wpływ [kultury na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 Ustawienia `Conversion` argumentu są następujące:  
  
|Składowa wyliczenia|Opis|  
|-|-|  
|`VbStrConv.None`|Nie wykonuje konwersji|  
|`VbStrConv.LinguisticCasing`|Używa reguł lingwistycznych dla wielkości liter zamiast systemu plików (domyślnie). Prawidłowe z `VbStrConv.UpperCase` i `VbStrConv.LowerCase` .|  
|`VbStrConv.UpperCase`|Konwertuje ciąg na wielkie litery.|  
|`VbStrConv.LowerCase`|Konwertuje ciąg na małe litery.|  
|`VbStrConv.ProperCase`|Konwertuje pierwszą literę każdego wyrazu w ciągu na wielkie litery.|  
|`VbStrConv.Wide` <sup>*</sup>|Konwertuje znaki wąskie (połówkowe) w ciągach na szerokie (o pełnej szerokości). [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Konwertuje szerokie (pełne szerokości) znaki w ciągu na wąskie znaki (połówkowej szerokości).|  
|`VbStrConv.Katakana` <sup>**</sup>|Konwertuje znaki hiragana w ciągu znaków katakana.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Konwertuje znaki katakana w ciągu na znaki hiragana.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Konwertuje tradycyjne znaki chińskie na chiński uproszczony.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Konwertuje znaki chińskie uproszczone na chiński tradycyjny.|  
  
 <sup>*</sup>Dotyczy azjatyckich ustawień regionalnych.  
  
 <sup>**</sup>Dotyczy tylko Japonii.  
  
> [!NOTE]
>  Te stałe są określone w .NET Framework środowiska uruchomieniowego języka wspólnego. W związku z tym mogą one być używane w dowolnym miejscu w kodzie zamiast rzeczywistych wartości. Większość można łączyć (na przykład `UpperCase + Wide`), z wyjątkiem sytuacji, gdy wykluczają się wzajemnie (na `VbStrConv.Wide + VbStrConv.Narrow`przykład).  
  
 Poniżej podano prawidłowe separatory wyrazów dla właściwej wielkości liter: Null (`Chr$(0)`), tabulator poziomy (`Chr$(9)`), wysuw wiersza (`Chr$(10)`), tabulator pionowy`Chr$(11)`(), Wysuw strony`Chr$(12)`(), powrotu karetki (`Chr$(13)`), spacja (zestaw znaków jednobajtowych) (`Chr$(32)`). Rzeczywista wartość dla spacji, która może być pełna lub pół szerokości, różni się w zależności od kraju/regionu dla kultur wschodnioazjatyckich.  
  
   
  
## Examples  
 Ten przykład konwertuje tekst na małe litery.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="LocaleID" />Nieobsługiwana <paramref name="Conversion" /> , 0&lt; lub&gt; 2048 lub nieobsługiwana konwersja dla określonych ustawień regionalnych.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg lub obiekt składający się z określonego znaku Powtórzonego określoną liczbę razy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. <see langword="Integer" />wyrażenia. Długość do zwracanego ciągu.</param>
        <param name="Character">Wymagany. Dowolne prawidłowe <see langword="Char" /> <see langword="String" />wyrażenie, lub <see langword="Object" /> . Zostanie użyty tylko pierwszy znak w wyrażeniu. Jeśli znak jest typu <see langword="Object" />, musi zawierać <see langword="Char" /> albo albo <see langword="String" /> wartość.</param>
        <summary>Zwraca ciąg lub obiekt składający się z określonego znaku Powtórzonego określoną liczbę razy.</summary>
        <returns>Ciąg lub obiekt składający się z określonego znaku powtórzony określoną liczbę razy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja zwraca składową składającą się `String` z powtórzonych znaków. Znak tworzący ciąg jest pierwszym znakiem w `Character` argumencie i jest `Number` zduplikowany.  
  
   
  
## Examples  
 W `StrDup` tym przykładzie użyto funkcji do zwrócenia ciągu zduplikowanych znaków.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />jest mniejsza niż 0 lub <paramref name="Character" /> nieprawidłowy typ.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" />jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagany. <see langword="Integer" />wyrażenia. Długość do zwracanego ciągu.</param>
        <param name="Character">Wymagany. Dowolne prawidłowe <see langword="Char" /> <see langword="String" />wyrażenie, lub <see langword="Object" /> . Zostanie użyty tylko pierwszy znak w wyrażeniu. Jeśli znak jest typu <see langword="Object" />, musi zawierać <see langword="Char" /> albo albo <see langword="String" /> wartość.</param>
        <summary>Zwraca ciąg lub obiekt składający się z określonego znaku Powtórzonego określoną liczbę razy.</summary>
        <returns>Ciąg lub obiekt składający się z określonego znaku powtórzony określoną liczbę razy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja zwraca składową składającą się `String` z powtórzonych znaków. Znak tworzący ciąg jest pierwszym znakiem w `Character` argumencie i jest `Number` zduplikowany.  
  
   
  
## Examples  
 W `StrDup` tym przykładzie użyto funkcji do zwrócenia ciągu zduplikowanych znaków.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />jest mniejsza niż 0 lub <paramref name="Character" /> nieprawidłowy typ.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" />jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. <see langword="Integer" />wyrażenia. Długość do zwracanego ciągu.</param>
        <param name="Character">Wymagany. Dowolne prawidłowe <see langword="Char" /> <see langword="String" />wyrażenie, lub <see langword="Object" /> . Zostanie użyty tylko pierwszy znak w wyrażeniu. Jeśli znak jest typu <see langword="Object" />, musi zawierać <see langword="Char" /> albo albo <see langword="String" /> wartość.</param>
        <summary>Zwraca ciąg lub obiekt składający się z określonego znaku Powtórzonego określoną liczbę razy.</summary>
        <returns>Ciąg lub obiekt składający się z określonego znaku powtórzony określoną liczbę razy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja zwraca składową składającą się `String` z powtórzonych znaków. Znak tworzący ciąg jest pierwszym znakiem w `Character` argumencie i jest `Number` zduplikowany.  
  
   
  
## Examples  
 W `StrDup` tym przykładzie użyto funkcji do zwrócenia ciągu zduplikowanych znaków.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />jest mniejsza niż 0 lub <paramref name="Character" /> nieprawidłowy typ.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" />jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagane. Wyrażenie ciągu, którego znaki mają być odwrócone. Jeśli <paramref name="Expression" /> jest ciągiem o zerowej długości (""), zwracany jest ciąg o zerowej długości.</param>
        <summary>Zwraca ciąg, w którym kolejność znaków określonego ciągu jest odwrócona.</summary>
        <returns>Ciąg, w którym kolejność znaków określonego ciągu jest odwrócona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcja zwraca ciąg, który zawiera te same znaki, co `Expression`, ale w kolejności odwrotnej. `StrReverse`  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Dowolne prawidłowe <see langword="String" /> wyrażenie.</param>
        <summary>Zwraca ciąg zawierający kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), bez spacji końcowych (<see langword="RTrim" />) ani spacji wiodących i końcowych (<see langword="Trim" />).</summary>
        <returns>Ciąg zawierający kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), bez spacji końcowych (<see langword="RTrim" />) ani spacji wiodących i końcowych (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcje `LTrim`, `RTrim` i`Trim` usuwają spacje z końca ciągów.  
  
   
  
## Examples  
 Ten przykład używa funkcji `LTrim` , aby rozdzielić wiodące spacje i funkcję, `RTrim` aby rozdzielić spacje ze zmiennej ciągu. Używa funkcji, `Trim` aby rozdzielić oba typy spacji.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagane. Dowolne prawidłowe <see langword="String" /> wyrażenie <see langword="Char" /> or.</param>
        <summary>Zwraca ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</summary>
        <returns>Ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko małe litery są konwertowane na wielkie. wszystkie wielkie litery i znaki nielitery nie ulegają zmianie.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące zabezpieczeń w oparciu o wynik porównania lub operacji zmiany wielkości liter, operacja powinna <xref:System.String.Compare%2A?displayProperty=nameWithType> używać metody i nie może <xref:System.StringComparison.OrdinalIgnoreCase> przekazywać <xref:System.StringComparison.Ordinal> `comparisonType` tego argumentu. Aby uzyskać więcej informacji, zobacz wpływ [kultury na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Ten przykład używa funkcji `UCase` , aby zwrócić wielką wersję ciągu.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagany. Dowolne prawidłowe <see langword="String" /> wyrażenie <see langword="Char" /> or.</param>
        <summary>Zwraca ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</summary>
        <returns>Ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko małe litery są konwertowane na wielkie. wszystkie wielkie litery i znaki nielitery nie ulegają zmianie.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące zabezpieczeń w oparciu o wynik porównania lub operacji zmiany wielkości liter, operacja powinna <xref:System.String.Compare%2A?displayProperty=nameWithType> używać metody i nie może <xref:System.StringComparison.OrdinalIgnoreCase> przekazywać <xref:System.StringComparison.Ordinal> `comparisonType` tego argumentu. Aby uzyskać więcej informacji, zobacz wpływ [kultury na ciągi w Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Ten przykład używa funkcji `UCase` , aby zwrócić wielką wersję ciągu.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
  </Members>
</Type>
