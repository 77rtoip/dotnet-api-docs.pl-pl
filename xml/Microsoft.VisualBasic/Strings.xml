<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a1abe6590aa067aad077de7aabafdb680ed1b2e" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56352703" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Strings" /> Moduł zawiera procedury używane do wykonywania operacji na ciągach.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które manipulowania ciągami.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak pozwala podzielić ciąg na jej miejsca do magazynowania.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Wymagana. Dowolne, prawidłowe <see langword="Char" /> lub <see langword="String" /> wyrażenia. Jeśli <paramref name="String" /> jest <see langword="String" /> wyrażenie, tylko pierwszy znak ciągu jest używane dla danych wejściowych. Jeśli <paramref name="String" /> jest <see langword="Nothing" /> lub nie zawiera żadnych znaków <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca wartość całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Zwraca *punktem kodu*, lub kod znaku dla wprowadzanych znaków. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW` Zwraca punkt kodowy Unicode dla wprowadzanych znaków. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi programu Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Asc` funkcja zwraca `Integer` kody odpowiadające pierwszej literze każdego ciągu znaków.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funkcje (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Wymagana. Dowolne, prawidłowe <see langword="Char" /> lub <see langword="String" /> wyrażenia. Jeśli <paramref name="String" /> jest <see langword="String" /> wyrażenie, tylko pierwszy znak ciągu jest używane dla danych wejściowych. Jeśli <paramref name="String" /> jest <see langword="Nothing" /> lub nie zawiera żadnych znaków <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca wartość całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Zwraca *punktem kodu*, lub kod znaku dla wprowadzanych znaków. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW` Zwraca punkt kodowy Unicode dla wprowadzanych znaków. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi programu Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Asc` funkcja zwraca `Integer` kody odpowiadające pierwszej literze każdego ciągu znaków.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funkcje (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Wymagana. Dowolne, prawidłowe <see langword="Char" /> lub <see langword="String" /> wyrażenia. Jeśli <paramref name="String" /> jest <see langword="String" /> wyrażenie, tylko pierwszy znak ciągu jest używane dla danych wejściowych. Jeśli <paramref name="String" /> jest <see langword="Nothing" /> lub nie zawiera żadnych znaków <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca wartość całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Zwraca *punktem kodu*, lub kod znaku dla wprowadzanych znaków. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW` Zwraca punkt kodowy Unicode dla wprowadzanych znaków. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi programu Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Asc` funkcja zwraca `Integer` kody odpowiadające pierwszej literze każdego ciągu znaków.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funkcje (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Wymagana. Dowolne, prawidłowe <see langword="Char" /> lub <see langword="String" /> wyrażenia. Jeśli <paramref name="String" /> jest <see langword="String" /> wyrażenie, tylko pierwszy znak ciągu jest używane dla danych wejściowych. Jeśli <paramref name="String" /> jest <see langword="Nothing" /> lub nie zawiera żadnych znaków <see cref="T:System.ArgumentException" /> wystąpi błąd.</param>
        <summary>Zwraca wartość całkowitą reprezentującą kod znaku odpowiadający znakowi.</summary>
        <returns>Kod znaku odpowiadający znakowi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Zwraca *punktem kodu*, lub kod znaku dla wprowadzanych znaków. To mogą być wartości od 0 do 255 znaków jednobajtowych (SBCS) w zestawie oraz wartości od -32768 do 32767 znaków dwubajtowych (znaków DBCS) w zestawie.  
  
 `AscW` Zwraca punkt kodowy Unicode dla wprowadzanych znaków. Może to być od 0 do 65535. Zwrócona wartość jest niezależna od ustawień strony kultury i kodowej dla bieżącego wątku.  
  
> [!NOTE]
>  `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi programu Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Asc` funkcja zwraca `Integer` kody odpowiadające pierwszej literze każdego ciągu znaków.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funkcje (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Wymagana. <see langword="Integer" /> Reprezentujący wyrażenie <c>punktem kodu</c>, lub kod znaku dla znaków.</param>
        <summary>Zwraca znak skojarzony z określonym kodem znaku.</summary>
        <returns>Znak skojarzony z określonym kodem znaku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zakres asymetrycznego akceptowana w przypadku `CharCode` kompensuje magazynu różnice `Short` i `Integer`. Na przykład jest-29183 `Short` , ale jest +36353 `Integer`. Ułatwia to również zgodność z Visual Basic 6.0.  
  
 `Chr` używa <xref:System.Text.Encoding> klasy w <xref:System.Text?displayProperty=nameWithType> przestrzeni nazw, aby określić, czy bieżący wątek używa zestawu znaków jednobajtowych (SBCS) lub znak dwubajtowy zestawu (znaków znaków DBCS). Następnie pobiera `CharCode` jako kod do punktu w odpowiedni zestaw. Może on zawierać od 0 do 255 znaków SBCS i od -32768 do 65535 znaków Dwubajtowych znaków.  
  
 Zwrócona wartość jest zależna od strony kodowej dla bieżącego wątku, który jest zawarty w <xref:System.Globalization.TextInfo.ANSICodePage%2A> właściwość <xref:System.Globalization.TextInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Możesz uzyskać <xref:System.Globalization.TextInfo.ANSICodePage%2A> , określając `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` Trwa `CharCode` Unicode punktem kodu. Zakres jest niezależne od ustawień strony kultury i kodowej dla bieżącego wątku. Wartości od -32768 do-1 są traktowane takie same wartości zakresu +32768 za pośrednictwem +65535.  
  
 Liczby od 0 do 31 są takie same jak standardowych kodów ASCII nie drukowania. Na przykład `Chr(10)` zwraca znak wysuwu wiersza.  
  
> [!NOTE]
>  `ChrB` We wcześniejszych wersjach programu Visual Basic:: gettotalsize() zwróciło jednobajtowych. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi w Visual Basic i .NET Framework są w formacie Unicode, i `ChrB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Chr` funkcja zwraca znak skojarzony z określonym kodem znaku.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; 0 lub &gt; 255 <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Wymagana. <see langword="Integer" /> Reprezentujący wyrażenie <c>punktem kodu</c>, lub kod znaku dla znaków.</param>
        <summary>Zwraca znak skojarzony z określonym kodem znaku.</summary>
        <returns>Znak skojarzony z określonym kodem znaku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zakres asymetrycznego akceptowana w przypadku `CharCode` kompensuje magazynu różnice `Short` i `Integer`. Na przykład jest-29183 `Short` , ale jest +36353 `Integer`. Ułatwia to również zgodność z Visual Basic 6.0.  
  
 `Chr` używa <xref:System.Text.Encoding> klasy w <xref:System.Text?displayProperty=nameWithType> przestrzeni nazw, aby określić, czy bieżący wątek używa zestawu znaków jednobajtowych (SBCS) lub znak dwubajtowy zestawu (znaków znaków DBCS). Następnie pobiera `CharCode` jako kod do punktu w odpowiedni zestaw. Może on zawierać od 0 do 255 znaków SBCS i od -32768 do 65535 znaków Dwubajtowych znaków.  
  
 Zwrócona wartość jest zależna od strony kodowej dla bieżącego wątku, który jest zawarty w <xref:System.Globalization.TextInfo.ANSICodePage%2A> właściwość <xref:System.Globalization.TextInfo> klasy w <xref:System.Globalization> przestrzeni nazw. Możesz uzyskać <xref:System.Globalization.TextInfo.ANSICodePage%2A> , określając `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` Trwa `CharCode` Unicode punktem kodu. Zakres jest niezależne od ustawień strony kultury i kodowej dla bieżącego wątku. Wartości od -32768 do-1 są traktowane takie same wartości zakresu +32768 za pośrednictwem +65535.  
  
 Liczby od 0 do 31 są takie same jak standardowych kodów ASCII nie drukowania. Na przykład `Chr(10)` zwraca znak wysuwu wiersza.  
  
> [!NOTE]
>  `ChrB` We wcześniejszych wersjach programu Visual Basic:: gettotalsize() zwróciło jednobajtowych. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi w Visual Basic i .NET Framework są w formacie Unicode, i `ChrB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Chr` funkcja zwraca znak skojarzony z określonym kodem znaku.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; od -32768 lub &gt; 65535 dla <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablica opartym na określonych kryteriach filtru.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. Jednowymiarowa tablica ciągów, które ma być przeszukiwany.</param>
        <param name="Match">Wymagana. Ciąg do wyszukania.</param>
        <param name="Include">Opcjonalna. <see langword="Boolean" /> Wartość wskazująca, czy należy zwrócić podciągi dołączania lub wykluczania <paramref name="Match" />. Jeśli <paramref name="Include" /> jest <see langword="True" />, <see langword="Filter" /> funkcja zwraca podzbiór elementów tablicy, która zawiera <paramref name="Match" /> jako podciąg. Jeśli <paramref name="Include" /> jest <see langword="False" />, <see langword="Filter" /> funkcja zwraca podzbiór elementów tablicy, która nie zawiera <paramref name="Match" /> jako podciąg.</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa określająca sposób porównywania ciągów. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablica opartym na określonych kryteriach filtru.</summary>
        <returns>Tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablica opartym na określonych kryteriach filtru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie dopasowania `Match` znajdują się w obrębie `Source`, `Filter` funkcja zwraca pustą tablicę. Błąd występuje, jeśli `Source` ustawiono `Nothing` lub nie jest Jednowymiarowa tablica.  
  
 Tablica zwrócona przez `Filter` funkcja zawiera tylko tyle elementów, aby zawierała liczby elementów dopasowany.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|Stała|Opis|  
|`CompareMethod.Binary`|Wykonuje porównanie binarne|  
|`CompareMethod.Text`|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie pokazano użycie `Filter` funkcji.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> jest <see langword="Nothing" /> lub nie jest Jednowymiarowa tablica.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. Jednowymiarowa tablica ciągów, które ma być przeszukiwany.</param>
        <param name="Match">Wymagana. Ciąg do wyszukania.</param>
        <param name="Include">Opcjonalna. <see langword="Boolean" /> Wartość wskazująca, czy należy zwrócić podciągi dołączania lub wykluczania <paramref name="Match" />. Jeśli <paramref name="Include" /> jest <see langword="True" />, <see langword="Filter" /> funkcja zwraca podzbiór elementów tablicy, która zawiera <paramref name="Match" /> jako podciąg. Jeśli <paramref name="Include" /> jest <see langword="False" />, <see langword="Filter" /> funkcja zwraca podzbiór elementów tablicy, która nie zawiera <paramref name="Match" /> jako podciąg.</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa określająca sposób porównywania ciągów. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablica opartym na określonych kryteriach filtru.</summary>
        <returns>Tablicę wartości nieujemnych zawierającą podzbiór <see langword="String" /> tablica opartym na określonych kryteriach filtru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie dopasowania `Match` znajdują się w obrębie `Source`, `Filter` funkcja zwraca pustą tablicę. Błąd występuje, jeśli `Source` ustawiono `Nothing` lub nie jest Jednowymiarowa tablica.  
  
 Tablica zwrócona przez `Filter` funkcja zawiera tylko tyle elementów, aby zawierała liczby elementów dopasowany.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|`CompareMethod.Binary`|Wykonuje porównanie binarne|  
|`CompareMethod.Text`|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie pokazano użycie `Filter` funkcji.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> jest <see langword="Nothing" /> lub nie jest Jednowymiarowa tablica.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Dowolne prawidłowe wyrażenie.</param>
        <param name="Style">Opcjonalna. Nieprawidłowy format nazwana lub zdefiniowanych przez użytkownika <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg sformatowany zgodnie z instrukcjami zawartymi w formacie <see langword="String" /> wyrażenia.</summary>
        <returns>Ciąg sformatowany zgodnie z instrukcjami zawartymi w formacie <see langword="String" /> wyrażenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> Metoda również zapewnia podobne funkcje.  
  
 Formatowania niezlokalizowanej ciągu numerycznego, należy używać zdefiniowanych przez użytkownika formatu liczbowego, aby upewnić się, że masz odpowiedni wygląd.  
  
 Jeśli zostanie podjęta próba sformatowania liczby bez określania `Style`, `Format` funkcja udostępnia funkcjonalność podobną do `Str` funkcji, mimo że uwzględnia ustawienia regionalne. Jednak liczby dodatnie w formacie ciągów za pomocą `Format` funkcji nie zawierają spacje początkowe zarezerwowanej na znak wartości; te konwertowane przy użyciu `Str` funkcja zachować spacje wiodące.  
  
## <a name="different-formats-for-different-numeric-values"></a>Różne formaty dla różnych wartości liczbowych  
 Wyrażenie zdefiniowanych przez użytkownika format liczb może mieć od 1 do trzy sekcje rozdzielone średnikami. Jeśli `Style` argument `Format` funkcji zawiera jeden z wstępnie zdefiniowane formaty liczbowe, dozwolony jest tylko jedną sekcję.  
  
|Jeśli używasz|Jest to wynik|  
|-|-|  
|Tylko jedną sekcję|Wyrażenie formatu odnosi się do wszystkich wartości.|  
|Dwie sekcje|Pierwsza sekcja jest stosowana do wartości dodatnich i zer; druga stosuje się do wartości ujemnych.|  
|Trzy sekcje|Pierwsza sekcja jest stosowana do wartości dodatnich, druga stosuje się do wartości ujemnych, a trzeci jest stosowana do zer.|  
  
 W poniższym przykładzie przedstawiono dwie sekcje: pierwszy definiuje format wartości dodatnich i zer; Druga sekcja definiuje format wartości ujemnych. Ponieważ `Style` argument `Format` funkcja przyjmuje ciąg, jest ujęty w cudzysłów.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Jeśli dodasz je średnikami bez żadnych składników między nimi, drukowany jest Brak sekcji przy użyciu formatu wartości dodatniej. Na przykład, następujący format wyświetla dodatnie i ujemne wartości przy użyciu formatu w pierwszej sekcji i wyświetla `Zero` Jeśli ta wartość wynosi zero.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Wstępnie zdefiniowane formaty liczbowe  
 W poniższej tabeli przedstawiono nazwy wstępnie zdefiniowany format numeryczny. Te mogą być używane przez nazwę, jak `Style` argument `Format` funkcji:  
  
|Nazwa formatu|Opis|  
|-|-|  
|`General Number`, `G`, lub `g`|Wyświetla numer nie separatorem tysięcy.<br /><br /> Na przykład `Format(&H3FA, "g")` zwraca `1018`.|  
|`Currency`, `C`, lub `c`|Wyświetla liczbę z separatorem tysięcy, jeśli jest to stosowne. przedstawia dwóch cyfr z prawej strony separatora dziesiętnego. Dane wyjściowe zależy od ustawień regionalnych systemu.<br /><br /> Na przykład `Format(1234567, "c")` zwraca `$1,234,567.00`.|  
|`Fixed`, `F`, lub `f`|Zawiera co najmniej jedną cyfrę po lewej stronie i dwóch cyfr z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(1234567, "f")` zwraca `1234567.00`.|  
|`Standard`, `N`, lub `n`|Wyświetla liczbę separator tysięcy co najmniej jedną cyfrę po lewej stronie i dwóch cyfr z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(1234567, "n")` zwraca `1,234,567.00`.|  
|`Percent`|Wyświetla liczba pomnożona przez 100 znakiem procentu (%) dołączany natychmiast po prawej stronie; zawsze wyświetla dwóch cyfr z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(0.4744, "Percent")` zwraca `47.44%`.|  
|`P`, lub `p`|Wyświetla liczbę z separatorem tysięczne pomnożona przez 100 znakiem procentu (%) dołączany do prawej i odizolowane w jednym miejscu; zawsze wyświetla dwóch cyfr z prawej strony separatora dziesiętnego.<br /><br /> Na przykład `Format(0.80345, "p")` zwraca `80.35 %`.|  
|`Scientific`|Używa standardowych notacji naukowej, zapewniając dwóch cyfr znaczących.<br /><br /> Na przykład `Format(1234567, "Scientific")` zwraca `1.23E+06`.|  
|`E`, lub `e`|Używa standardowych notacji naukowej, zapewniając sześć cyfr znaczących.<br /><br /> Na przykład `Format(1234567, "e")` zwraca `1.234567e+006`.|  
|`D`, lub `d`|Wyświetla liczbę jako ciąg, który zawiera wartość numeru w formacie dziesiętnym (o podstawie 10). Ta opcja jest obsługiwana w przypadku typów całkowitych (`Byte`, `Short`, `Integer`, `Long`) tylko.<br /><br /> Na przykład `Format(&H7F, "d")` zwraca `127`.|  
|`X`, lub `x`|Wyświetla liczbę jako ciąg, który zawiera wartość numeru w formacie szesnastkowym (podstawa 16). Ta opcja jest obsługiwana w przypadku typów całkowitych (`Byte`, `Short`, `Integer`, `Long`) tylko.<br /><br /> Na przykład `Format(127, "x")` zwraca `7f`.|  
|`Yes/No`|Wyświetla `No` Jeśli liczba jest 0; w przeciwnym razie, wyświetla `Yes`.<br /><br /> Na przykład `Format(0, "Yes/No")` zwraca `No`.|  
|`True/False`|Wyświetla `False` Jeśli liczba jest 0; w przeciwnym razie, wyświetla `True`.<br /><br /> Na przykład `Format(1, "True/False")` zwraca `True`.|  
|`On/Off`|Wyświetla `Off` Jeśli liczba jest 0; w przeciwnym razie, wyświetla `On`.<br /><br /> Na przykład `Format(1, "On/Off")` zwraca `On`.|  
  
### <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Yes/No`, `True/False`, I `On/Off` formaty nie są obsługiwane.  
  
## <a name="user-defined-numeric-formats"></a>Zdefiniowane przez użytkownika formaty liczbowe  
 Poniższa tabela zawiera znaki, których można używać do tworzenia zdefiniowanych przez użytkownika formaty liczbowe. Te mogą służyć do tworzenia `Style` argument `Format` funkcji:  
  
|Znak|Opis|  
|-|-|  
|Brak|Wyświetla numer bez formatowania.|  
|(`0`)|Symbol zastępczy cyfry. Wyświetla cyfrę lub zero. Jeśli wyrażenie zawiera cyfrę w miejscu, w którym występuje zero w ciągu formatu, wyświetlić je obsługiwać. w przeciwnym razie wyświetla wartość zero, w tym miejscu.<br /><br /> Jeśli liczba ma mniej cyfr niż tam są zer (po obu stronach po przecinku) w wyrażeniu formatu zawiera początkowe lub końcowe zera. Jeśli liczba ma więcej cyfr z prawej strony separatora dziesiętnego, niż jest zer z prawej strony separatora dziesiętnego w wyrażeniu format zostanie zaokrąglona do tylu miejsc dziesiętnych, ile jest zer. Jeśli liczba ma więcej cyfr na lewo od separatora dziesiętnego, niż jest zer z lewej strony separatora dziesiętnego w wyrażeniu format wyświetla dodatkowe cyfry bez żadnych modyfikacji.|  
|(`#`)|Symbol zastępczy cyfry. Wyświetla cyfry lub jej brak. Jeśli wyrażenie zawiera cyfrę w miejscu, gdzie `#` znak pojawi się w ciągu formatu wyświetla go; w przeciwnym razie powoduje wyświetlenia żadnych danych w tym miejscu.<br /><br /> Ten symbol działa jak `0` symbol zastępczy cyfry, z tą różnicą, że zera wiodące i końcowe nie są wyświetlane, jeśli liczba ma mniej cyfr niż jest `#` znaki po obu stronach separatora dziesiętnego w wyrażeniu formatu.|  
|(`.`)|Symbol dziesiętny. Dziesiętny symbol zastępczy określa liczbę cyfr wyświetlanych po lewej i prawej strony separatora dziesiętnego. Jeśli wyrażenie formatu zawiera tylko `#` znaków z lewej strony tego symbolu; mniejsze niż 1 zaczynają się od separatora dziesiętnego liczb. Aby wyświetlić z wiodącym zerem, wyświetlane z liczbami ułamkowymi, użyj wartości zero, jako pierwszym symbolem zastępczym cyfry z lewej strony separatora dziesiętnego. W kilku lokalizacjach przecinek jest używany jako separator dziesiętny. Znak, który faktycznie używana jako symbol zastępczy dziesiętną w sformatowane wyniki zależy od formatu liczbowego rozpoznany przez system. W związku z tym należy używać okresu jako dziesiętna symbol zastępczy w swojej formatów, nawet jeśli znajdują się w ustawień regionalnych, który używa przecinek dziesiętny symbol zastępczy. Sformatowany ciąg pojawi się w formacie poprawne dla ustawień regionalnych.|  
|(`%`)|Symbol zastępczy procentu. Mnoży wyrażenia przez 100. Znak procentu (`%`) jest wstawiana w pozycji, gdzie pojawia się on w ciągu formatu.|  
|(`,`)|Separator tysięcy. Separator tysięcy oddziela tysiące od setek w numer, który ma co najmniej czterech miejsc z lewej strony separatora dziesiętnego. Określono separator tysięcy w warstwie standardowa korzystają Jeśli format zawiera separator tysięcy otoczony symbolami zastępczymi cyfr (`0` lub `#`).<br /><br /> Separator tysięcy natychmiast na lewo od separatora dziesiętnego (czy ułamek dziesiętny jest określona) lub po prawej stronie znaku oznacza ciąg "skalować przez podzielenie go przez 1000 i zaokrąglania stosownie do potrzeb." Liczby mniejszej niż 1000, ale większa lub równa 500 są wyświetlane jako `1`i mniejszy niż 500 są wyświetlane jako cyfry `0`. Dwa sąsiadujące separatory tysięcy w tym miejscu skalować o 1 mln i dodatkowy czynnik 1000 dla każdego dodatkowego separatora.<br /><br /> Wiele separatorów w dowolnym miejscu innym niż natychmiast na lewo od separatora dziesiętnego lub po prawej stronie pozycji w ciągu są traktowane jako sposób wykorzystania separator tysięcy. W niektórych lokalizacjach, w okresie jest używany jako separator tysięcy. Rzeczywiste znak używany jako separator tysięcy w sformatowane wyniki, zależy od formatu numeru rozpoznany przez system. W związku z tym należy użyć przecinka jako separator tysięcy w formatach z nawet jeśli znajdują się w ustawień regionalnych, który używa okresu jako separator tysięcy. Sformatowany ciąg pojawi się w formacie poprawne dla ustawień regionalnych.<br /><br /> Na przykład należy wziąć pod uwagę trzy następujące ciągi formatu:<br /><br /> -   `"#,0."`, które separator tysięcy używa do formatowania liczby 100 milionów jako ciąg "100 000 000".<br />-   `"#0,."`, który używa skalowania przez współczynnik tysiąca do formatowania liczby 100 milionów jako ciąg "100000".<br />-   `"#,0,."`, które separator używa tysięcy i skalowanie za tysiąc do formatowania liczby 100 milionów jako ciąg "100 000".|  
|(`:`)|Separator godziny. W kilku lokalizacjach innych znaków może być używany do reprezentowania separator godziny. Separator godziny oddziela godzin, minut i sekund podczas formatowania wartości czasu. Rzeczywiste znak używany jako separator godziny w sformatowane wyniki jest określany przez ustawienia systemu.|  
|(`/`)|Separator daty. W kilku lokalizacjach innych znaków może być używany do reprezentowania separator daty. Separator daty oddziela dzień, miesiąc i rok, gdy wartości daty są sformatowane. Rzeczywiste znak używany jako separator daty w sformatowane wyniki jest określany przez ustawienia systemu.|  
|(`E-``E+``e-``e+`)|Notacja naukowa. Jeśli wyrażenie formatu zawiera co najmniej jeden symbol zastępczy cyfry (`0` lub `#`) po lewej stronie `E-`, `E+`, `e-`, lub `e+`, liczba jest wyświetlana w formacie naukowych i `E` lub `e` jest wstawiany między liczbą a jego wykładnik potęgi. Liczba symboli zastępczych cyfr po lewej stronie określa liczbę cyfr wykładnika. Użyj `E-` lub `e-` umieszcza znak minus obok ujemny wykładnik potęgi. Użyj `E+` lub `e+` umieszcza znak minus obok wykładników i znak plus obok wykładników. Należy również uwzględnić symboli zastępczych cyfr z prawej strony tego symbolu, aby uzyskać prawidłowe formatowanie.|  
|`-` `+` `$` ( )|Znaki literału. Następujące znaki są wyświetlane dokładnie tak jak w ciągu formatu. Aby wyświetlić znak niż te wymienione, należy poprzedzić go ukośnikiem odwrotnym (`\`) i należy ją ująć w znaki podwójnego cudzysłowu ("").|  
|(`\`)|Wyświetla następny znak w ciągu formatu. Aby wyświetlić znak, który ma specjalne znaczenie w jako znak literałowy, należy poprzedzić go znakiem kreski ułamkowej odwróconej (`\`). Ukośnik odwrotny, sama nie jest wyświetlany. Znakiem ukośnika odwrotnego jest taka sama jak otaczający następny znak w cudzysłów. Aby wyświetlić ukośnik odwrotny, użyj dwa ukośniki odwrotne (`\\`).<br /><br /> Przykłady znaków, których nie można wyświetlić jako znaki literału są znaki formatowania daty i godziny, formatowanie (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, i `:`), znaków formatowanie liczbowe (`#`, `0`, `%`, `E`, `e`, przecinkami i okres) i formatowanie ciągów znaków (`@`, `&`, `<`, `>`, i `!`).|  
|(`"``ABC``"`)|Wyświetla ciąg w podwójnym cudzysłowie (""). Aby dołączyć ciąg argumentu styl z kodem, należy użyć `Chr(34)` tekstu, należy ująć (`34` jest kod znaku cudzysłowu (")).|  
  
### <a name="legacy-code-example"></a>Przykład starszego kodu  
 Poniższa tabela zawiera niektóre przykładowe wyrażenia dla liczb. (Wszystkie te przykłady zakładać, że ustawienia regionalne Twojego systemu jest angielski-Stany Zjednoczone) Pierwsza kolumna zawiera ciągi formatu dla `Style` argument `Format` funkcji; inne kolumny, które zawierają dane wyjściowe, jeśli sformatowanych danych ma wartość podana w nagłówkach kolumn.  
  
|Format (`Style`)|"5" w formacie|"-5" w formacie|"0.5" w formacie|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Wstępnie zdefiniowane formaty daty/godziny  
 Poniższa tabela zawiera wstępnie zdefiniowane daty i czasu nazwy formatu. Te mogą być używane przez nazwę jako argument stylu `Format` funkcji:  
  
|Nazwa formatu|Opis|  
|-|-|  
|`General Date`, lub `G`|Wyświetla datę i/lub godzinę. Na przykład `3/12/2008 11:07:31 AM`. Wyświetlanie dat jest określany przez bieżącą wartość kultury w aplikacji.|  
|`Long Date`, `Medium Date`, lub `D`|Wyświetla datę zgodnie z bieżącą kulturą formatu daty długiej. Na przykład `Wednesday, March 12, 2008`.|  
|`Short Date`, lub `d`|Wyświetla datę przy użyciu formatu daty krótkiej dla bieżącej kultury. Na przykład `3/12/2008`.<br /><br /> `d` Znak Wyświetla dzień w formacie daty zdefiniowanych przez użytkownika.|  
|`Long Time`, `Medium Time`, lub `T`|Wyświetla godzinę w formacie bieżącej kultury długi czas; zazwyczaj zawiera godziny, minuty, sekundy. Na przykład `11:07:31 AM`.|  
|`Short Time` lub `t`|Wyświetla godzinę przy użyciu bieżącej kultury krótki format daty. Na przykład `11:07 AM`.<br /><br /> `t` Znak Wyświetla `AM` lub `PM` wartości dla ustawień regionalnych, korzystających z zegara 12-godzinny format czasu zdefiniowanych przez użytkownika.|  
|`f`|Wyświetla daty długiej i godziny krótkiej zgodnie z bieżącą kulturą formatu. Na przykład `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Wyświetla daty długiej i długi czas, zgodnie z bieżącą kulturą formatu. Na przykład `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Wyświetla daty krótkiej i godziny krótkiej zgodnie z bieżącą kulturą formatu. Na przykład `3/12/2008 11:07 AM`.|  
|`M`, `m`|Wyświetla miesiąc i dzień daty. Na przykład `March 12`.<br /><br /> `M` Znak Wyświetla miesiąc w formacie daty zdefiniowanych przez użytkownika. `m` Znak Wyświetla minuty w formacie czasu zdefiniowanych przez użytkownika.|  
|`R`, `r`|Formatuje datę zgodnie z opisem w <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> właściwości. Na przykład `Wed, 12 Mar 2008 11:07:31 GMT`. Sformatowanym ciągu daty nie może dopasować wartość daty i godziny. Należy dostosować wartość daty/godziny do czasu GMT przed wywołaniem `Format` funkcji.|  
|`s`|Formatuje datę i godzinę jako indeks sortowania. Na przykład `2008-03-12T11:07:31`.<br /><br /> `s` Znak Wyświetla sekundy w formacie czasu zdefiniowanych przez użytkownika.|  
|`u`|Formatuje datę i godzinę jako indeks sortowania GMT. Na przykład `2008-03-12 11:07:31Z`.|  
|`U`|Formaty daty i czasu z daty długiej i długi czas według czasu GMT. Na przykład `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Formatuje datę w formacie rok i miesiąc. Na przykład `March, 2008`.<br /><br /> `Y` i `y` znaków wyświetlać rok w formacie daty zdefiniowanych przez użytkownika.|  
  
 Aby uzyskać więcej informacji na temat bieżącej kultury informacje o aplikacji, zobacz [jak wpływa na ciągi kultury w języku Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Zdefiniowane przez użytkownika formaty daty/godziny  
 W poniższej tabeli przedstawiono znaki, których można użyć do utworzenia formaty daty/godziny zdefiniowanych przez użytkownika. W odróżnieniu od we wcześniejszych wersjach programu Visual Basic, te znaki format jest rozróżniana wielkość liter.  
  
|Znak|Opis|  
|-|-|  
|(`:`)|Separator godziny. W kilku lokalizacjach innych znaków może być używany do reprezentowania separator godziny. Separator godziny oddziela godzin, minut i sekund podczas formatowania wartości czasu. Rzeczywiste znak, który jest używany jako separator godziny w sformatowane wyniki jest określany przez bieżącą wartość kultury w aplikacji.|  
|(`/`)|Separator daty. W kilku lokalizacjach innych znaków może być używany do reprezentowania separator daty. Separator daty oddziela dzień, miesiąc i rok, gdy wartości daty są sformatowane. Rzeczywiste znak, który jest używany jako separator daty w sformatowane wyniki jest określany przez bieżącą kulturę Twojej aplikacji.|  
|(`%`)|Służy do wskazania, że następujący znak powinny być odczytywane jako format jedną literę, bez względu na wszystkie końcowe litery. Umożliwia również potwierdzić, że format pojedynczej litery jest przeczytane jako format zdefiniowanych przez użytkownika. Zobacz poniżej, aby uzyskać więcej informacji.|  
|`d`|Wyświetla dzień jako liczbę bez wiodącego zera (na przykład `1`). Użyj `%d` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`dd`|Wyświetla dzień jako liczbę z wiodącym zerem (na przykład `01`).|  
|`ddd`|Wyświetla dzień jako skrót (na przykład `Sun`).|  
|`dddd`|Wyświetla dzień jako pełna nazwa (na przykład `Sunday`).|  
|`M`|Wyświetla miesiąc jako liczbę bez wiodącego zera (na przykład stycznia jest reprezentowany jako `1`). Użyj `%M` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`MM`|Wyświetla miesiąc jako liczbę z wiodącym zerem (na przykład `01/12/01`).|  
|`MMM`|Wyświetla miesiąc jako skrót (na przykład `Jan`).|  
|`MMMM`|Wyświetla miesiąc jako pełną nazwę miesiąca (na przykład `January`).|  
|`gg`|Wyświetla ciąg okres/era (na przykład `A.D.`).|  
|`h`|Wyświetla godzinę jako liczbę bez początkowych zer, za pomocą zegara 12-godzinny (na przykład `1:15:15 PM`). Użyj `%h` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`hh`|Wyświetla godzinę jako liczbę z zerami, za pomocą zegara 12-godzinny (na przykład `01:15:15 PM`).|  
|`H`|Wyświetla godzinę jako liczbę bez początkowych zer, za pomocą zegara 24-godzinny (na przykład `1:15:15`). Użyj `%H` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`HH`|Wyświetla godzinę jako liczbę z wiodącymi zerami w 24-godzinnym (na przykład `01:15:15`).|  
|`m`|Wyświetla minuty jako liczbę bez zer wiodących (na przykład `12:1:15`). Użyj `%m` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`mm`|Wyświetla minuty jako liczbę zerami wiodącymi (na przykład `12:01:15`).|  
|`s`|Wyświetla sekundy jako liczbę bez zer wiodących (na przykład `12:15:5`). Użyj `%s` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`ss`|Wyświetla sekundy jako liczbę zerami wiodącymi (na przykład `12:15:05`).|  
|`f`|Wyświetla ułamki sekundy. Na przykład `ff` przedstawia liczbę setnych części sekundy, natomiast `ffff` Wyświetla dziesięciotysięcznych części sekundy. Możesz użyć maksymalnie siedem `f` symbole w formacie sieci zdefiniowanej przez użytkownika. Użyj `%f` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`t`|Używany format 12-godzinny i wyświetla wielką `A` godziny przed południem; Wyświetla wielką `P` dla dowolnego godzin między południem oraz 11:59 PM Użyj `%t` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`tt`|Dla ustawień regionalnych, które używają zegara 12-godzinny Wyświetla wielką `AM` o dowolnym godzin przed południem; Wyświetla wielką `PM` przy użyciu dowolnej godzin między południem oraz 11:59 PM<br /><br /> Dla ustawień regionalnych, które używają zegara 24-godzinnego powoduje wyświetlenia żadnych danych.|  
|`y`|Wyświetla numer roku (0 – 9), bez zer wiodących. Użyj `%y` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`yy`|Wyświetla rok w formacie liczbowym dwóch cyfr z wiodącym zerem, jeśli ma to zastosowanie.|  
|`yyy`|Wyświetla rok w formacie liczbowym czterech cyfr.|  
|`yyyy`|Wyświetla rok w formacie liczbowym czterech cyfr.|  
|`z`|Przedstawia przesunięcie strefy czasowej bez zera wiodącego (na przykład `-8`). Użyj `%z` Jeśli jest to tylko znak w zdefiniowanych przez użytkownika formatu liczbowego.|  
|`zz`|Przedstawia przesunięcie strefy czasowej z zerem wiodącym (na przykład `-08`)|  
|`zzz`|Przedstawia przesunięcie strefy czasowej pełną (na przykład `-08:00`)|  
  
### <a name="legacy-code-example"></a>Przykład starszego kodu  
 Poniżej przedstawiono przykłady zdefiniowanych przez użytkownika formaty daty i godziny dla `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Format|Wyświetla|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 Minimalny czas rozwiązania dla urządzenia jest określana przez producenta urządzenia. Jeśli czas rozdzielczość urządzenia jest wystarczająco, zgrubnym `f` formatem znaku zwraca wartość 0, gdy uruchamiane na tym urządzeniu.  
  
   
  
## Examples  
 Ten przykład pokazuje różne przypadki użycia `Format` funkcji do formatowania wartości przy użyciu zarówno `String` formatów i formatów zdefiniowanych przez użytkownika. Dla separatora daty (`/`), separatora godziny (`:`) oraz wskaźników AM/PM (`t` i `tt`), rzeczywiste formatowanie wyniku wyświetlanego w systemie zależy od ustawień regionalnych w kodzie. Gdy godziny i daty są wyświetlane w środowisku programistycznym, krótki format czasu i krótki format daty kodu są używane.  
  
> [!NOTE]
>  Dla ustawień regionalnych, które używają zegara 24-godzinnego, wskaźniki AM/PM (`t` i `tt`) nie będą niczego wyświetlać.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Wyrażenie do sformatowania.</param>
        <param name="NumDigitsAfterDecimal">Opcjonalna. Wartość liczbowa, wskazujący, ile miejsca są wyświetlane z prawej strony separatora dziesiętnego. Wartość domyślna to -1, co oznacza, że są używane ustawienia regionalne tego komputera.</param>
        <param name="IncludeLeadingDigit">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> wyliczenie, która wskazuje, czy zerem nie będą wyświetlane wartości ułamkowe. Wartości można znaleźć w temacie "Uwagi".</param>
        <param name="UseParensForNegativeNumbers">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> wyliczenie, która wskazuje, czy należy umieścić wartości ujemne w nawiasach. Wartości można znaleźć w temacie "Uwagi".</param>
        <param name="GroupDigits">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> wyliczenie, która wskazuje, czy numery są grupowane, przy użyciu ogranicznika grupy określony w ustawieniach regionalnych komputera. Wartości można znaleźć w temacie "Uwagi".</param>
        <summary>Zwraca wyrażenie sformatowane jako wartość walutowa używająca symbolu waluty zdefiniowanego w Panelu sterowania systemu.</summary>
        <returns>Wyrażenie sformatowane jako wartość walutowa używająca symbolu waluty zdefiniowanego w Panelu sterowania systemu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy w przypadku pominięcia jednego lub więcej argumentów opcjonalnych, użyte zostaną pasujących wartości ustawienia regionalne tego komputera.  
  
 Położenie symbolu waluty względem wartości waluty jest określany przez ustawienia regionalne systemu.  
  
> [!NOTE]
>  Wszystkie informacje dotyczące ustawień, pochodzi z ustawień regionalnych aplikacji. Domyślnie, który będzie stanowić regionalnymi w Panelu sterowania. Jednak może zostać zmieniona programowo przy użyciu programu .NET Framework, z wyjątkiem zerem, które pochodzą z `Number` kartę.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, I `GroupDigits` argumenty przyjmować następujące wartości wyliczenia trzy stany.  
  
|Wartość|Opis|  
|-|-|  
|`TriState.True`|Prawda|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Ustawienia regionalne tego komputera|  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie `FormatCurrency` funkcji.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Liczba cyfr po punkcie dziesiętnym jest większa niż 99.</exception>
        <exception cref="T:System.InvalidCastException">Typ nie jest liczbą.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Date" /> Wyrażenie do sformatowania.</param>
        <param name="NamedFormat">Opcjonalna. Wartość liczbowa, która wskazuje na format daty/godziny używana. W przypadku pominięcia <see langword="DateFormat.GeneralDate" /> jest używany.</param>
        <summary>Zwraca wyrażenie ciągu reprezentujące wartość daty/godziny.</summary>
        <returns>Ciąg reprezentujący wartość daty/godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` — Typ danych zawsze zawiera informacje o daty i godziny. W celu konwersji typów, Visual Basic traktuje 1/1/1 (1 stycznia 1 rok) jako neutralne wartość daty i 00:00:00 (północ) jako neutralne wartość po raz. Jeśli możesz sformatować `Date` wartość jako ciąg daty/godziny `FormatDateTime` nie zawiera neutralne wartości w ciągu wynikowym. Na przykład, jeśli konwersja #1/1/0001 9:30:00 # na ciąg, a wynik jest "9:30:00 AM"; informacje o dacie jest pomijane. Informacje o dacie jest jednak nadal znajdują się w oryginalnym `Date` wartości i można odzyskać za pomocą funkcji takich jak `DatePart`.  
  
> [!NOTE]
>  W przypadku przekazania `Expression` argument jako `String` literału, `FormatDateTime` zinterpretuje ją zgodnie z opisem w <xref:System.Globalization.CultureInfo.CurrentCulture%2A> ustawienie aplikacji. Jednak w przypadku przekazania go jako `Date` literału, użyj formatu #mm/dd/rrrr #, ponieważ `FormatDateTime` zawsze interpretuje `Date` literału zgodnie z kulturą języka angielskiego (US). Jest to konieczne, ponieważ, jeśli aplikacja jest rozwinięte i kodowane za pomocą `Date` literały z jednej kultury, ale następnie jest wykonywany na platformie z inną kulturę `Date` literały mogła zostać przeanalizowana niepoprawnie.  
  
 `NamedFormat` Argument ma następujące ustawienia.  
  
|Stała|Opis|  
|-|-|  
|`DateFormat.GeneralDate`|Wyświetla datę i/lub godzinę. Część daty są wyświetlane jako daty krótkiej. Jeśli występuje część czasu, należy go wyświetlić, jak długo. Jeśli jest obecny, Wyświetl obie części.|  
|`DateFormat.LongDate`|Wyświetlanie daty w formacie daty długiej określonego w ustawieniach regionalnych Twojego komputera.|  
|`DateFormat.ShortDate`|Wyświetlanie daty w formacie daty krótkiej określonego w ustawieniach regionalnych Twojego komputera.|  
|`DateFormat.LongTime`|Wyświetla godzinę w formacie czasu określonego w ustawieniach regionalnych Twojego komputera.|  
|`DateFormat.ShortTime`|Wyświetla godzinę w formacie 24-godzinny (gg: mm).|  
  
   
  
## Examples  
 W tym przykładzie pokazano użycie `FormatDateTime` funkcji.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NamedFormat" /> ustawienie jest nieprawidłowe.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Wyrażenie do sformatowania.</param>
        <param name="NumDigitsAfterDecimal">Opcjonalna. Wartość liczbowa, wskazujący, ile miejsca są wyświetlane z prawej strony separatora dziesiętnego. Wartość domyślna to -1, co oznacza, że są używane ustawienia regionalne tego komputera.</param>
        <param name="IncludeLeadingDigit">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy cyfry 0 jest wyświetlany w przypadku wartości ułamkowe. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="UseParensForNegativeNumbers">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy można umieścić wartości ujemne w nawiasach. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="GroupDigits">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy numery są grupowane, przy użyciu ogranicznika grupy określony w ustawieniach regionalnych. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca wyrażenie sformatowane do postaci liczby.</summary>
        <returns>Wyrażenie sformatowane do postaci liczby.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli pominięto jeden lub więcej argumentów opcjonalnych wartości pominiętych argumentów są zapewniane przez ustawienia regionalne.  
  
> [!NOTE]
>  Wszystkie informacje dotyczące ustawień, pochodzi z ustawień regionalnych aplikacji. Domyślnie, który będzie stanowić regionalnymi w Panelu sterowania. Jednak może zostać zmieniona programowo przy użyciu programu .NET Framework.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, I `GroupDigits` argumenty mają następujące ustawienia.  
  
|Stała|Opis|  
|-|-|  
|`TriState.True`|Prawda|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Ustawienia regionalne tego komputera|  
  
   
  
## Examples  
 W tym przykładzie przedstawiono `FormatNumber` funkcji.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ nie jest liczbą.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Wyrażenie do sformatowania.</param>
        <param name="NumDigitsAfterDecimal">Opcjonalna. Wartość liczbowa, wskazujący, ile miejsc z prawej strony separatora dziesiętnego są wyświetlane. Wartość domyślna to -1, co oznacza, że ustawienia regionalne są używane.</param>
        <param name="IncludeLeadingDigit">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, wskazującą, czy zerem wyświetla wartości ułamkowe. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="UseParensForNegativeNumbers">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy należy umieścić wartości ujemne w nawiasach. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <param name="GroupDigits">Opcjonalna. <see cref="T:Microsoft.VisualBasic.TriState" /> Stała, która wskazuje, czy numery są grupowane, przy użyciu ogranicznika grupy określony w ustawieniach regionalnych. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca wyrażenie sformatowane jako wartość procentowa (tzn. pomnożona przez 100) ze znakiem % na końcu.</summary>
        <returns>Wyrażenie sformatowane jako wartość procentowa (tzn. pomnożona przez 100) ze znakiem % na końcu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli pominięto jeden lub więcej argumentów opcjonalnych wartości pominiętych argumentów są zapewniane przez ustawienia regionalne.  
  
> [!NOTE]
>  Wszystkie informacje dotyczące ustawień, pochodzi z ustawień regionalnych aplikacji. Domyślnie, który będzie stanowić regionalnymi w Panelu sterowania. Jednak może zostać zmieniona programowo przy użyciu programu .NET Framework.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, I `GroupDigits` argumenty mają następujące ustawienia.  
  
|Stała|Opis|  
|-|-|  
|`TriState.True`|Prawda|  
|`TriState.False`|False|  
|`TriState.Default`|Ustawienia regionalne tego komputera|  
  
   
  
## Examples  
 Ten przykład ilustruje użycie `FormatPercent` funkcji.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ nie jest liczbą.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Dowolne, prawidłowe <see langword="String" /> wyrażenia.</param>
        <param name="Index">Wymagana. <see langword="Integer" /> wyrażenie. Indeks (w oparciu o 1), znaku w <paramref name="str" /> ma zostać zwrócona.</param>
        <summary>Zwraca <see langword="Char" /> reprezentującą znak z określonym indeksem podany ciąg.</summary>
        <returns><see langword="Char" /> wartość reprezentująca znak z określonym indeksem podany ciąg.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Index` jest mniejsza niż 1 lub większa niż indeks ostatniego znaku w `str`, `ArgumentException` zgłaszany.  
  
   
  
## Examples  
 W tym przykładzie pokazano, jak używać `GetChar` funkcja zwraca znak z określonym indeksem `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" /> jest <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, lub <paramref name="Index" /> jest większa niż indeks ostatniego znaku <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczbę całkowitą określającą początkowe położenie pierwszego wystąpienia jednego ciągu w innym.  Liczba całkowita jest indeksu liczonego od jednego, jeśli zostanie znalezione dopasowanie.  Jeśli nie zostanie znalezione dopasowanie, funkcja zwraca wartość zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Wymagana. <see langword="String" /> wyrażenie wyszukiwany.</param>
        <param name="String2">Wymagana. <see langword="String" /> wyrażenie zebrała.</param>
        <param name="Compare">Opcjonalna. Określa typ porównania ciągów. Jeśli <paramref name="Compare" /> zostanie pominięty, <see langword="Option Compare" /> ustawienie określa typ porównania.</param>
        <summary>Zwraca liczbę całkowitą określającą początkowe położenie pierwszego wystąpienia jednego ciągu w innym.</summary>
        <returns><list type="table">
            <item>
              <term> IF 
 </term>
              <description> InStr zwraca 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> ma zerową długość lub <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> ma zerową długość lub <see langword="Nothing" /></term>
              <description> Pozycja początkowa wyszukiwania, która domyślnie pozycji pierwszego znaku.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> Nie można odnaleźć 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> można znaleźć w <paramref name="String1" /></term>
              <description> Pozycja, gdzie rozpoczyna się dopasowania 
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj `InStr` funkcja jest używana podczas analizowania ciągów.  
  
> [!NOTE]
>  `InStrB` Funkcji w poprzednich wersjach programu Visual Basic zwraca liczbę bajtów, a nie w pozycji znaku. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi programu Visual Basic 2005 są w formacie Unicode, i `InStrB` nie jest już obsługiwana.  
  
 `Compare` Ustawienia argumentu są:  
  
|Stała|Wartość|Opis|  
|-|-|-|  
|`Binary`|0|Wykonuje porównanie binarne|  
|`Text`|1|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie użyto `InStr` funkcję, aby wrócić położenie pierwszego wystąpienia jednego ciągu w innym.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Opcjonalna. Wyrażenie liczbowe, która ustawia początkową każdego wyszukiwania. W przypadku pominięcia, wyszukiwanie rozpoczyna się od pierwszego pozycji znaku. Indeks początkowy jest oparty na 1.</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">Wymagana. <see langword="String" /> wyrażenie wyszukiwany.</param>
        <param name="String2">Wymagana. <see langword="String" /> wyrażenie zebrała.</param>
        <param name="Compare">Opcjonalna. Określa typ porównania ciągów. Jeśli <paramref name="Compare" /> zostanie pominięty, <see langword="Option Compare" /> ustawienie określa typ porównania.</param>
        <summary>Zwraca liczbę całkowitą określającą początkowe położenie pierwszego wystąpienia jednego ciągu w innym.</summary>
        <returns><list type="table">
            <item>
              <term> IF 
 </term>
              <description> InStr zwraca 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> ma zerową długość lub <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> ma zerową długość lub <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> Nie można odnaleźć 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> można znaleźć w <paramref name="String1" /></term>
              <description> Pozycja, gdzie rozpoczyna się dopasowania 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; Długość <paramref name="String1" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj `InStr` funkcja jest używana podczas analizowania ciągów.  
  
> [!NOTE]
>  `InStrB` Funkcji w poprzednich wersjach programu Visual Basic zwraca liczbę bajtów, a nie w pozycji znaku. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi programu Visual Basic 2005 są w formacie Unicode, i `InStrB` nie jest już obsługiwana.  
  
 `Compare` Ustawienia argumentu są:  
  
|Stała|Wartość|Opis|  
|-|-|-|  
|`Binary`|0|Wykonuje porównanie binarne|  
|`Text`|1|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie użyto `InStr` funkcję, aby wrócić położenie pierwszego wystąpienia jednego ciągu w innym.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Wymagana. Wyszukiwany wyrażenia ciągu.</param>
        <param name="StringMatch">Wymagana. Wyszukane wyrażenia ciągu.</param>
        <param name="Start">Opcjonalna. Wyrażenie liczbowe, ustawienie pozycja początkowa liczonego od jednego dla każdej wyszukiwania, zaczynając od lewej strony ciągu. Jeśli <paramref name="Start" /> zostanie pominięty, zostanie użyta wartość -1, co oznacza, wyszukiwanie rozpoczyna się od ostatniej pozycji znaku. Wyszukiwanie następnie rozpoczynające się od prawej do lewej.</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa określająca porównania do użycia podczas podciągów. Jeśli argument jest pominięty, wykonywane jest porównanie binarne. Wartości można znaleźć w temacie ustawień.</param>
        <summary>Zwraca pozycję pierwszego wystąpienia jednego ciągu w innym, licząc od prawej strony ciągu.</summary>
        <returns><list type="table">
            <item>
              <term> IF 
 </term>
              <description> Zwraca InStrRev 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> jest o zerowej długości 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> jest o zerowej długości 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> Nie można odnaleźć 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> można znaleźć w <paramref name="StringCheck" /></term>
              <description> Pozycja, w którym zostanie znalezione dopasowanie pierwszej, począwszy od prawej strony ciągu.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> jest większa niż długość argumentu <paramref name="StringMatch" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że składnia `InStrRev` funkcja nie jest taka sama jak składnia `InStr` funkcji.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|`Binary`|Wykonuje porównanie binarne.|  
|`Text`|Wykonuje porównanie tekstowe.|  
  
   
  
## Examples  
 W tym przykładzie pokazano użycie `InStrRev` funkcji.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 lub <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Wymagana. Jednowymiarowa tablica zawierająca podciągi, które mają zostać połączone.</param>
        <param name="Delimiter">Opcjonalna. Dowolny ciąg używany do rozdzielania podciągów w zwracanym ciągu. W przypadku pominięcia znaku spacji ("") jest używany. Jeśli <paramref name="Delimiter" /> jest ciągiem o zerowej długości ("") lub <see langword="Nothing" />, wszystkie elementy na liście są łączone nie ogranicznikami.</param>
        <summary>Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</summary>
        <returns>Ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Występuje parzystość między `Join` i `Split` funkcji. `Join` Funkcja przyjmuje tablicę ciągów i dołączania ich przy użyciu ciągu ogranicznika, aby zwrócić pojedynczy ciąg. `Split` Funkcja przyjmuje ciąg i oddziela go na ogranicznika, aby zwracało tablicę ciągów. Jednak Najważniejszą różnicą jest to, że `Join` można ciągów się dowolnym ciągiem ogranicznik `Split` jedynie rozdzielić ciągów za pomocą pojedynczego znaku ogranicznika.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia `Join` funkcję, aby utworzyć listę z kilku ciągów znaków.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> nie jest jedną wymiarów.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Wymagana. Jednowymiarowa tablica zawierająca podciągi, które mają zostać połączone.</param>
        <param name="Delimiter">Opcjonalna. Dowolny ciąg używany do rozdzielania podciągów w zwracanym ciągu. W przypadku pominięcia znaku spacji ("") jest używany. Jeśli <paramref name="Delimiter" /> jest ciągiem o zerowej długości ("") lub <see langword="Nothing" />, wszystkie elementy na liście są łączone nie ogranicznikami.</param>
        <summary>Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</summary>
        <returns>Ciąg powstały z połączenia kilku podciągów zawartych w tablicy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Występuje parzystość między `Join` i `Split` funkcji. `Join` Funkcja przyjmuje tablicę ciągów i dołączania ich przy użyciu ciągu ogranicznika, aby zwrócić pojedynczy ciąg. `Split` Funkcja przyjmuje ciąg i oddziela go na ogranicznika, aby zwracało tablicę ciągów. Jednak Najważniejszą różnicą jest to, że `Join` można ciągów się dowolnym ciągiem ogranicznik `Split` jedynie rozdzielić ciągów za pomocą pojedynczego znaku ogranicznika.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia `Join` funkcję, aby utworzyć listę z kilku ciągów znaków.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> nie jest jedną wymiarów.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg lub znak przekonwertowany na małe litery.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagana. Dowolne, prawidłowe <see langword="String" /> lub <see langword="Char" /> wyrażenia.</param>
        <summary>Zwraca ciąg lub znak przekonwertowany na małe litery.</summary>
        <returns>Ciąg lub znak przekonwertowany na małe litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko wielkie litery są konwertowane na małe litery; wszystkie małe litery oraz znaki niebędące znakami pozostają niezmienione.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące bezpieczeństwa, w oparciu o wyniki porównania lub operację zmiany sprawy, a następnie operacja powinna użyć <xref:System.String.Compare%2A?displayProperty=nameWithType> metody i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak wpływa na ciągi kultury w języku Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 W tym przykładzie użyto `LCase` funkcja zwraca wersję ciągu.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagana. Dowolne, prawidłowe <see langword="String" /> lub <see langword="Char" /> wyrażenia.</param>
        <summary>Zwraca ciąg lub znak przekonwertowany na małe litery.</summary>
        <returns>Ciąg lub znak przekonwertowany na małe litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko wielkie litery są konwertowane na małe litery; wszystkie małe litery oraz znaki niebędące znakami pozostają niezmienione.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące bezpieczeństwa, w oparciu o wyniki porównania lub operację zmiany sprawy, a następnie operacja powinna użyć <xref:System.String.Compare%2A?displayProperty=nameWithType> metody i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak wpływa na ciągi kultury w języku Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 W tym przykładzie użyto `LCase` funkcja zwraca wersję ciągu.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, z którego są zwracane skrajnie po lewej stronie znaków.</param>
        <param name="Length">Wymagana. <see langword="Integer" /> wyrażenie. Wyrażenie liczbowe, wskazujący, ile znaków do zwrócenia. Jeśli jest to 0, ciąg o zerowej długości ("") jest zwracany. Jeśli jest większa lub równa liczbie znaków w <paramref name="str" />, zwracany jest cały ciąg.</param>
        <summary>Zwraca ciąg zawierający określoną liczbę znaków z lewej strony ciągu.</summary>
        <returns>Ciąg zawierający określoną liczbę znaków z lewej strony ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, użyj `Len` funkcji. Jeśli używane w aplikacji Windows Forms lub inne klasy, która ma `Left` właściwość, należy całkowicie kwalifikujesz się do funkcji z `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  `LeftB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg, w bajtach, a nie znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LeftB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W tym przykładzie pokazano użycie `Left` funkcja zwraca podciąg z danym `String`. W klasie, która ma `Left` właściwość może być konieczne do pełnej kwalifikacji `Left` funkcji.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Dowolne, prawidłowe <see langword="String" /> nazwa zmiennej lub wyrażenia. Jeśli <paramref name="Expression" /> typu <see langword="Object" />, <see langword="Len" /> funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez <see langword="FilePut" /> funkcji.</param>
        <summary>Zwraca liczbę całkowitą zawierającą liczbę znaków w ciągu lub liczbę nominalną bajtów potrzebną do przechowania zmiennej.</summary>
        <returns>Liczba całkowita zawierająca albo liczba znaków w ciągu lub liczbę nominalną bajtów wymaganych do przechowania zmiennej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z typami zdefiniowanymi przez użytkownika i `Object` zmiennych, `Len` funkcja zwróci rozmiar, jaki będą zapisywane w pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość ciągu. Jeśli `Object` zawiera inny typ, to zostanie zwrócona rozmiar obiektu, ponieważ zostanie zapisany w pliku przez `FilePut` funkcji.  
  
 `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazywać wielkość ciągu w bajtach podczas zapisywania na dysku. `Len` Używa funkcji `VBFixedString` atrybutu, jeśli to możliwe, podczas określania rozmiaru `Object` zmiennych.  
  
> [!NOTE]
>  `Len` Funkcji może nie być możliwe ustalenie rzeczywista liczba bajtów pamięci wymaganej w przypadku użycia z ciągami o zmiennej długości w typach danych zdefiniowanych przez użytkownika.  
  
> [!NOTE]
>  `LenB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciągu niż znaki. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.  
  
## <a name="smart-device-developer-notes"></a>Uwagi dla deweloperów urządzeń inteligentnych  
 `Len` Funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, to zostanie zwrócona długość `String`. Jeśli parametr ma wartość NULL `Object` odwołania, funkcja zwraca wartość zero. Jeśli `Object` zawiera inny typ, jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W tym przykładzie użyto `Len` aby wrócić liczbę znaków w ciągu.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. <see langword="String" /> wyrażenie. Nazwa zmiennej ciągu.</param>
        <param name="Length">Wymagana. <see langword="Integer" /> wyrażenie. Długość zwracanego ciągu.</param>
        <summary>Zwraca ciąg wyrównany do lewej zawierający podany ciąg skorygowany do zadanej długości.</summary>
        <returns>Ciąg wyrównany do lewej zawierający podany ciąg skorygowany do zadanej długości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określony ciąg jest dłuższy niż określony czas, zwracanego ciągu jest obcinana do określonej długości. Jeśli określony ciąg jest krótszy niż określonej długości, miejsca do magazynowania są dodawane do prawego końca zwracanego ciągu, aby utworzyć odpowiednią długość.  
  
   
  
## Examples  
 W tym przykładzie pokazano użycie `LSet` funkcji.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Skuteczne stosowanie typów danych</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Dowolne, prawidłowe <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg zawierającą kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie spacji wiodących albo końcowych (<see langword="Trim" />).</summary>
        <returns>Ciąg zawierający kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie spacji wiodących albo końcowych (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, I `Trim` funkcje Usuń spacje od strony końców ciągów.  
  
   
  
## Examples  
 W tym przykładzie użyto `LTrim` funkcję, aby odjąć wiodące spacje oraz `RTrim` funkcji końcowe spacje od zmiennej ciągu. Używa ona `Trim` funkcję, aby rozłożyć oba rodzaje miejsca do magazynowania.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg, który zawiera znaki z określonego ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, z którego są zwracane znaków.</param>
        <param name="Start">Wymagana. <see langword="Integer" /> wyrażenie. Pozycja początkowa zwracanych znaków. Jeśli <paramref name="Start" /> jest większa niż liczba znaków w <paramref name="str" />, <see langword="Mid" /> funkcja zwraca ciąg o zerowej długości (""). <paramref name="Start" /> jest oparty na jeden.</param>
        <summary>Zwraca ciąg zawierający wszystkie znaki od określonej pozycji w ciągu.</summary>
        <returns>Ciąg, który składa się ze wszystkich znaków, zaczynając od określonej pozycji w ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, użyj `Len` funkcji.  
  
 Visual Basic ma `Mid` funkcji i `Mid` instrukcji. Te elementy jednocześnie działać na określoną liczbę znaków w ciągu, ale `Mid` funkcja zwraca znaki podczas `Mid` instrukcji zastępuje znaki. Aby uzyskać więcej informacji, zobacz [Mid — instrukcja](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg, w bajtach, a nie znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi języka Visual Basic są w formacie Unicode, i `MidB` nie jest już obsługiwana.  
  
   
  
## Examples  
 Ostatni wiersz, w tym przykładzie używa tego przeciążenia `Mid` funkcja zwraca piąty do kolejnych znaków z ciągu.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 lub <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, z którego są zwracane znaków.</param>
        <param name="Start">Wymagana. <see langword="Integer" /> wyrażenie. Pozycja początkowa zwracanych znaków. Jeśli <paramref name="Start" /> jest większa niż liczba znaków w <paramref name="str" />, <see langword="Mid" /> funkcja zwraca ciąg o zerowej długości (""). <paramref name="Start" /> jeden opiera się.</param>
        <param name="Length">Opcjonalna. <see langword="Integer" /> wyrażenie. Liczba znaków do zwrócenia. W przypadku pominięcia, lub czy są mniej niż <paramref name="Length" /> znaków w tekście (w tym znak na pozycji <paramref name="Start" />), zwracane są wszystkie znaki od pozycji początkowej na końcu ciągu.</param>
        <summary>Zwraca ciąg zawierający określoną liczbę znaków, zaczynając od określonej pozycji w ciągu.</summary>
        <returns>Ciąg, który składa się z określoną liczbę znaków, zaczynając od określonej pozycji w ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, użyj `Len` funkcji.  
  
 Visual Basic ma `Mid` funkcji i `Mid` instrukcji. Te elementy jednocześnie działać na określoną liczbę znaków w ciągu, ale `Mid` funkcja zwraca znaki podczas `Mid` instrukcji zastępuje znaki. Aby uzyskać więcej informacji, zobacz [Mid — instrukcja](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg, w bajtach, a nie znaków. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie ciągi języka Visual Basic są w formacie Unicode, i `MidB` nie jest już obsługiwana.  
  
   
  
## Examples  
 Pierwsze dwa `Mid` funkcje w tym przykładzie zwraca określoną liczbę znaków z ciągu, począwszy od podanej pozycji. (Pokazano ostatniej funkcji <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> przeciążenia, a tylko określa punkt początkowy do wyodrębnienia ciągu.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 lub <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Ciąg zawierający podciąg, który należy zastąpić wyrażenia.</param>
        <param name="Find">Wymagana. Poszukiwany podciąg.</param>
        <param name="Replacement">Wymagana. Podciąg zastępujący.</param>
        <param name="Start">Opcjonalna. Położenie w obrębie <paramref name="Expression" /> , rozpoczyna się podciągiem używany do zastąpienia. Wartość zwracana przez <see langword="Replace" /> jest ciągiem, który rozpoczyna się od <paramref name="Start" />, za pomocą odpowiednich podstawienia. W przypadku pominięcia przyjmowana jest wartość 1.</param>
        <param name="Count">Opcjonalna. Liczba podstawienia podciąg do wykonania. Jeśli argument jest pominięty, wartością domyślną jest wartość -1, co oznacza "Przechowuj wszystkich możliwych zamian".</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa określająca porównania do użycia podczas podciągów. Wartości można znaleźć w temacie ustawień.</param>
        <summary>Zwraca wartość typu ciąg, w którym określony podciąg został zastąpiony innym podciągiem określoną liczbę razy.</summary>
        <returns><see langword="Replace" /> zwraca następujące wartości.  
  
 <list type="table"><item><term> IF 
 </term><description> Zastąp zwraca 
 </description></item><item><term><paramref name="Find" /> jest o zerowej długości lub <see langword="Nothing" /></term><description> Kopiowanie obiektu <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> jest o zerowej długości 
 </term><description> Kopiowanie obiektu <paramref name="Expression" /> z nie wystąpień <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> jest o zerowej długości lub <see langword="Nothing" />, lub <paramref name="Start" /> jest większa niż długość argumentu <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> ma wartość 0 
 </term><description> Kopiowanie obiektu <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez `Replace` funkcji jest ciągiem, który rozpoczyna się od pozycji określonej przez `Start` i kończy się na końcu `Expression` ciąg o podstawienia wykonane zgodnie z określonym `Find` i `Replace` wartości.  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|  
|-|-|  
|`Binary`|Wykonuje porównanie binarne|  
|`Text`|Wykonuje porównanie tekstowe|  
  
   
  
## Examples  
 W tym przykładzie przedstawiono `Replace` funkcji.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; -1 lub <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, z którego są zwracane po prawej stronie znaków.</param>
        <param name="Length">Wymagana. <see langword="Integer" />. Wyrażenie liczbowe, wskazujący, ile znaków do zwrócenia. Jeśli jest to 0, ciąg o zerowej długości ("") jest zwracany. Jeśli jest większa lub równa liczbie znaków w <paramref name="str" />, zwracany jest cały ciąg.</param>
        <summary>Zwraca ciąg zawierający określoną liczbę znaków z prawej strony ciągu.</summary>
        <returns>Ciąg zawierający określoną liczbę znaków z prawej strony ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić liczbę znaków w `str`, użyj `Len` funkcji. Jeśli używane w formularzu Windows lub klasy, która ma `Right` właściwość, należy całkowicie kwalifikujesz się do funkcji z `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  `RightB` Funkcji we wcześniejszych wersjach programu Visual Basic zwraca ciąg znaków, a nie w bajtach. Służy przede wszystkim do konwersji ciągów w aplikacjach z zestawami dwubajtowych znaków (znaków DBCS). Wszystkie aktualne ciągi języka Visual Basic są w formacie Unicode, i `RightB` nie jest już obsługiwana.  
  
   
  
## Examples  
 W tym przykładzie pokazano użycie `Right` funkcja zwraca podciąg z danym `String`. W klasie, która ma `Right` właściwość może być konieczne do pełnej kwalifikacji `Right` funkcji.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Wymagana. <see langword="String" /> wyrażenie. Nazwa zmiennej ciągu.</param>
        <param name="Length">Wymagana. <see langword="Integer" /> wyrażenie. Długość zwracanego ciągu.</param>
        <summary>Zwraca ciąg wyrównany do prawej zawierający podany ciąg skorygowany do zadanej długości.</summary>
        <returns>Ciąg wyrównany do prawej zawierający podany ciąg skorygowany do zadanej długości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Source` jest dłuższy niż `Length`, `RSet` umieszcza tylko skrajnie po lewej stronie znaków, maksymalnie do długości `Source`, w zwracanym ciągu. Jeśli określony ciąg jest krótszy niż określony czas, spacje są dodawane do lewego końca ciągu do utworzenia odpowiednią długość. Jeśli określony ciąg jest dłuższy niż określony czas, jest ona obcinana do określonej długości.  
  
   
  
## Examples  
 W tym przykładzie pokazano użycie `RSet` funkcji.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Typ danych — Podsumowanie (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Skuteczne stosowanie typów danych</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Dowolne, prawidłowe <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg zawierającą kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie spacji wiodących albo końcowych (<see langword="Trim" />).</summary>
        <returns>Ciąg zawierający kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie spacji wiodących albo końcowych (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, I `Trim` funkcje Usuń spacje od strony końców ciągów.  
  
   
  
## Examples  
 W tym przykładzie użyto `LTrim` funkcję, aby odjąć wiodące spacje oraz `RTrim` funkcji końcowe spacje od zmiennej ciągu. Używa ona `Trim` funkcję, aby rozłożyć oba rodzaje miejsca do magazynowania.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Integer" /> wyrażenie. Liczba miejsc do magazynowania, które mają w ciągu.</param>
        <summary>Zwraca ciąg składający się z określonej liczby spacji.</summary>
        <returns>Ciąg składający się z określonej liczby spacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` Funkcja przydaje się do formatowania danych wyjściowych i czyszczenia danych w ciągi o stałej długości.  
  
   
  
## Examples  
 W tym przykładzie użyto `Space` funkcja zwraca ciąg składający się z określonej liczby spacji.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="String" /> wyrażenie zawierające podciągi i ograniczniki.</param>
        <param name="Delimiter">Opcjonalna. Dowolny pojedynczy znak używany do identyfikowania granice podciągów. Jeśli <paramref name="Delimiter" /> zostanie pominięty, znak spacji ("") będzie traktowana jako ogranicznika.</param>
        <param name="Limit">Opcjonalna. Maksymalna liczba podciągów, w których można podzielić ciąg wejściowy. Wartość domyślna -1, wskazuje, że ciąg wejściowy można podzielić przy każdym wystąpieniu <paramref name="Delimiter" /> ciągu.</param>
        <param name="Compare">Opcjonalna. Wartość liczbowa, wskazując porównania do użycia podczas podciągów. W przypadku wartości zobacz sekcję „Ustawienia".</param>
        <summary>Zwraca nieujemną jednowymiarową tablicę zawierającą określoną liczbę podciągów.</summary>
        <returns><see langword="String" /> Tablica. Jeśli <paramref name="Expression" /> jest ciągiem o zerowej długości (""), <see langword="Split" /> zwraca jednoelementowa tablica zawierająca ciąg o zerowej długości. Jeśli <paramref name="Delimiter" /> jest ciągiem o zerowej długości, lub jeśli on nie występować w dowolnym miejscu <paramref name="Expression" />, <see langword="Split" /> zwraca jednoelementowa tablica zawierająca cały <paramref name="Expression" /> ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie lub gdy `Limit` jest równa -1, `Split` funkcja dzieli ciąg wejściowy przy każdym wystąpieniu ciąg ograniczników i zwraca podciągów w tablicy. Gdy `Limit` parametr jest większa niż zero, `Split` funkcja dzieli ciąg na pierwszym `Limit`wystąpień ograniczników,-1 i zwraca tablicę z wynikowymi podciągami. Na przykład `Split("a:b:c", ":")` zwraca tablicę `{"a", "b", "c"}`, podczas gdy `Split("a:b:c", ":", 2)` zwraca tablicę `{"a", "b:c"}`.  
  
 Gdy `Split` funkcja napotka dwoma ogranicznikami w wierszu lub ogranicznik na początku lub na końcu ciągu znaków, interpretuje je jako otaczający ciąg pusty (""). Na przykład `Split("xx", "x")` zwraca tablicę zawierającą trzy puste ciągi: jeden znajdujące się początku ciągu znaków, a pierwszy "x", jeden znajdujące dwa "ciągi x", a drugi znajdujące się ostatnim "x" i końca ciągu.  
  
 W tej tabeli przedstawiono sposób opcjonalnego `Delimiter`, `Limit`, i `Compare` parametrów można zmienić zachowanie `Split` funkcji.  
  
|Podziel wywołania|Wartość zwracana|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice i Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alicja", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"}|  
  
 `Compare` Argument może mieć następujące wartości.  
  
|Stała|Opis|Wartość|  
|-|-|-|  
|`CompareMethod.Binary`|Wykonuje porównanie binarne|0|  
|`CompareMethod.Text`|Wykonuje porównanie tekstowe|1|  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak pozwala podzielić ciąg na jej miejsca do magazynowania.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 Poniższy przykład pokazuje, jak podzielić ciągi zawierające wiele ograniczników wiersza i odfiltrować puste ciągi.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Wymagana. Dowolne, prawidłowe <see langword="String" /> wyrażenia.</param>
        <param name="String2">Wymagana. Dowolne, prawidłowe <see langword="String" /> wyrażenia.</param>
        <param name="Compare">Opcjonalna. Określa typ porównania ciągów. Jeśli <paramref name="Compare" /> zostanie pominięty, <see langword="Option Compare" /> ustawienie określa typ porównania.</param>
        <summary>Zwraca wartość -1, 0 lub 1, w oparciu o wyniki porównania ciągów.</summary>
        <returns><see langword="StrComp" /> Funkcja ma następujące wartości zwracane.  
  
 <list type="table"><item><term> IF 
 </term><description> Zwraca StrComp 
 </description></item><item><term><paramref name="String1" /> Sortuje wyprzedzenia <paramref name="String2" /></term><description> -1 
 </description></item><item><term><paramref name="String1" /> jest równa <paramref name="String2" /></term><description> 0 
 </description></item><item><term><paramref name="String1" /> występuje po <paramref name="String2" /></term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciągi są porównywane według wartości alfanumeryczne sortowania, począwszy od pierwszego znaku. Aby uzyskać więcej informacji na temat porównania binarne, tekstowe porównania i porządek sortowania, zobacz [instrukcji porównanie opcji](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 `Compare` Ustawienia argumentu są:  
  
|Stała|Opis|  
|-|-|  
|`Binary`|Wykonuje porównanie binarne, w oparciu o kolejność sortowania, pochodzące z wewnętrzne binarne reprezentacje znaków.|  
|`Text`|Wykonuje porównanie tekstowe, na podstawie kolejności sortowania bez uwzględniania wielkości liter tekstu, określane przez dany system `LocaleID` wartość.|  
  
   
  
## Examples  
 W tym przykładzie użyto `StrComp` funkcja zwraca wyniki porównania ciągów.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Compare" /> wartość jest nieprawidłowa.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. <see langword="String" /> wyrażenie, które ma zostać przekonwertowany.</param>
        <param name="Conversion">Wymagana. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> element członkowski. Wartość wyliczenia, określając typ konwersji do wykonania.</param>
        <param name="LocaleID">Opcjonalna. <see langword="LocaleID" /> Wartość, jeśli jest inny niż system <see langword="LocaleID" /> wartość. (System <see langword="LocaleID" /> wartość jest domyślna.)</param>
        <summary>Zwraca ciąg przekonwertowany WE wskazany.</summary>
        <returns>Ciąg przekonwertowany WE wskazany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stałe `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, i `VbStrConv.Hiragana` może spowodować błędy czasu wykonywania, gdy są używane w ustawieniach regionalnych, których nie mają zastosowania, ale nie zawsze: stałe `VbStrConv.Katakana` i `VbStrConv.Hiragana`mogą być używane w systemie — japoński z zainstalowany pakiet języka japońskiego. Ponadto używać stałych `VbStrConv.Wide` i `VbStrConv.Narrow` jest obsługiwana w każdym systemie języku wschodnioazjatyckich zainstalowane.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące bezpieczeństwa, w oparciu o wyniki porównania lub operację zmiany sprawy, a następnie operacja powinna użyć <xref:System.String.Compare%2A?displayProperty=nameWithType> metody i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak wpływa na ciągi kultury w języku Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 `Conversion` Ustawienia argumentu są:  
  
|Element członkowski wyliczenia|Opis|  
|-|-|  
|`VbStrConv.None`|Wykonuje bez konwersji|  
|`VbStrConv.LinguisticCasing`|Przy użyciu reguł językowej dla systemu plików (ustawienie domyślne), a nie wielkością liter. Prawidłowy `VbStrConv.UpperCase` i `VbStrConv.LowerCase` tylko.|  
|`VbStrConv.UpperCase`|Konwertuje ciąg na wielkie litery.|  
|`VbStrConv.LowerCase`|Konwertuje ciąg na małe litery.|  
|`VbStrConv.ProperCase`|Konwertuje pierwszą literę każdego wyrazu w ciągu na wielkie litery.|  
|`VbStrConv.Wide` <sup>*</sup>|Konwertuje wąskie znaków (połowę szerokości) w ciągu znaków dwubajtowych (pełnej szerokości). [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Konwertuje znaków dwubajtowych (pełnej szerokości) w ciągu, aby zawęzić zakres znaków (połowę szerokości).|  
|`VbStrConv.Katakana` <sup>**</sup>|Konwertuje ciąg znaków Hiragana na znaki Katakana.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Konwertuje znaki Katakana w ciągu znaków Hiragana.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Konwertuje znaki w języku chińskim tradycyjnym języku chińskim uproszczonym.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Konwertuje znaki w języku chińskim uproszczonym chińskim tradycyjnym.|  
  
 <sup>*</sup> Dotyczy azjatyckich ustawień regionalnych.  
  
 <sup>**</sup> Dotyczy tylko Japonii.  
  
> [!NOTE]
>  Te stałe są określone w .NET Framework środowisko uruchomieniowe języka wspólnego. W rezultacie użyciem dowolnego miejsca w kodzie zamiast wartości faktycznych. Większość można łączyć (na przykład `UpperCase + Wide`), z wyjątkiem sytuacji, gdy są one wzajemnie wykluczających się (na przykład `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Poniżej przedstawiono separatorach wyrazów prawidłowy dla odpowiedniej wielkości: Wartość null (`Chr$(0)`), tabulator poziomy (`Chr$(9)`), wiersz źródła danych (`Chr$(10)`), tabulator pionowy (`Chr$(11)`), Nowa strona (`Chr$(12)`), znaku powrotu karetki (`Chr$(13)`), miejsca (zestaw znaków jednobajtowych) (`Chr$(32)`). Rzeczywista wartość spację, który może być pełny lub połowę szerokości, jest zależna od kraju/regionu dla kultur wschodnioazjatyckich.  
  
   
  
## Examples  
 W tym przykładzie przekształca tekst na małych liter.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nieobsługiwana <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 lub &gt; 2048 lub Nieobsługiwana konwersja dla określonych ustawień regionalnych.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg lub obiekt składający się z określonego znaku powtórzone określoną liczbę razy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Integer" /> wyrażenie. Długość ciągu, który ma zostać zwrócona.</param>
        <param name="Character">Wymagana. Dowolne, prawidłowe <see langword="Char" />, <see langword="String" />, lub <see langword="Object" /> wyrażenia. Tylko pierwszy znak wyrażenia będzie używany. Jeśli znak jest typu <see langword="Object" />, musi zawierać albo <see langword="Char" /> lub <see langword="String" /> wartość.</param>
        <summary>Zwraca ciąg lub obiekt składający się z określonego znaku powtórzone określoną liczbę razy.</summary>
        <returns>Ciąg lub obiekt składający się z określonego znaku powtórzone określoną liczbę razy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja zwraca `String` składają się z powtarzające się znaki. Znak, który stanowi ciąg jest pierwszy znak w `Character` jest zduplikowany argument, a `Number` liczbę razy.  
  
   
  
## Examples  
 W tym przykładzie użyto `StrDup` funkcja zwraca ciąg zduplikowane znaki.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> jest mniejsza niż 0 lub <paramref name="Character" /> typ jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Integer" /> wyrażenie. Długość ciągu, który ma zostać zwrócona.</param>
        <param name="Character">Wymagana. Dowolne, prawidłowe <see langword="Char" />, <see langword="String" />, lub <see langword="Object" /> wyrażenia. Tylko pierwszy znak wyrażenia będzie używany. Jeśli znak jest typu <see langword="Object" />, musi zawierać albo <see langword="Char" /> lub <see langword="String" /> wartość.</param>
        <summary>Zwraca ciąg lub obiekt składający się z określonego znaku powtórzone określoną liczbę razy.</summary>
        <returns>Ciąg lub obiekt składający się z określonego znaku powtórzone określoną liczbę razy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja zwraca `String` składają się z powtarzające się znaki. Znak, który stanowi ciąg jest pierwszy znak w `Character` jest zduplikowany argument, a `Number` liczbę razy.  
  
   
  
## Examples  
 W tym przykładzie użyto `StrDup` funkcja zwraca ciąg zduplikowane znaki.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> jest mniejsza niż 0 lub <paramref name="Character" /> typ jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Integer" /> wyrażenie. Długość ciągu, który ma zostać zwrócona.</param>
        <param name="Character">Wymagana. Dowolne, prawidłowe <see langword="Char" />, <see langword="String" />, lub <see langword="Object" /> wyrażenia. Tylko pierwszy znak wyrażenia będzie używany. Jeśli znak jest typu <see langword="Object" />, musi zawierać albo <see langword="Char" /> lub <see langword="String" /> wartość.</param>
        <summary>Zwraca ciąg lub obiekt składający się z określonego znaku powtórzone określoną liczbę razy.</summary>
        <returns>Ciąg lub obiekt składający się z określonego znaku powtórzone określoną liczbę razy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja zwraca `String` składają się z powtarzające się znaki. Znak, który stanowi ciąg jest pierwszy znak w `Character` jest zduplikowany argument, a `Number` liczbę razy.  
  
   
  
## Examples  
 W tym przykładzie użyto `StrDup` funkcja zwraca ciąg zduplikowane znaki.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> jest mniejsza niż 0 lub <paramref name="Character" /> typ jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Wyrażenie ciągu, którego znaki mają można cofnąć. Jeśli <paramref name="Expression" /> jest ciągiem o zerowej długości (""), zostanie zwrócony ciąg o zerowej długości.</param>
        <summary>Zwraca ciąg, w którym kolejność znaków określonego ciągu została odwrócona.</summary>
        <returns>Ciąg, w którym kolejność znaków określonego ciągu została odwrócona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse` Funkcja zwraca ciąg, który zawiera te same znaki co `Expression`, ale w kolejności przeciwnej.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Wymagana. Dowolne, prawidłowe <see langword="String" /> wyrażenia.</param>
        <summary>Zwraca ciąg zawierającą kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie spacji wiodących albo końcowych (<see langword="Trim" />).</summary>
        <returns>Ciąg zawierający kopię określonego ciągu bez spacji wiodących (<see langword="LTrim" />), nie spacji końcowych (<see langword="RTrim" />), lub nie spacji wiodących albo końcowych (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, I `Trim` funkcje Usuń spacje od strony końców ciągów.  
  
   
  
## Examples  
 W tym przykładzie użyto `LTrim` funkcję, aby odjąć wiodące spacje oraz `RTrim` funkcji końcowe spacje od zmiennej ciągu. Używa ona `Trim` funkcję, aby rozłożyć oba rodzaje miejsca do magazynowania.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagana. Dowolne, prawidłowe <see langword="String" /> lub <see langword="Char" /> wyrażenia.</param>
        <summary>Zwraca ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</summary>
        <returns>Ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko małe litery są konwertowane na wielkie litery; wszystkie wielkie litery i znaki niebędące znakami pozostają niezmienione.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące bezpieczeństwa, w oparciu o wyniki porównania lub operację zmiany sprawy, a następnie operacja powinna użyć <xref:System.String.Compare%2A?displayProperty=nameWithType> metody i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak wpływa na ciągi kultury w języku Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 W tym przykładzie użyto `UCase` funkcja zwraca wersję z wielkimi literami ciągu.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Wymagana. Dowolne, prawidłowe <see langword="String" /> lub <see langword="Char" /> wyrażenia.</param>
        <summary>Zwraca ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</summary>
        <returns>Ciąg lub znak zawierający określony ciąg przekonwertowany na wielkie litery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko małe litery są konwertowane na wielkie litery; wszystkie wielkie litery i znaki niebędące znakami pozostają niezmienione.  
  
 Ta funkcja używa informacji o kulturze aplikacji w trakcie manipulowania ciągiem tak, aby zmiany sprawy odpowiadały ustawieniom regionalnym, w ramach których aplikacja jest używana.  
  
> [!IMPORTANT]
>  Jeśli aplikacja podejmuje decyzje dotyczące bezpieczeństwa, w oparciu o wyniki porównania lub operację zmiany sprawy, a następnie operacja powinna użyć <xref:System.String.Compare%2A?displayProperty=nameWithType> metody i przekazać <xref:System.StringComparison.Ordinal> lub <xref:System.StringComparison.OrdinalIgnoreCase> dla `comparisonType` argumentu. Aby uzyskać więcej informacji, zobacz [jak wpływa na ciągi kultury w języku Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 W tym przykładzie użyto `UCase` funkcja zwraca wersję z wielkimi literami ciągu.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulowanie ciągami — Podsumowanie</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Ciągi w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Wprowadzenie do ciągów w Visual Basic</related>
      </Docs>
    </Member>
  </Members>
</Type>