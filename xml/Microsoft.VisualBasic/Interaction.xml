<Type Name="Interaction" FullName="Microsoft.VisualBasic.Interaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3db2ebd669db6d0e1f12be28a90e1a8e5a863ed0" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68437532" /></Metadata><TypeSignature Language="C#" Value="public sealed class Interaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Interaction extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Interaction" />
  <TypeSignature Language="VB.NET" Value="Public Module Interaction" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interaction sealed" />
  <TypeSignature Language="F#" Value="type Interaction = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Interaction" /> Moduł zawiera procedury używane do współpracy z obiektami, aplikacjami i systemami.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które uruchamiają inne programy, wywołują metodę lub właściwość, sygnalizują dźwięk z komputera, udostępniają ciąg wiersza polecenia, manipulowanie obiektami COM i okna dialogowe Kontrola.  
  
## Examples  
 Poniższy przykład używa funkcji, `Shell` aby uruchomić aplikację określoną przez użytkownika. Określenie <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> jako drugi argument powoduje otwarcie aplikacji w normalnym rozmiarze i nadaje im fokus.  
  
```vb  
Dim procID As Integer  
' Run calculator.  
procID = Shell("C:\Windows\system32\calc.exe", AppWinStyle.NormalFocus)  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">Informacja i interakcja — Podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="AppActivate">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktywuje aplikację, która jest już uruchomiona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (int ProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(int32 ProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (ProcessId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(int ProcessId);" />
      <MemberSignature Language="F#" Value="static member AppActivate : int -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate ProcessId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProcessId" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="ProcessId"><see langword="Integer" />Określanie numeru identyfikatora procesu Win32 przypisanego do tego procesu. Możesz użyć identyfikatora zwróconego przez <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />, pod warunkiem, że nie jest równa zero.</param>
        <summary>Aktywuje aplikację, która jest już uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Służy `AppActivate` do przyłączenia aktywnego okna aplikacji do fokusu. Być może nie masz uchwytu lub odwołania do aktywnego okna, a nawet wiesz, które okno jest aktywne w danym momencie. W takim przypadku nie można użyć <xref:System.Windows.Forms.Control.Focus%2A> metody.  
  
 `AppActivate` Funkcja zmienia fokus na nazwaną aplikację lub okno, ale nie wpływa na to, czy jest zmaksymalizowany czy zminimalizowany. Fokus jest przenoszony z okna aktywowanej aplikacji, gdy użytkownik podejmuje jakąś akcję, aby zmienić fokus lub zamknąć okno. Możesz użyć `Shell` funkcji, aby uruchomić aplikację i ustawić styl okna.  
  
 Jeśli używasz `Title` parametru, używa porównania `AppActivate` bez uwzględniania wielkości liter, ale w przeciwnym razie wymaga dokładnego dopasowania z zawartością paska tytułu. Najpierw przeszukiwane są okna najwyższego poziomu, a następnie za pomocą okien podrzędnych. Jeśli nie można znaleźć dopasowania, zgłasza <xref:System.ArgumentException>.  
  
 Można używać `AppActivate` tylko z procesami, które są właścicielami systemu Windows. Większość aplikacji konsolowych nie jest własnością systemu Windows, co oznacza, że nie są wyświetlane na liście procesów, `AppActivate` które przeszukują. W przypadku uruchamiania z poziomu aplikacji konsolowej system tworzy osobny proces do uruchamiania aplikacji i zwraca dane wyjściowe do procesu konsoli. W związku z tym po zażądaniu bieżącego identyfikatora procesu otrzymujesz identyfikator procesu tego oddzielnego procesu, a nie identyfikator procesu aplikacji konsolowej.  
  
 W czasie `AppActivate` wykonywania funkcja aktywuje każdą uruchomioną aplikację z tytułem zgodnym `Title` lub z identyfikatorem procesu, który jest zgodny `ProcessId`. Jeśli nie ma dokładnego dopasowania, uaktywnia wszystkie aplikacje, których ciąg tytułu jest zakończony znakiem `Title`. Jeśli istnieje więcej niż jedna aplikacja o nazwie `Title` `AppActivate` , funkcja arbitralnie wybiera ją w celu aktywowania.  
  
> [!NOTE]
>  Funkcja wymaga `UIPermission` na<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziomie, co może wpłynąć na jej wykonanie w sytuacjach częściowej relacji zaufania. `AppActivate` Aby uzyskać więcej informacji, <xref:System.Security.Permissions.UIPermission> Zobacz.  
  
   
  
## Examples  
 Ten przykład ilustruje różne zastosowania `AppActivate` funkcji w celu aktywowania okna aplikacji. Jeśli proces Notatnika nie jest uruchomiony, przykład zgłasza <xref:System.ArgumentException>. W `Shell` procedurze przyjęto założenie, że aplikacje znajdują się w określonych ścieżkach.  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (string Title);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(string Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (Title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(System::String ^ Title);" />
      <MemberSignature Language="F#" Value="static member AppActivate : string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate Title" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Title" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Title"><see langword="String" />wyrażenie określające tytuł na pasku tytułu aplikacji, którą chcesz aktywować. Możesz użyć tytułu przypisanego do aplikacji podczas jej uruchamiania.</param>
        <summary>Aktywuje aplikację, która jest już uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Służy `AppActivate` do przyłączenia aktywnego okna aplikacji do fokusu. Być może nie masz uchwytu lub odwołania do aktywnego okna, a nawet wiesz, które okno jest aktywne w danym momencie. W takim przypadku nie można użyć <xref:System.Windows.Forms.Control.Focus%2A> metody.  
  
 `AppActivate` Funkcja zmienia fokus na nazwaną aplikację lub okno, ale nie wpływa na to, czy jest zmaksymalizowany czy zminimalizowany. Fokus jest przenoszony z okna aktywowanej aplikacji, gdy użytkownik podejmuje jakąś akcję, aby zmienić fokus lub zamknąć okno. Możesz użyć `Shell` funkcji, aby uruchomić aplikację i ustawić styl okna.  
  
 Jeśli używasz `Title` parametru, używa porównania `AppActivate` bez uwzględniania wielkości liter, ale w przeciwnym razie wymaga dokładnego dopasowania z zawartością paska tytułu. Najpierw przeszukiwane są okna najwyższego poziomu, a następnie za pomocą okien podrzędnych. Jeśli nie można znaleźć dopasowania, zgłasza <xref:System.ArgumentException>.  
  
 Można używać `AppActivate` tylko z procesami, które są właścicielami systemu Windows. Większość aplikacji konsolowych nie jest własnością systemu Windows, co oznacza, że nie są wyświetlane na liście procesów, `AppActivate` które przeszukują. W przypadku uruchamiania z poziomu aplikacji konsolowej system tworzy osobny proces do uruchamiania aplikacji i zwraca dane wyjściowe do procesu konsoli. W związku z tym po zażądaniu bieżącego identyfikatora procesu otrzymujesz identyfikator procesu tego oddzielnego procesu, a nie identyfikator procesu aplikacji konsolowej.  
  
 W czasie `AppActivate` wykonywania funkcja aktywuje każdą uruchomioną aplikację z tytułem zgodnym `Title` lub z identyfikatorem procesu, który jest zgodny `ProcessId`. Jeśli nie ma dokładnego dopasowania, uaktywnia wszystkie aplikacje, których ciąg tytułu jest zakończony znakiem `Title`. Jeśli istnieje więcej niż jedna aplikacja o nazwie `Title` `AppActivate` , funkcja arbitralnie wybiera ją w celu aktywowania.  
  
> [!NOTE]
>  Funkcja wymaga `UIPermission` na<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziomie, co może wpłynąć na jej wykonanie w sytuacjach częściowej relacji zaufania. `AppActivate` Aby uzyskać więcej informacji, <xref:System.Security.Permissions.UIPermission> Zobacz.  
  
   
  
## Examples  
 Ten przykład ilustruje różne zastosowania `AppActivate` funkcji w celu aktywowania okna aplikacji. Jeśli proces Notatnika nie jest uruchomiony, przykład zgłasza <xref:System.ArgumentException>. W `Shell` procedurze przyjęto założenie, że aplikacje znajdują się w określonych ścieżkach.  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dźwięk jest odtwarzany przez prelegenta komputera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gęstość i czas trwania dYwięku są zależne od sprzętu i oprogramowania systemu, dlatego różnią się między komputerami.  
  
> [!NOTE]
>  Funkcja wymaga `UIPermission` na<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziomie, co może wpłynąć na jej wykonanie w sytuacjach częściowej relacji zaufania. `Beep` Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.UIPermission>.  
  
   
  
## Examples  
 W `Beep` tym przykładzie funkcja służy do sygnalizowania tonu przez prelegenta komputera.  
  
 [!code-vb[VbVbalrCatRef#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/playing-sounds.md">Odtwarzanie dźwięków</related>
      </Docs>
    </Member>
    <Member MemberName="CallByName">
      <MemberSignature Language="C#" Value="public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, params object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CallByName (ObjectRef As Object, ProcName As String, UseCallType As CallType, ParamArray Args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CallByName(System::Object ^ ObjectRef, System::String ^ ProcName, Microsoft::VisualBasic::CallType UseCallType, ... cli::array &lt;System::Object ^&gt; ^ Args);" />
      <MemberSignature Language="F#" Value="static member CallByName : obj * string * Microsoft.VisualBasic.CallType * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CallByName (ObjectRef, ProcName, UseCallType, Args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ObjectRef" Type="System.Object" />
        <Parameter Name="ProcName" Type="System.String" />
        <Parameter Name="UseCallType" Type="Microsoft.VisualBasic.CallType" />
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ObjectRef">Wymagana. <see langword="Object" />. Wskaźnik do obiektu, który uwidacznia właściwość lub metodę.</param>
        <param name="ProcName">Wymagane. <see langword="String" />. Wyrażenie ciągu zawierające nazwę właściwości lub metody w obiekcie.</param>
        <param name="UseCallType">Wymagane. Składowa wyliczenia typu <see cref="T:Microsoft.VisualBasic.CallType" /> reprezentująca typ wywoływanej procedury. Wartością <see langword="CallType" /> może być <see langword="Method" />, <see langword="Get" />, lub <see langword="Set" />.</param>
        <param name="Args">Opcjonalny. <see langword="ParamArray" />. Tablica parametrów zawierająca argumenty, które mają zostać przekazane do właściwości lub metody wywoływanej.</param>
        <summary>Wykonuje metodę na obiekcie lub ustawia lub zwraca właściwość obiektu.</summary>
        <returns>Wykonuje metodę na obiekcie lub ustawia lub zwraca właściwość obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CallByName` Funkcja jest używana w czasie wykonywania w celu uzyskania właściwości, ustawienia właściwości lub wywołania metody.  
  
   
  
## Examples  
 W poniższym przykładzie pierwszy wiersz `CallByName` używa do `Text` ustawiania właściwości pola tekstowego, drugi wiersz `Text` Pobiera wartość `Move` właściwości, a trzeci wiersz wywołuje metodę w celu przeniesienia pola tekstowego.  
  
 [!code-vb[VbVbalrFunctions#99](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#99)]  
  
 [!code-vb[VbVbalrFunctions#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#20)]  
  
 Następny przykład używa `CallByName` funkcji, aby `Add` wywołać metody i `Item` obiektu kolekcji.  
  
 [!code-vb[VbVbalrFunctions#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nieprawidłowa <paramref name="UseCallType" /> wartość; musi być <see langword="Method" />, <see langword="Get" />lub <see langword="Set" />.</exception>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">Parameter — Tablice</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md">Wywoływanie właściwości lub metody za pomocą nazwy ciągu</related>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public static object Choose (double Index, params object[] Choice);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Choose(float64 Index, object[] Choice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Index As Double, ParamArray Choice As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Choose(double Index, ... cli::array &lt;System::Object ^&gt; ^ Choice);" />
      <MemberSignature Language="F#" Value="static member Choose : double * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Choose (Index, Choice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Double" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Choice" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Index">Wymagane. <see langword="Double" />. Wyrażenie liczbowe zwracające wartość z zakresu od 1 do liczby elementów przekazaną w <paramref name="Choice" /> argumencie.</param>
        <param name="Choice">Wymagane. <see langword="Object" />Tablica parametrów. Można podać jedną zmienną lub wyrażenie, które jest oceniane do <see langword="Object" /> typu danych, do <see langword="Object" /> listy zmiennych lub wyrażeń oddzielonych przecinkami lub jednowymiarowej tablicy <see langword="Object" /> elementów.</param>
        <summary>Wybiera i zwraca wartość z listy argumentów.</summary>
        <returns>Wybiera i zwraca wartość z listy argumentów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcja zwraca element członkowski listy `Choice()`, `Index`na podstawie wartości. `Choose` Pierwszy element członkowski listy jest wybierany, gdy `Index` ma wartość 1. Ostatni element członkowski listy jest wybierany, gdy `Index` jest `UBound`(`Choice()`). Jeśli `Index` jest poza tymi limitami `Choose` , `Nothing`zwraca.  
  
 Jeśli `Index` nie jest liczbą całkowitą, przed oceną jest zaokrąglana do najbliższej liczby całkowitej.  
  
 Możesz użyć `Choose` , aby wyszukać wartość z listy możliwości.  
  
> [!NOTE]
>  Wyrażenia na liście argumentów mogą zawierać wywołania funkcji. W ramach przygotowywania listy argumentów dla wywołania `Choose`, kompilator Visual Basic wywołuje każdą funkcję w każdym wyrażeniu. Oznacza to, że nie można polegać na określonej funkcji, która nie jest wywoływana, `Index`jeśli jest wybrane inne wyrażenie.  
  
   
  
## Examples  
 Ten przykład używa funkcji `Choose` , aby wyświetlić nazwę w odpowiedzi na indeks przekazaną do procedury `Ind` w parametrze.  
  
 [!code-vb[VbVbalrFunctions#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public static string Command ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Command() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Command" />
      <MemberSignature Language="VB.NET" Value="Public Function Command () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Command();" />
      <MemberSignature Language="F#" Value="static member Command : unit -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Command " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca część argumentu wiersza polecenia służącą do uruchamiania Visual Basic lub program wykonywalny opracowany przy użyciu Visual Basic. Ta <see langword="My" /> funkcja zapewnia większą produktywność i wydajność <see langword="Command" /> niż funkcja. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</summary>
        <returns>Część argumentu wiersza polecenia służąca do uruchamiania Visual Basic lub program wykonywalny opracowany z Visual Basic.  
  
Ta <see langword="My" /> funkcja zapewnia większą produktywność i wydajność <see langword="Command" /> niż funkcja. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po zwróceniu argumentów można wyszukać typowe ograniczniki, takie jak spacje, ukośniki do tyłu lub do przodu, łączniki lub znaki cudzysłowu, aby podzielić lub przeszukać ciąg dla poszczególnych parametrów.  
  
 W przypadku aplikacji utworzonych przy użyciu Visual Basic i skompilowanych do pliku `Command` . exe funkcja zwraca wszystkie argumenty, które pojawiają się po nazwie aplikacji w wierszu polecenia, w tej formie:. `MyApp(cmdlineargs)`  
  
   
  
## Examples  
 W tym przykładzie `Command` funkcja zwraca argumenty wiersza polecenia w obiekcie, który zawiera tablicę.  
  
 [!code-vb[VbVbalrCatRef#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Environment.GetCommandLineArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
        <related type="Article" href="~/docs/visual-basic/reference/command-line-compiler/index.md">Kompilator wiersza polecenia Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/program-structure/structure-of-a-visual-basic-program.md">Struktura programu Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static object CreateObject (string ProgId, string ServerName = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CreateObject(string ProgId, string ServerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (ProgId As String, Optional ServerName As String = &quot;&quot;) As Object" />
      <MemberSignature Language="F#" Value="static member CreateObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CreateObject (ProgId, ServerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="ServerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProgId">Wymagane. <see langword="String" />. Identyfikator programu obiektu do utworzenia.</param>
        <param name="ServerName">Opcjonalna. <see langword="String" />. Nazwa serwera sieciowego, na którym zostanie utworzony obiekt. Jeśli <paramref name="ServerName" /> jest pustym ciągiem (""), używany jest komputer lokalny.</param>
        <summary>Tworzy i zwraca odwołanie do obiektu COM. <see langword="CreateObject" />nie można użyć do tworzenia wystąpień klas w Visual Basic, chyba że te klasy są jawnie uwidocznione jako składniki modelu COM.</summary>
        <returns>Tworzy i zwraca odwołanie do obiektu COM. <see langword="CreateObject" />nie można użyć do tworzenia wystąpień klas w Visual Basic, chyba że te klasy są jawnie uwidocznione jako składniki modelu COM.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby utworzyć wystąpienie składnika com, przypisz obiekt zwrócony przez `CreateObject` zmienną obiektu:  
  
```vb  
Sub CreateADODB()  
   Dim adoApp As Object  
   adoApp = CreateObject("ADODB.Connection")  
End Sub  
```  
  
 Typ zmiennej obiektu, który służy do przechowywania zwracanego obiektu, może mieć wpływ na wydajność aplikacji. Deklarowanie zmiennej obiektu za pomocą `As Object` klauzuli tworzy zmienną, która może zawierać odwołanie do dowolnego typu obiektu. Jednak dostęp do obiektu za pomocą tej zmiennej jest *opóźniony*, czyli powiązanie występuje, gdy program jest uruchomiony. Istnieje wiele powodów, dla których należy unikać późnego wiązania, w tym wolniejszej wydajności aplikacji.  
  
 Można utworzyć zmienną obiektu, która powoduje wczesne wiązanie, czyli powiązanie, gdy program jest kompilowany. Aby to zrobić, Dodaj odwołanie do biblioteki typów dla obiektu z karty **com** okna dialogowego **Dodaj odwołanie** w menu **projekt** . Następnie zadeklaruj zmienną obiektu określonego typu obiektu. W większości przypadków bardziej wydajne jest użycie `Dim` instrukcji i podstawowego zestawu międzyoperacyjnego do tworzenia obiektów, niż jest `CreateObject` używana funkcja.  
  
## <a name="interacting-with-unmanaged-code"></a>Interakcja z niezarządzanym kodem  
 Innym problemem jest to, że obiekty COM używają kodu niezarządzanego kodu bez zalet środowiska uruchomieniowego języka wspólnego. Istnieje sprawiedliwy stopień złożoności związany z mieszaniem kodu zarządzanego Visual Basic z niezarządzanym kodem modelu COM. Po dodaniu odwołania do obiektu COM Visual Basic wyszukuje podstawowy zestaw międzyoperacyjny (PIA) dla tej biblioteki; Jeśli zostanie znaleziony, zostanie ona użyta. Jeśli nie znajdzie PIA, tworzy zestaw współdziałania zawierający lokalne klasy współdziałania dla każdej klasy w bibliotece COM. Aby uzyskać więcej informacji, zobacz Współdziałanie [com w aplikacjach .NET Framework](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md).  
  
 Jeśli jest to możliwe, zazwyczaj należy używać silnie powiązanych obiektów i podstawowych zestawów międzyoperacyjnych. W poniższych przykładach użyto `CreateObject` funkcji z obiektami Microsoft Office tylko w celach demonstracyjnych. Jednak te obiekty są łatwiejsze w użyciu i bardziej niezawodne, gdy są używane z odpowiednim podstawowym zestawem międzyoperacyjnym.  
  
## <a name="creating-an-object-on-a-remote-computer"></a>Tworzenie obiektu na komputerze zdalnym  
 Można utworzyć obiekt na zdalnym komputerze sieciowym, przenosząc nazwę komputera do `ServerName` argumentu `CreateObject` funkcji. Ta nazwa jest taka sama jak nazwa komputera części nazwy udziału: dla udziału o nazwie "\\\MyServer\Public" `ServerName` ("").  
  
> [!NOTE]
>  Zapoznaj się z dokumentacją COM (zobacz Microsoft Developer Network), aby uzyskać dodatkowe informacje na temat udostępniania aplikacji na zdalnym komputerze sieciowym. Może być konieczne dodanie klucza rejestru dla aplikacji.  
  
 Poniższy kod zwraca numer wersji wystąpienia programu Excel uruchomionego na komputerze zdalnym o nazwie `MyServer`:  
  
```vb  
Sub CreateRemoteExcelObj()  
    Dim xlApp As Object  
    ' Replace string "\\MyServer" with name of the remote computer.  
    xlApp = CreateObject("Excel.Application", "\\MyServer")  
    MsgBox(xlApp.Version)  
End Sub  
```  
  
 Jeśli nazwa serwera zdalnego jest nieprawidłowa lub jeśli jest niedostępna, wystąpi błąd w czasie wykonywania.  
  
> [!NOTE]
>  Użyj `CreateObject` , gdy nie ma bieżącego wystąpienia obiektu. Jeśli wystąpienie obiektu jest już uruchomione, zostanie uruchomione nowe wystąpienie i zostanie utworzony obiekt określonego typu. Aby użyć bieżącego wystąpienia lub aby uruchomić aplikację i załadować plik, należy użyć `GetObject` funkcji. Jeśli obiekt został zarejestrowany jako obiekt pojedynczego wystąpienia, tworzone jest tylko jedno wystąpienie obiektu, niezależnie od tego, ile razy `CreateObject` jest wykonywane.  
  
## <a name="creating-framework-objects"></a>Tworzenie obiektów szablonu  
 `CreateObject` Funkcji można używać tylko do tworzenia obiektu com. Chociaż nie ma dokładnego równoważnego mechanizmu tworzenia obiektu .NET Framework, <xref:System.Activator> <xref:System> w przestrzeni nazw znajdują się metody tworzenia obiektów lokalnych lub zdalnych. W szczególności <xref:System.Activator.CreateInstance%2A> Metoda <xref:System.Activator.CreateInstanceFrom%2A> lub metoda może być przydatna.  
  
> [!IMPORTANT]
>  `CreateObject` Funkcja wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania. Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `CreateObject` aby utworzyć arkusz programu Microsoft Excel i zapisać arkusz do pliku. Aby użyć tego przykładu, program Excel musi być zainstalowany na komputerze, na którym jest uruchomiony ten program. Ponadto należy dodać odwołanie do biblioteki typów z karty **com** okna dialogowego **Dodaj odwołanie** w menu **projekt** . Nazwa biblioteki typów różni się w zależności od wersji programu Excel zainstalowanej na komputerze. Na przykład biblioteka typów dla programu Microsoft Excel 2002 nosi nazwę **Biblioteka obiektów programu Microsoft excel 10,0**.  
  
 [!code-vb[VbVbalrExcelObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Serwer jest niedostępny</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie istnieje obiekt określonego typu</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.Activator" />
        <altmember cref="Overload:System.Activator.CreateInstance" />
        <altmember cref="Overload:System.Activator.CreateInstanceFrom" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">Współdziałanie COM w aplikacjach .NET Framework</related>
        <related type="Article" href="~/docs/framework/interop/index.md">Współdziałanie z kodem niezarządzanym</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteSetting">
      <MemberSignature Language="C#" Value="public static void DeleteSetting (string AppName, string Section = null, string Key = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteSetting(string AppName, string Section, string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteSetting (AppName As String, Optional Section As String = null, Optional Key As String = null)" />
      <MemberSignature Language="F#" Value="static member DeleteSetting : string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.DeleteSetting (AppName, Section, Key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Wymagany. <see langword="String" />wyrażenie zawierające nazwę aplikacji lub projektu, do którego ma zastosowanie ustawienie sekcji lub klucza.</param>
        <param name="Section">Wymagana. <see langword="String" />wyrażenie zawierające nazwę sekcji, z której jest usuwane ustawienie klucza. Jeśli tylko <paramref name="AppName" /> i <paramref name="Section" /> są podane, określona sekcja jest usuwana wraz ze wszystkimi powiązanymi ustawieniami klucza.</param>
        <param name="Key">Opcjonalna. <see langword="String" />wyrażenie zawierające nazwę usuwanego ustawienia klucza.</param>
        <summary>Usuwa sekcję lub ustawienia klucza z wpisu aplikacji w rejestrze systemu Windows. Funkcja zapewnia większą produktywność i wydajność w operacjach rejestru <see langword="DeleteSetting" /> niż funkcja. <see langword="My" /> Aby uzyskać więcej informacji, <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" /> Zobacz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli podano wszystkie argumenty, określone ustawienie zostanie usunięte. Błąd czasu wykonywania występuje, jeśli próbujesz użyć `DeleteSetting` nieistniejącego ustawienia sekcji lub klucza.  
  
 `DeleteSetting`wymaga, aby użytkownik był zalogowany, ponieważ działa w `HKEY_LOCAL_USER` kluczu rejestru, który nie jest aktywny, dopóki użytkownik nie zaloguje się interaktywnie.  
  
 Ustawienia rejestru, które mają być dostępne z procesu nieinterakcyjnego (na przykład MTX. exe), powinny być przechowywane w `HKEY_LOCAL_MACHINE\Software\` kluczach `HKEY_USER\DEFAULT\Software` rejestru lub.  
  
   
  
## Examples  
 Poniższy przykład najpierw używa `SaveSetting` procedury `DeleteSetting` , aby wprowadzić wpisy w rejestrze systemu Windows `MyApp` dla aplikacji, a następnie użyć funkcji, aby je usunąć. Ponieważ żaden `Key` argument nie jest określony, cała `Startup` sekcja zostanie usunięta, łącznie z nazwą sekcji i wszystkimi jej kluczami.  
  
 [!code-vb[VbVbalrCatRef#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Użytkownik nie jest zalogowany.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Environ">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(int Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagane. Wyrażenie, które oblicza ciąg zawierający nazwę zmiennej środowiskowej lub liczbę całkowitą odpowiadającą kolejności liczbowej ciągu środowiska w tabeli parametrów środowiska.</param>
        <summary>Zwraca ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</summary>
        <returns>Ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Expression` zawiera ciąg <xref:Microsoft.VisualBasic.Interaction.Environ%2A> , funkcja zwraca tekst przypisany do określonego ciągu środowiska, czyli tekst następujący po znaku równości (=) w tabeli parametrów środowiska dla tej zmiennej środowiskowej. Jeśli ciąg w `Expression` nie zostanie znaleziony w tabeli parametrów środowiska, zwracany jest ciąg o zerowej długości ("").  
  
 Jeśli `Expression` zawiera liczbę całkowitą, ciąg zajmowany przez tę pozycję liczbową w tabeli parametrów środowiska jest zwracany. W tym przypadku <xref:Microsoft.VisualBasic.Interaction.Environ%2A> zwraca cały tekst, łącznie z nazwą zmiennej środowiskowej. Jeśli w podanej pozycji nie ma ciągu środowiska, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> funkcja zwraca ciąg o zerowej długości.  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A> Funkcja wymaga uprawnień środowiska, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania. Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Ten przykład używa funkcji <xref:Microsoft.VisualBasic.Interaction.Environ%2A> , aby podać numer wpisu i długość `PATH` instrukcji z tabeli parametrów środowiska.  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" />Brak.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagany. Wyrażenie, które oblicza ciąg zawierający nazwę zmiennej środowiskowej lub liczbę całkowitą odpowiadającą kolejności liczbowej ciągu środowiska w tabeli parametrów środowiska.</param>
        <summary>Zwraca ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</summary>
        <returns>Ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Expression` zawiera ciąg <xref:Microsoft.VisualBasic.Interaction.Environ%2A> , funkcja zwraca tekst przypisany do określonego ciągu środowiska, czyli tekst następujący po znaku równości (=) w tabeli parametrów środowiska dla tej zmiennej środowiskowej. Jeśli ciąg w `Expression` nie zostanie znaleziony w tabeli parametrów środowiska, zwracany jest ciąg o zerowej długości ("").  
  
 Jeśli `Expression` zawiera liczbę całkowitą, ciąg zajmowany przez tę pozycję liczbową w tabeli parametrów środowiska jest zwracany. W tym przypadku <xref:Microsoft.VisualBasic.Interaction.Environ%2A> zwraca cały tekst, łącznie z nazwą zmiennej środowiskowej. Jeśli w podanej pozycji nie ma ciągu środowiska, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> funkcja zwraca ciąg o zerowej długości.  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A> Funkcja wymaga uprawnień środowiska, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania. Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Ten przykład używa funkcji <xref:Microsoft.VisualBasic.Interaction.Environ%2A> , aby podać numer wpisu i długość `PATH` instrukcji z tabeli parametrów środowiska.  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" />Brak.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllSettings">
      <MemberSignature Language="C#" Value="public static string[,] GetAllSettings (string AppName, string Section);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[,] GetAllSettings(string AppName, string Section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllSettings (AppName As String, Section As String) As String(,)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^, 2&gt; ^ GetAllSettings(System::String ^ AppName, System::String ^ Section);" />
      <MemberSignature Language="F#" Value="static member GetAllSettings : string * string -&gt; string[,]" Usage="Microsoft.VisualBasic.Interaction.GetAllSettings (AppName, Section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Wymagane. <see langword="String" />wyrażenie zawierające nazwę aplikacji lub projektu, którego ustawienia kluczy są żądane.</param>
        <param name="Section">Wymagane. <see langword="String" />wyrażenie zawierające nazwę sekcji, której zażądano ustawień klucza. <see langword="GetAllSettings" />zwraca obiekt, który zawiera dwuwymiarową tablicę ciągów. Ciągi zawierają wszystkie ustawienia klucza w określonej sekcji i odpowiadające im wartości.</param>
        <summary>Zwraca listę ustawień kluczy i ich odpowiednie wartości (pierwotnie utworzone za pomocą <see langword="SaveSetting" />) z wpisu aplikacji w rejestrze systemu Windows. Korzystanie z <see langword="My" /> tej funkcji zapewnia większą produktywność i wydajność w operacjach <see langword="GetAllSettings" />rejestru niż. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <returns>Lista kluczowych ustawień i ich odpowiednie wartości (pierwotnie utworzone za pomocą <see langword="SaveSetting" />) z wpisu aplikacji w rejestrze systemu Windows.  
  
Korzystanie z <see langword="My" /> tej funkcji zapewnia większą produktywność i wydajność w operacjach <see langword="GetAllSettings" />rejestru niż. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetAllSettings`Zwraca niezainicjowany `Object` , `AppName` Jeśli lub `Section` nie istnieje.  
  
 Ponieważ działa w `HKEY_LOCAL_USER` kluczu rejestru, który nie jest aktywny, dopóki użytkownik nie zaloguje się interaktywnie, `GetAllSettings` wymaga zalogowania użytkownika.  
  
 Ustawienia rejestru, które mają być dostępne z procesu nieinterakcyjnego (na przykład MTX. exe), powinny być przechowywane w `HKEY_LOCAL_MACHINE\Software\` kluczach `HKEY_USER\DEFAULT\Software` rejestru lub.  
  
   
  
## Examples  
 Ten przykład najpierw używa `SaveSetting` funkcji, aby wprowadzić wpisy w rejestrze systemu Windows dla aplikacji określonej jako `AppName`, a następnie użyć `GetAllSettings` funkcji, aby wyświetlić ustawienia. Należy zauważyć, że nazwy `Section` i nazwy aplikacji nie mogą `GetAllSettings`być pobierane za pomocą. Na `DeleteSetting` koniec funkcja usuwa wpisy aplikacji.  
  
 [!code-vb[VbVbalrCatRef#68](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Użytkownik nie jest zalogowany.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Odczytywanie z oraz zapisywanie do rejestru (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (string PathName = null, string Class = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObject(string PathName, string Class) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObject (Optional PathName As String = null, Optional Class As String = null) As Object" />
      <MemberSignature Language="F#" Value="static member GetObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.GetObject (PathName, Class)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Class" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="PathName">Opcjonalny. <see langword="String" />. Pełna ścieżka i nazwa pliku zawierającego obiekt do pobrania. <paramref name="PathName" /> W<paramref name="Class" /> przypadku pominięcia jest wymagana.</param>
        <param name="Class">Wymagane, <paramref name="PathName" /> Jeśli nie jest podany. <see langword="String" />. Ciąg reprezentujący klasę obiektu. <paramref name="Class" /> Argument ma następującą składnię i części: 
 <c></c> nazwa <c>.</c> <c></c> typ obiektu  
  
[1 | 1] Konstruktora 
[1 | 2] Zharmonizowan 
[2 | 1] <c></c> nazwa  
  
[2 | 2] Wymagane. <see langword="String" />. Nazwa aplikacji dostarczającej obiekt.  
  
[3 | 1] <c></c> typ obiektu  
  
[3 | 2] Wymagane. <see langword="String" />. Typ lub Klasa obiektu do utworzenia.</param>
        <summary>Zwraca odwołanie do obiektu dostarczonego przez składnik COM.</summary>
        <returns>Odwołanie do obiektu dostarczonego przez składnik COM.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj funkcji `GetObject` , aby załadować wystąpienie składnika com z pliku. Ilustruje to poniższy przykład.  
  
```vb  
Dim CADObject As Object  
CADObject = GetObject("C:\CAD\schema.cad")  
```  
  
 Po uruchomieniu tego kodu zostanie uruchomiona aplikacja skojarzona z określonym `PathName` , a obiekt w określonym pliku jest aktywowany.  
  
## <a name="default-cases"></a>Przypadki domyślne  
 Jeśli `PathName` jest ciągiem o zerowej długości (`""`), `GetObject` zwraca nowe wystąpienie obiektu określonego typu klasy. Jeśli argument jest pominięty, `GetObject` zwraca aktualnie aktywny obiekt typu klasy określonej w `Class`. `PathName` Jeśli żaden obiekt określonego typu nie istnieje, wystąpi błąd.  
  
## <a name="accessing-a-subobject"></a>Uzyskiwanie dostępu do podobiektów.  
 Niektóre aplikacje umożliwiają aktywowanie podobiektu skojarzonego z plikiem. Aby to zrobić, Dodaj znak wykrzyknika (`!`) na końcu nazwy pliku i postępuj zgodnie z ciągiem identyfikującym część pliku, który chcesz aktywować. Aby uzyskać informacje na temat sposobu tworzenia tego ciągu, zapoznaj się z dokumentacją aplikacji, która utworzyła obiekt.  
  
 Na przykład w aplikacji do rysowania może istnieć wiele warstw do rysowania przechowywanych w pliku. Można użyć poniższego kodu do uaktywnienia warstwy w obrębie rysunku o nazwie `schema.cad`.  
  
```vb  
layerObject = GetObject("C:\CAD\schema.cad!Layer3")  
```  
  
## <a name="specifying-a-class"></a>Określanie klasy  
 Jeśli nie określisz obiektu `Class`, Automatyzacja określi, że aplikacja ma zostać uruchomiona, a obiekt, który ma zostać aktywowany, w oparciu o podaną nazwę pliku. Niektóre pliki mogą jednak obsługiwać więcej niż jedną klasę obiektu. Na przykład rysunek może obsługiwać trzy różne typy obiektów: `Application` obiekt `Drawing` , obiekt i `Toolbar` obiekt, które są częścią tego samego pliku. Aby określić, który obiekt w pliku, który chcesz aktywować, użyj opcjonalnego `Class` argumentu. Ilustruje to poniższy przykład.  
  
```vb  
Dim drawObj As Object  
drawObj = GetObject("C:\Drawings\sample.drw", "Figment.Drawing")  
```  
  
 W poprzednim przykładzie `Figment` jest nazwą aplikacji do rysowania i `Drawing` jest jednym z obsługiwanych przez niego typów obiektów.  
  
## <a name="using-the-object"></a>Używanie obiektu  
 Po aktywowaniu obiektu odwołuje się do niego w kodzie przy użyciu zadeklarowanej zmiennej obiektu. W poprzednim przykładzie uzyskujesz dostęp do właściwości i metod nowego obiektu za pomocą zmiennej `drawObj`obiektu. Ilustruje to poniższy przykład.  
  
```vb  
drawObj.Line(9, 90)  
drawObj.InsertText(9, 100, "Hello, world.")  
drawObj.SaveAs("C:\Drawings\sample.drw")  
```  
  
> [!NOTE]
>  Użyj funkcji `GetObject` , gdy istnieje bieżące wystąpienie obiektu lub jeśli chcesz utworzyć obiekt z załadowanym plikiem. Jeśli nie ma bieżącego wystąpienia i nie chcesz, aby obiekt został uruchomiony z załadowanym plikiem, użyj <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> funkcji.  
>   
>  Jeśli obiekt został zarejestrowany jako obiekt kontrolki ActiveX pojedynczego wystąpienia, tylko jedno wystąpienie obiektu jest tworzone, niezależnie od tego, ile razy `CreateObject` jest wywoływana. Obiekt z pojedynczym wystąpieniem zawsze `GetObject` zwraca to samo wystąpienie, gdy jest wywoływana z ciągiem o zerowej długości`""`() i `PathName` powoduje błąd, jeśli argument zostanie pominięty. Nie można użyć `GetObject` , aby uzyskać odwołanie do klasy utworzonej przy użyciu Visual Basic.  
  
> [!IMPORTANT]
>  `GetObject` Funkcja wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania. Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `GetObject` Aby uzyskać odwołanie do określonego arkusza programu Microsoft Excel (`excelObj`). Używa `Application` właściwości arkusza, aby program Excel był widoczny, zamknąć go i wykonać inne akcje. Przy użyciu dwóch wywołań `detectExcel` interfejsu API procedura szuka programu Excel, a jeśli jest uruchomiona, wprowadza ją w tabeli uruchomionego obiektu. Pierwsze wywołanie `GetObject` powoduje błąd, jeśli program Excel nie jest jeszcze uruchomiony, co w tym przykładzie powoduje, że `excelWasNotRunning` `True`flaga ma ustawioną wartość. Drugie wywołanie `GetObject` określa plik do otwarcia. Jeśli program Excel nie jest jeszcze uruchomiony, drugie wywołanie uruchamia je i zwraca odwołanie do arkusza reprezentowanego przez określony plik `test.xls`. Plik musi znajdować się w określonej lokalizacji; w przeciwnym razie Visual Basic zgłasza <xref:System.IO.FileNotFoundException>. Następnie przykładowy kod powoduje, że program Excel i okno zawierające określony arkusz są widoczne.  
  
 Ten przykład wymaga `Option Strict Off` , ponieważ używa późnego wiązania, gdzie obiekty są przypisane do zmiennych typu `Object`. Można `Option Strict On` określić i zadeklarować obiekty określonych typów obiektów, jeśli dodasz odwołanie do biblioteki typów programu Excel z karty **com** okna dialogowego **Dodaj odwołanie** w menu **projekt** w programie Visual Studio.  
  
 [!code-vb[VbVbalrExcelObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#2)]  
  
 [!code-vb[VbVbalrExcelObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#4)]  
  
 [!code-vb[VbVbalrExcelObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#5)]  
  
 Po wywołaniu `getExcel` funkcji jest wykonywane sprawdzenie, czy program Excel jest już uruchomiony. Jeśli tak nie jest, tworzone jest wystąpienie.  
  
> [!IMPORTANT]
>  Dla uproszczenia w poprzednim przykładzie założono, że każde `XLMAIN` wywoływane okno należy do wystąpienia programu Microsoft Excel. Jeśli inny obiekt, prawdopodobnie uruchomiony przez nielegalne manipulowanie, utworzył okno o tej nazwie, otrzyma wszystkie wiadomości zamierzone dla programu Excel. W aplikacji, która ma być używana w środowisku produkcyjnym, należy uwzględnić bardziej rygorystyczne testy, aby `XLMAIN` sprawdzić, czy naprawdę należy do programu Excel.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Nie istnieje obiekt określonego typu klasy.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie istnieje obiekt z określoną ścieżką i nazwą pliku.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="GetSetting">
      <MemberSignature Language="C#" Value="public static string GetSetting (string AppName, string Section, string Key, string Default = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetSetting(string AppName, string Section, string Key, string Default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetting (AppName As String, Section As String, Key As String, Optional Default As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member GetSetting : string * string * string * string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.GetSetting (AppName, Section, Key, Default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Default" Type="System.String" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Wymagana. <see langword="String" />wyrażenie zawierające nazwę aplikacji lub projektu, którego żądano ustawienia klucza.</param>
        <param name="Section">Wymagany. <see langword="String" />wyrażenie zawierające nazwę sekcji, w której znajduje się ustawienie klucza.</param>
        <param name="Key">Wymagana. <see langword="String" />wyrażenie zawierające nazwę ustawienia klucza do zwrócenia.</param>
        <param name="Default">Opcjonalny. Wyrażenie zawierające wartość, która ma zostać zwrócona, jeśli żadna wartość <paramref name="Key" /> nie została ustawiona w ustawieniu. W przypadku pominięcia przyjmuje się, <paramref name="Default" /> że jest ciągiem o zerowej długości ("").</param>
        <summary>Zwraca wartość ustawienia klucza z wpisu aplikacji w rejestrze systemu Windows. Funkcja zapewnia większą produktywność i wydajność w operacjach rejestru niż <see langword="GetAllSettings" />. <see langword="My" /> Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <returns>Wartość ustawienia klucza z wpisu aplikacji w rejestrze systemu Windows.  
  
Funkcja zapewnia większą produktywność i wydajność w operacjach rejestru niż <see langword="GetAllSettings" />. <see langword="My" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli którykolwiek z elementów o nazwie w `GetSetting` argumentach nie istnieje, `GetSetting` zwraca wartość `Default`.  
  
 Ponieważ działa w `HKEY_LOCAL_USER` kluczu rejestru, który nie jest aktywny, dopóki użytkownik nie zaloguje się interaktywnie, `GetSetting` wymaga zalogowania użytkownika.  
  
 Ustawienia rejestru, które mają być dostępne z procesu nieinterakcyjnego (na przykład MTX. exe), powinny być przechowywane w `HKEY_LOCAL_MACHINE\Software\` kluczach `HKEY_USER\DEFAULT\Software` rejestru lub.  
  
 `GetSetting`wymaga `Read` .<xref:System.Security.Permissions.RegistryPermission>  
  
   
  
## Examples  
 Ten przykład najpierw używa `SaveSetting` funkcji `GetSetting` , aby wprowadzić wpisy w rejestrze systemu Windows dla aplikacji określonej jako `AppName`, a następnie użyć funkcji, aby wyświetlić jedno z ustawień. `Default` Ponieważ argument jest określony, pewne wartości są gwarantowane do zwrócenia. Zwróć uwagę `Section` , że nie można pobrać `GetSetting`nazw przy użyciu. Na `DeleteSetting` koniec funkcja usuwa wszystkie wpisy aplikacji.  
  
 [!code-vb[VbVbalrCatRef#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Co najmniej jeden argument nie <see langword="String" /> jest wyrażeniem lub użytkownik nie jest zalogowany.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Odczytywanie z oraz zapisywanie do rejestru (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IIf">
      <MemberSignature Language="C#" Value="public static object IIf (bool Expression, object TruePart, object FalsePart);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IIf(bool Expression, object TruePart, object FalsePart) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IIf (Expression As Boolean, TruePart As Object, FalsePart As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IIf(bool Expression, System::Object ^ TruePart, System::Object ^ FalsePart);" />
      <MemberSignature Language="F#" Value="static member IIf : bool * obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.IIf (Expression, TruePart, FalsePart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
        <Parameter Name="TruePart" Type="System.Object" />
        <Parameter Name="FalsePart" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Boolean" />. Wyrażenie, które ma zostać obliczone.</param>
        <param name="TruePart">Wymagane. <see langword="Object" />. Zwraca wartość <paramref name="Expression" /> , <see langword="True" />jeśli jest wynikiem obliczenia.</param>
        <param name="FalsePart">Wymagany. <see langword="Object" />. Zwraca wartość <paramref name="Expression" /> , <see langword="False" />jeśli jest wynikiem obliczenia.</param>
        <summary>Zwraca jeden z dwóch obiektów, w zależności od obliczenia wyrażenia.</summary>
        <returns>Zwraca jeden z dwóch obiektów, w zależności od obliczenia wyrażenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcja dostarcza odpowiednika dla [operatora warunkowego Trzyelementowy:?:](https://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271) w wizualizacji C++ `IIf`  
  
   
  
## Examples  
 W tym przykładzie `IIf` funkcja służy do `testMe` obliczania parametru `checkIt` procedury i zwraca słowo "Large", jeśli ilość jest większa niż 1000; w przeciwnym razie zwraca wyraz "mały".  
  
 [!code-vb[VbVbalrFunctions#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#33)]  
  
 Należy pamiętać, `Option Strict` że `On`jeśli jest `CStr` , należy użyć słowa kluczowego, aby jawnie skonwertować `Object` zwrot `String`z do.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/if-then-else-statement.md">If...Then...Else — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="InputBox">
      <MemberSignature Language="C#" Value="public static string InputBox (string Prompt, string Title = &quot;&quot;, string DefaultResponse = &quot;&quot;, int XPos = -1, int YPos = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputBox(string Prompt, string Title, string DefaultResponse, int32 XPos, int32 YPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputBox (Prompt As String, Optional Title As String = &quot;&quot;, Optional DefaultResponse As String = &quot;&quot;, Optional XPos As Integer = -1, Optional YPos As Integer = -1) As String" />
      <MemberSignature Language="F#" Value="static member InputBox : string * string * string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.InputBox (Prompt, Title, DefaultResponse, XPos, YPos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Title" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="DefaultResponse" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="XPos" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="YPos" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Prompt">Wymagane <see langword="String" /> wyrażenie wyświetlane jako komunikat w oknie dialogowym. Maksymalna długość <paramref name="Prompt" /> wynosi około 1024 znaków, w zależności od szerokości użytych znaków. Jeśli <paramref name="Prompt" /> składa się z więcej niż jednego wiersza, można oddzielić linie przy użyciu znaku powrotu karetki<see langword=")" />(<see langword="Chr(" />13), znaku wysuwu wiersza<see langword="Chr(" />(<see langword=")" />10) lub kombinacji powrotu karetki/wysuwu wiersza (<see langword="Chr(" />1310)<see langword=")" />międzykażdymwierszem. &amp; <see langword="Chr(" /><see langword=")" /></param>
        <param name="Title">Opcjonalny. <see langword="String" />wyrażenie wyświetlane na pasku tytułu okna dialogowego. W przypadku pominięcia <paramref name="Title" />nazwa aplikacji zostanie umieszczona na pasku tytułu.</param>
        <param name="DefaultResponse">Opcjonalna. <see langword="String" />wyrażenie wyświetlane w polu tekstowym jako odpowiedź domyślna, jeśli nie podano innych danych wejściowych. W przypadku pominięcia <paramref name="DefaultResponse" />wyświetlane pole tekstowe jest puste.</param>
        <param name="XPos">Opcjonalny. Wyrażenie numeryczne określające, w twipach, odległość lewej krawędzi okna dialogowego od lewej krawędzi ekranu. W przypadku pominięcia <paramref name="XPos" />okno dialogowe zostanie wyśrodkowane w poziomie.</param>
        <param name="YPos">Opcjonalny. Wyrażenie numeryczne określające, w twipach, odległość górnej krawędzi okna dialogowego w górnej części ekranu. W przypadku pominięcia <paramref name="YPos" />, okno dialogowe jest ułożone w pionie o jeden trzeci w dół w dół ekranu.</param>
        <summary>Wyświetla monit w oknie dialogowym, czeka, aż użytkownik wprowadza tekst lub klika przycisk, a następnie zwraca ciąg zawierający zawartość pola tekstowego.</summary>
        <returns>Wyświetla monit w oknie dialogowym, czeka, aż użytkownik wprowadza tekst lub klika przycisk, a następnie zwraca ciąg zawierający zawartość pola tekstowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli użytkownik kliknie przycisk **Anuluj**, zostanie zwrócony ciąg o zerowej długości.  
  
 Aby określić więcej niż pierwszy argument, należy użyć `InputBox` funkcji w wyrażeniu. Jeśli pominięto dowolne argumenty pozycyjne, należy zachować odpowiedni ogranicznik przecinka.  
  
> [!NOTE]
>  Funkcja wymaga `UIPermission` na<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziomie, co może wpłynąć na jej wykonanie w sytuacjach częściowej relacji zaufania. `InputBox` Aby uzyskać więcej informacji, zobacz [żądanie uprawnień](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/yd267cce(v%3dvs.100)) i <xref:System.Security.Permissions.UIPermission> .  
  
   
  
## Examples  
 W tym przykładzie przedstawiono różne sposoby używania funkcji `InputBox` , aby monitować użytkownika o wprowadzenie wartości. W przypadku pominięcia pozycji x i y okno dialogowe zostanie automatycznie wyśrodkowane dla odpowiednich osi. Zmienna `MyValue` zawiera wartość wprowadzoną przez użytkownika, jeśli użytkownik kliknie przycisk OK lub naciśnij klawisz ENTER.  
  
 [!code-vb[VbVbalrCatRef#67](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MsgBox">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.MsgBoxResult MsgBox(object Prompt, valuetype Microsoft.VisualBasic.MsgBoxStyle Buttons, object Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MsgBox (Prompt As Object, Optional Buttons As MsgBoxStyle = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, Optional Title As Object = null) As MsgBoxResult" />
      <MemberSignature Language="F#" Value="static member MsgBox : obj * Microsoft.VisualBasic.MsgBoxStyle * obj -&gt; Microsoft.VisualBasic.MsgBoxResult" Usage="Microsoft.VisualBasic.Interaction.MsgBox (Prompt, Buttons, Title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Buttons" Type="Microsoft.VisualBasic.MsgBoxStyle" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Title" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Prompt">Wymagane. <see langword="String" />wyrażenie wyświetlane jako komunikat w oknie dialogowym. Maksymalna długość <paramref name="Prompt" /> wynosi około 1024 znaków, w zależności od szerokości użytych znaków. Jeśli <paramref name="Prompt" /> składa się z więcej niż jednego wiersza, można oddzielić linie przy użyciu znaku powrotu karetki<see langword=")" />(<see langword="Chr(" />13), znaku wysuwu wiersza<see langword="Chr(" />(<see langword=")" />10) lub kombinacji znaków powrotu karetki/wysuwu znaku ( <see langword="Chr(" />1310)między<see langword=")" />każdymwierszem. &amp; <see langword="Chr(" /><see langword=")" /></param>
        <param name="Buttons">Opcjonalna. Wyrażenie liczbowe będące sumą wartości określających liczbę i typ przycisków do wyświetlenia, styl ikony do użycia, tożsamość przycisku domyślnego i modalność okna komunikatu. W przypadku pominięcia <paramref name="Buttons" />wartość domyślna to zero.</param>
        <param name="Title">Opcjonalna. <see langword="String" />wyrażenie wyświetlane na pasku tytułu okna dialogowego. W przypadku pominięcia <paramref name="Title" />nazwa aplikacji zostanie umieszczona na pasku tytułu.</param>
        <summary>Wyświetla komunikat w oknie dialogowym, czeka, aż użytkownik kliknie przycisk, a następnie zwraca liczbę całkowitą wskazującą przycisk kliknięty przez użytkownika.</summary>
        <returns><list type="table">
            <item>
              <term> Stała 
 </term>
              <description> Wartość 
 </description>
            </item>
            <item>
              <term>
                <see langword="OK" />
              </term>
              <description> 1 
 </description>
            </item>
            <item>
              <term>
                <see langword="Cancel" />
              </term>
              <description> 2 
 </description>
            </item>
            <item>
              <term>
                <see langword="Abort" />
              </term>
              <description> 3 
 </description>
            </item>
            <item>
              <term>
                <see langword="Retry" />
              </term>
              <description> 4 
 </description>
            </item>
            <item>
              <term>
                <see langword="Ignore" />
              </term>
              <description> 5 
 </description>
            </item>
            <item>
              <term>
                <see langword="Yes" />
              </term>
              <description> 6 
 </description>
            </item>
            <item>
              <term>
                <see langword="No" />
              </term>
              <description> 7 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli pominięto dowolne argumenty pozycyjne, należy zachować odpowiedni ogranicznik przecinka.  
  
 Jeśli w oknie dialogowym zostanie wyświetlony przycisk **Anuluj** , naciśnięcie klawisza ESC ma taki sam skutek jak kliknięcie przycisku **Anuluj**  
  
 Jeśli okno dialogowe zawiera przycisk **Pomoc** , dla okna dialogowego jest dostępna pomoc kontekstowa. Jednak żadna wartość nie jest zwracana do momentu wybrania jednego z pozostałych przycisków. W aplikacjach formularzy systemu Windows Wybieranie przycisku **Pomoc** wykonuje <xref:System.Windows.Forms.Control.HelpRequested> zdarzenie dla formularza.  
  
> [!NOTE]
>  Funkcja wymaga `UIPermission` na<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziomie, co może wpłynąć na jej wykonanie w sytuacjach częściowej relacji zaufania. `MsgBox` Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.UIPermission>.  
  
 Wartości `MsgBoxStyle` wyliczenia są wymienione w poniższej tabeli.  
  
|Element członkowski|Wartość|Opis|  
|-|-|-|  
|Element członkowski|Wartość|Opis|  
|`OKOnly`|0|Wyświetla tylko przycisk OK.|  
|`OKCancel`|1|Wyświetla przyciski OK i Anuluj.|  
|`AbortRetryIgnore`|2|Wyświetla przyciski przerywania, ponawiania i ignorowania.|  
|`YesNoCancel`|3|Wyświetla przyciski tak, nie i Anuluj.|  
|`YesNo`|4|Wyświetla przyciski tak i nie.|  
|`RetryCancel`|5|Wyświetla przyciski Ponów i Anuluj.|  
|`Critical`|16|Wyświetla ikonę komunikatu krytycznego.|  
|`Question`|32|Wyświetla ikonę zapytania ostrzegawczego.|  
|`Exclamation`|48|Wyświetla ikonę komunikatu ostrzegawczego.|  
|`Information`|64|Wyświetla ikonę komunikatu z informacjami.|  
|`DefaultButton1`|0|Pierwszy przycisk jest wartością domyślną.|  
|`DefaultButton2`|256|Drugi przycisk jest domyślny.|  
|`DefaultButton3`|512|Trzeci przycisk jest domyślny.|  
|`ApplicationModal`|0|Aplikacja jest modalna. Użytkownik musi odpowiedzieć na okno komunikatu przed kontynuowaniem pracy w bieżącej aplikacji.|  
|`SystemModal`|4096|System jest modalny. Wszystkie aplikacje są zawieszane, dopóki użytkownik nie odpowie na okno komunikatu.|  
|`MsgBoxSetForeground`|65536|Określa okno okna komunikatu jako okno pierwszego planu.|  
|`MsgBoxRight`|524288|Tekst jest wyrównany do prawej.|  
|`MsgBoxRtlReading`|1048576|Określa, że tekst powinien być wyświetlany jako czytelny od prawej do lewej w systemach hebrajskich i arabskiej.|  
  
 Pierwsza grupa wartości (0-5) opisuje liczbę i typ przycisków wyświetlanych w oknie dialogowym. Druga grupa (16, 32, 48, 64) zawiera opis stylu ikon. Trzecia grupa (0, 256, 512) określa, który przycisk jest wartością domyślną. Czwarta grupa (0, 4096) określa modalność okna komunikatu, a piąta Grupa określa, czy okno komunikatu jest oknem pierwszego planu, wraz z wyrównaniem i kierunkiem tekstu. Podczas dodawania liczb do tworzenia końcowej wartości `Buttons` argumentu należy używać tylko jednej liczby z każdej grupy.  
  
   
  
## Examples  
 Ten przykład używa funkcji `MsgBox` , aby wyświetlić komunikat o błędzie krytycznym w oknie dialogowym z przyciskiem tak i bez przycisków. Przycisk nie jest określony jako domyślna odpowiedź. Jest to realizowane przez połączenie `MsgBox` wartości stałych w jedno wyrażenie liczbowe. W takim przypadku dodanie 4 (kombinacji przycisku tak/nie) i 16 (okno **komunikatu krytycznego** ) i 256 (drugi przycisk jako przycisk domyślny) daje łącznie 276. Wartość zwracana przez `MsgBox` funkcję zależy od przycisku wybranego przez użytkownika: Funkcja Yes zwraca wartość 6; Wartość nie zwraca wartości 7.  
  
 [!code-vb[VbVbalrCatRef#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Prompt" />nie <see langword="String" /> jest wyrażeniem lub <paramref name="Title" /> jest nieprawidłowe.</exception>
        <exception cref="T:System.InvalidOperationException">Proces nie jest uruchomiony w trybie interaktywnym użytkownika.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Co najmniej jeden parametr nie jest elementem członkowskim <see langword="MsgBoxResult" /> ani <see langword="MsgBoxStyle" /> wyliczeniem.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MessageBox.Show(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Partition">
      <MemberSignature Language="C#" Value="public static string Partition (long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Partition(int64 Number, int64 Start, int64 Stop, int64 Interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Partition (Number As Long, Start As Long, Stop As Long, Interval As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Partition(long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="F#" Value="static member Partition : int64 * int64 * int64 * int64 -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Partition (Number, Start, Stop, Interval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int64" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Stop" Type="System.Int64" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Interval" Type="System.Int64" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagane. <see langword="Long" />. Liczba całkowita, którą chcesz zlokalizować w jednym z zakresów obliczeniowych.</param>
        <param name="Start">Wymagany. <see langword="Long" />. Liczba całkowita wskazująca początek zestawu zakresów obliczeniowych. <paramref name="Start" />nie może być mniejsza niż 0.</param>
        <param name="Stop">Wymagana. <see langword="Long" />. Liczba całkowita wskazująca koniec zestawu obliczanych zakresów. <paramref name="Stop" />nie może być mniejsze niż lub równe <paramref name="Start" />.</param>
        <param name="Interval">Wymagany. <see langword="Long" />. Liczba całkowita określająca rozmiar każdego zakresu obliczonego między <paramref name="Start" /> i. <paramref name="Stop" /> <paramref name="Interval" />nie może być mniejsza niż 1.</param>
        <summary>Zwraca ciąg reprezentujący zakres obliczeniowy, który zawiera liczbę.</summary>
        <returns>Ciąg reprezentujący zakres obliczeniowy, który zawiera liczbę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcja oblicza zestaw zakresów liczbowych, z których każda zawiera liczbę wartości określonych przez `Interval`. `Partition` Pierwszy zakres zaczyna się o `Start`, a ostatni zakres zostaje zakończony o `Stop`. Funkcja zidentyfikuje, który zakres zawiera `Number` i zwraca ciąg opisujący ten zakres. `Partition` Zakres jest reprezentowany w ciągu jako "*lowervalue*:*upperValue*", gdzie dolny koniec zakresu (*lowervalue*) jest oddzielony od górnego końca (*upperValue*) przez dwukropek (:).  
  
 W `Partition` razie potrzeby funkcja Wstawia spacje wiodące przed *lowervalue* i *upperValue* , tak aby obie te same liczby znaków były takie same jak ciąg reprezentujący wartość (`Stop` + 1). Daje to pewność, że jeśli używasz danych wyjściowych `Partition` funkcji z kilkoma `Number`wartościami, wynikowy tekst zostanie obsłużony prawidłowo podczas kolejnej operacji sortowania.  
  
 W poniższej tabeli przedstawiono niektóre przykładowe ciągi dla zakresów obliczanych przy użyciu trzech `Start`zestawów `Stop`, i `Interval`. Kolumny "pierwszy zakres" i "ostatni zakres" pokazują najniższe i najwyższe zakresy możliwe do uwzględnienia wartości `Start` i `Stop`. Kolumny "przed pierwszym zakresem" i "po ostatnim zakresie" pokazują ciągi zwracane dla wartości `Number` mniejszej niż `Start` i większej niż `Stop`odpowiednio.  
  
|`Start`|`Stop`|`Interval`|Przed pierwszym zakresem|Pierwszy zakres|Ostatni zakres|Po ostatnim zakresie|  
|-|-|-|-|-|-|-|  
|0|99|5|"   : -1"|2,0  czwart|" 95: 99 "|"100:"|  
|20|199|10|"   : 19|20C dnia|"190:199"|"200:"|  
|100|1010|20|"    : 99 "|"100: 119 "|"1000:1010"|"1011:"|  
  
 W powyższej tabeli trzeci wiersz przedstawia wynik, kiedy `Start` i `Stop` definiuje zbiór liczb, które nie mogą być równo podzielone przez `Interval`. Ostatni zakres `Interval` jest zakończony o `Stop`, co sprawia, że tylko 11 cyfr, nawet o długości 20.  
  
 Jeśli `Interval` jest 1, zakresem jest "`Number`:`Number`", niezależnie od `Start` argumentów i `Stop` . Na przykład jeśli `Number` jest 267, `Stop` is 1000 i `Interval` ma wartość 1, `Partition` zwraca ciąg "267: 267 ".  
  
 `Partition`może być przydatne podczas konstruowania zapytań bazy danych. Można utworzyć zapytanie SELECT, które pokazuje, ile zamówień występuje w różnych zakresach wartości, na przykład z wartościami faktur z zakresu od 1 do 1000, 1001 do 2000 i tak dalej.  
  
   
  
## Examples  
 Poniższy przykład konfiguruje serię zakresów dla dekad od 1950 do 2049. Lokalizuje wartość `year` w odpowiednim zakresie i `String` zwraca wartość pokazującą zakres. Jeśli `year` ma wartość 1984, na `Partition` przykład zwraca "1980:1989".  
  
 [!code-vb[VbVbalrFunctions#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" />&lt; 0, <paramref name="Stop" /> lub1<paramref name="Interval" />. &lt; =  <paramref name="Start" /> &lt;</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveSetting">
      <MemberSignature Language="C#" Value="public static void SaveSetting (string AppName, string Section, string Key, string Setting);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SaveSetting(string AppName, string Section, string Key, string Setting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveSetting (AppName As String, Section As String, Key As String, Setting As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveSetting(System::String ^ AppName, System::String ^ Section, System::String ^ Key, System::String ^ Setting);" />
      <MemberSignature Language="F#" Value="static member SaveSetting : string * string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.SaveSetting (AppName, Section, Key, Setting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Setting" Type="System.String" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">Wymagany. <see langword="String" />wyrażenie zawierające nazwę aplikacji lub projektu, do którego ma zastosowanie ustawienie.</param>
        <param name="Section">Wymagana. <see langword="String" />wyrażenie zawierające nazwę sekcji, w której jest zapisywane ustawienie klucza.</param>
        <param name="Key">Wymagana. <see langword="String" />wyrażenie zawierające nazwę zapisywanego ustawienia klucza.</param>
        <param name="Setting">Wymagane. Wyrażenie zawierające wartość <paramref name="Key" /> , która jest ustawiana.</param>
        <summary>Zapisuje lub tworzy wpis aplikacji w rejestrze systemu Windows. Funkcja zapewnia większą produktywność i wydajność w operacjach rejestru niż <see langword="SaveSetting" />. <see langword="My" /> Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Funkcja dodaje klucz do `HKEY_CURRENT_USER\Software\VB and VBA Program Settings`. `SaveSetting`  
  
 Jeśli z jakiegoś powodu nie można zapisać ustawienia klucza, wystąpi błąd.  
  
 `SaveSetting`wymaga, aby użytkownik był zalogowany, ponieważ działa w `HKEY_LOCAL_USER` kluczu rejestru, który nie jest aktywny, dopóki użytkownik nie zaloguje się interaktywnie.  
  
 Ustawienia rejestru, które mają być dostępne z procesu nieinterakcyjnego (na przykład MTX. exe), powinny być przechowywane w `HKEY_LOCAL_MACHINE\Software\` kluczach `HKEY_USER\DEFAULT\Software` rejestru lub.  
  
 `SaveSetting`wymaga `Write` i `Create` . <xref:System.Security.Permissions.RegistryPermission>  
  
   
  
## Examples  
 Poniższy przykład najpierw używa `SaveSetting` funkcji, aby wprowadzić wpisy w rejestrze systemu Windows `MyApp` dla aplikacji `DeleteSetting` , a następnie użyć funkcji, aby je usunąć.  
  
 [!code-vb[VbVbalrCatRef#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nie można utworzyć rejestru kluczy lub użytkownik nie jest zalogowany.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Odczytywanie z oraz zapisywanie do rejestru (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Shell">
      <MemberSignature Language="C#" Value="public static int Shell (string Pathname, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string Pathname, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (Pathname As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string PathName, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (PathName As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Style" Type="Microsoft.VisualBasic.AppWinStyle" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Wait" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Timeout" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Pathname">Wymagana. <see langword="String" />. Nazwa programu do wykonania wraz z wszystkimi wymaganymi argumentami i przełącznikami wiersza polecenia. <paramref name="PathName" />może również zawierać dysk i ścieżkę lub folder katalogu.
Jeśli nie znasz ścieżki do programu, możesz go zlokalizować przy użyciu funkcji <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" /> . Na przykład można wywołać <c>My. Computer. FileSystem. GetFiles\"("C:, true," testFile. txt ")</c>, która zwraca pełną ścieżkę każdego pliku o nazwie <c>testFile. txt</c> w dowolnym miejscu na dysku C:.\\</param>
        <param name="PathName">Wymagane. <see langword="String" />. Nazwa programu do wykonania wraz z wszystkimi wymaganymi argumentami i przełącznikami wiersza polecenia. <paramref name="PathName" />może również zawierać dysk i ścieżkę lub folder katalogu.  
 Jeśli nie znasz ścieżki do programu, możesz go zlokalizować przy użyciu funkcji <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" /> . Na przykład można wywołać <c>My. Computer. FileSystem. GetFiles\"("C:, true," testFile. txt ")</c>, która zwraca pełną ścieżkę każdego pliku o nazwie <c>testFile. txt</c> w dowolnym miejscu na dysku C:.\\</param>
        <param name="Style">Opcjonalny. <see langword="AppWinStyle" />. Wybrana wartość z <see cref="T:Microsoft.VisualBasic.AppWinStyle" /> określania stylu okna, w którym ma zostać uruchomiony program. Jeśli <paramref name="Style" /> zostanie pominięta, <see langword="Shell" /> używa <see langword="AppWinStyle.MinimizedFocus" />, która uruchamia program zminimalizowany i z fokusem.</param>
        <param name="Wait">Opcjonalny. <see langword="Boolean" />. Wartość wskazująca, <see langword="Shell" /> czy funkcja powinna oczekiwać na zakończenie działania programu. <see langword="False" />W <paramref name="Wait" /> przypadkupominięciazostanie<see langword="Shell" /> użyta wartość.</param>
        <param name="Timeout">Opcjonalny. <see langword="Integer" />. Liczba milisekund oczekiwania na zakończenie w przypadku, gdy <paramref name="Wait" /> jest <see langword="True" />to. Jeśli <paramref name="Timeout" /> zostanie pominięta, <see langword="Shell" /> używa-1, co oznacza brak limitu czasu i <see langword="Shell" /> nie zwraca do momentu zakończenia programu. W związku z tym, <paramref name="Timeout" /> Jeśli pominięto lub ustawisz wartość-1, możliwe <see langword="Shell" /> , że nigdy nie zwróci kontroli do programu.</param>
        <summary>Uruchamia program wykonywalny i zwraca liczbę całkowitą zawierającą identyfikator procesu programu, jeśli jest nadal uruchomiona.</summary>
        <returns>Liczba całkowita zawierająca identyfikator procesu programu, jeśli jest nadal uruchomiona. 0, jeśli program został już ukończony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość `Shell` zwracana funkcji zależy od tego, czy program o nazwie w `PathName` jest nadal wykonywany po `Shell` powrocie. Jeśli ustawisz `Wait` opcję `True` , a program zakończy działanie przed upływem `Shell` limitu czasu, zwraca wartość zero. Jeśli limit czasu wygaśnie lub zostanie pominięty `Wait` lub ustawiony na `False`, `Shell` zwraca identyfikator procesu programu. Identyfikator procesu to unikatowy numer identyfikujący uruchomiony program.  
  
## <a name="failure-to-start"></a>Błąd przy uruchomieniu  
 Jeśli funkcja nie może uruchomić nazwanego programu <xref:System.IO.FileNotFoundException> , wystąpi błąd. `Shell` Może się to zdarzyć na przykład podczas próby uruchomienia programu 16-bitowego, takiego jak `command.com`, z aplikacji za pomocą <xref:System.Windows.Forms?displayProperty=nameWithType>programu. Aby obejść obejście problemu, można uruchomić program 32-bitowy, który wywoła żądany program 16-bitowy. W przypadku `command.com`, można uruchamiać `cmd.exe` jako alternatywę.  
  
## <a name="waiting-for-completion"></a>Oczekiwanie na ukończenie  
 Domyślnie `Shell` funkcja uruchamia program asynchronicznie. Oznacza to, że program uruchomiony przy użyciu `Shell` funkcji może nie zakończyć wykonywania przed wykonaniem instrukcji `Shell` po funkcji. Jeśli chcesz poczekać na zakończenie działania programu przed kontynuowaniem, ustaw `Wait` opcję na. `True`  
  
## <a name="determining-the-exit-code"></a>Określanie kodu wyjścia  
 Proces może zwrócić *Kod zakończenia* po jego zakończeniu. Nie można jednak użyć `Shell` do pobrania tego kodu zakończenia, ponieważ `Shell` zwraca zero, jeśli czeka na zakończenie, a także ponieważ proces jest uruchamiany w innym obiekcie od `Shell`.  
  
 Aby pobrać kod zakończenia z procesu, należy napisać własny kod, aby zainicjować proces i poczekać na zakończenie działania. Poniższy przykład pokazuje, jak zainicjować proces, poczekać na jego zakończenie i pobrać jego kod zakończenia.  
  
```vb  
Dim procID As Integer  
Dim newProc As Diagnostics.Process  
newProc = Diagnostics.Process.Start("C:\WINDOWS\NOTEPAD.EXE")  
procID = newProc.Id  
newProc.WaitForExit()  
Dim procEC As Integer = -1  
If newProc.HasExited Then  
    procEC = newProc.ExitCode  
End If  
MsgBox("Process with ID " & CStr(ProcID) & _  
    " terminated with exit code " & CStr(procEC))  
```  
  
## <a name="protecting-the-file-specification"></a>Ochrona specyfikacji pliku  
 Należy zawsze ująć w znaki cudzysłowu całą ścieżkę i specyfikację pliku, jak pokazano w poniższym przykładzie.  
  
```vb  
ID = Shell("""C:\Program Files\display.exe"" -a -q", , True, 100000)  
```  
  
 Każda para sąsiadujących podwójnych cudzysłowów`" "`() w ciągu literału ciągu jest interpretowana jako jeden znak podwójnego cudzysłowu w ciągu. W związku z tym w powyższym przykładzie przedstawiono następujący `Shell` ciąg do funkcji:  
  
```console  
"C:\Program Files\display.exe" -a -q  
```  
  
 Jeśli ścieżka nie została ujęta w znaki cudzysłowu, system Windows będzie szukać pliku o nazwie `Program.exe` w C:\ Katalog, a nie `display.exe` w katalogu C:\Program Files.  
  
> [!IMPORTANT]
>  Jeśli ścieżka i specyfikacja pliku nie są ujęte w cudzysłów, istnieje zagrożenie bezpieczeństwa, jeśli nazwa pliku lub węzeł ścieżki zawiera spacje. W poprzednim przykładzie węzeł `\Program Files` ścieżki zawiera spację. Jeśli specyfikacja nie została ujęta w cudzysłów i program o nazwie `Program.exe` został zainstalowany w C:\\, na przykład przez nielegalne manipulowanie, system Windows wykona go zamiast `display.exe`.  
  
> [!IMPORTANT]
>  `Shell` Funkcja wymaga uprawnień do kodu niezarządzanego, co może mieć wpływ na wykonywanie w sytuacjach częściowej relacji zaufania. Aby uzyskać więcej informacji, <xref:System.Security.Permissions.SecurityPermission> Zobacz i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Poniższy przykład używa funkcji, `Shell` aby uruchomić aplikację określoną przez użytkownika. Określenie <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> jako drugi argument powoduje otwarcie aplikacji w normalnym rozmiarze i nadaje im fokus.  
  
 [!code-vb[VbVbalrFunctions#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Style" />nie mieści się w zakresie od 0 do 9 włącznie.</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="Shell" />nie można znaleźć <paramref name="PathName" /> pliku.</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="PathName" />jest <see langword="Nothing" />.</exception>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.NullReferenceException" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />
        <altmember cref="Overload:Microsoft.VisualBasic.Interaction.AppActivate" />
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static object Switch (params object[] VarExpr);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Switch(object[] VarExpr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Switch (ParamArray VarExpr As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Switch(... cli::array &lt;System::Object ^&gt; ^ VarExpr);" />
      <MemberSignature Language="F#" Value="static member Switch : obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Switch VarExpr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarExpr" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="VarExpr">Wymagana. <see langword="Object" />Tablica parametrów. Musi zawierać parzystą liczbę elementów. Można podać listę <see langword="Object" /> zmiennych lub wyrażeń oddzielonych przecinkami lub jednowymiarową <see langword="Object" /> tablicę elementów.</param>
        <summary>Oblicza listę wyrażeń i zwraca <see langword="Object" /> wartość odpowiadającą pierwszemu wyrażeniu z listy, która jest. <see langword="True" /></summary>
        <returns>Oblicza listę wyrażeń i zwraca <see langword="Object" /> wartość odpowiadającą pierwszemu wyrażeniu z listy, która jest. <see langword="True" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekazany `VarExpr` argument składa się z par wyrażeń i wartości. Funkcja oblicza nieparzyste wyrażenia z najniższym do najwyższego indeksu `VarExpr`w, i zwraca wartość parzystą skojarzoną z pierwszym `True`wyrażeniem, którego wynikiem jest. `Switch` Na przykład, jeśli `VarExpr(0)` jest `True`, `Switch` zwraca `VarExpr(1)`i jeśli `VarExpr(0)` jest `False` ,,`Switch` zwraca i`VarExpr(3)`tak dalej. `VarExpr(2)` `True`  
  
 Jeśli nie podasz `VarExpr` argumentu, `Switch` zwraca `Nothing`.  
  
> [!NOTE]
>  Wyrażenia na liście argumentów mogą zawierać wywołania funkcji. W ramach przygotowywania listy argumentów dla wywołania `Switch`, kompilator Visual Basic wywołuje każdą funkcję w każdym wyrażeniu. Oznacza to, że nie można polegać na określonej funkcji, która nie jest wywoływana, jeśli wyrażenie wcześniej na liście `True`argumentów ma wartość.  
  
   
  
## Examples  
 Poniższy przykład używa `Switch` funkcji, aby zwrócić nazwę języka, który pasuje do nazwy miasta. Jest to wymagane `Option Strict`. `Off`  
  
 [!code-vb[VbVbalrFunctions#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#48)]  
  
 Ponieważ przestrzeń nazw zawiera również klasę o nazwie <xref:System.Diagnostics.Switch> `Switch` , wywołanie funkcji musi być kwalifikowane z <xref:Microsoft.VisualBasic> przestrzenią nazw. <xref:System.Diagnostics>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Liczba argumentów jest nieparzysta.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">Parameter — Tablice</related>
      </Docs>
    </Member>
  </Members>
</Type>