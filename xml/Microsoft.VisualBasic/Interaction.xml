<Type Name="Interaction" FullName="Microsoft.VisualBasic.Interaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13d82136b10de43106c6355f53080123e65ade7d" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52734958" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Interaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Interaction extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Interaction" />
  <TypeSignature Language="VB.NET" Value="Public Module Interaction" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interaction sealed" />
  <TypeSignature Language="F#" Value="type Interaction = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Interaction" /> Moduł zawiera procedury używane do interakcji z obiektami, aplikacji i systemów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje słowa kluczowe języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które uruchomienie innych programów, wywołaj metodę lub właściwość, ustaw sygnał z komputera, podaj ciąg wiersza polecenia, manipulowania obiektami COM i kontrolowanie okien dialogowych.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Shell` funkcję, aby uruchomić aplikację, określone przez użytkownika. Określanie <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> jako drugi argument otwiera aplikację w normalny rozmiar i nadaje jej fokus.  
  
```vb  
Dim procID As Integer  
' Run calculator.  
procID = Shell("C:\Windows\system32\calc.exe", AppWinStyle.NormalFocus)  
' The preceding path is for Windows XP.  
' The Windows 2000 path is C:\WINNT\system32\calc.exe.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">Informacja i interakcja — Podsumowanie</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="AppActivate">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktywuje aplikację, która jest już uruchomiona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (int ProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(int32 ProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (ProcessId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(int ProcessId);" />
      <MemberSignature Language="F#" Value="static member AppActivate : int -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate ProcessId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProcessId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ProcessId">
          <see langword="Integer" /> Określanie numer identyfikacyjny ID procesu Win32 przypisane do tego procesu. Możesz użyć Identyfikatora zwrócone przez <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />, o ile nie jest równa zeru.</param>
        <summary>Aktywuje aplikację, która jest już uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć `AppActivate` zapewnić aktywnego okna aplikacji fokus. Może nie mieć dojście lub odwołanie do aktywnego okna lub nawet wiedzieć, które okno jest aktywne w danym momencie. W takim przypadku nie można użyć <xref:System.Windows.Forms.Control.Focus%2A> metody.  
  
 `AppActivate` Funkcja zmienia fokus do aplikacji o nazwie lub okna, ale nie ma wpływu na czy zminimalizowane lub zmaksymalizowane. Poza oknem aktywowana aplikacja przenosi fokus, gdy użytkownik wykona akcję do zmianie fokusu lub zamknij okno. Możesz użyć `Shell` funkcję, aby uruchomić aplikację i ustaw styl okna.  
  
 Jeśli używasz `Title` parametru `AppActivate` używa porównania bez uwzględniania wielkości liter, ale w przeciwnym razie wymaga dokładnego dopasowania na podstawie zawartości na pasku tytułu. Najpierw przeszukuje za pomocą okien najwyższego poziomu, a następnie za pomocą okien podrzędnych. Jeśli nie znajdzie dopasowania, zgłasza <xref:System.ArgumentException>.  
  
 Możesz użyć `AppActivate` tylko z procesów, które są właścicielami systemu windows. Większość aplikacji konsoli systemu windows, co oznacza, że nie są wyświetlane na liście procesów, które nie są jego własnością `AppActivate` wyszukiwania. Podczas uruchamiania z aplikacji konsoli, system tworzy oddzielny proces, aby uruchomić aplikację i zwraca wyniki do procesu konsoli. W związku z tym gdy użytkownik zażąda bieżący identyfikator procesu, otrzymasz identyfikator procesu to oddzielny proces, a nie identyfikatora procesu aplikacji konsoli  
  
 W czasie wykonywania `AppActivate` funkcja aktywuje wszelkie uruchomionej aplikacji z tytułem, który odpowiada `Title` lub z Identyfikatorem procesu, który odpowiada `ProcessId`. Jeśli nie ma dokładnego dopasowania, zostaje uaktywniony dowolnej aplikacji, których tytuł ciąg kończy się znakiem `Title`. Jeśli istnieje więcej niż jedną aplikację o nazwie `Title`, `AppActivate` funkcja arbitralnie wybiera jeden, aby aktywować.  
  
> [!NOTE]
>  `AppActivate` Funkcja wymaga, aby `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziom, który może mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.UIPermission> .  
  
   
  
## Examples  
 Ten przykład ilustruje różne przypadki użycia `AppActivate` funkcję, aby aktywować okna aplikacji. Jeśli nie jest uruchomiony proces Notatnik, przykład generuje <xref:System.ArgumentException>. `Shell` Procedurze przyjęto założenie, znajdują się w określonej ścieżce.  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (string Title);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(string Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (Title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(System::String ^ Title);" />
      <MemberSignature Language="F#" Value="static member AppActivate : string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate Title" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Title">
          <see langword="String" /> wyrażenie określające tytuł na pasku tytułu aplikacji, który chcesz uaktywnić. Możesz użyć tytuł przypisane do aplikacji podczas jej uruchamiania.</param>
        <summary>Aktywuje aplikację, która jest już uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć `AppActivate` zapewnić aktywnego okna aplikacji fokus. Może nie mieć dojście lub odwołanie do aktywnego okna lub nawet wiedzieć, które okno jest aktywne w danym momencie. W takim przypadku nie można użyć <xref:System.Windows.Forms.Control.Focus%2A> metody.  
  
 `AppActivate` Funkcja zmienia fokus do aplikacji o nazwie lub okna, ale nie ma wpływu na czy zminimalizowane lub zmaksymalizowane. Poza oknem aktywowana aplikacja przenosi fokus, gdy użytkownik wykona akcję do zmianie fokusu lub zamknij okno. Możesz użyć `Shell` funkcję, aby uruchomić aplikację i ustaw styl okna.  
  
 Jeśli używasz `Title` parametru `AppActivate` używa porównania bez uwzględniania wielkości liter, ale w przeciwnym razie wymaga dokładnego dopasowania na podstawie zawartości na pasku tytułu. Najpierw przeszukuje za pomocą okien najwyższego poziomu, a następnie za pomocą okien podrzędnych. Jeśli nie znajdzie dopasowania, zgłasza <xref:System.ArgumentException>.  
  
 Możesz użyć `AppActivate` tylko z procesów, które są właścicielami systemu windows. Większość aplikacji konsoli systemu windows, co oznacza, że nie są wyświetlane na liście procesów, które nie są jego własnością `AppActivate` wyszukiwania. Podczas uruchamiania z aplikacji konsoli, system tworzy oddzielny proces, aby uruchomić aplikację i zwraca wyniki do procesu konsoli. W związku z tym gdy użytkownik zażąda bieżący identyfikator procesu, otrzymasz identyfikator procesu to oddzielny proces, a nie identyfikatora procesu aplikacji konsoli  
  
 W czasie wykonywania `AppActivate` funkcja aktywuje wszelkie uruchomionej aplikacji z tytułem, który odpowiada `Title` lub z Identyfikatorem procesu, który odpowiada `ProcessId`. Jeśli nie ma dokładnego dopasowania, zostaje uaktywniony dowolnej aplikacji, których tytuł ciąg kończy się znakiem `Title`. Jeśli istnieje więcej niż jedną aplikację o nazwie `Title`, `AppActivate` funkcja arbitralnie wybiera jeden, aby aktywować.  
  
> [!NOTE]
>  `AppActivate` Funkcja wymaga, aby `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziom, który może mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.UIPermission> .  
  
   
  
## Examples  
 Ten przykład ilustruje różne przypadki użycia `AppActivate` funkcję, aby aktywować okna aplikacji. Jeśli nie jest uruchomiony proces Notatnik, przykład generuje <xref:System.ArgumentException>. `Shell` Procedurze przyjęto założenie, znajdują się w określonej ścieżce.  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dźwięki sygnał za pomocą głośników komputera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gęstość i czas trwania dźwięku są zależne od sprzętu i systemu oprogramowania i w związku z tym się różnić między komputerami.  
  
> [!NOTE]
>  `Beep` Funkcja wymaga, aby `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziom, który może mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.UIPermission>.  
  
   
  
## Examples  
 W tym przykładzie użyto `Beep` funkcji dźwiękowych sygnał za pomocą głośników komputera.  
  
 [!code-vb[VbVbalrCatRef#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/playing-sounds.md">Odtwarzanie dźwięków</related>
      </Docs>
    </Member>
    <Member MemberName="CallByName">
      <MemberSignature Language="C#" Value="public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, params object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CallByName (ObjectRef As Object, ProcName As String, UseCallType As CallType, ParamArray Args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CallByName(System::Object ^ ObjectRef, System::String ^ ProcName, Microsoft::VisualBasic::CallType UseCallType, ... cli::array &lt;System::Object ^&gt; ^ Args);" />
      <MemberSignature Language="F#" Value="static member CallByName : obj * string * Microsoft.VisualBasic.CallType * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CallByName (ObjectRef, ProcName, UseCallType, Args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ObjectRef" Type="System.Object" />
        <Parameter Name="ProcName" Type="System.String" />
        <Parameter Name="UseCallType" Type="Microsoft.VisualBasic.CallType" />
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ObjectRef">Wymagana. <see langword="Object" />. Wskaźnik do obiektu, udostępnianie właściwości lub metody.</param>
        <param name="ProcName">Wymagana. <see langword="String" />. Wyrażenia ciągu zawierającego nazwę właściwości lub metody dla obiektu.</param>
        <param name="UseCallType">Wymagana. Element członkowski wyliczenia o typie <see cref="T:Microsoft.VisualBasic.CallType" /> reprezentujący rodzaj procedury. Wartość <see langword="CallType" /> może być <see langword="Method" />, <see langword="Get" />, lub <see langword="Set" />.</param>
        <param name="Args">Opcjonalna. <see langword="ParamArray" />. Tablica parametrów, zawierającą argumenty do przekazania do właściwości lub wywołania metody.</param>
        <summary>Wykonuje metodę do obiektu, lub ustawia lub zwraca właściwość do obiektu.</summary>
        <returns>Wykonuje metodę do obiektu, lub ustawia lub zwraca właściwość do obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CallByName` Funkcja jest używana w czasie wykonywania do pobrania właściwości, ustawić właściwość lub wywołać metodę.  
  
   
  
## Examples  
 W poniższym przykładzie pierwszy wiersz używa `CallByName` można ustawić `Text` właściwości pola tekstowego, drugi wiersz pobiera wartość `Text` właściwości, a trzeci wiersz wywołuje `Move` metodę, aby przenieść pole tekstowe.  
  
 [!code-vb[VbVbalrFunctions#99](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#99)]  
  
 [!code-vb[VbVbalrFunctions#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#20)]  
  
 W następnym przykładzie użyto `CallByName` funkcja do wywołania `Add` i `Item` metody obiektu kolekcji.  
  
 [!code-vb[VbVbalrFunctions#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nieprawidłowy <paramref name="UseCallType" /> wartość; musi być <see langword="Method" />, <see langword="Get" />, lub <see langword="Set" />.</exception>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">Parameter — Tablice</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md">Wywoływanie właściwości lub metody za pomocą nazwy ciągu</related>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public static object Choose (double Index, params object[] Choice);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Choose(float64 Index, object[] Choice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Index As Double, ParamArray Choice As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Choose(double Index, ... cli::array &lt;System::Object ^&gt; ^ Choice);" />
      <MemberSignature Language="F#" Value="static member Choose : double * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Choose (Index, Choice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Double" />
        <Parameter Name="Choice" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Index">Wymagana. <see langword="Double" />. Wyrażenie numeryczne, które są wynikiem jest wartość między 1 a liczba elementów, które są przekazywane w <paramref name="Choice" /> argumentu.</param>
        <param name="Choice">Wymagana. <see langword="Object" /> Tablica parametrów. Możesz podać pojedynczej zmiennej lub wyrażenia, którego wynikiem jest <see langword="Object" /> typu danych, do listy <see langword="Object" /> zmienne i wyrażenia oddzielone przecinkami lub tablicy jednowymiarowej <see langword="Object" /> elementów.</param>
        <summary>Wybiera i zwraca wartość z listy argumentów.</summary>
        <returns>Wybiera i zwraca wartość z listy argumentów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Choose` Funkcja zwraca element członkowski lista przekazanych `Choice()`zgodnie z wartością `Index`. Wybrano pierwszego elementu członkowskiego listy podczas `Index` 1. Wybrano ostatniego członka listy podczas `Index` jest `UBound`(`Choice()`). Jeśli `Index` znajduje się poza te limity `Choose` zwraca `Nothing`.  
  
 Jeśli `Index` nie jest liczbą całkowitą, przed rozpoczęciem obliczania zostanie zaokrąglony do najbliższej liczby całkowitej.  
  
 Możesz użyć `Choose` wartość na liście możliwości.  
  
> [!NOTE]
>  Wyrażenia na liście argumentów może zawierać wywołania funkcji. W ramach przygotowań do listy argumentów dla wywołania `Choose`, kompilator Visual Basic wywołania każdej funkcji w każdym wyrażeniu. Oznacza to, że nie można polegać na określonej funkcji, nie jest wywoływana, jeśli wybrano innego wyrażenia przez `Index`.  
  
   
  
## Examples  
 W tym przykładzie użyto `Choose` funkcję, aby wyświetlić nazwę w odpowiedzi na indeks, który został przekazany do procedury w `Ind` parametru.  
  
 [!code-vb[VbVbalrFunctions#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public static string Command ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Command() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Command" />
      <MemberSignature Language="VB.NET" Value="Public Function Command () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Command();" />
      <MemberSignature Language="F#" Value="static member Command : unit -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Command " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca część argument wiersza polecenia używane do uruchamiania programu Visual Basic lub program wykonywalny opracowanych za pomocą Visual Basic. <see langword="My" /> Funkcja zapewnia większą produktywność i wydajność niż <see langword="Command" /> funkcji. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</summary>
        <returns>Zwraca część argument wiersza polecenia używane do uruchamiania programu Visual Basic lub program wykonywalny opracowanych za pomocą Visual Basic.  
  
<see langword="My" /> Funkcja zapewnia większą produktywność i wydajność niż <see langword="Command" /> funkcji. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po zwróceniu argumenty, możesz wyszukać ograniczniki, takie jak miejsca do magazynowania, ukośniki do tyłu lub do przodu, łączników ani znaków cudzysłowu, w celu dzielenia lub ciąg dla poszczególnych parametrów wyszukiwania.  
  
 W przypadku aplikacji utworzonych w języku Visual Basic i kompilowane do pliku .exe `Command` :: gettotalsize() zwróciło żadnych argumentów, które pojawiają się po nazwie aplikacji w wierszu polecenia w tym formularzu: `MyApp(cmdlineargs)`.  
  
   
  
## Examples  
 W tym przykładzie użyto `Command` funkcja zwraca argumenty wiersza polecenia w obiekcie, który zawiera tablicę.  
  
 [!code-vb[VbVbalrCatRef#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Environment.GetCommandLineArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/reference/command-line-compiler/index.md">Kompilator wiersza polecenia programu Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/program-structure/structure-of-a-visual-basic-program.md">Struktura programu Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static object CreateObject (string ProgId, string ServerName = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CreateObject(string ProgId, string ServerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (ProgId As String, Optional ServerName As String = &quot;&quot;) As Object" />
      <MemberSignature Language="F#" Value="static member CreateObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CreateObject (ProgId, ServerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="ServerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProgId">Wymagana. <see langword="String" />. Identyfikator programu obiektu do utworzenia.</param>
        <param name="ServerName">Opcjonalna. <see langword="String" />. Nazwa serwera sieci, w której zostanie utworzony obiekt. Jeśli <paramref name="ServerName" /> jest pustym ciągiem (""), używany jest komputer lokalny.</param>
        <summary>Tworzy i zwraca odwołanie do obiektu COM. <see langword="CreateObject" /> Nie można utworzyć wystąpień klas w języku Visual Basic, chyba że tych klas są jawnie widoczne jako składników modelu COM.</summary>
        <returns>Tworzy i zwraca odwołanie do obiektu COM. <see langword="CreateObject" /> Nie można utworzyć wystąpień klas w języku Visual Basic, chyba że tych klas są jawnie widoczne jako składników modelu COM.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby utworzyć wystąpienie składnika modelu COM, należy przypisać obiektu zwróconego przez `CreateObject` zmiennej obiektowej:  
  
```vb  
Sub CreateADODB()  
   Dim adoApp As Object  
   adoApp = CreateObject("ADODB.Connection")  
End Sub  
```  
  
 Typ zmiennej obiektu, używanej do przechowywania zwracany obiekt może wpłynąć na wydajność aplikacji. Deklarowanie zmiennej obiektu za pomocą `As Object` klauzuli tworzy zmienną, która może zawierać odwołanie do dowolnego typu obiektu. Dostęp do obiektu za pośrednictwem tej zmiennej jest jednak *z późnym wiązaniem*, oznacza to, że powiązanie występuje po uruchomieniu programu. Istnieje wiele przyczyn, że należy unikać późne powiązania, tym mniejszą wydajność aplikacji.  
  
 Można utworzyć zmienną obiektu, który skutkuje wczesne powiązania — oznacza to, że powiązanie, gdy program jest skompilowany. Aby to zrobić, Dodaj odwołanie do biblioteki typów obiektu z **COM** karcie **Dodaj odwołanie** okno dialogowe na **projektu** menu. Następnie można zadeklarować zmiennej obiektu określonego typu obiektu. W większości przypadków jest bardziej wydajne, aby użyć `Dim` instrukcji i podstawowego zestawu międzyoperacyjnego, aby utworzyć obiekty, niż jest korzystanie z `CreateObject` funkcji.  
  
## <a name="interacting-with-unmanaged-code"></a>Interakcja z niezarządzanym kodem  
 Innym problemem jest obiektów COM kodu niezarządzanego — kod bez zalet środowiska uruchomieniowego języka wspólnego. Uczciwe stopnia złożoności jest zaangażowane w mieszanie kod zarządzany języka Visual Basic z kodem niezarządzanym z modelu COM. Po dodaniu odwołania do obiektów COM, języka Visual Basic poszukuje podstawowego zestawu międzyoperacyjnego (PIA) dla tej biblioteki; Jeśli zostanie znaleziony, następnie używa go. Jeśli podstawowy zestaw MIĘDZYOPERACYJNY nie zostanie znaleziona, następnie tworzy zestawu współdziałania, który zawiera klasy lokalnej współdziałania dla każdej klasy w bibliotece COM. Aby uzyskać więcej informacji, zobacz [współdziałanie COM w aplikacjach .NET Framework](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md).  
  
 Ogólnie należy używać silnie powiązanych obiektów i podstawowe zestawy międzyoperacyjne, jeśli to możliwe. Przykłady poniżej użycia `CreateObject` wyłącznie do celów funkcji z obiektami programu Microsoft Office celów demonstracyjnych. Jednak te obiekty są łatwiejsze w użyciu i bardziej niezawodny, gdy jest używane z odpowiednią podstawowy zestaw międzyoperacyjny.  
  
## <a name="creating-an-object-on-a-remote-computer"></a>Tworzenie obiektu na komputerze zdalnym  
 Można utworzyć obiekt na zdalnym komputerze sieciowym przez przekazanie nazwy komputera w celu `ServerName` argument `CreateObject` funkcji. Ta nazwa jest taka sama jak nazwa maszyny część nazwy udziału: udział o nazwie "\\\MyServer\Public," `ServerName` jest "MyServer."  
  
> [!NOTE]
>  Zapoznaj się dokumentacją COM (zobacz Microsoft Developer Network) Aby uzyskać dodatkowe informacje dotyczące tworzenia aplikacji na zdalnym komputerze sieciowym jest dostępny. Może być konieczne dodanie klucza rejestru dla aplikacji.  
  
 Poniższy kod zwraca numer wersji wystąpienia programu Excel, uruchomione na komputerze zdalnym o nazwie `MyServer`:  
  
```vb  
Sub CreateRemoteExcelObj()  
    Dim xlApp As Object  
    ' Replace string "\\MyServer" with name of the remote computer.  
    xlApp = CreateObject("Excel.Application", "\\MyServer")  
    MsgBox(xlApp.Version)  
End Sub  
```  
  
 Jeśli nazwa serwera zdalnego jest nieprawidłowa lub jest niedostępna, występuje błąd w czasie wykonywania.  
  
> [!NOTE]
>  Użyj `CreateObject` po nie bieżącego wystąpienia obiektu. Jeśli jest już uruchomione wystąpienie obiektu, nowe wystąpienie jest uruchomiona, a następnie tworzony jest obiekt określonego typu. Aby użyć bieżącego wystąpienia lub aby uruchomić aplikację i załaduj plik, użyj `GetObject` funkcji. Jeśli obiekt został zarejestrowany w postaci jednego wystąpienia obiektu, tylko jedno wystąpienie obiektu jest tworzony, niezależnie od tego, jak wiele razy `CreateObject` jest wykonywany.  
  
## <a name="creating-framework-objects"></a>Tworzenie obiektów szablonu  
 Możesz użyć `CreateObject` funkcji tylko w celu utworzenia obiektu COM. Gdy nie ma dokładnie równoważne mechanizmu do tworzenia obiektu .NET Framework <xref:System.Activator> w <xref:System> przestrzeń nazw zawiera metody służące do tworzenia obiektów lokalnych lub zdalnych. W szczególności <xref:System.Activator.CreateInstance%2A> metody lub <xref:System.Activator.CreateInstanceFrom%2A> metody mogą być przydatne.  
  
> [!IMPORTANT]
>  `CreateObject` Funkcja wymaga, aby kod niezarządzany uprawnienie, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W poniższym przykładzie użyto `CreateObject` funkcji, aby utworzyć arkusz programu Microsoft Excel i zapisuje w pliku arkusza. Aby wykorzystać ten przykład, programu Excel musi zainstalowany na komputerze, na którym działa ten program. Ponadto należy dodać odwołanie do biblioteki typów z **COM** karcie **Dodaj odwołanie** okno dialogowe na **projektu** menu. Nazwa biblioteki typów różni się zależnie od używanej wersji programu Excel, zainstalowana na danym komputerze. Na przykład, nosi nazwę biblioteki typów dla programu Microsoft Excel 2002 **Biblioteka obiektów programu Microsoft Excel 10.0**.  
  
 [!code-vb[VbVbalrExcelObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Serwer jest niedostępny</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie istnieje żaden obiekt określonego typu</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.Activator" />
        <altmember cref="Overload:System.Activator.CreateInstance" />
        <altmember cref="Overload:System.Activator.CreateInstanceFrom" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">Współdziałanie COM w aplikacjach .NET Framework</related>
        <related type="Article" href="~/docs/framework/interop/index.md">Współdziałanie z kodem niezarządzanym</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteSetting">
      <MemberSignature Language="C#" Value="public static void DeleteSetting (string AppName, string Section = null, string Key = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteSetting(string AppName, string Section, string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteSetting (AppName As String, Optional Section As String = null, Optional Key As String = null)" />
      <MemberSignature Language="F#" Value="static member DeleteSetting : string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.DeleteSetting (AppName, Section, Key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę aplikacji lub projektu, którego dotyczy sekcja lub klucz Ustawienia.</param>
        <param name="Section">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę sekcji, z której ustawienie klucza jest usuwana. Jeśli tylko <paramref name="AppName" /> i <paramref name="Section" /> są dostarczane w określonej sekcji zostanie usunięta wraz ze wszystkich powiązanych ustawień klucza.</param>
        <param name="Key">Opcjonalna. <see langword="String" /> wyrażenie zawierające nazwę ustawienia klucza usuwany.</param>
        <summary>Usuwa sekcję lub ustawienie klucza z wpisu aplikacji w rejestrze systemu Windows. <see langword="My" /> Funkcji zapewnia większą produktywność i wydajność w operacjach rejestru niż <see langword="DeleteSetting" /> funkcji. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" /> .</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wszystkie argumenty są dostarczane, określone ustawienie zostanie usunięty. Błąd czasu wykonywania występuje, Jeśli spróbujesz użyć `DeleteSetting` w sekcji nieistniejącej lub ustawienie klucza.  
  
 `DeleteSetting` wymaga, że użytkownik zalogowany ponieważ działa ona w obszarze `HKEY_LOCAL_USER` klucza rejestru, który nie jest aktywne, dopóki użytkownik loguje się interaktywnie.  
  
 Ustawienia rejestru, które mają być dostępne z procesu nieinteraktywnego (np. Mtx.exe) powinny być przechowywane w obszarze `HKEY_LOCAL_MACHINE\Software\` lub `HKEY_USER\DEFAULT\Software` kluczy rejestru.  
  
   
  
## Examples  
 W poniższym przykładzie najpierw użyto `SaveSetting` procedury, aby tworzyć wpisy w rejestrze systemu Windows dla `MyApp` aplikacji, a następnie używa `DeleteSetting` funkcję, aby je usunąć. Ponieważ nie `Key` argument jest określony, cały `Startup` sekcji zostanie usunięty, w tym nazwy sekcji i wszystkie jego klucze.  
  
 [!code-vb[VbVbalrCatRef#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Użytkownik nie jest zalogowany.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Environ">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(int Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Wyrażenie obliczane albo ciąg zawierający nazwę zmiennej środowiskowej lub liczbą całkowitą odpowiadającej kolejności numerycznej ciągu środowisko w tabeli ciągów środowiska.</param>
        <summary>Zwraca ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</summary>
        <returns>Zwraca ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Expression` zawiera ciąg, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> funkcja zwraca tekst przypisany do ciągu określonego środowiska — czyli tekstu po znaku równości (=) w tabeli ciągów środowiska dla tej zmiennej środowiskowej. Jeśli ciąg w `Expression` nie można znaleźć w tabeli ciągów środowiska ciągiem o zerowej długości ("") jest zwracany.  
  
 Jeśli `Expression` zawiera liczba całkowita, ciąg zajmuje się, że jest zwracana pozycja liczbową w tabeli ciągów środowiska. W tym przypadku <xref:Microsoft.VisualBasic.Interaction.Environ%2A> zwraca cały tekst, łącznie z nazwą zmiennej środowiskowej. Jeśli w określonej pozycji jest nie ciągu środowiska <xref:Microsoft.VisualBasic.Interaction.Environ%2A> zwraca ciąg o zerowej długości.  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A> Funkcja wymaga uprawnienia środowiska, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:Microsoft.VisualBasic.Interaction.Environ%2A> funkcję, aby podać numer i długość `PATH` instrukcji z tabeli ciągów środowiska.  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> Brak.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. Wyrażenie obliczane albo ciąg zawierający nazwę zmiennej środowiskowej lub liczbą całkowitą odpowiadającej kolejności numerycznej ciągu środowisko w tabeli ciągów środowiska.</param>
        <summary>Zwraca ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</summary>
        <returns>Zwraca ciąg skojarzony ze zmienną środowiskową systemu operacyjnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `Expression` zawiera ciąg, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> funkcja zwraca tekst przypisany do ciągu określonego środowiska — czyli tekstu po znaku równości (=) w tabeli ciągów środowiska dla tej zmiennej środowiskowej. Jeśli ciąg w `Expression` nie można znaleźć w tabeli ciągów środowiska ciągiem o zerowej długości ("") jest zwracany.  
  
 Jeśli `Expression` zawiera liczba całkowita, ciąg zajmuje się, że jest zwracana pozycja liczbową w tabeli ciągów środowiska. W tym przypadku <xref:Microsoft.VisualBasic.Interaction.Environ%2A> zwraca cały tekst, łącznie z nazwą zmiennej środowiskowej. Jeśli w określonej pozycji jest nie ciągu środowiska <xref:Microsoft.VisualBasic.Interaction.Environ%2A> zwraca ciąg o zerowej długości.  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A> Funkcja wymaga uprawnienia środowiska, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:Microsoft.VisualBasic.Interaction.Environ%2A> funkcję, aby podać numer i długość `PATH` instrukcji z tabeli ciągów środowiska.  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> Brak.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllSettings">
      <MemberSignature Language="C#" Value="public static string[,] GetAllSettings (string AppName, string Section);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[,] GetAllSettings(string AppName, string Section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllSettings (AppName As String, Section As String) As String(,)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^, 2&gt; ^ GetAllSettings(System::String ^ AppName, System::String ^ Section);" />
      <MemberSignature Language="F#" Value="static member GetAllSettings : string * string -&gt; string[,]" Usage="Microsoft.VisualBasic.Interaction.GetAllSettings (AppName, Section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę aplikacji lub projektu, którego ustawienia kluczy są żądane.</param>
        <param name="Section">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę sekcji, w których kluczowe ustawienia są żądane. <see langword="GetAllSettings" /> Zwraca obiekt, który zawiera dwuwymiarową tablicę ciągów. Ciągi zawierają ustawień klucza w określonej sekcji, a także odpowiadające im wartości.</param>
        <summary>Zwraca listę ustawień klucza i odpowiadających im wartości (utworzone za pomocą <see langword="SaveSetting" />) z wpisu aplikacji w rejestrze systemu Windows. Za pomocą <see langword="My" /> funkcji zapewnia większą produktywność i wydajność w operacjach rejestru niż <see langword="GetAllSettings" />. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <returns>Zwraca listę ustawień klucza i odpowiadających im wartości (utworzone za pomocą <see langword="SaveSetting" />) z wpisu aplikacji w rejestrze systemu Windows.  
  
Za pomocą <see langword="My" /> funkcji zapewnia większą produktywność i wydajność w operacjach rejestru niż <see langword="GetAllSettings" />. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetAllSettings` Zwraca niezainicjowanej `Object` Jeśli `AppName` lub `Section` nie istnieje.  
  
 Ponieważ działa ona w obszarze `HKEY_LOCAL_USER` klucza rejestru, który nie jest aktywne, dopóki użytkownik loguje się interaktywnie, `GetAllSettings` wymaga, że użytkownik jest zalogowany.  
  
 Ustawienia rejestru, które mają być dostępne z procesu nieinteraktywnego (np. Mtx.exe) powinny być przechowywane w obszarze `HKEY_LOCAL_MACHINE\Software\` lub `HKEY_USER\DEFAULT\Software` kluczy rejestru.  
  
   
  
## Examples  
 W tym przykładzie najpierw zastosowano `SaveSetting` funkcję, aby tworzyć wpisy w rejestrze systemu Windows dla aplikacji, określony jako `AppName`, następnie używa `GetAllSettings` funkcję, aby wyświetlić ustawienia. Należy pamiętać, że aplikacja nazwy i `Section` nazwy nie mogą zostać pobrane z `GetAllSettings`. Na koniec `DeleteSetting` funkcja usuwa wpisy aplikacji.  
  
 [!code-vb[VbVbalrCatRef#68](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Użytkownik nie jest zalogowany.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Odczytywanie z oraz zapisywanie do rejestru (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (string PathName = null, string Class = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObject(string PathName, string Class) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObject (Optional PathName As String = null, Optional Class As String = null) As Object" />
      <MemberSignature Language="F#" Value="static member GetObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.GetObject (PathName, Class)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Class" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">Opcjonalna. <see langword="String" />. Pełna ścieżka i nazwa pliku zawierającego obiektu do pobrania. Jeśli <paramref name="PathName" /> zostanie pominięty, <paramref name="Class" /> jest wymagana.</param>
        <param name="Class">Jeśli wymagane <paramref name="PathName" /> nie podano. <see langword="String" />. Ciąg reprezentujący klasę obiektu. <paramref name="Class" /> Argument ma następujące składni i części: 
 <c>AppName</c><c>.</c><c>objecttype</c>  
  
[1 | 1] Parametr 
[1 | 2]. Opis elementu 
[2 | 1] <c>appname</c>  
  
[2 | 2] Wymagane. <see langword="String" />. Nazwa aplikacji dostarczającej obiekt.  
  
[3 | 1] <c>objecttype</c>  
  
[3 | 2] Wymagane. <see langword="String" />. Typ lub klasa obiektu do utworzenia.</param>
        <summary>Zwraca odwołanie do obiektu dostarczonego przez składnik COM.</summary>
        <returns>Zwraca odwołanie do obiektu dostarczonego przez składnik COM.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `GetObject` funkcję, aby załadować wystąpienia składnika modelu COM z pliku. Ilustruje to poniższy przykład.  
  
```vb  
Dim CADObject As Object  
CADObject = GetObject("C:\CAD\schema.cad")  
```  
  
 Podczas wykonywania tego kodu, aplikacja skojarzona z określonym `PathName` uruchamiania i aktywacji obiektu w określonym pliku.  
  
## <a name="default-cases"></a>Przypadki domyślne  
 Jeśli `PathName` jest ciągiem o zerowej długości (`""`), `GetObject` zwraca nowe wystąpienie obiektu typu określonej klasy. Jeśli `PathName` argument zostanie pominięty, `GetObject` zwraca aktualnie aktywny obiekt typu klasy, określone w `Class`. Jeśli nie istnieje żaden obiekt określonego typu, wystąpi błąd.  
  
## <a name="accessing-a-subobject"></a>Uzyskiwanie dostępu do podobiektów.  
 Niektóre aplikacje umożliwiają aktywowania podobiektem skojarzonych z plikiem. Aby to zrobić, Dodaj znak wykrzyknika (`!`) na końcu nazwy pliku i postępuj zgodnie z jej z ciągiem, który identyfikuje części pliku chcesz aktywować. Aby uzyskać informacje na temat sposobu tworzenia tych parametrów, zobacz dokumentację dla aplikacji, który utworzył obiekt.  
  
 Na przykład w aplikacji rysowania może mieć wiele warstw do rysowania przechowywane w pliku. Można Użyj poniższego kodu, aby aktywować warstwy w rysunku o nazwie `schema.cad`.  
  
```vb  
layerObject = GetObject("C:\CAD\schema.cad!Layer3")  
```  
  
## <a name="specifying-a-class"></a>Określanie klasy  
 Jeśli nie określisz obiektu `Class`, automatyzacji określa aplikacji do uruchamiania i obiektu można aktywować, na podstawie nazwy pliku, należy podać. Jednak niektóre pliki, może obsługiwać więcej niż jednej klasy obiektu. Przykładowo, rysunek może obsługiwać trzy różne typy obiektów: `Application` obiektu `Drawing` obiektu, a `Toolbar` obiektów, które są częścią tego samego pliku. Aby określić, który obiekt w pliku, który chcesz uaktywnić, Użyj opcjonalnego `Class` argumentu. Ilustruje to poniższy przykład.  
  
```vb  
Dim drawObj As Object  
drawObj = GetObject("C:\Drawings\sample.drw", "Figment.Drawing")  
```  
  
 W powyższym przykładzie `Figment` jest nazwą aplikacji rysowania i `Drawing` jest jednym z typów obsługiwanych obiektów.  
  
## <a name="using-the-object"></a>Używanie obiektu  
 Po aktywacji obiektu odwołasz się do niego w kodzie przy użyciu zmiennej obiektowej została zadeklarowana. W powyższym przykładzie uzyskujesz dostęp do właściwości i metody nowego obiektu przy użyciu zmiennej obiektowej `drawObj`. Ilustruje to poniższy przykład.  
  
```vb  
drawObj.Line(9, 90)  
drawObj.InsertText(9, 100, "Hello, world.")  
drawObj.SaveAs("C:\Drawings\sample.drw")  
```  
  
> [!NOTE]
>  Użyj `GetObject` działać po bieżącego wystąpienia obiektu lub jeśli chcesz utworzyć obiekt przy użyciu pliku załadowane. Jeśli istnieje nie bieżącego wystąpienia, a nie chcesz, aby uruchomić obiektu załadować pliku, użyj <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> funkcji.  
>   
>  Jeśli obiekt został zarejestrowany jako obiektu ActiveX w jednym wystąpieniu, tylko jedno wystąpienie obiektu jest tworzony, niezależnie od tego, jak wiele razy `CreateObject` jest wywoływana. W przypadku obiektu jednego wystąpienia `GetObject` zawsze zwraca to samo wystąpienie, gdy zostanie wywołana z ciągiem o zerowej długości (`""`) składni i powoduje błąd, jeśli `PathName` argument zostanie pominięty. Nie można użyć `GetObject` uzyskać odwołanie do klasy utworzonej za pomocą Visual Basic.  
  
> [!IMPORTANT]
>  `GetObject` Funkcja wymaga, aby kod niezarządzany uprawnienie, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W poniższym przykładzie użyto `GetObject` funkcję, aby uzyskać odwołanie do określonego arkusza programu Excel (`excelObj`). Używa ona arkusza `Application` właściwości, aby uwidocznić programu Excel, zamknij go i wykonywać inne czynności. Przy użyciu dwóch wywołań interfejsu API, `detectExcel` procedura wygląda dla programu Excel, a jeśli działa on przechodzi on w tabeli obiektu z systemem. Pierwsze wywołanie `GetObject` powoduje błąd, jeśli program Excel nie jest już uruchomiona, który w tym przykładzie powoduje, że `excelWasNotRunning` ustawienie flagi `True`. Drugie wywołanie `GetObject` Określa plik, aby otworzyć. Jeśli program Excel nie jest jeszcze uruchomiona, drugie wywołanie uruchamia go i zwraca odwołanie do arkusza, reprezentowane przez określony plik `test.xls`. Plik musi istnieć w określonej lokalizacji. w przeciwnym razie Visual Basic zgłasza <xref:System.IO.FileNotFoundException>. Następnie przykładowy kod sprawia, że program Excel, jak i okno zawierające określony arkusz.  
  
 W tym przykładzie wymaga `Option Strict Off` ponieważ używa ona późne wiązanie, których obiekty są przypisywane do zmiennych typu `Object`. Można określić `Option Strict On` i zadeklarować obiekty określonych typów obiektów, jeśli dodasz odwołanie do biblioteki typów programu Excel z **COM** karcie **Dodaj odwołanie** okna dialogowego  **Projekt** menu w programie Visual Studio.  
  
 [!code-vb[VbVbalrExcelObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#2)]  
  
 [!code-vb[VbVbalrExcelObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#4)]  
  
 [!code-vb[VbVbalrExcelObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#5)]  
  
 Gdy wywołujesz `getExcel` funkcji, dokonuje aby zobaczyć, czy program Excel jest już uruchomiona. Jeśli nie jest dostępne, tworzone jest wystąpienie.  
  
> [!IMPORTANT]
>  Dla uproszczenia poprzednim przykładzie przyjęto założenie, że wszystkie okna o nazwie `XLMAIN` należy do wystąpienia programu Microsoft Excel. Jeśli inny obiekt, prawdopodobnie jest uruchamiany przez nielegalnego naruszeniem utworzone okno o tej nazwie, otrzyma wszystkich wiadomości, które są przeznaczone dla programu Excel. W aplikacji do użycia w środowisku produkcyjnym, należy uwzględnić niektórych bardziej rygorystyczne testy, aby sprawdzić, czy `XLMAIN` rzeczywiście należy do programu Excel.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Nie istnieje żaden obiekt typu określonej klasy.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie istnieje żaden obiekt przy użyciu określonej ścieżki i nazwy pliku.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict — Instrukcja</related>
      </Docs>
    </Member>
    <Member MemberName="GetSetting">
      <MemberSignature Language="C#" Value="public static string GetSetting (string AppName, string Section, string Key, string Default = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetSetting(string AppName, string Section, string Key, string Default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetting (AppName As String, Section As String, Key As String, Optional Default As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member GetSetting : string * string * string * string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.GetSetting (AppName, Section, Key, Default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Default" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę aplikacji lub projektu, którego ustawienia klucza jest wymagane.</param>
        <param name="Section">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę sekcji, w którym znajduje się ustawienie klucza.</param>
        <param name="Key">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę ustawienia klucza do zwrócenia.</param>
        <param name="Default">Opcjonalna. Wyrażenia zawierającego wartość do zwrócenia, jeśli wartość nie została ustawiona <paramref name="Key" /> ustawienie. W przypadku pominięcia <paramref name="Default" /> będzie traktowana jako ciąg o zerowej długości ("").</param>
        <summary>Zwraca wartość ustawienia klucza z wpisu aplikacji w rejestrze systemu Windows. <see langword="My" /> Funkcji zapewnia większą produktywność i wydajność w operacjach rejestru niż <see langword="GetAllSettings" />. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <returns>Zwraca wartość ustawienia klucza z wpisu aplikacji w rejestrze systemu Windows.  
  
<see langword="My" /> Funkcji zapewnia większą produktywność i wydajność w operacjach rejestru niż <see langword="GetAllSettings" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jakiekolwiek elementy o nazwie w `GetSetting` argumentów nie istnieją, `GetSetting` zwraca wartość `Default`.  
  
 Ponieważ działa ona w obszarze `HKEY_LOCAL_USER` klucza rejestru, który nie jest aktywne, dopóki użytkownik loguje się interaktywnie, `GetSetting` wymaga, że użytkownik jest zalogowany.  
  
 Ustawienia rejestru, które mają być dostępne z procesu nieinteraktywnego (np. Mtx.exe) powinny być przechowywane w obszarze `HKEY_LOCAL_MACHINE\Software\` lub `HKEY_USER\DEFAULT\Software` kluczy rejestru.  
  
 `GetSetting` wymaga `Read` <xref:System.Security.Permissions.RegistryPermission> .  
  
   
  
## Examples  
 W tym przykładzie najpierw zastosowano `SaveSetting` funkcję, aby tworzyć wpisy w rejestrze systemu Windows dla aplikacji, określony jako `AppName`, a następnie używa `GetSetting` funkcję, aby wyświetlić jedno z ustawień. Ponieważ `Default` argument jest określony, jedna z wartości jest gwarantowane do zwrócenia. Należy zauważyć, że `Section` nazwy nie mogą zostać pobrane z `GetSetting`. Na koniec `DeleteSetting` funkcja usuwa wpisy dla wszystkich aplikacji.  
  
 [!code-vb[VbVbalrCatRef#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Jeden lub więcej argumentów nie są <see langword="String" /> wyrażeń lub użytkownik nie jest zalogowany.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Odczytywanie z oraz zapisywanie do rejestru (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IIf">
      <MemberSignature Language="C#" Value="public static object IIf (bool Expression, object TruePart, object FalsePart);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IIf(bool Expression, object TruePart, object FalsePart) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IIf (Expression As Boolean, TruePart As Object, FalsePart As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IIf(bool Expression, System::Object ^ TruePart, System::Object ^ FalsePart);" />
      <MemberSignature Language="F#" Value="static member IIf : bool * obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.IIf (Expression, TruePart, FalsePart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
        <Parameter Name="TruePart" Type="System.Object" />
        <Parameter Name="FalsePart" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Wymagana. <see langword="Boolean" />. Wyrażenie, które ma zostać oceniona.</param>
        <param name="TruePart">Wymagana. <see langword="Object" />. Zwracane, gdy <paramref name="Expression" /> daje w wyniku <see langword="True" />.</param>
        <param name="FalsePart">Wymagana. <see langword="Object" />. Zwracane, gdy <paramref name="Expression" /> daje w wyniku <see langword="False" />.</param>
        <summary>Zwraca jedną z dwóch obiektów, w zależności od wyniku obliczenia wyrażenia.</summary>
        <returns>Zwraca jedną z dwóch obiektów, w zależności od wyniku obliczenia wyrażenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IIf` Funkcja udostępnia odpowiednik dla ternary [Operator warunkowy:?:](https://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271) w programie Visual C++.  
  
   
  
## Examples  
 W tym przykładzie użyto `IIf` funkcję, aby ocenić `testMe` parametru `checkIt` procedury i zwraca słowo "Large" Jeśli ilość jest większa niż 1000; w przeciwnym razie zwraca słowo "Małe".  
  
 [!code-vb[VbVbalrFunctions#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#33)]  
  
 Należy pamiętać, że jeśli `Option Strict` jest `On`, należy użyć `CStr` — słowo kluczowe umożliwia jawne konwertowanie zwrot z `Object` do `String`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict — Instrukcja</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Funkcje konwersji typu</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/if-then-else-statement.md">If...Then...Else — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case — Instrukcja (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="InputBox">
      <MemberSignature Language="C#" Value="public static string InputBox (string Prompt, string Title = &quot;&quot;, string DefaultResponse = &quot;&quot;, int XPos = -1, int YPos = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputBox(string Prompt, string Title, string DefaultResponse, int32 XPos, int32 YPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputBox (Prompt As String, Optional Title As String = &quot;&quot;, Optional DefaultResponse As String = &quot;&quot;, Optional XPos As Integer = -1, Optional YPos As Integer = -1) As String" />
      <MemberSignature Language="F#" Value="static member InputBox : string * string * string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.InputBox (Prompt, Title, DefaultResponse, XPos, YPos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.String" />
        <Parameter Name="Title" Type="System.String" />
        <Parameter Name="DefaultResponse" Type="System.String" />
        <Parameter Name="XPos" Type="System.Int32" />
        <Parameter Name="YPos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Prompt">Wymagane <see langword="String" /> wyrażenie wyświetlane jako komunikat w oknie dialogowym. Maksymalna długość <paramref name="Prompt" /> wynosi około 1024 znaków, w zależności od szerokości znaków używany. Jeśli <paramref name="Prompt" /> składa się z więcej niż jeden wiersz, można oddzielić wiersze przy użyciu znaku powrotu karetki (<see langword="Chr(" />13<see langword=")" />), znaków wysuwu wiersza (<see langword="Chr(" />10<see langword=")" />), lub powrotu karetki/wiersza kanału informacyjnego kombinacji (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) między każdym wierszem.</param>
        <param name="Title">Opcjonalna. <see langword="String" /> wyrażenie jest wyświetlana na pasku tytułu okna dialogowego. Jeżeli pominięto <paramref name="Title" />, nazwa aplikacji jest umieszczany na pasku tytułu.</param>
        <param name="DefaultResponse">Opcjonalna. <see langword="String" /> wyrażenie wyświetlane w polu tekstowym jako wartość domyślna, jeśli podano żadne inne dane wejściowe. Jeżeli pominięto <paramref name="DefaultResponse" />, pole tekstowe wyświetlanych jest puste.</param>
        <param name="XPos">Opcjonalna. Wyrażenia liczbowego, który określa wartość w twipach, odległości od lewej krawędzi okna dialogowego od lewej krawędzi ekranu. Jeżeli pominięto <paramref name="XPos" />, okno dialogowe jest wyśrodkowywana w poziomie.</param>
        <param name="YPos">Opcjonalna. Wyrażenia liczbowego, który określa wartość w twipach, odległość od górnej krawędzi okna dialogowego, w górnej części ekranu. Jeżeli pominięto <paramref name="YPos" />, okno dialogowe jest umieszczony w pionie około jedna trzecia sposób w dół ekranu.</param>
        <summary>Wyświetla monit w oknie dialogowym, czeka, aż użytkownikowi wprowadzanie tekstu lub kliknij przycisk, a następnie zwraca ciąg zawierający zawartości pola tekstowego.</summary>
        <returns>Wyświetla monit w oknie dialogowym, czeka, aż użytkownikowi wprowadzanie tekstu lub kliknij przycisk, a następnie zwraca ciąg zawierający zawartości pola tekstowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli użytkownik kliknie **anulować**, zostanie zwrócony ciąg o zerowej długości.  
  
 Aby określić więcej niż pierwszy argument, należy użyć `InputBox` funkcji w wyrażeniu. Jeżeli pominięto żadnych argumentów pozycyjnych muszą zachować odpowiedni przecinek oddzielający.  
  
> [!NOTE]
>  `InputBox` Funkcja wymaga, aby `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziom, który może mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz i <xref:System.Security.Permissions.UIPermission> .  
  
   
  
## Examples  
 W tym przykładzie pokazano różne sposoby użycia `InputBox` funkcję, aby monitować użytkownika o wprowadzenie wartości. Jeśli x i y pozycji są pomijane, okno dialogowe jest automatycznie wyśrodkowane na odpowiednich osi. Zmienna `MyValue` zawiera wartości wprowadzone przez użytkownika, jeśli użytkownik kliknie przycisk OK lub naciśnie klawisz ENTER.  
  
 [!code-vb[VbVbalrCatRef#67](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MsgBox">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.MsgBoxResult MsgBox(object Prompt, valuetype Microsoft.VisualBasic.MsgBoxStyle Buttons, object Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MsgBox (Prompt As Object, Optional Buttons As MsgBoxStyle = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, Optional Title As Object = null) As MsgBoxResult" />
      <MemberSignature Language="F#" Value="static member MsgBox : obj * Microsoft.VisualBasic.MsgBoxStyle * obj -&gt; Microsoft.VisualBasic.MsgBoxResult" Usage="Microsoft.VisualBasic.Interaction.MsgBox (Prompt, Buttons, Title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.Object" />
        <Parameter Name="Buttons" Type="Microsoft.VisualBasic.MsgBoxStyle" />
        <Parameter Name="Title" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Prompt">Wymagana. <see langword="String" /> wyrażenie wyświetlane jako komunikat w oknie dialogowym. Maksymalna długość <paramref name="Prompt" /> wynosi około 1024 znaków, w zależności od szerokości znaków używany. Jeśli <paramref name="Prompt" /> składa się z więcej niż jeden wiersz, można oddzielić wiersze przy użyciu znaku powrotu karetki (<see langword="Chr(" />13<see langword=")" />), znaków wysuwu wiersza (<see langword="Chr(" />10<see langword=")" />), lub (kombinacja return/wysuw wiersza znaku powrotu karetki <see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) między każdym wierszem.</param>
        <param name="Buttons">Opcjonalna. Wyrażenia liczbowego, który jest sumą wartości określenie liczby i typu przycisków, aby wyświetlić styl ikon do użycia, tożsamość przycisk domyślny i modalności okna komunikatu. Jeżeli pominięto <paramref name="Buttons" />, wartością domyślną jest zero.</param>
        <param name="Title">Opcjonalna. <see langword="String" /> wyrażenie jest wyświetlana na pasku tytułu okna dialogowego. Jeżeli pominięto <paramref name="Title" />, nazwa aplikacji jest umieszczany na pasku tytułu.</param>
        <summary>Wyświetla komunikat w oknie dialogowym, czeka na zatwierdzenie użytkownika kliknij przycisk, a następnie zwraca liczbę całkowitą, wskazującą, której przycisk został kliknięty.</summary>
        <returns>
          <list type="table">
            <item>
              <term> Stała 
 </term>
              <description> Wartość 
 </description>
            </item>
            <item>
              <term>
                <see langword="OK" />
              </term>
              <description> 1 
 </description>
            </item>
            <item>
              <term>
                <see langword="Cancel" />
              </term>
              <description> 2 
 </description>
            </item>
            <item>
              <term>
                <see langword="Abort" />
              </term>
              <description> 3 
 </description>
            </item>
            <item>
              <term>
                <see langword="Retry" />
              </term>
              <description> 4 
 </description>
            </item>
            <item>
              <term>
                <see langword="Ignore" />
              </term>
              <description> 5 
 </description>
            </item>
            <item>
              <term>
                <see langword="Yes" />
              </term>
              <description> 6 
 </description>
            </item>
            <item>
              <term>
                <see langword="No" />
              </term>
              <description> 7 
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeżeli pominięto żadnych argumentów pozycyjnych muszą zachować odpowiedni przecinek oddzielający.  
  
 Jeśli okno dialogowe wyświetla **anulować** przycisku, naciskając klawisz ESC działa tak samo jak kliknięcie **Anuluj**  
  
 Jeśli okno dialogowe zawiera **pomocy** przycisku dla okna dialogowego jest dostępna Pomoc kontekstowa. Jednakże jest zwracana żadna wartość, dopóki jeden z innych przycisków, jest wybierany. W aplikacji formularza Windows, wybierając **pomocy** wykonuje przycisk <xref:System.Windows.Forms.Control.HelpRequested> zdarzenie dla formularza.  
  
> [!NOTE]
>  `MsgBox` Funkcja wymaga, aby `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> poziom, który może mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.UIPermission>.  
  
 `MsgBoxStyle` Wartości wyliczenia są wymienione w poniższej tabeli.  
  
|Element członkowski|Wartość|Opis|  
|-|-|-|  
|Element członkowski|Wartość|Opis|  
|`OKOnly`|0|Tylko przycisk wyświetla OK.|  
|`OKCancel`|1|Wyświetla OK i przyciski Anuluj.|  
|`AbortRetryIgnore`|2|Wyświetla przyciski przerwania, ponów próbę i Ignoruj.|  
|`YesNoCancel`|3|Wyświetla tak, nie i przyciski "Anuluj".|  
|`YesNo`|4|Wyświetla przyciski Tak i nie.|  
|`RetryCancel`|5|Wyświetla przyciski ponownych prób i Anuluj.|  
|`Critical`|16|Wyświetla ikonę krytyczny komunikat.|  
|`Question`|32|Ikona ostrzeżenia zapytanie Wyświetla.|  
|`Exclamation`|48|Wyświetla ikonę ostrzeżenia.|  
|`Information`|64|Wyświetla komunikat z informacjami o ikona.|  
|`DefaultButton1`|0|Pierwszy przycisk jest domyślna.|  
|`DefaultButton2`|256|Drugi przycisk jest domyślna.|  
|`DefaultButton3`|512|Trzeci przycisk jest domyślna.|  
|`ApplicationModal`|0|Modalne jest aplikacja. Użytkownik musi odpowiedzieć w oknie komunikatu przed kontynuowaniem pracy w bieżącej aplikacji.|  
|`SystemModal`|4096|System jest modalnych. Wszystkie aplikacje są wstrzymywane, dopóki użytkownik nie wykona w oknie komunikatu.|  
|`MsgBoxSetForeground`|65536|Określa okno komunikatu jako oknie na pierwszym planie.|  
|`MsgBoxRight`|524288|Tekst jest wyrównany do prawej.|  
|`MsgBoxRtlReading`|1048576|Określa, że tekst powinien być wyświetlany jako prawej do lewej odczytu w systemach języków hebrajskiego i arabskiego.|  
  
 Pierwsza grupa wartości (0 – 5) zawiera opis liczby i typu przyciski wyświetlane w oknie dialogowym. Druga grupa (16, 32, 48, 64) opisuje styl ikon. Trzecia grupa (0, 256, 512) określa przycisk domyślny. Czwarty grupie (0, 4096) określa modalności okna komunikatu, a piąta grupy określa, czy okno komunikatu oknie na pierwszym planie, oraz wyrównanie i kierunek tekstu. Podczas dodawania liczb do utworzenia końcowej dla `Buttons` argument, użyj tylko jedną cyfrę z każdej grupy.  
  
   
  
## Examples  
 W tym przykładzie użyto `MsgBox` funkcję, aby wyświetlić komunikat Błąd krytyczny w oknie dialogowym z przyciski Tak i nie. Przycisk nie jest określony jako domyślny. Jest to realizowane przez łączenie `MsgBox` wartości stałych do jednego wyrażenia liczbowego. W przypadku dodawania 4 (tak/nie przycisk kombinacji) lub 16 ( **krytyczny komunikat** okna) i 256 (drugi przycisk jako przycisk domyślny) daje w sumie 276. Wartość zwrócona przez obiekt `MsgBox` funkcji zależy od przycisku wybranego przez użytkownika: tak, zwraca wartość 6. Nie zwraca wartości w wersji 7 lub nowszej.  
  
 [!code-vb[VbVbalrCatRef#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Prompt" /> nie jest <see langword="String" /> wyrażenie lub <paramref name="Title" /> jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">Proces nie jest uruchomiony w trybie interaktywnym użytkownika.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Jeden lub więcej parametrów nie jesteś uczestnikiem programu <see langword="MsgBoxResult" /> lub <see langword="MsgBoxStyle" /> wyliczenia.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MessageBox.Show(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Partition">
      <MemberSignature Language="C#" Value="public static string Partition (long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Partition(int64 Number, int64 Start, int64 Stop, int64 Interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Partition (Number As Long, Start As Long, Stop As Long, Interval As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Partition(long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="F#" Value="static member Partition : int64 * int64 * int64 * int64 -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Partition (Number, Start, Stop, Interval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
        <Parameter Name="Start" Type="System.Int64" />
        <Parameter Name="Stop" Type="System.Int64" />
        <Parameter Name="Interval" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Wymagana. <see langword="Long" />. Liczba całkowita, który ma zostać umieszczony w obrębie jednego z zakresów obliczeniowych.</param>
        <param name="Start">Wymagana. <see langword="Long" />. Liczba całkowita, który wskazuje początek zestaw zakresów obliczeniowych. <paramref name="Start" /> nie może być mniejsza niż 0.</param>
        <param name="Stop">Wymagana. <see langword="Long" />. Liczba całkowita, który wskazuje koniec zestaw zakresów obliczeniowych. <paramref name="Stop" /> nie może być mniejsza lub równa <paramref name="Start" />.</param>
        <param name="Interval">Wymagana. <see langword="Long" />. Liczba całkowita, która wskazuje rozmiar każdego zakresu obliczane między <paramref name="Start" /> i <paramref name="Stop" />. <paramref name="Interval" /> nie może być mniejsza niż 1.</param>
        <summary>Zwraca ciąg reprezentujący obliczony zakres, który zawiera numer.</summary>
        <returns>Zwraca ciąg reprezentujący obliczony zakres, który zawiera numer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Partition` Funkcja oblicza zestaw zakresów liczbowych, każdy z nich zawierający liczbę wartości określonych przez `Interval`. Pierwszy zakres, który rozpoczyna się od `Start`, i kończy się ostatni zakres `Stop`. `Partition` Następnie identyfikuje zakres, który zawiera `Number` i zwraca ciąg opisujący tego zakresu. Zakres jest reprezentowana w ciągu jako "*lowervalue*:*wartość_górna*", gdzie Niski koniec zakresu (*lowervalue*) są oddzielone od wysokiej klasy ( *wartość_górna*) za pomocą dwukropka (:).  
  
 Jeśli to konieczne, `Partition` funkcja Wstawia spacje przed *lowervalue* i *wartość_górna* tak, aby mają taką samą liczbę znaków, jak ciąg reprezentujący (wartość `Stop` + 1). Gwarantuje to, że jeśli używasz danych wyjściowych `Partition` funkcji za pomocą kilku wartości `Number`, tekst wynikowy będzie obsługiwane poprawnie podczas każdej operacji, kolejne sortowania.  
  
 W poniższej tabeli przedstawiono niektóre ciągi próbki dla zakresów obliczane przy użyciu trzech zestawów `Start`, `Stop`, i `Interval`. "Najpierw należeć do zakresu" i kolumny "Ostatni zakres" Pokaż najmniejsza i największa zakresy możliwe podane wartości `Start` i `Stop`. "Przed pierwszym zakresem" i "po ostatni zakres" kolumny zawierają ciągi zwrócone wartości `Number` mniej niż `Start` większą niż `Stop`, odpowiednio.  
  
|`Start`|`Stop`|`Interval`|Przed pierwszym zakresu|Pierwszy zakres|Ostatni zakres|Po ostatni zakres|  
|-|-|-|-|-|-|-|  
|0|99|5|"   : -1"|"0: 4"|"95: 99"|"100:"|  
|20|199|10|": 19"|"20:29"|"190:199"|"200:"|  
|100|1010|20|": 99"|"100: 119"|"1000:1010"|"1011:"|  
  
 W powyższej tabeli, trzeci wiersz zawiera wynik po `Start` i `Stop` definiują zestaw liczb, który nie może być równomiernie podzielone przez `Interval`. Ostatni zakres kończy się na `Stop`, dzięki czemu tylko 11 cyfr, nawet jeśli `Interval` wynosi 20.  
  
 Jeśli `Interval` wynosi 1, zakres jest "`Number`:`Number`", niezależnie od tego `Start` i `Stop` argumentów. Na przykład jeśli `Number` jest 267 `Stop` wynosi 1000, a `Interval` wynosi 1, `Partition` zwraca "267: 267".  
  
 `Partition` może być przydatne podczas tworzenia zapytania do bazy danych. Można utworzyć zapytania SELECT, która pokazuje, jak wiele zamówień występują w różnych zakresach wartość, na przykład za pomocą faktury wartości z zakresu od 1 do 1000, 1001 do 2000 i tak dalej.  
  
   
  
## Examples  
 W poniższym przykładzie ustawiono serię zakresów od dziesięcioleci z 1950 do 2049. Klient zlokalizuje wartość `year` we właściwym zakresie i zwraca `String` przedstawiający zakres wartości. Jeśli `year` ma wartość 1984 roku, na przykład `Partition` zwraca "1980:1989".  
  
 [!code-vb[VbVbalrFunctions#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 0, <paramref name="Stop" /> &lt; =  <paramref name="Start" />, lub <paramref name="Interval" /> &lt; 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveSetting">
      <MemberSignature Language="C#" Value="public static void SaveSetting (string AppName, string Section, string Key, string Setting);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SaveSetting(string AppName, string Section, string Key, string Setting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveSetting (AppName As String, Section As String, Key As String, Setting As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveSetting(System::String ^ AppName, System::String ^ Section, System::String ^ Key, System::String ^ Setting);" />
      <MemberSignature Language="F#" Value="static member SaveSetting : string * string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.SaveSetting (AppName, Section, Key, Setting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Setting" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę aplikacji lub projektu, do którego stosuje się ustawienia.</param>
        <param name="Section">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę sekcji, w której zapisany jest ustawienie klucza.</param>
        <param name="Key">Wymagana. <see langword="String" /> wyrażenie zawierające nazwę ustawienia klucza są zapisywane.</param>
        <param name="Setting">Wymagana. Wyrażenia zawierającego wartość, do którego <paramref name="Key" /> jest ustawiany na.</param>
        <summary>Zapisuje lub tworzy wpis aplikacji w rejestrze systemu Windows. <see langword="My" /> Funkcji zapewnia większą produktywność i wydajność w operacjach rejestru niż <see langword="SaveSetting" />. Aby uzyskać więcej informacji, zobacz <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SaveSetting` Funkcja dodaje klucz do `HKEY_CURRENT_USER\Software\VB and VBA Program Settings`.  
  
 Jeśli nie można zapisać ustawienia klucza jakiegokolwiek powodu, wystąpi błąd.  
  
 `SaveSetting` wymaga, że użytkownik zalogowany ponieważ działa ona w obszarze `HKEY_LOCAL_USER` klucza rejestru, który nie jest aktywne, dopóki użytkownik loguje się interaktywnie.  
  
 Ustawienia rejestru, które mają być dostępne z procesu nieinteraktywnego (np. Mtx.exe) powinny być przechowywane w obszarze `HKEY_LOCAL_MACHINE\Software\` lub `HKEY_USER\DEFAULT\Software` kluczy rejestru.  
  
 `SaveSetting` wymaga `Write` i `Create` <xref:System.Security.Permissions.RegistryPermission> .  
  
   
  
## Examples  
 W poniższym przykładzie najpierw użyto `SaveSetting` funkcję, aby tworzyć wpisy w rejestrze systemu Windows dla `MyApp` aplikacji, a następnie używa `DeleteSetting` funkcję, aby je usunąć.  
  
 [!code-vb[VbVbalrCatRef#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nie można utworzyć klucza rejestru lub użytkownik nie jest zalogowany.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">Odczytywanie z oraz zapisywanie do rejestru (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Shell">
      <MemberSignature Language="C#" Value="public static int Shell (string Pathname, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string Pathname, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (Pathname As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (Pathname, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string PathName, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (PathName As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Style" Type="Microsoft.VisualBasic.AppWinStyle" Index="1" />
        <Parameter Name="Wait" Type="System.Boolean" Index="2" />
        <Parameter Name="Timeout" Type="System.Int32" Index="3" />
      </Parameters>
      <Docs>
        <param name="PathName">Wymagana. <see langword="String" />. Nazwa programu do wykonania, oraz wszelkie wymagane argumenty i przełączniki wiersza polecenia. <paramref name="PathName" /> może również obejmować dysk i ścieżkę do katalogu lub folderu.  
  
Jeśli nie znasz ścieżkę do programu, można użyć <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" /> ich wyszukanie. Na przykład, można wywołać <c>My.Computer.FileSystem.GetFiles ("C:\", ma wartość True,"testFile.txt")</c>, która zwraca pełną ścieżkę każdego pliku o nazwie <c>testFile.txt</c> dowolne miejsce na dysku C:\\ .</param>
        <param name="Pathname">To be added.</param>
        <param name="Style">Opcjonalna. <see langword="AppWinStyle" />. Wartość wybrana z <see cref="T:Microsoft.VisualBasic.AppWinStyle" /> Określanie stylu okna, w którym program jest uruchomienie. Jeśli <paramref name="Style" /> zostanie pominięty, <see langword="Shell" /> używa <see langword="AppWinStyle.MinimizedFocus" />, co spowoduje włączenie programu zminimalizowanymi i z fokusem.</param>
        <param name="Wait">Opcjonalna. <see langword="Boolean" />. Wartość wskazującą czy <see langword="Shell" /> funkcja powinna czekać na zakończenie programu. Jeśli <paramref name="Wait" /> zostanie pominięty, <see langword="Shell" /> używa <see langword="False" />.</param>
        <param name="Timeout">Opcjonalna. <see langword="Integer" />. Liczba milisekund oczekiwania na ukończenie, jeśli <paramref name="Wait" /> jest <see langword="True" />. Jeśli <paramref name="Timeout" /> zostanie pominięty, <see langword="Shell" /> korzysta z -1, co oznacza brak limitu czasu i <see langword="Shell" /> nie może zwracać aż do zakończenia programu. W związku z tym jeśli pominięto <paramref name="Timeout" /> lub zestawu, IT-1, jest możliwe, <see langword="Shell" /> może nigdy nie zwraca formantu do programu.</param>
        <summary>Uruchamia program wykonywalny i zwraca liczbę całkowitą zawierającą identyfikator procesu programu, jeśli jest nadal uruchomiona.</summary>
        <returns>Uruchamia program wykonywalny i zwraca liczbę całkowitą zawierającą identyfikator procesu programu, jeśli jest nadal uruchomiona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez `Shell` funkcji zależy od tego, czy program o nazwie w `PathName` jest nadal wykonywane podczas `Shell` zwraca. Jeśli ustawisz `Wait` do `True` i program zakończy się przed upływem limitu czasu, `Shell` zwraca wartość zero. Jeśli upłynie limit czasu lub jeśli pominięto `Wait` lub ustaw go na `False`, `Shell` zwraca identyfikator procesu programu. Identyfikator procesu jest unikatowy numer, który identyfikuje uruchomionego programu.  
  
## <a name="failure-to-start"></a>Błąd przy uruchomieniu  
 Jeśli `Shell` funkcji nie można uruchomić program o nazwie <xref:System.IO.FileNotFoundException> wystąpi błąd. Może się to zdarzyć, na przykład, gdy użytkownik spróbuje uruchomić program 16-bitowy, takich jak `command.com`, z aplikacji za pomocą <xref:System.Windows.Forms?displayProperty=nameWithType>. Obejście tego problemu można uruchomić program 32-bitowy, który wywołuje odpowiednią 16-bitowy program. W przypadku właściwości `command.com`, możesz uruchomić `cmd.exe` alternatywą.  
  
## <a name="waiting-for-completion"></a>Oczekiwanie na ukończenie  
 Domyślnie `Shell` funkcja uruchamia program asynchronicznie. Oznacza to, że program uruchomiony przy użyciu `Shell` funkcji nie może zakończyć wykonywania przed następujące instrukcje `Shell` funkcji są wykonywane. Jeśli chcesz czekać na zakończenie przed programu należy kontynuować, ustaw `Wait` do `True`.  
  
## <a name="determining-the-exit-code"></a>Określanie kodu wyjścia  
 Proces może zwrócić *kod zakończenia* podczas jego działania. Nie można jednak użyć `Shell` pobrać ten kod wyjścia, ponieważ `Shell` zwraca zero, jeśli oczekuje na zakończenie, a także, że proces działają w różnych obiektów z `Shell`.  
  
 Aby pobrać kodu zakończenia z procesu, należy napisać własny kod do zainicjowania procesu i poczekaj na zakończenie. Poniższy przykład pokazuje, jak zainicjować proces, poczekaj na jego zakończenie i pobrać jego kod zakończenia.  
  
```vb  
Dim procID As Integer  
Dim newProc As Diagnostics.Process  
newProc = Diagnostics.Process.Start("C:\WINDOWS\NOTEPAD.EXE")  
procID = newProc.Id  
newProc.WaitForExit()  
Dim procEC As Integer = -1  
If newProc.HasExited Then  
    procEC = newProc.ExitCode  
End If  
MsgBox("Process with ID " & CStr(ProcID) & _  
    " terminated with exit code " & CStr(procEC))  
```  
  
## <a name="protecting-the-file-specification"></a>Ochrona specyfikacji pliku  
 Cały specyfikację ścieżki i powinna zawsze ująć w znaki cudzysłowu, co ilustruje poniższy przykład.  
  
```vb  
ID = Shell("""C:\Program Files\display.exe"" -a -q", , True, 100000)  
```  
  
 Każda para sąsiadujących podwójnego cudzysłowu (`" "`) w ciągu literału jest interpretowany jako znak jednego podwójnego cudzysłowu w ciągu. W związku z tym, poprzedni przykład przedstawia następujący ciąg do `Shell` funkcji:  
  
```console  
"C:\Program Files\display.exe" -a -q  
```  
  
 Jeśli nie masz ścieżki ujęta w znaki cudzysłowu, Windows będzie szukać pliku o nazwie `Program.exe` w katalogu C:\ zamiast `display.exe` w katalogu C:\Program Files.  
  
> [!IMPORTANT]
>  Jeśli specyfikację ścieżki i nie należy ująć w cudzysłów, stanowi zagrożenie bezpieczeństwa, jeśli nazwa pliku lub ścieżka węzła zawiera spacje. W powyższym przykładzie węzeł ścieżki `\Program Files` znajduje się spacja. Jeśli specyfikacja nie były w znaki cudzysłowu i program o nazwie `Program.exe` były zainstalowane w C:\\, na przykład przy modyfikowaniu nielegalnego Windows jest wykonywany je zamiast `display.exe`.  
  
> [!IMPORTANT]
>  `Shell` Funkcja wymaga, aby kod niezarządzany uprawnienie, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission> i [uprawnienia dostępu kodu](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Shell` funkcję, aby uruchomić aplikację, określone przez użytkownika. Określanie <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> jako drugi argument otwiera aplikację w normalny rozmiar i nadaje jej fokus.  
  
 [!code-vb[VbVbalrFunctions#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Style" /> nie jest w zakresie od 0 do 9 (włącznie).</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <see langword="Shell" /> Nie można odnaleźć <paramref name="PathName" /> pliku.</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="PathName" /> jest <see langword="Nothing" />.</exception>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.NullReferenceException" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />
        <altmember cref="Overload:Microsoft.VisualBasic.Interaction.AppActivate" />
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static object Switch (params object[] VarExpr);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Switch(object[] VarExpr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Switch (ParamArray VarExpr As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Switch(... cli::array &lt;System::Object ^&gt; ^ VarExpr);" />
      <MemberSignature Language="F#" Value="static member Switch : obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Switch VarExpr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarExpr" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="VarExpr">Wymagana. <see langword="Object" /> Tablica parametrów. Musi mieć parzystej liczby elementów. Możesz podać listę <see langword="Object" /> zmiennych lub wyrażeń rozdzielone przecinkami lub tablicą jednowymiarową <see langword="Object" /> elementów.</param>
        <summary>Oblicza listę wyrażeń i zwraca <see langword="Object" /> wartość odpowiadającą pierwszemu wyrażeniu na liście, który jest <see langword="True" />.</summary>
        <returns>Oblicza listę wyrażeń i zwraca <see langword="Object" /> wartość odpowiadającą pierwszemu wyrażeniu na liście, który jest <see langword="True" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Argument podany do `VarExpr` składa się z par wyrażeń i wartości. `Switch` Funkcja dokonuje oceny wyrażenia nieparzystą, od najniższego do najwyższego indeksu w `VarExpr`i zwraca wartość parzystą skojarzone z pierwsze wyrażenie, które daje w wyniku `True`. Na przykład jeśli `VarExpr(0)` jest `True`, `Switch` zwraca `VarExpr(1)`i jeśli `VarExpr(0)` jest `False` , ale `VarExpr(2)` jest `True`, `Switch` zwraca `VarExpr(3)`i tak dalej.  
  
 Jeśli nie podasz `VarExpr` argument `Switch` zwraca `Nothing`.  
  
> [!NOTE]
>  Wyrażenia na liście argumentów może zawierać wywołania funkcji. W ramach przygotowań do listy argumentów dla wywołania `Switch`, kompilator Visual Basic wywołania każdej funkcji w każdym wyrażeniu. Oznacza to, że nie można polegać na określonej funkcji, nie jest wywoływana, jeśli wyrażenie wcześniej na liście argumentów jest `True`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `Switch` funkcja zwraca nazwę języka, która jest zgodna z nazwą miasta. Wymaga, aby `Option Strict` można `Off`.  
  
 [!code-vb[VbVbalrFunctions#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#48)]  
  
 Ponieważ <xref:System.Diagnostics> przestrzeń nazw zawiera także klasę o nazwie <xref:System.Diagnostics.Switch>, wywołanie `Switch` funkcja musi być kwalifikowana za <xref:Microsoft.VisualBasic> przestrzeni nazw.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Liczba argumentów jest nieparzysta.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case — Instrukcja (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">Parameter — Tablice</related>
      </Docs>
    </Member>
  </Members>
</Type>