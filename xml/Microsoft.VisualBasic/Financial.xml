<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="57d983ed1455c9ffc817c50bb44441942ca1e484" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317630" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Financial" /> Moduł zawiera procedury używane do wykonywania operacji finansowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje Visual Basic elementy członkowskie biblioteki wykonawczej, które wykonują obliczenia finansowe, takie jak amortyzacja, obecne i przyszłe wartości, stopy odsetek, stawki zwrotne i płatności.  
  
   
  
## Examples  
 W tym przykładzie `Rate` funkcja służy do obliczania stopy oprocentowania pożyczki, z uwzględnieniem łącznej liczby płatności (`TotPmts`), kwoty płatności pożyczki (`Payment`), wartości bieżącej lub głównej pożyczki (`PVal`), przyszłej wartość pożyczki (`FVal`), liczba, która wskazuje, czy płatność przypada na początku, czy na końcu okresu płatności (`PayType`) i przybliżeniu oczekiwanej stopy odsetek (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic elementy członkowskie biblioteki wykonawczej</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Wymagana. Początkowy koszt zasobu.</param>
        <param name="Salvage">Wymagana. Wartość środka trwałego na końcu okresu użytkowania.</param>
        <param name="Life">Wymagana. Długość użytecznego okresu istnienia elementu zawartości.</param>
        <param name="Period">Wymagane. Okres, dla którego jest obliczana amortyzacja zasobów.</param>
        <param name="Factor">Opcjonalny. Częstotliwość, z jaką zmniejsza się saldo. W przypadku pominięcia przyjmuje się wartość 2 (metoda podwójnie odrzucana).</param>
        <summary>Zwraca wartość określającą amortyzację zasobu w określonym przedziale czasu przy użyciu metody podwójnie degresywnej lub innej określonej metody.</summary>
        <returns>Amortyzacja zasobu w określonym przedziale czasu przy użyciu metody podwójnie malejącego salda lub innej określonej metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda podwójnie malejące saldo oblicza amortyzację przy przyspieszonej szybkości. Amortyzacja jest najwyższa w pierwszym okresie i zmniejsza się w kolejnych okresach.  
  
 Argumenty `Life` i`Period` muszą być wyrażone w tych samych jednostkach. Na przykład, jeśli `Life` jest określony w miesiącach, `Period` należy również pomieścić w miesiącach. Wszystkie argumenty muszą być liczbami dodatnimi.  
  
 `DDB` Funkcja używa następującej formuły, aby obliczyć amortyzację w danym okresie:  
  
 Amortyzacja/okres = ((koszt-odzysk) * współczynnik)/czas_życia  
  
   
  
## Examples  
 Ten przykład używa funkcji `DDB` , aby zwrócić amortyzację zasobu w określonym przedziale czasowym (`InitCost`), z wartością odzyskaną na końcu okresu użytkowania zasobów (`SalvageVal`), łączny okres istnienia zasobu w latach (`LifeTime`) oraz okres w latach, dla którego jest obliczana amortyzacja (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /><paramref name="Salvage" /> =0&lt; , 0, <paramref name="Period" /> =0&gt; , lub <paramref name="Period" /> &lt; &lt;<paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stawka odsetek na okres. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="NPer">Wymagany. Łączna liczba okresów płatności w ramach raty rocznej. Na przykład w przypadku płatności miesięcznych w przypadku pożyczki z czterema samochodami pożyczki mają łącznie 4 x 12 (lub 48) okresów płatności.</param>
        <param name="Pmt">Wymagane. Płatność, która ma być wykonywana każdego okresu. Płatności zwykle zawierają podmiot zabezpieczeń i interesy, które nie ulegają zmianie w okresie obowiązywania pożyczki.</param>
        <param name="PV">Opcjonalny. Wartość obecna (lub ryczałtowa) serii przyszłych płatności. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> , który określa, kiedy płatności są należne. Ten argument musi być albo <see langword="DueDate.EndOfPeriod" /> jeśli płatności są należne na koniec okresu płatności, lub <see langword="DueDate.BegOfPeriod" /> jeśli płatności są należne na początku okresu. W <see langword="DueDate.EndOfPeriod" /> przypadku pominięcia przyjmowana jest wartość.</param>
        <summary>Zwraca wartość określającą przyszłą wartość renty w oparciu o okresowe, stałe płatności i stałą stawkę odsetek.</summary>
        <returns>Przyszła wartość pożyczki na podstawie okresowych, stałych płatności i stałej stopy oprocentowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to seria stałych płatności gotówkowych dokonanych w czasie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 Argumenty `Rate` i`NPer` muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład, jeśli `Rate` jest obliczana przy użyciu miesięcy `NPer` , należy również obliczyć w miesiącach.  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
   
  
## Examples  
 W `FV` tym przykładzie funkcja zwraca przyszłą wartość inwestycji uwzględniającą stawkę procentową naliczaną na okres (`APR / 12`), łączną liczbę płatności (`TotPmts`), płatność (`Payment`), bieżącą wartość inwestycje (`PVal`) i liczba, która wskazuje, czy płatność jest dokonywana na początku, czy na końcu okresu płatności (`PayType`). Zwróć uwagę, `Payment` że ponieważ reprezentuje płatną gotówkę, jest to liczba ujemna.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagany. Stawka odsetek na okres. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="Per">Wymagany. Okres płatności z zakresu od 1 do <paramref name="NPer" />.</param>
        <param name="NPer">Wymagana. Łączna liczba okresów płatności w ramach raty rocznej. Na przykład w przypadku płatności miesięcznych w przypadku pożyczki z czterema samochodami pożyczki mają łącznie 4 x 12 (lub 48) okresów płatności.</param>
        <param name="PV">Wymagany. Bieżąca wartość lub wartość dzisiaj serii przyszłych płatności lub przyjęć. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalny. Wartość w przyszłości lub Saldo środków pieniężnych po dokonaniu ostatecznej płatności. Na przykład przyszła wartość pożyczki to $0, ponieważ jej wartość jest równa końcowej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> , który określa, kiedy płatności są należne. Ten argument musi mieć wartość <c>DueDate. EndOfPeriod</c> , jeśli płatności są należne na końcu okresu płatności lub <c>DueDate. BegOfPeriod</c> , jeśli płatności są należne na początku okresu. W przypadku pominięcia przyjmowana jest wartość <c>DueDate. EndOfPeriod</c> .</param>
        <summary>Zwraca wartość określającą płatność odsetek dla danego okresu raty rocznej na podstawie okresowych, stałych płatności i ustalonej stopy odsetek.</summary>
        <returns>Płatność odsetek w danym okresie renty w oparciu o okresowe, stałe płatności i ustaloną stawkę odsetek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to seria stałych płatności gotówkowych dokonanych w czasie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 Argumenty `Rate` i`NPer` muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład, jeśli `Rate` jest obliczana przy użyciu miesięcy `NPer` , należy również obliczyć w miesiącach.  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
   
  
## Examples  
 Ten przykład używa funkcji `IPmt` , aby obliczyć, jaka część płatności jest interesująca, gdy wszystkie płatności są równej wartości. Podana`APR / 12`stawka procentowa odsetek na okres (), okres płatności, dla którego jest wymagana część odsetek (`Period`), Łączna liczba płatności (`TotPmts`), wartość obecna lub główna pożyczka (`PVal`), przyszła wartość pożyczki (`FVal`) i numer wskazujący, czy płatność przypada na początku, czy na końcu okresu płatności (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" />= 0 <paramref name="Per" /> lub&gt; &lt;<paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Wymagany. <see langword="Double" /> Tablica określająca wartości przepływu gotówki. Tablica musi zawierać co najmniej jedną wartość ujemną (płatność) i jedną wartość dodatnią (paragon).</param>
        <param name="Guess">Opcjonalny. Obiekt określający szacowaną wartość zostanie zwrócony przez <see langword="IRR" />. W <paramref name="Guess" /> przypadku pominięcia jest 0,1 (10 procent).</param>
        <summary>Zwraca wartość określającą wewnętrzną szybkość zwrotu dla serii okresowych przepływów pieniężnych (płatności i wpływów).</summary>
        <returns>Wewnętrzna stawka zwrotu dla serii okresowych przepływów pieniężnych (płatności i wpływów).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wewnętrzna stopa zwrotu to stawka odsetek otrzymywana za inwestycję, która obejmuje płatności i wpływy w regularnych odstępach czasu.  
  
 `IRR` Funkcja używa kolejności wartości w tablicy, aby interpretować kolejność płatności i wpływów. Upewnij się, że w prawidłowej kolejności wprowadzisz wartości płatności i paragonów. Przepływ gotówki dla każdego okresu nie musi być ustalony, ponieważ jest przeznaczony do renty.  
  
 `IRR`jest obliczana według iteracji. Rozpoczynając od wartości `Guess`, przechodzi przez `IRR` obliczenie do momentu, aż wynik będzie dokładny do 0,00001 procent. Jeśli `IRR` nie można znaleźć wyniku po 20 próbach, kończy się niepowodzeniem.  
  
   
  
## Examples  
 W tym przykładzie `IRR` funkcja zwraca wewnętrzną szybkość powrotu dla serii pięciu przepływów pieniężnych zawartych w tablicy `Values()`. Pierwszy element tablicy to ujemny przepływ gotówki reprezentujący koszty uruchomienia firmy. Pozostałe cztery przepływy pieniężne reprezentują pozytywne przepływy pieniężne w kolejnych czterech latach. `Guess`to Szacowana wewnętrzna szybkość powrotu.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartości argumentu tablicy są nieprawidłowe lub <paramref name="Guess" /> &lt;=-1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Wymagane. <see langword="Double" /> Tablica określająca wartości przepływu gotówki. Tablica musi zawierać co najmniej jedną wartość ujemną (płatność) i jedną wartość dodatnią (paragon).</param>
        <param name="FinanceRate">Wymagane. Stawka odsetek płacona jako koszt finansowania.</param>
        <param name="ReinvestRate">Wymagany. Stawka odsetek uzyskana za zyski z inwestycji pieniężnych.</param>
        <summary>Zwraca wartość określającą zmodyfikowaną wewnętrzną szybkość zwrotu dla serii okresowych przepływów pieniężnych (płatności i wpływów).</summary>
        <returns>Zmodyfikowana wewnętrzna stawka zwrotu dla serii okresowych przepływów pieniężnych (płatności i wpływów).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmodyfikowana wewnętrzna stopa zwrotu to wewnętrzna stopa zwrotu, gdy płatności i przychody są finansowane przy użyciu różnych stawek. Funkcja uwzględnia koszt inwestycji (`FinanceRate`) oraz stawkę odsetek uzyskaną przy reinwestowaniu środków pieniężnych (`ReinvestRate`). `MIRR`  
  
 Argumenty `FinanceRate` i`ReinvestRate` są procentami wyrażonymi jako wartości dziesiętne. Na przykład 12 procent jest wyrażona jako 0,12.  
  
 `MIRR` Funkcja używa kolejności wartości w tablicy, aby interpretować kolejność płatności i wpływów. Upewnij się, że w prawidłowej kolejności wprowadzisz wartości płatności i paragonów.  
  
   
  
## Examples  
 W `MIRR` tym przykładzie funkcja zwraca zmodyfikowaną wewnętrzną stawkę zwrotu dla serii przepływów gotówkowych zawartych w tablicy `Values()`. `LoanAPR`reprezentuje zainteresowanie finansowaniem i `InvAPR` reprezentuje stawkę odsetek uzyskaną z inwestycji.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ranga <paramref name="FinanceRate" /> <paramref name="ReinvestRate" /> nie jest równa 1, =-1 lub =-1 <paramref name="ValueArray" /></exception>
        <exception cref="T:System.DivideByZeroException">Wystąpiło dzielenie przez zero.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagane. Stawka odsetek na okres. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="Pmt">Wymagana. Płatność, która ma być wykonywana każdego okresu. Płatności zwykle zawierają podmiot zabezpieczeń i interesy, które nie zmieniają się w czasie trwania renty.</param>
        <param name="PV">Wymagana. Bieżąca wartość lub wartość dzisiaj serii przyszłych płatności lub przyjęć. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalny. Wartość w przyszłości lub Saldo środków pieniężnych po dokonaniu ostatecznej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalny. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> , który określa, kiedy płatności są należne. Ten argument musi mieć wartość <c>DueDate. EndOfPeriod</c> , jeśli płatności są należne na końcu okresu płatności lub <c>DueDate. BegOfPeriod</c> , jeśli płatności są należne na początku okresu. W przypadku pominięcia przyjmowana jest wartość <c>DueDate. EndOfPeriod</c> .</param>
        <summary>Zwraca wartość określającą liczbę okresów renty w oparciu o okresowe stałe płatności i stałą stawkę odsetek.</summary>
        <returns>Liczba okresów dla raty rocznej na podstawie okresowych stałych płatności i ustalonej stopy odsetek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych w pewnym okresie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
   
  
## Examples  
 Ten przykład używa funkcji `NPer` , aby zwrócić liczbę okresów, w których należy dokonać płatności, aby uregulować pożyczki, której wartość jest zawarta `PVal`w. Podano również stawkę procentową odsetek na okres (`APR / 12`), płatność (`Payment`), przyszłą wartość pożyczki (`FVal`) i liczbę wskazującą, czy płatność jest należna na początku, czy na końcu okresu płatności (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" />= 0 i <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stawka rabatu na długość okresu wyrażona jako liczba dziesiętna.</param>
        <param name="ValueArray">Wymagane. <see langword="Double" /> Tablica określająca wartości przepływu gotówki. Tablica musi zawierać co najmniej jedną wartość ujemną (płatność) i jedną wartość dodatnią (paragon).</param>
        <summary>Zwraca wartość określającą wartość prezentową netto inwestycji na podstawie serii okresowych przepływów pieniężnych (płatności i wpływów) oraz stawki rabatowej.</summary>
        <returns>Wartość obecna netto inwestycji na podstawie serii okresowych przepływów pieniężnych (płatności i wpływów) oraz stawki rabatowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartością bieżącą netto inwestycji jest bieżąca wartość przyszłej serii płatności i wpływów.  
  
 `NPV` Funkcja używa kolejności wartości w tablicy, aby interpretować kolejność płatności i wpływów. Upewnij się, że w prawidłowej kolejności wprowadzisz wartości płatności i paragonów.  
  
 `NPV` Inwestycja rozpoczyna się jeden okres przed datą pierwszej wartości przepływu gotówki i zostaje zakończona ostatnią wartością przepływu gotówki w tablicy.  
  
 Obliczanie wartości bieżącej netto jest oparte na przyszłych przepływach pieniężnych. Jeśli pierwszy przepływ środków pieniężnych odbywa się na początku pierwszego okresu, należy dodać pierwszą wartość do wartości zwracanej przez `NPV` i nie może być uwzględniona w `ValueArray`wartościach przepływów pieniężnych.  
  
 Funkcja jest podobna `PV` do funkcji ( `PV` wartość obecna), z tą różnicą, że funkcja zezwala na Przepływy gotówkowe do rozpoczęcia na koniec lub na początku okresu. `NPV` W przeciwieństwie do `NPV` zmiennych `PV` wartości przepływów pieniężnych przepływy pieniężne muszą być rozwiązane w całej inwestycji.  
  
   
  
## Examples  
 W tym przykładzie `NPV` funkcja zwraca wartość netto obecną dla serii przepływów gotówkowych zawartych w tablicy `values()`. Wartość zwracana, przechowywana w `FixedRetRate`, reprezentuje ustaloną wewnętrzną szybkość powrotu.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" />ma <see langword="Nothing" />, <paramref name="ValueArray" /> ranga<paramref name="Rate" />1lub =-1 &lt; &gt;</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stawka odsetek na okres. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="NPer">Wymagany. Łączna liczba okresów płatności w ramach raty rocznej. Na przykład w przypadku płatności miesięcznych w przypadku pożyczki z czterema samochodami pożyczki mają łącznie 4 × 12 (lub 48) okresów płatności.</param>
        <param name="PV">Wymagane. Wartość obecna (lub ryczałt), w przypadku której seria płatności powinna być płacona w przyszłości. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalny. Wartość w przyszłości lub Saldo środków pieniężnych po dokonaniu ostatecznej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić $50 000 w ciągu 18 lat w przypadku edukacji dziecka, wówczas $50 000 jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalny. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> , który określa, kiedy płatności są należne. Ten argument musi mieć wartość <c>DueDate. EndOfPeriod</c> , jeśli płatności są należne na końcu okresu płatności lub <c>DueDate. BegOfPeriod</c> , jeśli płatności są należne na początku okresu. W przypadku pominięcia przyjmowana jest wartość <c>DueDate. EndOfPeriod</c> .</param>
        <summary>Zwraca wartość określającą płatność za raty w oparciu o okresowe, stałe płatności i ustaloną stawkę odsetek.</summary>
        <returns>Płatność za raty roczne na podstawie okresowych, stałych płatności i ustalonej stopy odsetek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to seria stałych płatności gotówkowych dokonanych w danym okresie czasu. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 Argumenty `Rate` i`NPer` muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład, jeśli `Rate` jest obliczana przy użyciu miesięcy `NPer` , należy również obliczyć w miesiącach.  
  
 W przypadku wszystkich argumentów płatne środki pieniężne (takie jak depozyty do oszczędności) są reprezentowane przez liczby ujemne; otrzymane środki pieniężne (na przykład sprawdzenia dywidendy) są reprezentowane przez liczby dodatnie.  
  
   
  
## Examples  
 Ten przykład używa funkcji `Pmt` , aby zwrócić miesięczną płatność pożyczki w ustalonym okresie. Podana`APR / 12`stawka procentowa odsetek na okres (), Łączna liczba płatności (`TotPmts`), wartość obecna lub podmiot zabezpieczeń pożyczki (`PVal`), przyszła wartość pożyczki (`FVal`) i numer wskazujący, czy płatność przypada na początku lub na końcu okresu płatności`(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagane. Stawka odsetek na okres. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="Per">Wymagany. Okres płatności z zakresu od 1 do <paramref name="NPer" />.</param>
        <param name="NPer">Wymagane. Łączna liczba okresów płatności w ramach raty rocznej. Na przykład w przypadku płatności miesięcznych w przypadku pożyczki z czterema samochodami pożyczki mają łącznie 4 x 12 (lub 48) okresów płatności.</param>
        <param name="PV">Wymagany. Bieżąca wartość serii przyszłych płatności lub przyjęć. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalny. Wartość w przyszłości lub Saldo środków pieniężnych po dokonaniu ostatecznej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalny. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> , który określa, kiedy płatności są należne. Ten argument musi mieć wartość <c>DueDate. EndOfPeriod</c> , jeśli płatności są należne na końcu okresu płatności lub <c>DueDate. BegOfPeriod</c> , jeśli płatności są należne na początku okresu. W przypadku pominięcia przyjmowana jest wartość <c>DueDate. EndOfPeriod</c> .</param>
        <summary>Zwraca wartość określającą płatność podmiotu w danym okresie renty na podstawie okresowych stałych płatności i ustalonej stopy odsetek.</summary>
        <returns>Podstawowa płatność w danym okresie renty na podstawie okresowych stałych płatności i ustalonej stopy odsetek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych w pewnym okresie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 Argumenty `Rate` i`NPer` muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład, jeśli `Rate` jest obliczana przy użyciu miesięcy `NPer` , należy również obliczyć w miesiącach.  
  
 W przypadku wszystkich argumentów płatne środki pieniężne (takie jak depozyty do oszczędności) są reprezentowane przez liczby ujemne; otrzymane środki pieniężne (na przykład sprawdzenia dywidendy) są reprezentowane przez liczby dodatnie.  
  
   
  
## Examples  
 W `PPmt` tym przykładzie funkcja służy do obliczania, jaka część płatności dla określonego okresu jest podmiotem zabezpieczeń, gdy wszystkie płatności są równej wartości. Podana`APR / 12`stawka procentowa odsetek na okres (), okres płatności, dla którego jest wymagana część główna (`Period`), Łączna liczba płatności (`TotPmts`), wartość obecna lub główna pożyczka (`PVal`), przyszła wartość pożyczki (`FVal`) i numer wskazujący, czy płatność przypada na początku, czy na końcu okresu płatności (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" />= 0 lub <paramref name="Per" /> .&gt; &lt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagane. Stawka odsetek na okres. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="NPer">Wymagana. Łączna liczba okresów płatności w ramach raty rocznej. Na przykład w przypadku płatności miesięcznych w przypadku pożyczki z czterema samochodami pożyczki mają 4 x 12 (lub 48) okresów płatności.</param>
        <param name="Pmt">Wymagane. Płatność, która ma być wykonywana każdego okresu. Płatności zwykle zawierają podmiot zabezpieczeń i interesy, które nie zmieniają się w okresie obowiązywania rent.</param>
        <param name="FV">Opcjonalny. Wartość w przyszłości lub Saldo środków pieniężnych po dokonaniu ostatecznej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> , który określa, kiedy płatności są należne. Ten argument musi mieć wartość <c>DueDate. EndOfPeriod</c> , jeśli płatności są należne na końcu okresu płatności lub <c>DueDate. BegOfPeriod</c> , jeśli płatności są należne na początku okresu. W przypadku pominięcia przyjmowana jest wartość <c>DueDate. EndOfPeriod</c> .</param>
        <summary>Zwraca wartość określającą obecną wartość renty w oparciu o okresowe, stałe płatności, które mają zostać zapłacone w przyszłości, oraz ustaloną stawkę odsetek.</summary>
        <returns>Obecna wartość renty w oparciu o okresowe, stałe płatności, które mają zostać zapłacone w przyszłości, oraz ustaloną stawkę odsetek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych w pewnym okresie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 Argumenty `Rate` i`NPer` muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład, jeśli `Rate` jest obliczana przy użyciu miesięcy `NPer` , należy również obliczyć w miesiącach.  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
   
  
## Examples  
 W tym przykładzie `PV` funkcja zwraca wartość obecną $1 000 000, która dostarczy $50 000 rocznie przez następne 20 lat. Jest to oczekiwana roczna stawka`APR`procentowa (), całkowita liczba płatności (`TotPmts`), kwota każdej płatności (`YrIncome`), łączna wartość przyszłej inwestycji (`FVal`) i liczba, która wskazuje, czy każdy płatność jest dokonywana na początku lub na końcu okresu płatności (`PayType`). Zwróć uwagę `YrIncome` , że jest to liczba ujemna, ponieważ reprezentuje ona środki pieniężne z każdego roku.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Wymagane. Łączna liczba okresów płatności w ramach raty rocznej. Na przykład w przypadku płatności miesięcznych w przypadku pożyczki z czterema samochodami pożyczki mają łącznie 4 * 12 (lub 48) okresów płatności.</param>
        <param name="Pmt">Wymagany. Płatność, która ma być wykonywana każdego okresu. Płatności zwykle zawierają podmiot zabezpieczeń i interesy, które nie ulegają zmianie w okresie obowiązywania pożyczki.</param>
        <param name="PV">Wymagana. Bieżąca wartość lub wartość dzisiaj serii przyszłych płatności lub przyjęć. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalna. Wartość w przyszłości lub Saldo środków pieniężnych po dokonaniu ostatecznej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalny. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> , który określa, kiedy płatności są należne. Ten argument musi mieć wartość <c>DueDate. EndOfPeriod</c> , jeśli płatności są należne na końcu okresu płatności lub <c>DueDate. BegOfPeriod</c> , jeśli płatności są należne na początku okresu. W przypadku pominięcia przyjmowana jest wartość <c>DueDate. EndOfPeriod</c> .</param>
        <param name="Guess">Opcjonalna. Szacowana wartość jest zwracana przez <see langword="Rate" />. W <paramref name="Guess" /> przypadku pominięcia jest 0,1 (10 procent).</param>
        <summary>Zwraca wartość określającą stawkę odsetek za okres dla raty rocznej.</summary>
        <returns>Stawka odsetek za okres dla raty rocznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych w pewnym okresie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
 `Rate`jest obliczana według iteracji. Rozpoczynając od wartości `Guess`, przechodzi przez `Rate` obliczenie do momentu, aż wynik będzie dokładny do 0,00001 procent. Jeśli `Rate` nie można znaleźć wyniku po 20 próbach, kończy się niepowodzeniem. Jeśli przypuszczenie jest 10 procent i `Rate` niepowodzenie, wypróbuj inną wartość dla `Guess`.  
  
   
  
## Examples  
 W tym przykładzie `Rate` funkcja służy do obliczania stopy oprocentowania pożyczki z uwzględnieniem łącznej liczby płatności (`TotPmts`), kwoty płatności pożyczki (`Payment`), wartości bieżącej lub nazwy głównej pożyczki (`PVal`), przyszłej wartość pożyczki (`FVal`), liczba, która wskazuje, czy płatność przypada na początku, czy na końcu okresu płatności (`PayType`) i przybliżeniu oczekiwanej stopy odsetek (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Wymagane. Początkowy koszt zasobu.</param>
        <param name="Salvage">Wymagane. Wartość środka trwałego na końcu okresu użytkowania.</param>
        <param name="Life">Wymagany. Długość użytecznego okresu istnienia elementu zawartości.</param>
        <summary>Zwraca wartość określającą amortyzację liniową środka trwałego w pojedynczym okresie.</summary>
        <returns>Amortyzacja liniowa środka trwałego w pojedynczym okresie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Okres amortyzacji musi być wyrażony w tej samej jednostce co `Life` argument. Wszystkie argumenty muszą być liczbami dodatnimi.  
  
   
  
## Examples  
 W `SLN` tym przykładzie funkcja Zwraca amortyzację liniową środka trwałego przez jeden okres z początkowym kosztem zasobu (`InitCost`), wartość końcową na koniec okresu użytkowania zasobów (`SalvageVal`) i łączny czas życia zasób w latach (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Wymagana. Początkowy koszt zasobu.</param>
        <param name="Salvage">Wymagana. Wartość środka trwałego na końcu okresu użytkowania.</param>
        <param name="Life">Wymagana. Długość użytecznego okresu istnienia elementu zawartości.</param>
        <param name="Period">Wymagana. Okres, dla którego jest obliczana amortyzacja zasobów.</param>
        <summary>Zwraca wartość określającą amortyzację elementu zawartości w określonym przedziale czasu.</summary>
        <returns>Amortyzacja sum lat dla zasobu w określonym przedziale czasu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Argumenty `Life` i`Period` muszą być wyrażone w tych samych jednostkach. Na przykład, jeśli `Life` jest określony w miesiącach, `Period` należy również pomieścić w miesiącach. Wszystkie argumenty muszą być liczbami dodatnimi.  
  
   
  
## Examples  
 Ten przykład używa funkcji `SYD` , aby zwrócić amortyzację zasobu w określonym przedziale czasu na koszt początkowy zasobu (`InitCost`), wartość końcową na końcu okresu użytkowania zasobów (`SalvageVal`) oraz łączny czas życia zasobu w lata (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" />0,<paramref name="Period" /> lub<paramref name="Period" />=0 . &lt; &gt; <paramref name="Life" /> &lt;</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
  </Members>
</Type>
