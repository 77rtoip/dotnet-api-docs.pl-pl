<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8511747393acaa47d3cd5482ba9cb12ae3010583" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55390819" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Financial" /> Moduł zawiera procedury używane do wykonywania operacji finansowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten moduł obsługuje elementy członkowskie biblioteki wykonawczej Visual Basic, które wykonywania obliczeń finansowych, takich jak amortyzacji, wartości w obecnie i w przyszłości, oprocentowania stawki return i płatności.  
  
   
  
## Examples  
 W tym przykładzie użyto `Rate` funkcji, aby obliczyć stopie pożyczki, biorąc pod uwagę całkowitą liczbą płatności (`TotPmts`), kwota płatności pożyczki (`Payment`), wartość lub wartość pożyczki (`PVal`), przyszłość wartość pożyczki (`FVal`), liczba, która określa, czy płatności są należne na początku lub na koniec okresu płatności (`PayType`) i przybliżeniem oczekiwanego stopy procentowej (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Słowa kluczowe (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Elementy członkowskie biblioteki wykonawczej języka Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Wymagana. Na koszt początkowy środka trwałego.</param>
        <param name="Salvage">Wymagana. Wartość środka trwałego na końcu okresu eksploatacji.</param>
        <param name="Life">Wymagana. Długość okresu eksploatacji środka trwałego.</param>
        <param name="Period">Wymagana. Okres, dla którego jest obliczana amortyzacja środka trwałego.</param>
        <param name="Factor">Opcjonalna. Częstotliwość, z jaką zmniejszania. W przypadku pominięcia przyjmowana jest 2 (metoda malejącego).</param>
        <summary>Zwraca wartość określającą amortyzację środka trwałego dla określonego przedziału czasu przy użyciu metody amortyzacji malejącego lub innej metody, które określisz.</summary>
        <returns>Amortyzacja środka trwałego dla określonego przedziału czasu przy użyciu metody amortyzacji malejącego lub innej metody należy określić.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Malejącego salda obliczana amortyzacja nadmierne zużycie. Amortyzacja najwyższą pozycję w pierwszego okresu i zmniejsza w kolejnych okresów.  
  
 `Life` i `Period` argumenty muszą być wyrażone w tych samych jednostkach. Na przykład jeśli `Life` znajduje się w miesiącach `Period` podaje się również w miesiącach. Wszystkie argumenty muszą być liczbami dodatnimi.  
  
 `DDB` Funkcja używa następującej formuły amortyzację w danym okresie:  
  
 Amortyzacja / okres = ((Cost-Salvage) * współczynnik) / życia  
  
   
  
## Examples  
 W tym przykładzie użyto `DDB` funkcja zwraca amortyzacja środka trwałego w podanym okresie, biorąc pod uwagę koszt początkowy (`InitCost`), wartość na końcu okresu eksploatacji środka trwałego (`SalvageVal`), środka trwałego w latach (`LifeTime`) oraz okres, w latach, dla których jest obliczana amortyzacja (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0, lub <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stopę procentową okresu. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="NPer">Wymagana. Całkowita liczba okresów płatności w rencie. Na przykład jeśli dokonujesz płatności miesięcznych pożyczki samochód, wynosi 4 x 12 (lub 48) okresów płatności w sumie.</param>
        <param name="Pmt">Wymagana. Dokonanie każdego okresu płatności. Płatności zawierają zwykle podmiot zabezpieczeń i zainteresowań, która nie zmienia w czasie trwania pożyczki.</param>
        <param name="PV">Opcjonalna. Obecne wartości (lub zryczałtowana suma) z szeregu przyszłe płatności. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> określający, kiedy płatności są należne. Ten argument musi być albo <see langword="DueDate.EndOfPeriod" /> jeśli płatności przypadają na koniec okresu płatności lub <see langword="DueDate.BegOfPeriod" /> jeśli płatności są należne na początku okresu. W przypadku pominięcia <see langword="DueDate.EndOfPeriod" /> zakłada, że.</param>
        <summary>Zwraca wartość określającą przyszła wartość renty w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</summary>
        <returns>Przyszła wartość renty w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych wraz z upływem czasu. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 `Rate` i `NPer` argumenty muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład jeśli `Rate` jest obliczany w miesiącach, `NPer` również musi być obliczany w miesiącach.  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
   
  
## Examples  
 W tym przykładzie użyto `FV` funkcja zwraca wartość przyszłych inwestycji podana wartość procentowa szybkości, który przypada na okres (`APR / 12`), łączna liczba płatności (`TotPmts`), płatność (`Payment`), bieżąca wartość inwestycji (`PVal`), a liczba, która określa, czy płatności na początku lub na koniec okresu płatności (`PayType`). Należy pamiętać, że ponieważ `Payment` reprezentuje środki wypłacane, jest liczbą ujemną.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stopę procentową okresu. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="Per">Wymagana. Termin płatności w zakresie od 1 do <paramref name="NPer" />.</param>
        <param name="NPer">Wymagana. Całkowita liczba okresów płatności w rencie. Na przykład jeśli dokonujesz płatności miesięcznych pożyczki samochód, wynosi 4 x 12 (lub 48) okresów płatności w sumie.</param>
        <param name="PV">Wymagana. Obecne wartości lub wartości w obecnie z szeregu przyszłych płatności. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalna. Przyszłą wartość lub saldo chcesz, aby po utworzeniu ostatniej płatności. Na przykład przyszła wartość kredytu to 0 zł, ponieważ jest to wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> określający, kiedy płatności są należne. Ten argument musi być albo <c>DueDate.EndOfPeriod</c> jeśli płatności przypadają na koniec okresu płatności lub <c>DueDate.BegOfPeriod</c> jeśli płatności są należne na początku okresu. W przypadku pominięcia <c>DueDate.EndOfPeriod</c> zakłada, że.</param>
        <summary>Zwraca wartość określającą płatności odsetkowe dla danego okresu renty w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</summary>
        <returns>Płatności odsetkowe dla danego okresu renty w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych wraz z upływem czasu. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 `Rate` i `NPer` argumenty muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład jeśli `Rate` jest obliczany w miesiącach, `NPer` również musi być obliczany w miesiącach.  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
   
  
## Examples  
 W tym przykładzie użyto `IPmt` funkcji, aby obliczyć, jaka część płatność jest zainteresowania gdy wszystkie płatności są równe wartości. Podane są oprocentowanie dla okresu (`APR / 12`), w okresie płatności, dla którego pożądany jest część zainteresowania (`Period`), łączna liczba płatności (`TotPmts`), wartość lub wartość pożyczki (`PVal`), Przyszła wartość kredytu (`FVal`), a liczba, która określa, czy płatności są należne na początku lub na koniec okresu płatności (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 lub <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Wymagana. Tablica <see langword="Double" /> określania wartości pieniężne. Tablica musi zawierać co najmniej jedną wartość ujemną (wypłata) i jedną wartość dodatnią (odbieranie).</param>
        <param name="Guess">Opcjonalna. Obiekt, określając wartość szacowania zostaną zwrócone przez <see langword="IRR" />. W przypadku pominięcia <paramref name="Guess" /> jest 0,1 (10%).</param>
        <summary>Zwraca wartość określającą wewnętrzną stopę zwrotu dla serii okresowych przepływów pieniężnych (płatności i wpływów).</summary>
        <returns>Wewnętrzną stopę zwrotu dla serii okresowych przepływów pieniężnych (płatności i wpływów).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wewnętrzną stopę zwrotu jest stopie Odebrano inwestycji składającej się z płatności i wpływów, które występują w regularnych odstępach czasu.  
  
 `IRR` Funkcja używa kolejności wartości w tablicy do interpretacji kolejność płatności i wpływów. Pamiętaj wprowadzić wartości potwierdzenia płatności i w odpowiedniej kolejności. Przepływ gotówki dla każdego okresu nie musi zostać naprawione, podobnie jak w przypadku rocznych.  
  
 `IRR` jest obliczana na podstawie iteracji. Począwszy od wartości `Guess`, `IRR` przełączanie po kolei obliczeń do chwili osiągnięcia wyniku z dokładnością do 0,00001%. Jeśli `IRR` nie można odnaleźć wyniku po 20 próbuje, zakończy się niepowodzeniem.  
  
   
  
## Examples  
 W tym przykładzie `IRR` funkcja zwraca wewnętrzną stopę zwrotu dla serii pięciu przepływów gotówkowych znajdujących się w tablicy `Values()`. Pierwszy element tablicy jest ujemna przepływów pieniężnych, reprezentujący kosztów początkowych biznesowych. Pozostałe cztery przepływów gotówkowych reprezentują dodatnią przepływów gotówkowych cztery kolejne lata. `Guess` jest szacowany wewnętrzną stopę zwrotu.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Tablica wartości argumentów są nieprawidłowe lub <paramref name="Guess" /> &lt;= -1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Wymagana. Tablica <see langword="Double" /> określenie wartości przepływów gotówkowych. Tablica musi zawierać co najmniej jedną wartość ujemną (wypłata) i jedną wartość dodatnią (odbieranie).</param>
        <param name="FinanceRate">Wymagana. Płatne stopę kosztem finansowych.</param>
        <param name="ReinvestRate">Wymagana. Stopie odebranych na zyski z ponownego zainwestowania środków pieniężnych.</param>
        <summary>Zwraca wartość określającą zmodyfikowane wewnętrzną stopę zwrotu dla serii okresowych przepływów pieniężnych (płatności i wpływów).</summary>
        <returns>Zmodyfikowane wewnętrzną stopę zwrotu dla serii okresowych przepływów pieniężnych (płatności i wpływów).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmodyfikowane wewnętrzną stopę zwrotu jest wewnętrzną stopę zwrotu, gdy płatności i wpływów finansowane są w różnym tempie. `MIRR` Funkcja ma pod uwagę koszt inwestycji (`FinanceRate`) oraz stopy procentowej uzyskany z ponownego zainwestowania środków pieniężnych (`ReinvestRate`).  
  
 `FinanceRate` i `ReinvestRatearguments` są wyrażone jako wartości dziesiętne wartości procentowe. Na przykład 12 procent jest wyrażona jako 0,12.  
  
 `MIRR` Funkcja używa kolejności wartości w tablicy do interpretacji kolejność płatności i wpływów. Pamiętaj wprowadzić wartości potwierdzenia płatności i w odpowiedniej kolejności.  
  
   
  
## Examples  
 W tym przykładzie użyto `MIRR` funkcja zwraca zmodyfikowane wewnętrzną stopę zwrotu dla serii przepływów gotówkowych znajdujących się w tablicy `Values()`. `LoanAPR` reprezentuje zainteresowanie finansowania i `InvAPR` reprezentuje stopie uzyskany z ponownego zainwestowania.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Pozycja elementu <paramref name="ValueArray" /> nie jest równa 1, <paramref name="FinanceRate" /> = -1, lub <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">Wystąpiło dzielenie przez zero.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stopę procentową okresu. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="Pmt">Wymagana. Dokonanie każdego okresu płatności. Płatności zawierają zwykle podmiot zabezpieczeń i zainteresowań, która nie zmienia się przez cały okres pożyczki.</param>
        <param name="PV">Wymagana. Obecne wartości lub wartości w obecnie z szeregu przyszłych płatności. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalna. Przyszłą wartość lub saldo chcesz, aby po ostatniej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> określający, kiedy płatności są należne. Ten argument musi być albo <c>DueDate.EndOfPeriod</c> jeśli płatności przypadają na koniec okresu płatności lub <c>DueDate.BegOfPeriod</c> jeśli płatności są należne na początku okresu. W przypadku pominięcia <c>DueDate.EndOfPeriod</c> zakłada, że.</param>
        <summary>Zwraca wartość określającą liczbę okresów renty w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</summary>
        <returns>Liczbę okresów renty w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych w pewnym okresie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
   
  
## Examples  
 W tym przykładzie użyto `NPer` funkcja zwraca liczbę okresów, podczas których płatności muszą być dokonywane na spłacenie pożyczki, którego wartość jest zawarta w `PVal`. Zapewniono r ównież są oprocentowanie dla okresu (`APR / 12`), płatności (`Payment`), przyszła wartość kredytu (`FVal`), a liczba, która określa, czy płatności są należne na początku lub na koniec okresu płatności (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" /> = 0 i <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stawki rabatu za pośrednictwem długość okresu, wyrażone jako ułamek dziesiętny.</param>
        <param name="ValueArray">Wymagana. Tablica <see langword="Double" /> określania wartości pieniężne. Tablica musi zawierać co najmniej jedną wartość ujemną (wypłata) i jedną wartość dodatnią (odbieranie).</param>
        <summary>Zwraca wartość określającą wartość bieżącą netto inwestycji dla serii okresowych przepływów pieniężnych (płatności i wpływów) oraz stopy dyskontowej.</summary>
        <returns>Wartość bieżącą netto inwestycji dla serii okresowych przepływów pieniężnych (płatności i wpływów) oraz stopy dyskontowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość bieżącą netto inwestycji jest bieżąca wartość szereg przyszłe płatności i wpływów.  
  
 `NPV` Funkcja używa kolejności wartości w tablicy do interpretacji kolejność płatności i wpływów. Pamiętaj wprowadzić wartości potwierdzenia płatności i w odpowiedniej kolejności.  
  
 `NPV` Inwestycji rozpoczyna się jeden okres przed datą pierwszej wartości pieniężne i kończy ostatnią wartość przepływów pieniężnych, w tablicy.  
  
 Net obecne obliczanie wartości opiera się na przyszłe przepływów gotówkowych. Jeśli swój pierwszy przepływ gotówki występuje na początku pierwszego okresu, pierwsza wartość należy dodać do wartości zwracanej przez `NPV` i nie muszą być zawarte w wartości pieniężne `ValueArray`.  
  
 `NPV` Funkcji jest podobne do `PV` — funkcja (wartość obecna), chyba że `PV` dzięki funkcji rozpoczęcie poziomie koniec lub początek okresu przepływów gotówkowych. W przeciwieństwie do zmiennej `NPV` wartości przepływów gotówkowych `PV` przepływów gotówkowych muszą zostać usunięte w okresie inwestycji.  
  
   
  
## Examples  
 W tym przykładzie użyto `NPV` funkcja zwraca wartość bieżącą netto dla serii przepływów gotówkowych znajdujących się w tablicy `values()`. Wartość zwracana, przechowywane w `FixedRetRate`, reprezentuje stałą wewnętrzną stopę zwrotu.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> jest <see langword="Nothing" />, rangi z <paramref name="ValueArray" /> &lt; &gt; 1, lub <paramref name="Rate" /> = -1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stopę procentową okresu. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="NPer">Wymagana. Całkowita liczba okresów płatności w rencie. Na przykład jeśli dokonujesz płatności miesięcznych pożyczki samochód, wynosi 4 x 12 (lub 48) okresów płatności w sumie.</param>
        <param name="PV">Wymagana. Obecne wartości (lub zryczałtowana suma) to warta serii płatności, które mają zostać zapłacone w przyszłości. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalna. Przyszłą wartość lub saldo chcesz, aby po ostatniej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jednakże jeśli chcesz zaoszczędzić 50 000 zł podczas 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> określający, kiedy płatności są należne. Ten argument musi być albo <c>DueDate.EndOfPeriod</c> jeśli płatności przypadają na koniec okresu płatności lub <c>DueDate.BegOfPeriod</c> jeśli płatności są należne na początku okresu. W przypadku pominięcia <c>DueDate.EndOfPeriod</c> zakłada, że.</param>
        <summary>Zwraca wartość określającą płatność renta w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</summary>
        <returns>Płatność za renta w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych w przedziale czasu. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 `Rate` i `NPer` argumenty muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład jeśli `Rate` jest obliczany w miesiącach, `NPer` również musi być obliczany w miesiącach.  
  
 W przypadku wszystkich argumentów środków pieniężnych płatne (na przykład depozyty oszczędności) jest wyrażone liczbami ujemnymi; pieniężne otrzymane (na przykład dywidendy) jest liczbą dodatnią.  
  
   
  
## Examples  
 W tym przykładzie użyto `Pmt` funkcja zwraca płatność miesięczna pożyczki w ustalonym okresie. Podane są oprocentowanie dla okresu (`APR / 12`), łączna liczba płatności (`TotPmts`), wartość lub wartość pożyczki (`PVal`), przyszła wartość kredytu (`FVal`) oraz liczbę, która wskazuje, czy płatności są należne na początku lub na koniec okresu płatności `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stopę procentową okresu. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="Per">Wymagana. Termin płatności w zakresie od 1 do <paramref name="NPer" />.</param>
        <param name="NPer">Wymagana. Całkowita liczba okresów płatności w rencie. Na przykład jeśli dokonujesz płatności miesięcznych pożyczki samochód, wynosi 4 x 12 (lub 48) okresów płatności w sumie.</param>
        <param name="PV">Wymagana. Bieżąca wartość szereg przyszłych płatności. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalna. Przyszłą wartość lub saldo chcesz, aby po ostatniej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> określający, kiedy płatności są należne. Ten argument musi być albo <c>DueDate.EndOfPeriod</c> jeśli płatności przypadają na koniec okresu płatności lub <c>DueDate.BegOfPeriod</c> jeśli płatności są należne na początku okresu. W przypadku pominięcia <c>DueDate.EndOfPeriod</c> zakłada, że.</param>
        <summary>Zwraca wartość określającą spłatę kapitału dla danego okresu renty w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</summary>
        <returns>Spłatę kapitału dla danego okresu renty w oparciu o okresowe płatności w stałej kwocie i stałej stopie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych w pewnym okresie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 `Rate` i `NPer` argumenty muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład jeśli `Rate` jest obliczany w miesiącach, `NPer` również musi być obliczany w miesiącach.  
  
 W przypadku wszystkich argumentów środków pieniężnych płatne (na przykład depozyty oszczędności) jest wyrażone liczbami ujemnymi; pieniężne otrzymane (na przykład dywidendy) jest liczbą dodatnią.  
  
   
  
## Examples  
 W tym przykładzie użyto `PPmt` funkcji, aby obliczyć, jaka część płatności w danym okresie jest główną gdy wszystkie płatności są równe wartości. Podane są oprocentowanie dla okresu (`APR / 12`), w okresie płatności, dla którego pożądany jest fragment jednostki (`Period`), łączna liczba płatności (`TotPmts`), wartość lub wartość pożyczki (`PVal`), Przyszła wartość kredytu (`FVal`), a liczba, która określa, czy płatności są należne na początku lub na koniec okresu płatności (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 lub <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Wymagana. Stopę procentową okresu. Jeśli na przykład uzyskasz kredyt na samochód o rocznej stopie procentowej (APR) 10 procent i spłacasz ją w miesięcznych ratach, stopa za okres wynosi 0,1/12, czyli 0,0083.</param>
        <param name="NPer">Wymagana. Całkowita liczba okresów płatności w rencie. Na przykład jeśli dokonujesz płatności miesięcznych pożyczki samochód, wynosi 4 x 12 (lub 48) okresów płatności.</param>
        <param name="Pmt">Wymagana. Dokonanie każdego okresu płatności. Płatności zawierają zwykle podmiot zabezpieczeń i zainteresowań, która nie zmienia się w cyklu życia programu pożyczki.</param>
        <param name="FV">Opcjonalna. Przyszłą wartość lub saldo chcesz, aby po ostatniej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> określający, kiedy płatności są należne. Ten argument musi być albo <c>DueDate.EndOfPeriod</c> jeśli płatności przypadają na koniec okresu płatności lub <c>DueDate.BegOfPeriod</c> jeśli płatności są należne na początku okresu. W przypadku pominięcia <c>DueDate.EndOfPeriod</c> zakłada, że.</param>
        <summary>Zwraca wartość określającą wartość bieżącą renta oparciu o okresowe płatności w stałej kwocie mają zostać zapłacone w przyszłości i stałej stopie.</summary>
        <returns>Renta w oparciu o okresowe płatności w stałej kwocie mają zostać zapłacone w przyszłości i stałej stopie wartości bieżącej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych w pewnym okresie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 `Rate` i `NPer` argumenty muszą być obliczane przy użyciu okresów płatności wyrażonych w tych samych jednostkach. Na przykład jeśli `Rate` jest obliczany w miesiącach, `NPer` również musi być obliczany w miesiącach.  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
   
  
## Examples  
 W tym przykładzie `PV` funkcja zwraca wartość renty $ 1 000 000, zapewniające 50 000 USD rocznie dalej 20 lat. Podane są oczekiwane rocznej stopie procentowej (`APR`), łączna liczba płatności (`TotPmts`), ilość każdej płatności (`YrIncome`), wartość inwestycji (`FVal`) i numer, który wskazuje, czy każdy płatności na początku lub na koniec okresu płatności (`PayType`). Należy pamiętać, że `YrIncome` jest liczbą ujemną, ponieważ reprezentuje on środki wypłacane z rencie każdego roku.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Wymagana. Całkowita liczba okresów płatności w rencie. Na przykład jeśli dokonujesz płatności miesięcznych pożyczki samochód, wynosi 4 * 12 (lub 48) okresów płatności w sumie.</param>
        <param name="Pmt">Wymagana. Dokonanie każdego okresu płatności. Płatności zawierają zwykle podmiot zabezpieczeń i zainteresowań, która nie zmienia w czasie trwania pożyczki.</param>
        <param name="PV">Wymagana. Obecne wartości lub wartości w obecnie z szeregu przyszłych płatności. Na przykład przy zaciągnięciu kredytu na zakup samochodu kwota kredytu stanowi dla kredytodawcy wartość bieżącą miesięcznych płatności za samochód, których będziesz dokonywać.</param>
        <param name="FV">Opcjonalna. Przyszłą wartość lub saldo chcesz, aby po ostatniej płatności. Na przykład przyszła wartość kredytu wynosi 0 zł, ponieważ taka będzie jego wartość po ostatniej płatności. Jeśli jednak chcesz zaoszczędzić 50 000 zł przez 18 lat na wykształcenie dziecka, 50 000 zł jest wartością przyszłą. W przypadku pominięcia przyjmowana jest wartość 0.</param>
        <param name="Due">Opcjonalna. Obiekt typu <see cref="T:Microsoft.VisualBasic.DueDate" /> określający, kiedy płatności są należne. Ten argument musi być albo <c>DueDate.EndOfPeriod</c> jeśli płatności przypadają na koniec okresu płatności lub <c>DueDate.BegOfPeriod</c> jeśli płatności są należne na początku okresu. W przypadku pominięcia <c>DueDate.EndOfPeriod</c> zakłada, że.</param>
        <param name="Guess">Opcjonalna. Wartość oceniasz, jest zwracany przez <see langword="Rate" />. W przypadku pominięcia <paramref name="Guess" /> jest 0,1 (10%).</param>
        <summary>Zwraca wartość określającą stopę procentową w zadanym okresie renty.</summary>
        <returns>Stopie w zadanym okresie renty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Renta to szereg stałych płatności gotówkowych dokonywanych w pewnym okresie. Renta może mieć charakter kredytu/pożyczki (np. kredyt hipoteczny) lub inwestycji (np. miesięczny plan oszczędzania).  
  
 W przypadku wszystkich argumentów środki wypłacane (na przykład wpłacane na rachunek oszczędnościowy) są wyrażone liczbami ujemnymi, a środki pieniężne otrzymane (na przykład dywidendy) są wyrażone liczbami dodatnimi.  
  
 `Rate` jest obliczana na podstawie iteracji. Począwszy od wartości `Guess`, `Rate` przełączanie po kolei obliczeń do chwili osiągnięcia wyniku z dokładnością do 0,00001%. Jeśli `Rate` nie można odnaleźć wyniku po 20 próbuje, zakończy się niepowodzeniem. Jeśli Twoje wynik to 10 procent i `Rate` zakończy się niepowodzeniem, spróbuj inną wartość dla `Guess`.  
  
   
  
## Examples  
 W tym przykładzie użyto `Rate` funkcji Oblicz stopę pożyczki, biorąc pod uwagę całkowitą liczbą płatności (`TotPmts`), kwota płatności pożyczki (`Payment`), wartość lub wartość pożyczki (`PVal`), przyszłość wartość pożyczki (`FVal`), liczba, która określa, czy płatności są należne na początku lub na koniec okresu płatności (`PayType`) i przybliżeniem oczekiwanego stopy procentowej (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Wymagana. Na koszt początkowy środka trwałego.</param>
        <param name="Salvage">Wymagana. Wartość środka trwałego na końcu okresu eksploatacji.</param>
        <param name="Life">Wymagana. Długość okresu eksploatacji środka trwałego.</param>
        <summary>Zwraca wartość określającą amortyzację liniową zasobu w zadanym przedziale.</summary>
        <returns>Liniowa amortyzacja środka trwałego w zadanym przedziale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Amortyzacja środka trwałego okresie muszą być wyrażone w tej samej jednostce jako `Life` argumentu. Wszystkie argumenty muszą być liczbami dodatnimi.  
  
   
  
## Examples  
 W tym przykładzie użyto `SLN` funkcja zwraca amortyzację środka trwałego w zadanym przedziale, biorąc pod uwagę koszt początkowy środka trwałego (`InitCost`), wartość na końcu okresu eksploatacji środka trwałego (`SalvageVal`), a całkowity czas życia trwałego w latach (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Wymagana. Na koszt początkowy środka trwałego.</param>
        <param name="Salvage">Wymagana. Wartość środka trwałego na końcu okresu eksploatacji.</param>
        <param name="Life">Wymagana. Długość okresu eksploatacji środka trwałego.</param>
        <param name="Period">Wymagana. Okres, dla którego jest obliczana amortyzacja środka trwałego.</param>
        <summary>Zwraca wartość określającą amortyzację cyfr Suma lat środka trwałego w wybranym okresie.</summary>
        <returns>Suma lat cyfr amortyzacja środka trwałego w określonym przedziale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Life` i `Period` argumenty muszą być wyrażone w tych samych jednostkach. Na przykład jeśli `Life` znajduje się w miesiącach `Period` podaje się również w miesiącach. Wszystkie argumenty muszą być liczbami dodatnimi.  
  
   
  
## Examples  
 W tym przykładzie użyto `SYD` funkcja zwraca amortyzacja środka trwałego w podanym okresie, biorąc pod uwagę koszt początkowy środka trwałego (`InitCost`), wartość na końcu okresu eksploatacji środka trwałego (`SalvageVal`), a środka trwałego w lata (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, lub <paramref name="Period" /> &lt;= 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Podsumowanie finansowe</related>
      </Docs>
    </Member>
  </Members>
</Type>