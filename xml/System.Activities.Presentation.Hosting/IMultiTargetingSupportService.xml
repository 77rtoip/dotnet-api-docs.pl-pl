<Type Name="IMultiTargetingSupportService" FullName="System.Activities.Presentation.Hosting.IMultiTargetingSupportService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f86b61d9f02aa95b556906c63a48b5822a9a4bc6" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="63925914" /></Metadata><TypeSignature Language="C#" Value="public interface IMultiTargetingSupportService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMultiTargetingSupportService" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Hosting.IMultiTargetingSupportService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMultiTargetingSupportService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMultiTargetingSupportService" />
  <TypeSignature Language="F#" Value="type IMultiTargetingSupportService = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f9ef7-101">Zapewnia wielowersyjnością kodu – hosty programu Windows Workflow Designer.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-101">Provides multi-targeting for Windows Workflow Designer hosts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9ef7-102">*Dodatki MT* umożliwia znajdowanie właściwej wersji załadowanego zestawu, który odnosi się do obiektu docelowego jest [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] wersję bieżącego projektu przepływu pracy w [!INCLUDE[vs2010](~/includes/vs2010-md.md)].</span><span class="sxs-lookup"><span data-stu-id="f9ef7-102">*Multi-targeting* is the ability to find the right version of the loaded assembly that corresponds to the target [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] version of the current workflow project in [!INCLUDE[vs2010](~/includes/vs2010-md.md)].</span></span>  
  
 <span data-ttu-id="f9ef7-103">Ten interfejs jest implementowany i używane wewnętrznie przez [!INCLUDE[wf1](~/includes/wf1-md.md)] projektanta składników, aby rozwiązać [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] zestawów w sposób pamiętać wielowersyjności kodu w ramach [!INCLUDE[vs2010](~/includes/vs2010-md.md)] hostingu aplikacji.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-103">This interface is implemented and used internally by [!INCLUDE[wf1](~/includes/wf1-md.md)] designer components to resolve [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assemblies in a multi-targeting aware fashion within the [!INCLUDE[vs2010](~/includes/vs2010-md.md)] hosting application.</span></span> <span data-ttu-id="f9ef7-104">[!INCLUDE[wf1](~/includes/wf1-md.md)] Projektanta składników użyj implementację tego interfejsu, tylko wtedy, gdy dodatkowe zestawy muszą być ładowane dynamicznie do edycji `AppDomain`.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-104">The [!INCLUDE[wf1](~/includes/wf1-md.md)] designer components use the implementation of this interface only when additional assemblies need to be loaded dynamically into the editing `AppDomain`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetReflectionAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly GetReflectionAssembly (System.Reflection.AssemblyName targetAssemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly GetReflectionAssembly(class System.Reflection.AssemblyName targetAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.GetReflectionAssembly(System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReflectionAssembly (targetAssemblyName As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ GetReflectionAssembly(System::Reflection::AssemblyName ^ targetAssemblyName);" />
      <MemberSignature Language="F#" Value="abstract member GetReflectionAssembly : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="iMultiTargetingSupportService.GetReflectionAssembly targetAssemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetAssemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="targetAssemblyName"><span data-ttu-id="f9ef7-105">Nazwa zestawu.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-105">The assembly name.</span></span></param>
        <summary><span data-ttu-id="f9ef7-106">Zwraca aktualnie załadowanych zestawów, które otrzymuje nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-106">Returns the currently loaded assembly given the assembly name.</span></span></summary>
        <returns><span data-ttu-id="f9ef7-107">Obecnie załadowany zestaw otrzymuje nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-107">The currently loaded assembly given the assembly name.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeType">
      <MemberSignature Language="C#" Value="public Type GetRuntimeType (Type reflectionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetRuntimeType(class System.Type reflectionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.GetRuntimeType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRuntimeType (reflectionType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetRuntimeType(Type ^ reflectionType);" />
      <MemberSignature Language="F#" Value="abstract member GetRuntimeType : Type -&gt; Type" Usage="iMultiTargetingSupportService.GetRuntimeType reflectionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reflectionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="reflectionType"><span data-ttu-id="f9ef7-108">Typ, który można pobrać typu środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-108">The type to get the runtime type of.</span></span></param>
        <summary><span data-ttu-id="f9ef7-109">Pobiera typ środowiska uruchomieniowego, która odnosi się do określonego typu.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-109">Gets the runtime type that corresponds to the specified type.</span></span></summary>
        <returns><span data-ttu-id="f9ef7-110">Typ środowiska uruchomieniowego, który odnosi się do określonego typu.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-110">The runtime type that corresponds to the specified type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedType">
      <MemberSignature Language="C#" Value="public bool IsSupportedType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupportedType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.IsSupportedType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSupportedType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member IsSupportedType : Type -&gt; bool" Usage="iMultiTargetingSupportService.IsSupportedType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="f9ef7-111">Typ do wglądu.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-111">The type to inspect.</span></span></param>
        <summary><span data-ttu-id="f9ef7-112">Zwraca wartość wskazującą, czy określony typ jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-112">Returns a value that indicates whether the specified type is supported.</span></span></summary>
        <returns><span data-ttu-id="f9ef7-113"><see langword="true" /> Jeśli określony typ jest obsługiwana; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f9ef7-113"><see langword="true" /> if the specified type is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>