<Type Name="WindowHelperService" FullName="System.Activities.Presentation.Hosting.WindowHelperService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5a93c8a8ff01f9e1010f508cabc0b8f0b033ff1b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30434178" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WindowHelperService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WindowHelperService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Hosting.WindowHelperService" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowHelperService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowHelperService" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia funkcje do rejestrowania i wyrejestrowania delegatów powiadomień o zdarzeniach, a także ustawić własność dla systemu windows.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowHelperService (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hwnd As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowHelperService(IntPtr hwnd);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Dojście do okna nadrzędnego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Activities.Presentation.Hosting.WindowHelperService" /> klasy z określonego dojścia do okna nadrzędnego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentWindowHwnd">
      <MemberSignature Language="C#" Value="public IntPtr ParentWindowHwnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ParentWindowHwnd" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParentWindowHwnd As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ParentWindowHwnd { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia uchwyt okna nadrzędnego.</summary>
        <value>Zwraca <see cref="T:System.IntPtr" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterWindowMessageHandler">
      <MemberSignature Language="C#" Value="public bool RegisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RegisterWindowMessageHandler(class System.Activities.Presentation.Hosting.WindowMessage callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterWindowMessageHandler (callback As WindowMessage) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RegisterWindowMessageHandler(System::Activities::Presentation::Hosting::WindowMessage ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.Hosting.WindowMessage" />
      </Parameters>
      <Docs>
        <param name="callback">Delegat, który ma zostać zarejestrowany dla powiadomień o zdarzeniach.</param>
        <summary>Rejestruje określonego delegata powiadomień o zdarzeniach.</summary>
        <returns>
          <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="callback" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TrySetWindowOwner">
      <MemberSignature Language="C#" Value="public bool TrySetWindowOwner (System.Windows.DependencyObject source, System.Windows.Window target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetWindowOwner(class System.Windows.DependencyObject source, class System.Windows.Window target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetWindowOwner (source As DependencyObject, target As Window) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetWindowOwner(System::Windows::DependencyObject ^ source, System::Windows::Window ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="target" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="source">Właściciel <c>docelowej</c>.</param>
        <param name="target">Okno, który ma należeć do <c>źródła</c>.</param>
        <summary>Przypisuje okno, aby być właścicielem określonym oknem.</summary>
        <returns>
          <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterWindowMessageHandler">
      <MemberSignature Language="C#" Value="public bool UnregisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UnregisterWindowMessageHandler(class System.Activities.Presentation.Hosting.WindowMessage callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnregisterWindowMessageHandler (callback As WindowMessage) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool UnregisterWindowMessageHandler(System::Activities::Presentation::Hosting::WindowMessage ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.Hosting.WindowMessage" />
      </Parameters>
      <Docs>
        <param name="callback">Delegat, który ma zostać usunięty z powiadomień o zdarzeniach.</param>
        <summary>Wyrejestrowuje określonego delegata powiadomień o zdarzeniach.</summary>
        <returns>
          <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>