<Type Name="PrintQueue" FullName="System.Printing.PrintQueue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fc124a68810bf0ca32fa1fb0a71e9de9e4ad4a35" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69071005" /></Metadata><TypeSignature Language="C#" Value="public class PrintQueue : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintQueue extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintQueue" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintQueue&#xA;Inherits PrintSystemObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintQueue : System::Printing::PrintSystemObject" />
  <TypeSignature Language="F#" Value="type PrintQueue = class&#xA;    inherit PrintSystemObject" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zarządza drukarkami i zadaniami drukowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niektóre właściwości <xref:System.Printing.PrintQueue> obiektu reprezentują charakterystykę narzędzia kolejki wydruku, które jest uruchamiane na komputerze, ale inne reprezentują funkcje lub Stany drukarki. Na przykład <xref:System.Printing.PrintQueue.NumberOfJobs%2A> jest cechą kolejki wydruku, ale <xref:System.Printing.PrintQueue.Location%2A> jest właściwością drukarki. Wiele właściwości drukarki, takich jak czy wymaga uwagi użytkownika, musi zostać przeniesiona za <xref:System.Printing.PrintQueue.Refresh%2A> pomocą metody z samej drukarki <xref:System.Printing.PrintQueue> do obiektu. Należy to zrobić przed odczytaniem odpowiedniej właściwości<xref:System.Printing.PrintQueue.NeedUserIntervention%2A>() przez Twój program. Podobnie, gdy program zmienia wartości co najmniej jednej właściwości <xref:System.Printing.PrintQueue> obiektu, zmiana musi zostać zapisywana w bieżącym narzędziu kolejki wydruku na komputerze. Zrób to za pomocą <xref:System.Printing.PrintQueue.Commit%2A> metody.  
  
> [!CAUTION]
>  Klasy w <xref:System.Printing> przestrzeni nazw nie są obsługiwane do użycia w ramach usługi lub aplikacji ASP.NET lub usługi. Próba użycia tych klas z poziomu jednego z tych typów aplikacji może spowodować nieoczekiwane problemy, takie jak obniżenie wydajności usługi i wyjątki czasu wykonywania.  
  
 Jeśli chcesz drukować z aplikacji Windows Forms, zobacz <xref:System.Drawing.Printing> przestrzeń nazw.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Printing.PrintServer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku obsługujący kolejkę wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonej <see cref="T:System.Printing.PrintServer" /> nazwy kolejki i.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue>konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślnie parametru do <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * int -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, printSchemaVersion)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku obsługujący kolejkę wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="printSchemaVersion">Wersja schematu drukowania do użycia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonej <see cref="T:System.Printing.PrintServer" />nazwy kolejki i wersji schematu wydruku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue>konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślnie parametru do <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 Wersja [schematu wydruku](https://go.microsoft.com/fwlink/?LinkId=186397) wydana w systemie Windows Vista to "1".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintQueueIndexedProperty[] -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku obsługujący kolejkę wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości, która określa wartości właściwości do zainicjowania.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonej <see cref="T:System.Printing.PrintServer" /> <see cref="T:System.Printing.PrintQueueIndexedProperty" /> nazwy kolejki i tablicy wartości do zainicjowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue>konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślnie parametru do <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 Użycie konstruktora z `propertyFilter` parametrem poprawia wydajność.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku obsługujący kolejkę wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="desiredAccess">Jedna z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, która określa typ dostępu do kolejki wydruku wymaganej przez program.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonej <see cref="T:System.Printing.PrintServer" />nazwy kolejki i żądanego dostępu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" />to wartość, która może być stosowana tylko do obiektu <see cref="T:System.Printing.PrintServer" /> , a <see cref="T:System.Printing.PrintQueue" /> nie do obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * string[] -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku obsługujący kolejkę wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica nazw właściwości do zainicjowania.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Printing.PrintQueue" /> klasy z określoną <see cref="T:System.Printing.PrintServer" />nazwą kolejki i tablicą nazw właściwości do zainicjowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue>konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślnie parametru do <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 Użycie konstruktora z `propertyFilter` parametrem poprawia wydajność.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * int * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, printSchemaVersion, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku obsługujący kolejkę wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="printSchemaVersion">Wersja schematu drukowania do użycia.</param>
        <param name="desiredAccess">Jedna z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, która określa typ dostępu do kolejki wydruku wymaganej przez program.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonej <see cref="T:System.Printing.PrintServer" />nazwy kolejki, wersji schematu wydruku i żądanego dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wersja [schematu wydruku](https://go.microsoft.com/fwlink/?LinkId=186397) wydana w systemie Windows Vista to "1".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" />to wartość, która może być stosowana tylko do obiektu <see cref="T:System.Printing.PrintServer" /> , a <see cref="T:System.Printing.PrintQueue" /> nie do obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintQueueIndexedProperty[] * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku obsługujący kolejkę wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości, która określa właściwości do zainicjowania.</param>
        <param name="desiredAccess">Jedna z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, która określa typ dostępu do kolejki wydruku wymaganej przez program.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Printing.PrintQueue" /> klasy z określoną <see cref="T:System.Printing.PrintServer" />nazwą <see cref="T:System.Printing.PrintQueueIndexedProperty" /> kolejki, tablicą wartości do zainicjowania i odpowiednim dostępem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użycie konstruktora z `propertyFilter` parametrem poprawia wydajność.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" />to wartość, która może być stosowana tylko do obiektu <see cref="T:System.Printing.PrintServer" /> , a <see cref="T:System.Printing.PrintQueue" /> nie do obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * string[] * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku obsługujący kolejkę wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica nazw właściwości do zainicjowania.</param>
        <param name="desiredAccess">Jedna z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, która określa typ dostępu do kolejki wydruku wymaganej przez program.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonej <see cref="T:System.Printing.PrintServer" />nazwy kolejki, filtru właściwości i żądanego dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użycie konstruktora z `propertyFilter` parametrem poprawia wydajność.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" />to wartość, która może być stosowana tylko do obiektu <see cref="T:System.Printing.PrintServer" /> , a <see cref="T:System.Printing.PrintQueue" /> nie do obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddJob">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wstawia nowe zadanie drukowania do kolejki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli kolejka nie jest wstrzymana lub w stanie błędu, zadanie jest drukowane po osiągnięciu górnej części kolejki, więc jest to funkcja drukowania.  
  
 Inne sposoby drukowania w programie [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> obejmują metodę, która może być używana z lub bez otwierania okna dialogowego oraz <xref:System.Windows.Xps.XpsDocumentWriter>wiele <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metod.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob () As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob();" />
      <MemberSignature Language="F#" Value="member this.AddJob : unit -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wstawia nowe (nazwane) zadanie drukowania, którego zawartość jest <see cref="T:System.Byte" /> tablicą, do kolejki.</summary>
        <returns><see cref="T:System.Printing.PrintSystemJobInfo" /> Reprezentuje zadanie drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do zapisywania informacji o konkretnym urządzeniu w pliku buforu, który nie jest automatycznie dołączany [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] do buforu. Oczywiście trzeba się dowiedzieć, czy plik buforu jest [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] lub. [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] Jeśli wolisz pracować z <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] <xref:System.Printing.PrintQueueStream> , możesz użyć klasy zamiast tej metody.  
  
 <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> <xref:System.Printing.PrintSystemJobInfo> <xref:System.Printing.PrintQueue.AddJob%2A> Po wywołaniu <xref:System.Byte> metody należy napisać tablicę do właściwości, która jest zwracana przez lub nie jest tworzone zadanie drukowania. <xref:System.Printing.PrintQueue.AddJob%2A> Ta tablica wskazuje, co drukuje, jeśli drukarka działa i nie jest wstrzymana.  
  
> [!CAUTION]
>  <xref:System.IO.Stream.Close%2A> <xref:System.Printing.PrintQueue.AddJob%2A> <xref:System.IO.Stream> Jeśli element nie<xref:System.InvalidOperationException> jest zamknięty za pomocą przed końcem wątku, w którym jest wywoływana, wówczas jest generowany, gdy wątek kończy się, ponieważ wątek buforu nie może uzyskać kontroli nad obiektem. <xref:System.Printing.PrintSystemJobInfo.JobStream%2A>  
  
 W kolejce [!INCLUDE[TLA#tla_gui](~/includes/tlasharptla-gui-md.md)]wydruku zadanie ma nazwę "dokument systemowy drukowania". Aby nadać zadanie inną nazwę, użyj <xref:System.Printing.PrintQueue.AddJob%28System.String%29> przeciążenia.  
  
 Inne sposoby drukowania w programie [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> obejmują metodę, która może być używana z lub bez otwierania okna dialogowego oraz <xref:System.Windows.Xps.XpsDocumentWriter>wiele <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metod.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak za pomocą <xref:System.Printing.PrintQueue.AddJob> programu <xref:System.Byte> wysyłać tablicę do kolejki wydruku. Ten kod działa tylko z drukarkami, które mogą wykrywać i drukować zwykły tekst. Niektóre z nich nie mogą.  
  
 [!code-csharp[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addunnamedjob)]
 [!code-vb[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addunnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob jobName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobName">Nazwa zadania drukowania.</param>
        <summary>Wstawia nowe zadanie drukowania, którego zawartość jest <see cref="T:System.Byte" /> tablicą, do kolejki.</summary>
        <returns><see cref="T:System.Printing.PrintSystemJobInfo" /> Reprezentuje zadanie drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do zapisywania informacji o konkretnym urządzeniu w pliku buforu, który nie jest automatycznie dołączany [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] do buforu. Oczywiście trzeba się dowiedzieć, czy plik buforu jest [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] lub. [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] Jeśli wolisz pracować z <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] <xref:System.Printing.PrintQueueStream> , możesz użyć klasy zamiast tej metody.  
  
 <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> <xref:System.Printing.PrintSystemJobInfo> <xref:System.Printing.PrintQueue.AddJob%2A> Po wywołaniu <xref:System.Byte> metody należy napisać tablicę do właściwości, która jest zwracana przez lub nie jest tworzone zadanie drukowania. <xref:System.Printing.PrintQueue.AddJob%2A> Ta tablica wskazuje, co drukuje, jeśli drukarka działa i nie jest wstrzymana.  
  
> [!CAUTION]
>  <xref:System.IO.Stream.Close%2A> <xref:System.Printing.PrintQueue.AddJob%2A> <xref:System.IO.Stream> Jeśli element nie<xref:System.InvalidOperationException> jest zamknięty za pomocą przed końcem wątku, w którym jest wywoływana, wówczas jest generowany, gdy wątek kończy się, ponieważ wątek buforu nie może uzyskać kontroli nad obiektem. <xref:System.Printing.PrintSystemJobInfo.JobStream%2A>  
  
 Inne sposoby drukowania w programie [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> obejmują metodę, która może być używana z lub bez otwierania okna dialogowego oraz <xref:System.Windows.Xps.XpsDocumentWriter>wiele <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metod.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Printing.PrintQueue.AddJob%28System.String%29> do odczytywania pliku <xref:System.Byte> do tablicy i wysyłania tablicy do kolejki wydruku. W tym kodzie założono, że plik o nazwie test. txt znajduje się w katalogu głównym dysku C:. Ten kod działa tylko z drukarkami, które mogą wykrywać i drukować zwykły tekst. Niektóre z nich nie mogą.  
  
 [!code-csharp[WriteToSpoolFile#AddNamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addnamedjob)]
 [!code-vb[WriteToSpoolFile#AddNamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * System.Printing.PrintTicket -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, printTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="jobName">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="printTicket">Ustawienia zadania drukowania.</param>
        <summary>Wstawia nowe zadanie drukowania dla [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dokumentu do kolejki i nadaje mu określoną nazwę i ustawienia.</summary>
        <returns><see cref="T:System.Printing.PrintSystemJobInfo" /> Reprezentuje zadanie drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz <xref:System.Printing.PrintQueue.AddJob%28System.String%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String, documentPath As String, fastCopy As Boolean) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * string * bool -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, documentPath, fastCopy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobName">Nazwa zadania drukowania.</param>
        <param name="documentPath">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="fastCopy"><see langword="true" />buforowanie szybko bez opinii o postępach stron i bez weryfikowania, czy plik jest prawidłowy [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]; <see langword="false" />w przeciwnym razie.</param>
        <summary>Wstawia nowe zadanie drukowania dla [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dokumentu do kolejki, nadaje mu określoną nazwę i określa, czy należy sprawdzić poprawność.</summary>
        <returns><see cref="T:System.Printing.PrintSystemJobInfo" /> Reprezentuje zadanie drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fastCopy` tak`true`, drukarka musi być [przeglądem drukowania](~/docs/framework/wpf/advanced/printing-overview.md). Jeśli tak nie jest, <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> Metoda zgłasza wyjątek.  
  
 Jeśli `fastCopy` tak`false`, to nie trzeba używać drukarki XPsDrv. [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] Plik dodawany do kolejki jest konwertowany na język opisu strony drukarki, taki jak PCL lub PostScript. Jednak tego rodzaju drukowanie wykonuje wywołanie [!INCLUDE[TLA#tla_com](~/includes/tlasharptla-com-md.md)]. Wywołanie [!INCLUDE[TLA2#tla_com](~/includes/tla2sharptla-com-md.md)] wymaga, aby wątek wywołujący miał jednowątkowy element Apartment (<xref:System.Threading.ApartmentState.STA>) zamiast wielowątkowego apartamentu (<xref:System.Threading.ApartmentState.MTA>), który jest wartością domyślną w [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 2,0 i nowszych. (Aby uzyskać więcej informacji na temat wątków i Stanów apartamentów, zobacz [zarządzane i niezarządzane wątki](https://msdn.microsoft.com/library/db425c20-4b2f-4433-bf96-76071c7881e5) <xref:System.Threading.ApartmentState>oraz.) Istnieją dwa sposoby wykonania tej czynności:  
  
-   <xref:System.STAThreadAttribute> Najprostszym sposobem jest dodanie (czyli "`[System.STAThreadAttribute()]`") tuż powyżej pierwszego `Main` wiersza metody aplikacji (zazwyczaj "`static void Main(string[] args)`").  
  
-   Jeśli `Main` potrzebujesz stanu <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> <xref:System.Threading.ApartmentState.MTA>apartamentu wątku, możesz obsłużyć wywołanie w osobnym <xref:System.Threading.Thread.SetApartmentState%2A>wątku, którego stan apartamentu jest ustawiony na <xref:System.Threading.ApartmentState.STA> wartość. Poniższy przykład ilustruje tę drugą technikę.  
  
> [!NOTE]
>  Nie można zastosować <xref:System.STAThreadAttribute> do żadnej metody z wyjątkiem `Main` i nie można użyć <xref:System.Threading.Thread.SetApartmentState%2A> dla tego `Main` wątku.  
  
 Inne sposoby drukowania w programie [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> obejmują metodę, która może być używana z lub bez otwierania okna dialogowego oraz <xref:System.Windows.Xps.XpsDocumentWriter>wiele <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metod.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> do tworzenia wsadowego drukowania [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] wszystkich plików w katalogu.  
  
 [!code-csharp[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/csharp/VS_Snippets_Wpf/BatchPrintXPSFiles/CSharp/Program.cs#batchprintxpsfiles)]
 [!code-vb[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BatchPrintXPSFiles/visualbasic/program.vb#batchprintxpsfiles)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ApartmentState" />
        <altmember cref="T:System.STAThreadAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/e78b14f1-e487-43cd-9c6d-1a07483f1730">Udostępnianie składników COM programowi.NET Framework</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy, System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * string * bool * System.Printing.PrintTicket -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, documentPath, fastCopy, printTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="documentPath" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="fastCopy" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="jobName">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="documentPath">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="fastCopy"><see langword="true" />buforowanie szybko bez opinii o postępach stron i bez weryfikowania, czy plik jest prawidłowy [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]; <see langword="false" />w przeciwnym razie.</param>
        <param name="printTicket">Ustawienia zadania drukowania.</param>
        <summary>Wstawia nowe zadanie drukowania dla [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dokumentu do kolejki, nadaje mu określoną nazwę i ustawienia oraz określa, czy należy sprawdzić poprawność.</summary>
        <returns><see cref="T:System.Printing.PrintSystemJobInfo" /> Reprezentuje zadanie drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveragePagesPerMinute">
      <MemberSignature Language="C#" Value="public virtual int AveragePagesPerMinute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AveragePagesPerMinute" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AveragePagesPerMinute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AveragePagesPerMinute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AveragePagesPerMinute : int" Usage="System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera szybkość drukarki mierzoną na stronach na minutę.</summary>
        <value>Średnia liczba stron wydrukowanych na minutę drukarki.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public int ClientPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ClientPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ClientPrintSchemaVersion { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientPrintSchemaVersion : int" Usage="System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wersję <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">schematu drukowania</see>.</summary>
        <value>Wersja [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) w użyciu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wersja [schematu wydruku](https://go.microsoft.com/fwlink/?LinkId=186397) wydana w systemie Windows Vista to 1.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=186397">Drukuj schemat</related>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public virtual string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Comment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Comment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Comment { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Comment : string with get, set" Usage="System.Printing.PrintQueue.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia komentarz dotyczący drukarki.</summary>
        <value>Komentarz dotyczący drukarki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Komentarz jest widoczny dla użytkowników na liście drukarek systemu Windows i w oknie dialogowym typowy wydruk systemu Windows. Może zawierać informacje nie zawarte we właściwościach nazwy, modelu lub lokalizacji drukarki, które są również widoczne w tych samych miejscach; na przykład "zarezerwowane dla działu płac. między 3 PM i 4 PM". <xref:System.Printing.PrintQueue.Description%2A> (Właściwość umożliwia przechowywanie informacji, które użytkownicy nie mogą wyświetlać, chyba że aplikacja jest widoczna).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberSignature Language="F#" Value="override this.Commit : unit -&gt; unit" Usage="printQueue.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje bieżące właściwości <see cref="T:System.Printing.PrintQueue" /> obiektu do rzeczywistej kolejki wydruku na serwerze wydruku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiany wprowadzane przez program do właściwości <xref:System.Printing.PrintQueue> obiektu nie zaczną obowiązywać, dopóki program nie <xref:System.Printing.PrintQueue.Commit%2A> wykona metody.  
  
 Metoda wymaga, aby <xref:System.Printing.PrintQueue> obiekt został utworzony z <xref:System.Printing.PrintSystemDesiredAccess.AdministratePrinter> prawami.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej metody podczas scalania dwóch biletów drukowania.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można zatwierdzić niektórych właściwości.</exception>
        <exception cref="T:System.Printing.PrintCommitAttributesException">Nie można zatwierdzić niektórych właściwości.  
  
—lub— 
<see cref="T:System.Printing.PrintQueue" /> Obiekt nie został utworzony z wystarczającymi prawami.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Refresh" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateXpsDocumentWriter">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter documentImageableArea" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Odwołanie do obiektu, który zawiera wymiary obszaru strony, na którym urządzenie może drukować. Ponieważ jego typ danych nie ma konstruktora publicznego, ten parametr jest przekazaniem niezainicjowanym.</param>
        <summary>Tworzy obiekt, otwiera okno dialogowe typowego wydruku systemu Windows i <see langword="ref" /> zwraca parametr<see langword="ByRef" /> (w Visual Basic) reprezentujący informacje o obszarze obrazkowym i wymiary nośnika. <see cref="T:System.Windows.Xps.XpsDocumentWriter" /></summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Zapisuje dane XPS w strumieniu. Może to być <see langword="null" />. (Parametr <paramref name="documentImageableArea" /> <see langword="ByRef" /> jest parametrem <see langword="ref" /> [in Visual Basic], który jest inicjowany przez metodę, więc reprezentuje drugi zwracany element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek potrzebuje maksymalnie kwartału wolnego miejsca na krawędzi każdej strony, aby wyświetlić papier i przenieść go przez drukarkę. W przeciwnym razie toner może narastać mechanizm przepływu papieru. Obszar, który można wydrukować to "obszar do obrazu".  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma konstruktora publicznego. W związku z tym `documentImageableArea` zmienna musi być zadeklarowana i `null` przypisana do i tylko następnie przenoszona do metody. Ta metoda wyświetla <xref:System.Windows.Controls.PrintDialog> wymagane dane wejściowe od użytkownika. Gdy użytkownik wybierze drukarkę, rozmiar papieru i orientację i zamknięto okno dialogowe, `documentImageableArea` wskazuje rzeczywisty obiekt i jego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamknie okno dialogowe, wartość zwracana to `null`. W związku z tym wartość zwracana musi być sprawdzana `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (System.Printing.PrintQueue printQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintQueue printQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintQueue ^ printQueue);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : System.Printing.PrintQueue -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter printQueue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
      </Parameters>
      <Docs>
        <param name="printQueue">Kolejka wydruku do drukowania dokumentu XPS.</param>
        <summary><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Tworzy obiekt i kojarzy go z określoną kolejką wydruku.</summary>
        <returns>Zapisuje <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> dane w strumieniu XPS.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Windows.Xps.XpsDocumentWriter>jak używać tej metody do tworzenia.  
  
 [!code-csharp[XpsPrint#PrintQueueSnip](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#printqueuesnip)]
 [!code-vb[XpsPrint#PrintQueueSnip](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#printqueuesnip)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref double width, ref double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(float64&amp; width, float64&amp; height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Double@,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef width As Double, ByRef height As Double) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(double % width, double % height);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" RefType="ref" />
        <Parameter Name="height" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="width">Szerokość dokumentu XPS.</param>
        <param name="height">Wysokość dokumentu XPS.</param>
        <summary><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Tworzy obiekt o określonym wymiarze.</summary>
        <returns>Zapisuje <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> dane w strumieniu XPS. Może to być <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wyświetla <xref:System.Windows.Controls.PrintDialog> wymagane dane wejściowe od użytkownika. Jeśli użytkownik anuluje lub zamknie okno dialogowe, wartość zwracana to `null`. W związku z tym wartość zwracana musi być sprawdzana `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : string *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (jobDescription, documentImageableArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Nazwa zadania drukowania. Jest ona wyświetlana w interfejsie użytkownika drukowania systemu Windows.</param>
        <param name="documentImageableArea">Odwołanie do obiektu, który zawiera wymiary obszaru strony, na którym urządzenie może drukować. Ponieważ jego typ danych nie ma konstruktora publicznego, ten parametr jest przekazaniem niezainicjowanym.</param>
        <summary>Tworzy obiekt, otwiera okno dialogowe typowego wydruku systemu Windows (i zawiera opis zadania) i <see langword="ref" /> zwraca (<see langword="ByRef" /> w Visual Basic) parametr, który reprezentuje informacje o obszarze obrazu i wymiary nośnika <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> .</summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Zapisuje dane XPS w strumieniu. Może to być <see langword="null" />. (Parametr <paramref name="documentImageableArea" /> <see langword="ByRef" /> jest parametrem <see langword="ref" /> [in Visual Basic], który jest inicjowany przez metodę, więc reprezentuje drugi zwracany element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek potrzebuje maksymalnie kwartału wolnego miejsca na krawędzi każdej strony, aby wyświetlić papier i przenieść go przez drukarkę. W przeciwnym razie toner może narastać mechanizm przepływu papieru. Obszar, który można wydrukować to "obszar do obrazu".  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma konstruktora publicznego. W związku z tym `documentImageableArea` zmienna musi być zadeklarowana i `null` przypisana do i tylko następnie przenoszona do metody. Ta metoda wyświetla <xref:System.Windows.Controls.PrintDialog> wymagane dane wejściowe od użytkownika. Gdy użytkownik wybierze drukarkę, rozmiar papieru i orientację i zamknięto okno dialogowe, `documentImageableArea` wskazuje rzeczywisty obiekt i jego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamknie okno dialogowe, wartość zwracana to `null`. W związku z tym wartość zwracana musi być sprawdzana `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  *  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (documentImageableArea, pageRangeSelection, pageRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Odwołanie do obiektu, który zawiera wymiary obszaru strony, na którym urządzenie może drukować. Ponieważ jego typ danych nie ma konstruktora publicznego, ten parametr jest przekazaniem niezainicjowanym.</param>
        <param name="pageRangeSelection">Wartość określająca, czy wydrukować wszystkie strony, czy tylko zakres określony przez użytkownika.</param>
        <param name="pageRange">Zakres drukowanych stron.</param>
        <summary>Tworzy obiekt, otwiera okno dialogowe typowego drukowania systemu Windows, udostępnia okno dialogowe z zakresem stron i opisem zadania drukowania oraz <see langword="ref" /> zwraca parametr (<see langword="ByRef" /> w Visual Basic), który reprezentuje informacje o <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obszar obrazu i wymiary nośnika.</summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Zapisuje dane XPS w strumieniu. Może to być <see langword="null" />. ( <paramref name="documentImageableArea" />Parametry, <paramref name="pageRangeSelection" />, i <paramref name="pageRange" /> są wszystkie <see langword="ref" /> [<see langword="ByRef" /> w Visual Basic] parametry, które są inicjowane przez użytkownika i zwracane, gdy okno dialogowe jest zamknięte, więc każdy reprezentuje dodatkowy zwracany element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek potrzebuje maksymalnie kwartału wolnego miejsca na krawędzi każdej strony, aby wyświetlić papier i przenieść go przez drukarkę. W przeciwnym razie toner może narastać mechanizm przepływu papieru. Obszar, który można wydrukować to "obszar do obrazu".  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma konstruktora publicznego. W związku z tym `documentImageableArea` zmienna musi być zadeklarowana i `null` przypisana do i tylko następnie przenoszona do metody. Ta metoda wyświetla <xref:System.Windows.Controls.PrintDialog> wymagane dane wejściowe od użytkownika. Użytkownik konfiguruje swoje zadanie drukowania w oknie dialogowym (w tym Wybieranie drukarki, rozmiaru papieru, orientacji i zakresu stron). Gdy okno dialogowe jest zamknięte `pageRangeSelection` i `pageRange` zawiera wartości, a `documentImageableArea` następnie wskazuje rzeczywisty obiekt, którego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamknie okno dialogowe, wartość zwracana to `null`. W związku z tym wartość zwracana musi być sprawdzana `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : string *  *  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (jobDescription, documentImageableArea, pageRangeSelection, pageRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Nazwa zadania drukowania. Jest ona wyświetlana w interfejsie użytkownika drukowania systemu Windows.</param>
        <param name="documentImageableArea">Odwołanie do obiektu, który zawiera wymiary obszaru strony, na którym urządzenie może drukować. Ponieważ jego typ danych nie ma konstruktora publicznego, ten parametr jest przekazaniem niezainicjowanym.</param>
        <param name="pageRangeSelection">Wartość określająca, czy wydrukować wszystkie strony, czy tylko zakres określony przez użytkownika.</param>
        <param name="pageRange">Zakres drukowanych stron.</param>
        <summary>Tworzy obiekt, otwiera okno dialogowe typowego drukowania systemu Windows, udostępnia okno dialogowe z zakresem stron i <see langword="ref" /> zwraca parametr (<see langword="ByRef" /> w Visual Basic), który reprezentuje informacje o obszarze obrazkowym i wymiary <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> multimedialny.</summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Zapisuje dane XPS w strumieniu. Może to być <see langword="null" />. ( <paramref name="documentImageableArea" />Parametry, <paramref name="pageRangeSelection" />, i <paramref name="pageRange" /> są wszystkie <see langword="ref" /> [<see langword="ByRef" /> w Visual Basic] parametry, które są inicjowane przez użytkownika i zwracane, gdy okno dialogowe jest zamknięte, więc każdy reprezentuje dodatkowy zwracany element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek potrzebuje maksymalnie kwartału wolnego miejsca na krawędzi każdej strony, aby wyświetlić papier i przenieść go przez drukarkę. W przeciwnym razie toner może narastać mechanizm przepływu papieru. Obszar, który można wydrukować to "obszar do obrazu".  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma konstruktora publicznego. W związku z tym `documentImageableArea` zmienna musi być zadeklarowana i `null` przypisana do i tylko następnie przenoszona do metody. Ta metoda wyświetla <xref:System.Windows.Controls.PrintDialog> wymagane dane wejściowe od użytkownika. Użytkownik konfiguruje swoje zadanie drukowania w oknie dialogowym (w tym Wybieranie drukarki, rozmiaru papieru, orientacji i zakresu stron). Gdy okno dialogowe jest zamknięte `pageRangeSelection` i `pageRange` zawiera wartości, a `documentImageableArea` następnie wskazuje rzeczywisty obiekt, którego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamknie okno dialogowe, wartość zwracana to `null`. W związku z tym wartość zwracana musi być sprawdzana `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentJobSettings">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobSettings CurrentJobSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintJobSettings CurrentJobSettings" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentJobSettings As PrintJobSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobSettings ^ CurrentJobSettings { System::Printing::PrintJobSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentJobSettings : System.Printing.PrintJobSettings" Usage="System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który zawiera ustawienia konfiguracji dla bieżącego zadania drukowania.</summary>
        <value><see cref="T:System.Printing.PrintJobSettings" /> Wartość, która przechowuje ustawienia aktualnie wybranego zadania drukowania. Te ustawienia obejmują opis zadania i odwołanie do zadania <see cref="T:System.Printing.PrintTicket" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Printing.PrintTicket" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket DefaultPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket DefaultPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ DefaultPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPrintTicket : System.Printing.PrintTicket with get, set" Usage="System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślne opcje drukarki skojarzone z tym <see cref="T:System.Printing.PrintQueue" />elementem.</summary>
        <value>Wartość domyślna <see cref="T:System.Printing.PrintTicket" /> dla kolejki wydruku lub <see langword="null" /> w przypadku wystąpienia błędu w kolejce wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Printing.PrintTicket> określa opcje zadania drukowania, takie jak <xref:System.Printing.PrintTicket.CopyCount%2A>, <xref:System.Printing.PrintTicket.PageOrientation%2A> <xref:System.Printing.PrintTicket.Duplexing%2A>,, <xref:System.Printing.PrintTicket.Stapling%2A>i inne.  
  
 Każda <xref:System.Printing.PrintQueue> z nich utrzymuje <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A>swój własny.  
  
 W normalnej operacji <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> Właściwość <xref:System.Printing.PrintTicket>zwraca.  Jeśli wykryje nieprawidłowy stan, <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> zwraca `null`. <xref:System.Printing.PrintQueue>  Jeśli <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> zwraca`null`, aplikacja powinna wyświetlić okno dialogowe użytkownika z informacjami, że wystąpił błąd w tej kolejce wydruku i że zadanie drukowania powinno zostać uruchomione ponownie z danymi wyjściowymi kierowanymi do innej kolejki wydruku.  
  
 Pobieranie lub Ustawianie <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> właściwości nie <xref:System.Printing.PrintTicket>sprawdza poprawności.  Metoda może służyć do <xref:System.Printing.PrintTicket>walidacji. <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości podczas testowania możliwości drukarki i konfigurowania zadania drukowania, aby korzystać z nich.  
  
 [!code-cpp[XpsCreate#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.UserPrintTicket" />
        <altmember cref="P:System.Printing.PrintQueue.DefaultPriority" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPriority">
      <MemberSignature Language="C#" Value="public virtual int DefaultPriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultPriority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPriority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DefaultPriority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPriority : int with get, set" Usage="System.Printing.PrintQueue.DefaultPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślny priorytet, który zostanie nadany każde nowe zadanie drukowania dodane do kolejki.</summary>
        <value>Domyślny priorytet zadań drukowania dodanych do kolejki. Możliwe wartości mieszczą się w zakresie od 1 do 99. Domyślnym ustawieniem jest 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Priorytet zadania drukowania może zostać zmieniony przez użytkowników po przejściu do kolejki wydruku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Printing.PrintQueue.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera opis kolejki wydruku.</summary>
        <value>Opis kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy kolejka jest tworzona, opis jest domyślnie używany przez trzy części ciąg, który składa się z nazwy kolejki, modelu i lokalizacji rozdzielonych przecinkami. Odróżnij <xref:System.Printing.PrintQueue.Comment%2A>Właściwośćwłaściwości , która jest widoczna dla użytkowników we wspólnym oknie dialogowym drukowania i liście drukarki i faksy. <xref:System.Printing.PrintQueue.Description%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Printing.PrintQueue.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pełną nazwę kolejki.</summary>
        <value>Pełna nazwa kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku kolejek wydruku na lokalnym serwerze wydruku ta właściwość jest taka sama jak <xref:System.Printing.PrintQueue.Name%2A>wartość, w przeciwnym razie zawiera pełną nazwę UNC (Universal Naming Convention).  
  
 Obiekt ma również możliwość <xref:System.Printing.PrintQueue.Name%2A> zapisu i <xref:System.Printing.PrintQueue.ShareName%2A> właściwości. <xref:System.Printing.PrintQueue>  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości podczas scalania dwóch biletów drukowania.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo GetJob (int jobId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo GetJob(int32 jobId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetJob (jobId As Integer) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ GetJob(int jobId);" />
      <MemberSignature Language="F#" Value="member this.GetJob : int -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.GetJob jobId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="jobId">Liczba zadań w kolejce.</param>
        <summary>Pobiera zadanie drukowania o określonym numerze IDENTYFIKACYJNym.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> , która określa właściwości zadania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również użyć <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> metody do tego samego celu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej metody podczas diagnozowania problemu z zadaniem drukowania.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilities">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Printing.PrintCapabilities" /> Pobiera obiekt, który identyfikuje możliwości drukarki lub urządzenia, takie jak drukowanie w kolorze lub możliwość drukowania dwustronnego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilities () As PrintCapabilities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities();" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilities : unit -&gt; System.Printing.PrintCapabilities" Usage="printQueue.GetPrintCapabilities " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Printing.PrintCapabilities" /> Pobiera obiekt, który identyfikuje możliwości drukarki.</summary>
        <returns><see cref="T:System.Printing.PrintCapabilities" /> Obiekt, który określa, co drukarka może i czego nie może zrobić, na przykład dwustronne lub automatyczne zszywanie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej metody podczas scalania dwóch biletów drukowania.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Nie można pobrać obiektu. <see cref="T:System.Printing.PrintCapabilities" /></exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">w celu uzyskania uprawnień do drukowania. Skojarzone Wyliczenie:<see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities(System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilities : System.Printing.PrintTicket -&gt; System.Printing.PrintCapabilities" Usage="printQueue.GetPrintCapabilities printTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Bilet drukowania, który zapewnia podstawę, na której są raportowane możliwości drukowania.</param>
        <summary><see cref="T:System.Printing.PrintCapabilities" /> Pobiera obiekt, który identyfikuje możliwości drukarki.</summary>
        <returns><see cref="T:System.Printing.PrintCapabilities" /> Obiekt, który określa, co drukarka może i czego nie może zrobić, na przykład dwustronne lub automatyczne zszywanie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr jest używany jako podstawa do <xref:System.Printing.PrintCapabilities> konstruowania obiektu. <xref:System.Printing.PrintTicket> Załóżmy na przykład, że drukarka obsługuje tylko typy nośników A i B z zasobnika wejściowego 1 i obsługuje tylko typ nośnika C z pojemnika wejściowego 2. Jeśli parametr określa plik wejściowy bin 1, <xref:System.Printing.PrintCapabilities> zwracany obiekt będzie zawierać wszystkie trzy typy nośników, ale zostałby zgłosić typ C jako "ograniczone". `printTicket` Jeśli parametr określa plik wejściowy bin 2, <xref:System.Printing.PrintCapabilities> zwracany obiekt będzie zawierać wszystkie trzy typy nośników, ale będzie zgłaszać typy a i B jako "ograniczone". `printTicket` Aby uzyskać więcej informacji o ograniczeniach, zobacz [schemat drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) .  
  
 Jeśli `printTicket` jest `null` ,<xref:System.Printing.PrintQueue.UserPrintTicket%2A> jest używany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Nie można pobrać obiektu. <see cref="T:System.Printing.PrintCapabilities" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="printTicket" />nie jest poprawnie sformułowany.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">w celu uzyskania uprawnień do drukowania. Skojarzone Wyliczenie:<see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilitiesAsXml">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera obiekt, który określa możliwości drukarki jako strumień XML, który jest zgodny ze [schematem drukowania.](https://go.microsoft.com/fwlink/?LinkId=186397) <see cref="T:System.IO.MemoryStream" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używany schemat XML nosi nazwę "PrintCapabilities", która jest częścią systemu [schematu wydruku](https://go.microsoft.com/fwlink/?LinkId=186397) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilitiesAsXml () As MemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml();" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilitiesAsXml : unit -&gt; System.IO.MemoryStream" Usage="printQueue.GetPrintCapabilitiesAsXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera obiekt, który określa możliwości drukarki jako strumień XML, który jest zgodny ze [schematem drukowania.](https://go.microsoft.com/fwlink/?LinkId=186397) <see cref="T:System.IO.MemoryStream" /></summary>
        <returns>Określenie możliwości drukarki przy użyciu schematu XML "PrintCapabilities", który jest częścią systemu <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">schematu wydruku.</see> <see cref="T:System.IO.MemoryStream" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">Nie można pobrać możliwości drukowania.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">w celu uzyskania uprawnień do drukowania. Skojarzone Wyliczenie:<see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml(System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilitiesAsXml : System.Printing.PrintTicket -&gt; System.IO.MemoryStream" Usage="printQueue.GetPrintCapabilitiesAsXml printTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Bilet drukowania, który zapewnia podstawę, na której są raportowane możliwości drukowania.</param>
        <summary>Pobiera obiekt, który określa możliwości drukarki w formacie XML, który jest zgodny ze [schematem drukowania.](https://go.microsoft.com/fwlink/?LinkId=186397) <see cref="T:System.IO.MemoryStream" /></summary>
        <returns>Określenie możliwości drukarki przy użyciu schematu XML "PrintCapabilities", który jest częścią systemu <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">schematu wydruku.</see> <see cref="T:System.IO.MemoryStream" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintTicket> Parametr jest używany jako podstawa do konstruowania kodu XML funkcji drukowania. Załóżmy na przykład, że drukarka obsługuje tylko typy nośników A i B z zasobnika wejściowego 1 i obsługuje tylko typ nośnika C z pojemnika wejściowego 2. `printTicket` Jeśli parametr podano wejściowy pojemnik 1, wówczas kod XML funkcji drukowania, który jest zwracany będzie zawierać wszystkie trzy typy nośników, ale mógłby zgłosić typ C jako "ograniczone". `printTicket` Jeśli parametr określa plik wejściowy bin 2, zwracane możliwości drukowania XML będą obejmować wszystkie trzy typy nośników, ale będą zgłaszać typy a i B jako "ograniczone". Aby uzyskać więcej informacji o ograniczeniach, zobacz [schemat drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) .  
  
 Jeśli `printTicket` jest `null` ,<xref:System.Printing.PrintQueue.UserPrintTicket%2A> jest używany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Nie można pobrać możliwości drukowania.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="printTicket" />nie jest poprawnie sformułowany.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">w celu uzyskania uprawnień do drukowania. Skojarzone Wyliczenie:<see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintJobInfoCollection">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintJobInfoCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintJobInfoCollection () As PrintJobInfoCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintJobInfoCollection ^ GetPrintJobInfoCollection();" />
      <MemberSignature Language="F#" Value="member this.GetPrintJobInfoCollection : unit -&gt; System.Printing.PrintJobInfoCollection" Usage="printQueue.GetPrintJobInfoCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kolekcję zawierającą <see cref="T:System.Printing.PrintSystemJobInfo" /> obiekt dla każdego zadania w kolejce.</summary>
        <returns>Kolekcja <see cref="T:System.Printing.PrintSystemJobInfo" /> obiektów. Istnieje jeden dla każdego zadania w kolejce.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej metody podczas wykonywania tej samej akcji dla każdego zadania w kolejce.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPaperProblem">
      <MemberSignature Language="C#" Value="public bool HasPaperProblem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPaperProblem" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasPaperProblem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasPaperProblem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasPaperProblem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasPaperProblem : bool" Usage="System.Printing.PrintQueue.HasPaperProblem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka ma nieokreślony problem z papierem.</summary>
        <value><see langword="true" />Jeśli Wystąpił nieokreślony problem z papierem; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 Obiekt ma <xref:System.Printing.PrintQueue.IsPaperJammed%2A> również właściwości i <xref:System.Printing.PrintQueue.IsOutOfPaper%2A>. <xref:System.Printing.PrintQueue>  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasToner">
      <MemberSignature Language="C#" Value="public bool HasToner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasToner" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasToner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasToner As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasToner { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasToner : bool" Usage="System.Printing.PrintQueue.HasToner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka ma toner.</summary>
        <value><see langword="true" />Jeśli bieżąca drukarka ma toner; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niektórzy producenci drukarek mogą używać tego sygnału, aby wskazać, że toner nie jest niski. Inne osoby mogą korzystać z niej w celu wskazania, że kaseta toneru jest obecna i poprawnie wstawiona podczas używania <xref:System.Printing.PrintQueue.IsTonerLow%2A> , aby wskazać, że toner jest niski.  
  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintServer HostingPrintServer { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HostingPrintServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HostingPrintServer As PrintServer" />
      <MemberSignature Language="C++ CLI" Value="public:  virtual property System::Printing::PrintServer ^ HostingPrintServer {  public:&#xA;System::Printing::PrintServer ^ get(); protected:&#xA; void set(System::Printing::PrintServer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HostingPrintServer : System.Printing.PrintServer with get, set" Usage="System.Printing.PrintQueue.HostingPrintServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia (chroniony) serwer wydruku, który kontroluje kolejkę wydruku.</summary>
        <value>Nazwa i inne właściwości <see cref="T:System.Printing.PrintServer" /> , które obsługują kolejkę wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę właściwość można ustawić tylko przez klasę, która pochodzi z <xref:System.Printing.PrintQueue> , ponieważ Metoda ustawiająca właściwości to. `protected`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InPartialTrust">
      <MemberSignature Language="C#" Value="public bool InPartialTrust { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPartialTrust" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.InPartialTrust" />
      <MemberSignature Language="VB.NET" Value="Public Property InPartialTrust As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InPartialTrust { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InPartialTrust : bool with get, set" Usage="System.Printing.PrintQueue.InPartialTrust" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy kolejka działa w trybie częściowo zaufanym, wyższym poziomie zaufania.</summary>
        <value><see langword="true" />Jeśli kolejka działa w trybie częściowo zaufanym; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy właściwość ma `true`wartość, program nie może utworzyć <xref:System.Printing.PrintQueue> obiektu, który reprezentuje tę drukarkę, chyba że użytkownik ma pełne uprawnienia do drukowania dla drukarki. <xref:System.Printing.PrintQueue.InPartialTrust%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InternalDispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.InternalDispose : bool -&gt; unit" Usage="printQueue.InternalDispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</param>
        <summary>Zwalnia niezarządzane zasoby używane przez <see cref="T:System.Printing.PrintQueue" /> program i opcjonalnie zwalnia zarządzane zasoby.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBidiEnabled">
      <MemberSignature Language="C#" Value="public bool IsBidiEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBidiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBidiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBidiEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBidiEnabled : bool" Usage="System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy komunikacja dwukierunkowa z drukarką jest włączona.</summary>
        <value><see langword="true" />w przypadku włączenia komunikacji dwukierunkowej z drukarką; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.Printing.PrintQueue.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy urządzenie drukujące jest zajęte.</summary>
        <value><see langword="true" />Jeśli urządzenie jest zajęte; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zajęte nie musi oznaczać, że przetwarza zadanie drukowania. Jeśli urządzenie jest połączeniem z drukarką/faksem lub kopiarką, może to być Faksowanie lub kopiowanie. Porównaj z <xref:System.Printing.PrintQueue.IsProcessing%2A> właściwością.  
  
 Jeśli urządzenie nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDevQueryEnabled">
      <MemberSignature Language="C#" Value="public bool IsDevQueryEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDevQueryEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDevQueryEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDevQueryEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDevQueryEnabled : bool" Usage="System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka przechowuje dokumenty, gdy konfiguracje dokumentów i drukarek nie są zgodne.</summary>
        <value><see langword="true" />Jeśli kolejka zawiera niezgodne konfiguracje; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirect">
      <MemberSignature Language="C#" Value="public bool IsDirect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirect" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDirect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirect { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirect : bool" Usage="System.Printing.PrintQueue.IsDirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka drukuje bezpośrednio do drukarki, czy najpierw buforuje dokumenty, a następnie drukuje je.</summary>
        <value><see langword="true" />Jeśli kolejka jest drukowana bezpośrednio do drukarki; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę właściwość można ustawić tylko za pomocą wspólnego okna dialogowego drukowania systemu Windows.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDoorOpened">
      <MemberSignature Language="C#" Value="public bool IsDoorOpened { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDoorOpened" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDoorOpened" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDoorOpened As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDoorOpened { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDoorOpened : bool" Usage="System.Printing.PrintQueue.IsDoorOpened" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drzwi są otwarte na drukarce.</summary>
        <value><see langword="true" />Jeśli drzwi są otwarte; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="C#" Value="public bool IsHidden { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHidden" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsHidden" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHidden As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHidden { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHidden : bool" Usage="System.Printing.PrintQueue.IsHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka wydruku jest ukryta w interfejsie użytkownika aplikacji.</summary>
        <value><see langword="true" />Jeśli kolejka wydruku jest ukryta w interfejsie użytkownika systemu Windows; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie należy automatycznie ukrywać kolejki wydruku, gdy ta właściwość jest ustawiana `true`na. Program nadal musi wykonać kroki, aby upewnić się, że nie jest on wyświetlany na żadnej liście kolejek w interfejsie programu.  
  
 Kolejki wydruku nie mogą być ukryte w interfejsie użytkownika systemu Windows, na przykład na liście drukarki i faksy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInError { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInError : bool" Usage="System.Printing.PrintQueue.IsInError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka lub urządzenie jest w stanie błędu.</summary>
        <value><see langword="true" />Jeśli urządzenie jest w stanie błędu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitializing">
      <MemberSignature Language="C#" Value="public bool IsInitializing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitializing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInitializing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitializing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitializing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitializing : bool" Usage="System.Printing.PrintQueue.IsInitializing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka inicjuje się sama.</summary>
        <value><see langword="true" />Jeśli drukarka zostanie zainicjowana; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIOActive">
      <MemberSignature Language="C#" Value="public bool IsIOActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIOActive" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsIOActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIOActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIOActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIOActive : bool" Usage="System.Printing.PrintQueue.IsIOActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka odbiera lub wysyła dane czy sygnały.</summary>
        <value><see langword="true" />Jeśli drukarka otrzymuje lub wyśle wiadomość; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManualFeedRequired">
      <MemberSignature Language="C#" Value="public bool IsManualFeedRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManualFeedRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsManualFeedRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManualFeedRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsManualFeedRequired : bool" Usage="System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka musi być ręcznie podawana papier dla bieżącego zadania drukowania.</summary>
        <value><see langword="true" />Jeśli drukarka wymaga ręcznego karmienia papieru; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotAvailable">
      <MemberSignature Language="C#" Value="public bool IsNotAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsNotAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotAvailable : bool" Usage="System.Printing.PrintQueue.IsNotAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest dostępna.</summary>
        <value><see langword="true" />Jeśli drukarka jest dostępna; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOffline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffline { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOffline : bool" Usage="System.Printing.PrintQueue.IsOffline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w trybie offline.</summary>
        <value><see langword="true" />Jeśli drukarka jest w trybie offline; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfMemory">
      <MemberSignature Language="C#" Value="public bool IsOutOfMemory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfMemory" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfMemory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfMemory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutOfMemory : bool" Usage="System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka ma za mało pamięci.</summary>
        <value><see langword="true" />Jeśli drukarka ma za mało pamięci; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfPaper">
      <MemberSignature Language="C#" Value="public bool IsOutOfPaper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfPaper" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfPaper As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfPaper { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutOfPaper : bool" Usage="System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka musi zostać ponownie załadowana przy użyciu papieru o rozmiarze wymaganym przez bieżące zadanie.</summary>
        <value><see langword="true" />Jeśli należy ponownie załadować drukarkę; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutputBinFull">
      <MemberSignature Language="C#" Value="public bool IsOutputBinFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutputBinFull" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutputBinFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutputBinFull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutputBinFull : bool" Usage="System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy obszar danych wyjściowych drukarki jest niebezpieczeństwa w przypadku przepełnienia.</summary>
        <value><see langword="true" />Jeśli obszar wyjściowy drukarki jest pełny; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperJammed">
      <MemberSignature Language="C#" Value="public bool IsPaperJammed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperJammed" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaperJammed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaperJammed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaperJammed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaperJammed : bool" Usage="System.Printing.PrintQueue.IsPaperJammed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący arkusz papieru jest zablokowany na drukarce.</summary>
        <value><see langword="true" />Jeśli papier jest zablokowany; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaused : bool" Usage="System.Printing.PrintQueue.IsPaused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka wydruku została wstrzymana.</summary>
        <value><see langword="true" />Jeśli kolejka wydruku została wstrzymana; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPendingDeletion">
      <MemberSignature Language="C#" Value="public bool IsPendingDeletion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPendingDeletion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPendingDeletion As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPendingDeletion { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPendingDeletion : bool" Usage="System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w trakcie usuwania zadania drukowania.</summary>
        <value><see langword="true" />Jeśli drukarka usuwa zadanie; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerSaveOn">
      <MemberSignature Language="C#" Value="public bool IsPowerSaveOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerSaveOn" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerSaveOn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerSaveOn { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPowerSaveOn : bool" Usage="System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka działa w trybie oszczędzania.</summary>
        <value><see langword="true" />Jeśli drukarka jest w trybie oszczędzania mocy; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrinting : bool" Usage="System.Printing.PrintQueue.IsPrinting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy zadanie jest drukowane.</summary>
        <value><see langword="true" />Jeśli zadanie jest drukowane; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProcessing">
      <MemberSignature Language="C#" Value="public bool IsProcessing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsProcessing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsProcessing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsProcessing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsProcessing : bool" Usage="System.Printing.PrintQueue.IsProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka przetwarza zadanie drukowania.</summary>
        <value><see langword="true" />Jeśli drukarka przetwarza zadanie drukowania; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niektórzy producenci drukarek obsługują ten sygnał zamiast mniej szczegółowych <xref:System.Printing.PrintQueue.IsBusy%2A>.  
  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublished">
      <MemberSignature Language="C#" Value="public bool IsPublished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublished" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPublished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublished : bool" Usage="System.Printing.PrintQueue.IsPublished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest widoczna dla innych użytkowników sieci.</summary>
        <value><see langword="true" />Jeśli drukarka jest widoczna dla innych użytkowników sieci; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQueued" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsQueued" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsQueued As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsQueued { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsQueued : bool" Usage="System.Printing.PrintQueue.IsQueued" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka może obsługiwać kolejkę z więcej niż jednym zadaniem drukowania w danym momencie.</summary>
        <value><see langword="true" />Jeśli drukarka może obsługiwać kolejkowanie wielu zadań drukowania; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRawOnlyEnabled">
      <MemberSignature Language="C#" Value="public bool IsRawOnlyEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRawOnlyEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRawOnlyEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRawOnlyEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRawOnlyEnabled : bool" Usage="System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka wydruku może korzystać z EMF (ulepszony plik meta), który umożliwia szybsze przepływy danych z aplikacji drukującej do buforu systemu Windows.</summary>
        <value><see langword="true" />Jeśli drukarka nie może używać drukowania w formacie EMF; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServerUnknown">
      <MemberSignature Language="C#" Value="public bool IsServerUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServerUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsServerUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsServerUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsServerUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServerUnknown : bool" Usage="System.Printing.PrintQueue.IsServerUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w stanie błędu.</summary>
        <value><see langword="true" />Jeśli drukarka jest w stanie błędu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Printing.PrintQueue.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest dostępna do użytku przez inne komputery w sieci.</summary>
        <value><see langword="true" />Jeśli drukarka jest udostępniona; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę właściwość można ustawić tylko przy użyciu typowego okna dialogowego drukowania systemu Windows.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTonerLow">
      <MemberSignature Language="C#" Value="public bool IsTonerLow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTonerLow" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsTonerLow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTonerLow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTonerLow { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTonerLow : bool" Usage="System.Printing.PrintQueue.IsTonerLow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy na drukarce jest uruchomiony krótki toner.</summary>
        <value><see langword="true" />Jeśli na drukarce jest uruchomiony krótki toner; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 <xref:System.Printing.PrintQueue> Obiekt ma<xref:System.Printing.PrintQueue.HasToner%2A> również właściwość.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWaiting">
      <MemberSignature Language="C#" Value="public bool IsWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWaiting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWaiting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWaiting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWaiting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWaiting : bool" Usage="System.Printing.PrintQueue.IsWaiting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka oczekuje na dodanie zadania.</summary>
        <value><see langword="true" />Jeśli kolejka oczekuje na zadanie; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWarmingUp">
      <MemberSignature Language="C#" Value="public bool IsWarmingUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWarmingUp" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWarmingUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWarmingUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWarmingUp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWarmingUp : bool" Usage="System.Printing.PrintQueue.IsWarmingUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest rozgrzewana.</summary>
        <value><see langword="true" />Jeśli drukarka jest rozgrzewana; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXpsDevice">
      <MemberSignature Language="C#" Value="public bool IsXpsDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXpsDevice" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsXpsDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXpsDevice As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXpsDevice { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsXpsDevice : bool" Usage="System.Printing.PrintQueue.IsXpsDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy sterownik drukarki jest oparty na [przeglądzie drukowania](~/docs/framework/wpf/advanced/printing-overview.md) , aby był wykorzystywany [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] jako język opisu strony.</summary>
        <value><see langword="true" />Jeśli drukarka używa [omówienia drukowania](~/docs/framework/wpf/advanced/printing-overview.md), w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepPrintedJobs">
      <MemberSignature Language="C#" Value="public bool KeepPrintedJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepPrintedJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeepPrintedJobs As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepPrintedJobs { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeepPrintedJobs : bool" Usage="System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka zapisuje plik języka drukarki, zamiast usuwać go po wydrukowaniu.</summary>
        <value><see langword="true" />Jeśli kolejka zapisuje plik języka drukarki; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual string Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Location : string with get, set" Usage="System.Printing.PrintQueue.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia fizyczną lokalizację drukarki.</summary>
        <value>Fizyczna lokalizacja drukarki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości, aby wyświetlić podzbiór dostępnych kolejek wydruku.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public static int MaxPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxPrintSchemaVersion { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxPrintSchemaVersion : int" Usage="System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera najnowszy możliwy numer wersji [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) , którego może używać kolejka.</summary>
        <value>Numer najnowszej wersji [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) , który może być używany przez kolejkę.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wersja [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) wydana w systemie Windows Vista to 1.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=186397">Drukuj schemat</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeAndValidatePrintTicket">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scala dwa <see cref="T:System.Printing.PrintTicket" />s i gwarantuje, że wyniki <see cref="T:System.Printing.PrintTicket" /> są prawidłowe i nie pyta do żadnej funkcji drukowania, która nie jest obsługiwana przez drukarkę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket);" />
      <MemberSignature Language="F#" Value="member this.MergeAndValidatePrintTicket : System.Printing.PrintTicket * System.Printing.PrintTicket -&gt; System.Printing.ValidationResult" Usage="printQueue.MergeAndValidatePrintTicket (basePrintTicket, deltaPrintTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Pierwszy bilet drukowania.</param>
        <param name="deltaPrintTicket">Drugi bilet drukowania. Może to być <see langword="null" />.</param>
        <summary>Scala dwa <see cref="T:System.Printing.PrintTicket" />s i gwarantuje, że wyniki <see cref="T:System.Printing.PrintTicket" /> są prawidłowe i nie pyta do żadnej funkcji drukowania, która nie jest obsługiwana przez drukarkę.</summary>
        <returns>A <see cref="T:System.Printing.ValidationResult" /> , który obejmuje scalone <see cref="T:System.Printing.PrintTicket" /> i wskazujący, czy jakiekolwiek z jego ustawień musiały zostać zmienione w celu zagwarantowania żywotności.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje bilet drukowania na żywotność; oznacza to, że bilet nie żąda funkcji drukowania, które nie są obsługiwane przez drukarkę. Metoda najpierw sprawdza poprawność dwóch wejściowych biletów drukowania względem [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397). Jeśli jeden z tych wartości jest nieprawidłowy, zgłaszany jest wyjątek.  
  
 Te dwa bilety są następnie scalane. Jeśli mają różne wartości dla konkretnej właściwości, powstały w ten sposób scalony bilet początkowo używa wartości biletu różnicowego.  
  
 Scalony bilet zostanie następnie sprawdzony pod kątem faktycznych możliwości drukarki. Jeśli którekolwiek z ustawień biletu nie są zgodne z możliwościami drukarki, sterownik drukarki zmienia te ustawienia przy użyciu dowolnej wymaganej logiki. Zwykle zastępuje wartość domyślną użytkownika lub drukarki do ustawienia. Źródło wartości zastępczych sterownika nie jest tym samym biletem `basePrintTicket`, a następnie scalony bilet może mieć pewne ustawienia, które różnią się od obu biletów wejściowych. Jeśli sterownik drukarki ma zmienić wszystkie ustawienia, <xref:System.Printing.ValidationResult.ConflictStatus%2A> <xref:System.Printing.ValidationResult>ten fakt jest raportowany we właściwości.  
  
 Aby scalić i sprawdzić poprawność na podstawie domyślnych ustawień kolejki wydruku, należy ustawić `basePrintTicket` <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> na lub <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 Parametr może mieć `null` wartość`basePrintTicket` , w tym przypadku jest sprawdzana poprawność, sprawdzona pod kątem żywotności i zwracana, prawdopodobnie ze zmianami. `deltaPrintTicket`  
  
 W przypadku tego przeciążenia <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>, `deltaPrintTicket` zarówno, jak i <xref:System.Printing.PrintTicket> w <xref:System.Printing.ValidationResult> zwracanym zakresie ma zasięg zadań. Aby określić inny zakres, użyj innego przeciążenia tej metody.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Printing.ValidationResult> , jak za pomocą tej metody scalać dwa bilety drukowania i odpowiadać na to, które są zwracane.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Co najmniej jeden z biletów drukowania danych wejściowych jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="basePrintTicket" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.Printing.PrintQueueException">Operacja sprawdzania poprawności, scalania i sprawdzania zdolności nie powiodła się.</exception>
      </Docs>
    </Member>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket, System.Printing.PrintTicketScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket, valuetype System.Printing.PrintTicketScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket,System.Printing.PrintTicketScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket, scope As PrintTicketScope) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket, System::Printing::PrintTicketScope scope);" />
      <MemberSignature Language="F#" Value="member this.MergeAndValidatePrintTicket : System.Printing.PrintTicket * System.Printing.PrintTicket * System.Printing.PrintTicketScope -&gt; System.Printing.ValidationResult" Usage="printQueue.MergeAndValidatePrintTicket (basePrintTicket, deltaPrintTicket, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="scope" Type="System.Printing.PrintTicketScope" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Pierwszy bilet drukowania.</param>
        <param name="deltaPrintTicket">Drugi bilet drukowania. Może to być <see langword="null" />.</param>
        <param name="scope">Wartość wskazująca, czy zakres <paramref name="deltaPrintTicket" />i zakres biletu drukowania zwrócone <see cref="T:System.Printing.ValidationResult" />w, to strona, dokument lub całe zadanie.</param>
        <summary>Scala dwa <see cref="T:System.Printing.PrintTicket" />s i gwarantuje, że wyniki <see cref="T:System.Printing.PrintTicket" /> są prawidłowe, nie żąda żadnych funkcji drukowania, które nie są obsługiwane przez drukarkę i są ograniczone do określonego zakresu.</summary>
        <returns>A <see cref="T:System.Printing.ValidationResult" /> , który obejmuje scalone <see cref="T:System.Printing.PrintTicket" /> i wskazujący, czy jakiekolwiek z jego ustawień musiały zostać zmienione w celu zagwarantowania żywotności.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje bilet drukowania na żywotność; oznacza to, że bilet nie żąda funkcji drukowania, które nie są obsługiwane przez drukarkę. Metoda najpierw sprawdza poprawność dwóch wejściowych biletów drukowania względem [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397). Jeśli jeden z tych wartości jest nieprawidłowy, zgłaszany jest wyjątek.  
  
 Te dwa bilety są następnie scalane. Jeśli mają różne wartości dla konkretnej właściwości, powstały w ten sposób scalony bilet początkowo używa wartości biletu różnicowego.  
  
 Scalony bilet zostanie następnie sprawdzony pod kątem faktycznych możliwości drukarki. Jeśli którekolwiek z ustawień biletu nie są zgodne z możliwościami drukarki, sterownik drukarki zmienia te ustawienia przy użyciu dowolnej wymaganej logiki. Zwykle zastępuje wartość domyślną użytkownika lub drukarki do ustawienia. Źródło wartości zastępczych sterownika nie jest tym samym biletem `basePrintTicket`, a następnie scalony bilet może mieć pewne ustawienia, które różnią się od obu biletów wejściowych. Jeśli sterownik drukarki ma zmienić wszystkie ustawienia, <xref:System.Printing.ValidationResult.ConflictStatus%2A> <xref:System.Printing.ValidationResult>ten fakt jest raportowany we właściwości.  
  
 Aby scalić i sprawdzić poprawność na podstawie domyślnych ustawień kolejki wydruku, należy ustawić `basePrintTicket` <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> na lub <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 Parametr może mieć `null` wartość`basePrintTicket` , w tym przypadku jest sprawdzana poprawność, sprawdzona pod kątem żywotności i zwracana, prawdopodobnie ze zmianami. `deltaPrintTicket`  
  
 Jeśli jest to zadanie, bilet drukowania zwrócony <xref:System.Printing.ValidationResult> w programie może obejmować parametry [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) z prefiksami zadań, dokumentów i stron. `scope` Jeśli jest to dokument, ustawienia poszczególnych zadań w programie `deltaPrintTicket` są ignorowane, a zwrócony bilet może zawierać parametry z prefiksami dokumentów i stron. `scope` Jeśli jest to strona, ustawienia poszczególnych zadań i poszczególnych dokumentów w programie `deltaPrintTicket` są ignorowane, a zwrócony bilet może zawierać parametry tylko z prefiksem strony. `scope`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Co najmniej jeden z biletów drukowania danych wejściowych jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="basePrintTicket" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr nie ma prawidłowej <see cref="T:System.Printing.PrintTicketScope" /> wartości. <paramref name="scope" /></exception>
        <exception cref="T:System.Printing.PrintQueueException">Operacja sprawdzania poprawności, scalania i sprawdzania zdolności nie powiodła się.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override sealed string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Printing.PrintQueue.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę kolejki wydruku.</summary>
        <value>Nazwa kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt ma <xref:System.Printing.PrintQueue.FullName%2A> również<xref:System.Printing.PrintQueue.ShareName%2A> właściwość tylko do odczytu i zapisywalną właściwość. <xref:System.Printing.PrintQueue>  
  
 W przypadku kolejek na lokalnym serwerze <xref:System.Printing.PrintQueue.Name%2A> wydruku i <xref:System.Printing.PrintQueue.FullName%2A> są takie same.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości, aby wyświetlić podzbiór dostępnych kolejek wydruku.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedUserIntervention">
      <MemberSignature Language="C#" Value="public bool NeedUserIntervention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedUserIntervention" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NeedUserIntervention As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NeedUserIntervention { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NeedUserIntervention : bool" Usage="System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka musi mieć szczególną uwagę.</summary>
        <value><see langword="true" />Jeśli drukarka wymaga ludzkiej uwagi; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfJobs">
      <MemberSignature Language="C#" Value="public virtual int NumberOfJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NumberOfJobs" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NumberOfJobs As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int NumberOfJobs { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberOfJobs : int" Usage="System.Printing.PrintQueue.NumberOfJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera łączną liczbę zadań w kolejce wydruku.</summary>
        <value>Liczba zadań w kolejce.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PagePunt">
      <MemberSignature Language="C#" Value="public bool PagePunt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PagePunt" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PagePunt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagePunt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PagePunt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PagePunt : bool" Usage="System.Printing.PrintQueue.PagePunt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka nie jest w stanie wydrukować bieżącej strony.</summary>
        <value><see langword="true" />Jeśli drukarka nie może wydrukować bieżącej strony; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnału o tym znaczeniu, właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Pause();" />
      <MemberSignature Language="F#" Value="abstract member Pause : unit -&gt; unit&#xA;override this.Pause : unit -&gt; unit" Usage="printQueue.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wstrzymuje kolejkę wydruku. Pozostanie wstrzymane do <see cref="M:System.Printing.PrintQueue.Resume" /> momentu wykonania.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można wstrzymać drukarki.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PrintingIsCancelled">
      <MemberSignature Language="C#" Value="public bool PrintingIsCancelled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintingIsCancelled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintingIsCancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PrintingIsCancelled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PrintingIsCancelled : bool with get, set" Usage="System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy bieżące zadanie drukowania jest anulowane.</summary>
        <value><see langword="true" />Jeśli zadanie drukowania jest anulowane; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Priority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int with get, set" Usage="System.Printing.PrintQueue.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia priorytet kolejki wydruku względem innych kolejek wydruku hostowanych przez ten sam serwer wydruku, które używają tej samej drukarki fizycznej.</summary>
        <value>Priorytet kolejki wydruku. Możliwe wartości to od 1 do 99. Domyślnym ustawieniem jest 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Odróżnij tę właściwość <xref:System.Printing.PrintQueue.DefaultPriority%2A> właściwością o względnym priorytecie zadań drukowania w kolejce.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public virtual void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Purge ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Purge();" />
      <MemberSignature Language="F#" Value="abstract member Purge : unit -&gt; unit&#xA;override this.Purge : unit -&gt; unit" Usage="printQueue.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie zadania w kolejce wydruku.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można usunąć niektórych zadań drukowania z kolejki.</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueAttributes">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueAttributes QueueAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueAttributes QueueAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueAttributes As PrintQueueAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueAttributes QueueAttributes { System::Printing::PrintQueueAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueAttributes : System.Printing.PrintQueueAttributes" Usage="System.Printing.PrintQueue.QueueAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera właściwości kolejki wydruku.</summary>
        <value>Bitowa kombinacja <see cref="T:System.Printing.PrintQueueAttributes" /> wartości wyliczenia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDriver">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintDriver QueueDriver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintDriver QueueDriver" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueDriver" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueueDriver As PrintDriver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintDriver ^ QueueDriver { System::Printing::PrintDriver ^ get(); void set(System::Printing::PrintDriver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueueDriver : System.Printing.PrintDriver with get, set" Usage="System.Printing.PrintQueue.QueueDriver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintDriver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia sterownik drukarki dla kolejki.</summary>
        <value><see cref="T:System.Printing.PrintDriver" /> Używane przez kolejkę.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePort">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintPort QueuePort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintPort QueuePort" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePort As PrintPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintPort ^ QueuePort { System::Printing::PrintPort ^ get(); void set(System::Printing::PrintPort ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueuePort : System.Printing.PrintPort with get, set" Usage="System.Printing.PrintQueue.QueuePort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintPort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia port wykorzystywany przez kolejkę.</summary>
        <value><see cref="T:System.Printing.PrintPort" /> Przypisany do kolejki wydruku.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePrintProcessor">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintProcessor QueuePrintProcessor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintProcessor QueuePrintProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePrintProcessor As PrintProcessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintProcessor ^ QueuePrintProcessor { System::Printing::PrintProcessor ^ get(); void set(System::Printing::PrintProcessor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueuePrintProcessor : System.Printing.PrintProcessor with get, set" Usage="System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintProcessor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia procesor wydruku wykorzystywany przez kolejkę.</summary>
        <value><see cref="T:System.Printing.PrintProcessor" /> Używane przez kolejkę, takie jak WinPrint lub ModiPrint.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueStatus QueueStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueStatus QueueStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueStatus As PrintQueueStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueStatus QueueStatus { System::Printing::PrintQueueStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueStatus : System.Printing.PrintQueueStatus" Usage="System.Printing.PrintQueue.QueueStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość reprezentującą stan drukarki. Obejmują one "rozgrzewanie", "Inicjowanie", "drukowanie" i inne.</summary>
        <value>Bieżąca <see cref="T:System.Printing.PrintQueueStatus" /> wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości jako części ankiety wszystkich drukarek dla stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueattributes)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueattributes)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberSignature Language="F#" Value="override this.Refresh : unit -&gt; unit" Usage="printQueue.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualizuje właściwości <see cref="T:System.Printing.PrintQueue" /> obiektu za pomocą wartości z drukarki i narzędzia kolejki wydruku uruchomionego na komputerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiany wprowadzane przez program do <xref:System.Printing.PrintQueue> właściwości obiektu są tracone, jeśli <xref:System.Printing.PrintQueue.Refresh%2A> są wykonywane, chyba że zostały one załączone do kolejki wydruku i z. <xref:System.Printing.PrintQueue.Commit%2A>  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej metody jako części ankiety wszystkie drukarki z powodu możliwego stanu błędu.  
  
 [!code-cpp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#surveyqueues)]
 [!code-csharp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#surveyqueues)]
 [!code-vb[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#surveyqueues)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można odświeżyć niektórych właściwości.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Resume();" />
      <MemberSignature Language="F#" Value="abstract member Resume : unit -&gt; unit&#xA;override this.Resume : unit -&gt; unit" Usage="printQueue.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia ponownie wstrzymaną kolejkę wydruku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak za pomocą tej metody wznowić wstrzymaną kolejkę wydruku.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można wznowić drukarki.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Pause" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCompletedJobsFirst">
      <MemberSignature Language="C#" Value="public bool ScheduleCompletedJobsFirst { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScheduleCompletedJobsFirst" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScheduleCompletedJobsFirst As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScheduleCompletedJobsFirst { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScheduleCompletedJobsFirst : bool" Usage="System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka drukuje zadania, które ukończyły proces buforowania przed zadaniami, które nie zostały w pełni zbuforowane nawet wtedy, gdy ta ostatnia wprowadzona Kolejka lub ma wyższy priorytet.</summary>
        <value><see langword="true" />Jeśli drukarka drukuje zadania, które ukończyły proces buforowania przed zadaniami, które nie zostały w pełni zbuforowane; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorFile">
      <MemberSignature Language="C#" Value="public virtual string SeparatorFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SeparatorFile" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.SeparatorFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SeparatorFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SeparatorFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SeparatorFile : string with get, set" Usage="System.Printing.PrintQueue.SeparatorFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę i nazwę pliku, który jest wstawiany na początku każdego zadania drukowania.</summary>
        <value>Ścieżka i nazwa pliku separatora.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to zwykle plik jednostronicowy służący do ułatwienia oddzielania danych wyjściowych różnych zadań drukowania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShareName">
      <MemberSignature Language="C#" Value="public virtual string ShareName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShareName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ShareName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShareName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ShareName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShareName : string with get, set" Usage="System.Printing.PrintQueue.ShareName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę drukarki, która jest widoczna dla użytkowników w sieci, gdy jest ona udostępniona.</summary>
        <value>Publiczna nazwa drukarki udostępnionej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt ma <xref:System.Printing.PrintQueue.FullName%2A> również<xref:System.Printing.PrintQueue.Name%2A> właściwość tylko do odczytu i zapisywalną właściwość. <xref:System.Printing.PrintQueue> W przypadku kolejek na lokalnym serwerze wydruku te właściwości mają tę samą wartość.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int StartTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property StartTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int StartTimeOfDay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.StartTimeOfDay : int with get, set" Usage="System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia najwcześniejszą godzinę dnia wyrażoną jako liczba minut po północy skoordynowanego czasu uniwersalnego (UTC) (nazywanego również czasem Greenwich = GMT]), który drukuje zadanie.</summary>
        <value>Dzień, w którym drukarka zostanie najpierw udostępniona, wyrażona jako liczba minut po północy (UTC). Wartość maksymalna to 1439. Gdy drukarka jest instalowana po raz pierwszy przy użyciu [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] Kreatora dodawania drukarki, domyślnie będzie ona dostępna, a ta właściwość zwraca 0 we wszystkich strefach czasowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie jesteś w strefie czasowej UTC, musisz dodać lub odjąć wielokrotności 60, aby ustawić lub uzyskać właściwy czas dla strefy czasowej. Na przykład jeśli jesteś w strefie czasowej pacyficznego Ameryka Północna i czas letni nie obowiązuje, czas lokalny to 8 godzin od czasu UTC. Aby ustawić <xref:System.Printing.PrintQueue.StartTimeOfDay%2A> wartość 12 am w strefie czasowej, należy ustawić ją na 8 godzin UTC, czyli 480 (= 8 * 60). Należy również pamiętać, że czas jest przenoszone do zera po 24 godzinach (czyli po minucie 1439th). Aby ustawić wartość 6 PM w strefie czasowej, należy ustawić ją na 2 AM UTC, czyli 120 (= 2 * 60). Zobacz <xref:System.TimeZone>, <xref:System.TimeSpan> i<xref:System.DateTime> klasy dla przydatnej strefy czasowej manipulowania metodami.  
  
 Jeśli drukarka jest zawsze dostępna, ta właściwość zwraca 0 we wszystkich strefach czasowych.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości, aby określić, czy drukarka jest dostępna w obecnym czasie.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int UntilTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UntilTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UntilTimeOfDay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UntilTimeOfDay : int with get, set" Usage="System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia najnowszą godzinę wyrażoną jako liczba minut po północy skoordynowanego czasu uniwersalnego (UTC) (nazywanego również czasem Greenwich = GMT]), na którym drukarka będzie drukować zadanie.</summary>
        <value>Dzień, w którym drukarka nie jest już dostępna, wyrażona jako liczba minut po północy (UTC). Wartość maksymalna to 1439. Gdy drukarka jest instalowana po raz pierwszy przy użyciu [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] Kreatora dodawania drukarki, domyślnie będzie ona dostępna, a ta właściwość zwraca 0 we wszystkich strefach czasowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie jesteś w strefie czasowej UTC, musisz dodać lub odjąć wielokrotności 60, aby ustawić lub uzyskać właściwy czas dla strefy czasowej. Na przykład jeśli jesteś w strefie czasowej pacyficznego Ameryka Północna i czas letni nie obowiązuje, czas lokalny to 8 godzin od czasu UTC. Aby ustawić <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A> wartość 12 am w strefie czasowej, należy ustawić ją na 8 godzin UTC, czyli 480 (= 8 * 60). Należy również pamiętać, że czas jest przenoszone do zera po 24-godzinnym (1439th minucie). Aby ustawić wartość 6 PM w strefie czasowej, należy ustawić ją na 2 AM UTC, czyli 120 (= 2 * 60). Zobacz <xref:System.TimeZone>, <xref:System.TimeSpan> i<xref:System.DateTime> klasy dla przydatnej strefy czasowej manipulowania metodami.  
  
 Jeśli drukarka jest zawsze dostępna, ta właściwość zwraca 0 we wszystkich strefach czasowych.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości, aby określić, czy drukarka jest dostępna w obecnym czasie.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UserPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket UserPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket UserPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UserPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UserPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ UserPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UserPrintTicket : System.Printing.PrintTicket with get, set" Usage="System.Printing.PrintQueue.UserPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślny <see cref="T:System.Printing.PrintTicket" /> obiekt bieżącego użytkownika, który zawiera szczegółowe informacje o zadaniu drukowania.</summary>
        <value>Dla bieżącego użytkownika lub <see langword="null" /> Jeśli użytkownik <see cref="T:System.Printing.PrintTicket" /> nie został określony. <see cref="T:System.Printing.PrintTicket" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy użytkownik może mieć własny domyślny <xref:System.Printing.PrintTicket>.  
  
 Ta właściwość może być `null`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości podczas scalania dwóch biletów drukowania.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      </Docs>
    </Member>
  </Members>
</Type>
