<Type Name="PrintQueue" FullName="System.Printing.PrintQueue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64be9763b1b8e9def4b7589adc92026da66e3d4b" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53391838" /></Metadata><TypeSignature Language="C#" Value="public class PrintQueue : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintQueue extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintQueue" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintQueue&#xA;Inherits PrintSystemObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintQueue : System::Printing::PrintSystemObject" />
  <TypeSignature Language="F#" Value="type PrintQueue = class&#xA;    inherit PrintSystemObject" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zarządza drukarki i zadania drukowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niektóre właściwości <xref:System.Printing.PrintQueue> obiektu właściwości reprezentują narzędzie kolejki wydruku, które działają na komputerze, ale są inne funkcje lub stany drukarki. Na przykład <xref:System.Printing.PrintQueue.NumberOfJobs%2A> charakterystycznej kolejki wydruku, ale <xref:System.Printing.PrintQueue.Location%2A> jest właściwości drukarki. Wiele właściwości drukarki, takie jak czy wymaga ona uwagi użytkownika, muszą być przekazywane w sposób <xref:System.Printing.PrintQueue.Refresh%2A> metody z drukarki do <xref:System.Printing.PrintQueue> obiektu. Należy to zrobić przed odpowiednią właściwość (<xref:System.Printing.PrintQueue.NeedUserIntervention%2A>) jest odczytywany przez program. Podobnie, gdy program zmienia wartości jeden lub więcej właściwości <xref:System.Printing.PrintQueue> obiektu, zmiany muszą być napisane przez narzędzie rzeczywiste kolejki wydruku na komputerze. W tym z <xref:System.Printing.PrintQueue.Commit%2A> metody.  
  
> [!CAUTION]
>  Klas w obrębie <xref:System.Printing> przestrzeni nazw nie są obsługiwane do użytku w ramach usługi Windows lub aplikacji ASP.NET lub usługi. Podjęto próbę użycia tych klas z jednego z tych typów aplikacji mogą dawać nieoczekiwane problemy, takie jak zmniejszony obsługi wyjątków wydajności i czasu wykonywania.  
  
 Jeśli chcesz wydrukować z aplikacji Windows Forms, zobacz <xref:System.Drawing.Printing> przestrzeni nazw.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Printing.PrintServer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku do hostowania kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonego <see cref="T:System.Printing.PrintServer" /> i nazwa kolejki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślną wartość parametru <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * int -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, printSchemaVersion)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który jest hostem kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="printSchemaVersion">Wersja schematu drukowania do użycia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, nazwę kolejki i drukowanie wersji schematu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślną wartość parametru <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 [Schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) wersji wydanej w systemie Windows Vista jest "1".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintQueueIndexedProperty[] -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który jest hostem kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości, które określa wartości właściwości w celu zainicjowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, nazwę kolejki, a tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości w celu zainicjowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślną wartość parametru <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 Użyj konstruktora z `propertyFilter` parametr zwiększa wydajność.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który jest hostem kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="desiredAccess">Jedną z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, które określa rodzaj dostępu do kolejki wydruku, który wymaga programu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, nazwę kolejki i żądanego dostępu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" /> jest wartością, która może być zastosowane tylko do <see cref="T:System.Printing.PrintServer" /> obiektu nie <see cref="T:System.Printing.PrintQueue" /> obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * string[] -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który jest hostem kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica nazwy właściwości do zainicjowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, nazwę kolejki, a tablica nazw właściwości w celu zainicjowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślną wartość parametru <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 Użyj konstruktora z `propertyFilter` parametr zwiększa wydajność.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * int * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, printSchemaVersion, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który jest hostem kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="printSchemaVersion">Wersja schematu drukowania do użycia.</param>
        <param name="desiredAccess">Jedną z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, które określa rodzaj dostępu do kolejki wydruku, który wymaga programu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, nazwę kolejki, drukowanie, wersja schematu i żądanego dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) wersji wydanej w systemie Windows Vista jest "1".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" /> jest wartością, która może być zastosowane tylko do <see cref="T:System.Printing.PrintServer" /> obiektu nie <see cref="T:System.Printing.PrintQueue" /> obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintQueueIndexedProperty[] * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który jest hostem kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości, które określa właściwości do zainicjowania.</param>
        <param name="desiredAccess">Jedną z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, które określa rodzaj dostępu do kolejki wydruku, który wymaga programu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy z określonym <see cref="T:System.Printing.PrintServer" />, nazwę kolejki, tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości do inicjowania i żądanego dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj konstruktora z `propertyFilter` parametr zwiększa wydajność.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" /> jest wartością, która może być zastosowane tylko do <see cref="T:System.Printing.PrintServer" /> obiektu nie <see cref="T:System.Printing.PrintQueue" /> obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * string[] * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który jest hostem kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica nazwy właściwości do zainicjowania.</param>
        <param name="desiredAccess">Jedną z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, które określa rodzaj dostępu do kolejki wydruku, który wymaga programu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy przy użyciu określonego <see cref="T:System.Printing.PrintServer" />kolejki nazwy, filtr właściwości i żądanego dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj konstruktora z `propertyFilter` parametr zwiększa wydajność.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" /> jest wartością, która może być zastosowane tylko do <see cref="T:System.Printing.PrintServer" /> obiektu nie <see cref="T:System.Printing.PrintQueue" /> obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddJob">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wstawia nowe zadanie drukowania do kolejki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O ile nie została wstrzymana kolejka lub w stanie błędu, zadania są drukowane po osiągnięciu początku kolejki, więc to jest funkcja drukowania.  
  
 Inne sposoby drukowania w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] obejmują <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> metody, która może być używany z lub bez konieczności otwierania okna dialogowego i wiele <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> i <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metody <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob () As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob();" />
      <MemberSignature Language="F#" Value="member this.AddJob : unit -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wstawia nowy (objęty nazwane) zadania drukowania, którego zawartość ma <see cref="T:System.Byte" /> tablicy do kolejki.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do zapisu urządzenia określone informacje w pliku buforu, który nie jest automatycznie dołączany przez [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] buforu. Oczywiście, musisz wiedzieć, czy plik buforu jest [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] lub [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]. Jeśli wolisz pracować <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], możesz użyć <xref:System.Printing.PrintQueueStream> klasy zamiast tej metody.  
  
 Po <xref:System.Printing.PrintQueue.AddJob%2A> wywołaniu metody, należy napisać <xref:System.Byte> tablicy do <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> właściwość <xref:System.Printing.PrintSystemJobInfo> zwracanym przez <xref:System.Printing.PrintQueue.AddJob%2A> lub nie zadanie drukowania jest tworzony. Ta tablica jest drukuje co, jeśli drukarka będzie działać i nie została wstrzymana.  
  
> [!CAUTION]
>  Jeśli <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> nie został zamknięty z <xref:System.IO.Stream.Close%2A> przed zakończeniem wątku, w którym <xref:System.Printing.PrintQueue.AddJob%2A> jest wywoływana, a następnie <xref:System.InvalidOperationException> jest zgłaszany, gdy wątek kończy się, ponieważ wątek bufor uzyskanie kontroli nad <xref:System.IO.Stream> obiektu.  
  
 W tej kolejce wydruku [!INCLUDE[TLA#tla_gui](~/includes/tlasharptla-gui-md.md)], zadanie ma nazwę "Wydrukować dokument systemu". Aby dać zadania inną nazwę, należy użyć <xref:System.Printing.PrintQueue.AddJob%28System.String%29> przeciążenia.  
  
 Inne sposoby drukowania w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] obejmują <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> metody, która może być używany z lub bez konieczności otwierania okna dialogowego i wiele <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> i <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metody <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Printing.PrintQueue.AddJob> wysyłać <xref:System.Byte> tablicy do kolejki wydruku. Ten kod działa tylko z drukarek, które można wykryć i drukowanie w postaci zwykłego tekstu. Niektóre z nich nie można wykonać.  
  
 [!code-csharp[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addunnamedjob)]
 [!code-vb[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addunnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob jobName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobName">Nazwa zadania drukowania.</param>
        <summary>Wstawia nowe zadanie drukowania, którego zawartość ma <see cref="T:System.Byte" /> tablicy do kolejki.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do zapisu urządzenia określone informacje w pliku buforu, który nie jest automatycznie dołączany przez [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] buforu. Oczywiście, musisz wiedzieć, czy plik buforu jest [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] lub [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]. Jeśli wolisz pracować <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], możesz użyć <xref:System.Printing.PrintQueueStream> klasy zamiast tej metody.  
  
 Po <xref:System.Printing.PrintQueue.AddJob%2A> wywołaniu metody, należy napisać <xref:System.Byte> tablicy do <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> właściwość <xref:System.Printing.PrintSystemJobInfo> zwracanym przez <xref:System.Printing.PrintQueue.AddJob%2A> lub nie zadanie drukowania jest tworzony. Ta tablica jest drukuje co, jeśli drukarka będzie działać i nie została wstrzymana.  
  
> [!CAUTION]
>  Jeśli <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> nie został zamknięty z <xref:System.IO.Stream.Close%2A> przed zakończeniem wątku, w którym <xref:System.Printing.PrintQueue.AddJob%2A> jest wywoływana, a następnie <xref:System.InvalidOperationException> jest zgłaszany, gdy wątek kończy się, ponieważ wątek bufor uzyskanie kontroli nad <xref:System.IO.Stream> obiektu.  
  
 Inne sposoby drukowania w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] obejmują <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> metody, która może być używany z lub bez konieczności otwierania okna dialogowego i wiele <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> i <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metody <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Printing.PrintQueue.AddJob%28System.String%29> można odczytać pliku do <xref:System.Byte> macierz, a następnie wysłać tablicy do kolejki wydruku. Ten kod zakłada, że istnieje plik o nazwie jako w folderze głównym dysku C:. Ten kod działa tylko z drukarek, które można wykryć i drukowanie w postaci zwykłego tekstu. Niektóre z nich nie można wykonać.  
  
 [!code-csharp[WriteToSpoolFile#AddNamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addnamedjob)]
 [!code-vb[WriteToSpoolFile#AddNamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * System.Printing.PrintTicket -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, printTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="printTicket">Ustawienia zadania drukowania.</param>
        <summary>Wstawia nowe zadanie drukowania dla [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dokumentu do kolejki oraz zapewnia on określoną nazwę i ustawienia.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz <xref:System.Printing.PrintQueue.AddJob%28System.String%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String, documentPath As String, fastCopy As Boolean) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * string * bool -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, documentPath, fastCopy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobName">Nazwa zadania drukowania.</param>
        <param name="documentPath">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="fastCopy"><see langword="true" /> do buforowania szybko bez opinii strony strona postępu i weryfikowania, czy plik jest poprawny [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]; w przeciwnym razie <see langword="false" />.</param>
        <summary>Wstawia nowe zadanie drukowania dla [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dokumentu do kolejki zapewnia ona określonej nazwy i określa, czy mają być weryfikowane.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fastCopy` jest `true`, musi być drukarki [Omówienie drukowania](~/docs/framework/wpf/advanced/printing-overview.md). Jeśli nie jest dostępna, <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> metoda zgłasza wyjątek.  
  
 Jeśli `fastCopy` jest `false`, nie jest konieczne użycie XPSDrv drukarki. [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] Plików dodawane do kolejki jest konwertowany na język opisu strony drukarki, takie jak PCL lub Postscript. Jednak tego rodzaju drukowanie wywołuje [!INCLUDE[TLA#tla_com](~/includes/tlasharptla-com-md.md)]. Wywołanie [!INCLUDE[TLA2#tla_com](~/includes/tla2sharptla-com-md.md)] wymaga wątek wywołujący jednowątkowym apartamentem (<xref:System.Threading.ApartmentState.STA>) zamiast wielowątkowym apartamentu (<xref:System.Threading.ApartmentState.MTA>) co jest ustawieniem domyślnym w [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 2.0 lub nowszej. (Aby uzyskać więcej informacji o stanach wielowątkowości i typu apartment, zobacz [zarządzane i niezarządzane wątkowości](https://msdn.microsoft.com/library/db425c20-4b2f-4433-bf96-76071c7881e5), i <xref:System.Threading.ApartmentState>.) Są to zrobić na dwa sposoby:  
  
-   Najprostszym sposobem jest dodanie <xref:System.STAThreadAttribute> (czyli "`[System.STAThreadAttribute()]`") tuż nad pierwszy wiersz aplikacji `Main` — metoda (zazwyczaj "`static void Main(string[] args)`").  
  
-   Jeśli potrzebujesz sieci `Main` stan apartamentu wątku na <xref:System.Threading.ApartmentState.MTA>, mogą znajdować się wywołanie <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> w oddzielnym wątku, w których stan apartamentu jest równa <xref:System.Threading.ApartmentState.STA> z <xref:System.Threading.Thread.SetApartmentState%2A>. W poniższym przykładzie przedstawiono ten drugi techniki.  
  
> [!NOTE]
>  Nie można zastosować <xref:System.STAThreadAttribute> do dowolnej metody, z wyjątkiem `Main` i nie można użyć <xref:System.Threading.Thread.SetApartmentState%2A> dla `Main` wątku.  
  
 Inne sposoby drukowania w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] obejmują <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> metody, która może być używany z lub bez konieczności otwierania okna dialogowego i wiele <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> i <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metody <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> partii Drukowanie całości [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] plików w katalogu.  
  
 [!code-csharp[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/csharp/VS_Snippets_Wpf/BatchPrintXPSFiles/CSharp/Program.cs#batchprintxpsfiles)]
 [!code-vb[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BatchPrintXPSFiles/visualbasic/program.vb#batchprintxpsfiles)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ApartmentState" />
        <altmember cref="T:System.STAThreadAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/e78b14f1-e487-43cd-9c6d-1a07483f1730">Udostępnianie składników COM programowi.NET Framework</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy, System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * string * bool * System.Printing.PrintTicket -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, documentPath, fastCopy, printTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="documentPath">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="fastCopy"><see langword="true" /> do buforowania szybko bez opinii strony strona postępu i weryfikowania, czy plik jest poprawny [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]; w przeciwnym razie <see langword="false" />.</param>
        <param name="printTicket">Ustawienia zadania drukowania.</param>
        <summary>Wstawia nowe zadanie drukowania dla [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dokumentu do kolejki udostępnia on określoną nazwę i ustawienia, a także określa, czy mają być weryfikowane.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveragePagesPerMinute">
      <MemberSignature Language="C#" Value="public virtual int AveragePagesPerMinute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AveragePagesPerMinute" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AveragePagesPerMinute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AveragePagesPerMinute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AveragePagesPerMinute : int" Usage="System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera szybkość drukarki, mierzone w stron na minutę.</summary>
        <value>Drukowane średnia liczba stron na minutę drukarki.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public int ClientPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ClientPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ClientPrintSchemaVersion { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientPrintSchemaVersion : int" Usage="System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wersję <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">schematu drukowania</see>.</summary>
        <value>Wersja [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) w użyciu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) wersji wydanej w systemie Windows Vista to 1.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=186397">Drukuj schematu</related>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public virtual string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Comment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Comment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Comment { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Comment : string with get, set" Usage="System.Printing.PrintQueue.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia komentarzy dotyczących drukarki.</summary>
        <value>Komentarzy dotyczących drukarki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Komentarz jest widoczny dla użytkowników, na liście drukarek Windows i Windows wspólne okno dialogowe. Umożliwia ona informacje nie są zawarte w nazwę drukarki, model lub lokalizacji właściwości, które są widoczne w tych samych miejscach; na przykład "zarezerwowane dla listy płac działu między 15: 00 a 16: 00." ( <xref:System.Printing.PrintQueue.Description%2A> Właściwość pozwala na przechowywanie informacji, które użytkownicy nie mogą wyświetlać, chyba że aplikacja sprawia, że widoczna.)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberSignature Language="F#" Value="override this.Commit : unit -&gt; unit" Usage="printQueue.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje bieżące właściwości <see cref="T:System.Printing.PrintQueue" /> obiektu do rzeczywistego kolejki wydruku na serwerze wydruku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiany, które program wprowadza do właściwości <xref:System.Printing.PrintQueue> obiektu faktycznie uwzględnione dopiero program wykonuje <xref:System.Printing.PrintQueue.Commit%2A> metody.  
  
 Metoda, która wymaga <xref:System.Printing.PrintQueue> można utworzyć obiektu z <xref:System.Printing.PrintSystemDesiredAccess.AdministratePrinter> praw.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak podczas scalania dwóch bilety wydruku przy użyciu tej metody.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Niektóre właściwości nie można zatwierdzić.</exception>
        <exception cref="T:System.Printing.PrintCommitAttributesException">Niektóre właściwości nie można zatwierdzić.  
  
—lub— 
<see cref="T:System.Printing.PrintQueue" /> Nie można utworzyć obiektu z odpowiednimi uprawnieniami.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Refresh" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateXpsDocumentWriter">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter documentImageableArea" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Odwołanie do obiektu, który zawiera wymiary obszaru strony, na której można wydrukować urządzenia. Ponieważ jej typem danych nie ma publicznego konstruktora, ten parametr jest przekazywany jako niezainicjowany.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu, zostanie otwarty Windows wspólne okno dialogowe drukowania i zwraca <see langword="ref" /> (<see langword="ByRef" /> w języku Visual Basic) parametr, który reprezentuje informacje o obszarze obrazowania i wymiary nośnika.</summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Strumienia, zapisuje dane XPS. Może to być <see langword="null" />. (Parametr <paramref name="documentImageableArea" /> jest <see langword="ref" /> [<see langword="ByRef" /> w języku Visual Basic] parametr, który jest inicjowany za pomocą metody, czyli przedstawia liczbę sekund zwrócony element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek muszą maksymalnie kwartał cala pozostałych do wydrukowania ilość wolnego miejsca wokół krawędzi każdej strony do uchwytu papieru i przenieś ją do drukarki. W przeciwnym razie toneru będzie każdą pogodę mechanizm papieru przepływu. Obszar, który może zostać zrealizowane jest "obszar obrazowania."  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma publicznego konstruktora. W związku z tym zmienna `documentImageableArea` musi być zadeklarowana i przypisane do `null` i następnie przekazywany do metody. Ta metoda Wy Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Po użytkownik wybrane drukarki, rozmiar papieru i orientacji i zamknąć okno dialogowe, `documentImageableArea` wskazuje faktyczny obiekt i jego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamyka okno dialogowe, wartość zwracana jest `null`. W rezultacie, wartość zwracana, muszą zostać sprawdzone `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (System.Printing.PrintQueue printQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintQueue printQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintQueue ^ printQueue);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : System.Printing.PrintQueue -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter printQueue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
      </Parameters>
      <Docs>
        <param name="printQueue">Kolejkę wydruku, aby wydrukować dokument XPS.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu i kojarzy ją z określonej kolejki wydruku.</summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Zapisuje strumień XPS.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak ta metoda służy do tworzenia <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
 [!code-csharp[XpsPrint#PrintQueueSnip](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#printqueuesnip)]
 [!code-vb[XpsPrint#PrintQueueSnip](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#printqueuesnip)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref double width, ref double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(float64&amp; width, float64&amp; height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Double@,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef width As Double, ByRef height As Double) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(double % width, double % height);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" RefType="ref" />
        <Parameter Name="height" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="width">Szerokość dokument XPS.</param>
        <param name="height">Wysokość dokument XPS.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu z określonym wymiarów.</summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Zapisuje strumień XPS. Może to być <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Wy Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Jeśli użytkownik anuluje lub zamyka okno dialogowe, wartość zwracana jest `null`. W rezultacie, wartość zwracana, muszą zostać sprawdzone `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : string *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (jobDescription, documentImageableArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Nazwa zadania drukowania. Wygląda na to w interfejsie użytkownika drukowania Windows.</param>
        <param name="documentImageableArea">Odwołanie do obiektu, który zawiera wymiary obszaru strony, na której można wydrukować urządzenia. Ponieważ jej typem danych nie ma publicznego konstruktora, ten parametr jest przekazywany jako niezainicjowany.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu, zostanie otwarty Windows wspólne okno dialogowe drukowania (i dostarcza mu opis zadania) i zwraca <see langword="ref" /> (<see langword="ByRef" /> w języku Visual Basic) parametr, który reprezentuje informacje o obszarze obrazowania i wymiary nośnika .</summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Strumienia, zapisuje dane XPS. Może to być <see langword="null" />. (Parametr <paramref name="documentImageableArea" /> jest <see langword="ref" /> [<see langword="ByRef" /> w języku Visual Basic] parametr, który jest inicjowany za pomocą metody, czyli przedstawia liczbę sekund zwrócony element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek muszą maksymalnie kwartał cala pozostałych do wydrukowania ilość wolnego miejsca wokół krawędzi każdej strony do uchwytu papieru i przenieś ją do drukarki. W przeciwnym razie toneru będzie każdą pogodę mechanizm papieru przepływu. Obszar, który może zostać zrealizowane jest "obszar obrazowania."  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma publicznego konstruktora. W związku z tym zmienna `documentImageableArea` musi być zadeklarowana i przypisane do `null` i następnie przekazywany do metody. Ta metoda Wy Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Po użytkownik wybrane drukarki, rozmiar papieru i orientacji i zamknąć okno dialogowe, `documentImageableArea` punkty faktyczny obiekt i jego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamyka okno dialogowe, wartość zwracana jest `null`. W rezultacie, wartość zwracana, muszą zostać sprawdzone `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  *  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (documentImageableArea, pageRangeSelection, pageRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Odwołanie do obiektu, który zawiera wymiary obszaru strony, na której można wydrukować urządzenia. Ponieważ jej typem danych nie ma publicznego konstruktora, ten parametr jest przekazywany jako niezainicjowany.</param>
        <param name="pageRangeSelection">Wartość, która określa, czy należy wydrukować wszystkich stron lub zakresu, który jest określony przez użytkownika.</param>
        <param name="pageRange">Zakres stron, wydrukowaniu.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu, zostanie otwarty Windows wspólne okno dialogowe drukowania, udostępnia okno dialogowe zakres stron i opis zadania drukowania i zwraca <see langword="ref" /> (<see langword="ByRef" /> w języku Visual Basic) parametr, który reprezentuje informacje o obszar obrazowania i wymiary nośnika.</summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Strumienia, zapisuje dane XPS. Może to być <see langword="null" />. (Parametry <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" />, i <paramref name="pageRange" /> wyświetlane są wszystkie <see langword="ref" /> [<see langword="ByRef" /> w języku Visual Basic] Parametry, które są inicjowane przez użytkownika i zwracany po zamknięciu okna dialogowego, dzięki czemu każdy reprezentuje dodatkowy zwrócony element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek muszą maksymalnie kwartał cala pozostałych do wydrukowania ilość wolnego miejsca wokół krawędzi każdej strony do uchwytu papieru i przenieś ją do drukarki. W przeciwnym razie toneru będzie każdą pogodę mechanizm papieru przepływu. Obszar, który może zostać zrealizowane jest "obszar obrazowania."  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma publicznego konstruktora. W związku z tym zmienna `documentImageableArea` musi być zadeklarowana i przypisane do `null` i następnie przekazywany do metody. Ta metoda Wy Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Użytkownik skonfiguruje jego zadania drukowania w oknie dialogowym (łącznie z wybraniu drukarki, rozmiar papieru, orientacji i zakresu stron). Po zamknięciu okna dialogowego `pageRangeSelection` i `pageRange` mają wartości, a `documentImageableArea` wskazuje faktyczny obiekt, którego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamyka okno dialogowe, wartość zwracana jest `null`. W rezultacie, wartość zwracana, muszą zostać sprawdzone `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : string *  *  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (jobDescription, documentImageableArea, pageRangeSelection, pageRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Nazwa zadania drukowania. Wygląda na to w interfejsie użytkownika drukowania Windows.</param>
        <param name="documentImageableArea">Odwołanie do obiektu, który zawiera wymiary obszaru strony, na której można wydrukować urządzenia. Ponieważ jej typem danych nie ma publicznego konstruktora, ten parametr jest przekazywany jako niezainicjowany.</param>
        <param name="pageRangeSelection">Wartość, która określa, czy należy wydrukować wszystkich stron lub zakresu, który jest określony przez użytkownika.</param>
        <param name="pageRange">Zakres stron, wydrukowaniu.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu, zostanie otwarty Windows wspólne okno dialogowe drukowania, zapewnia okno dialogowe zakres stron i zwraca <see langword="ref" /> (<see langword="ByRef" /> w języku Visual Basic) parametr, który reprezentuje informacje o obszarze obrazowania i wymiary nośnik.</summary>
        <returns><see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Strumienia, zapisuje dane XPS. Może to być <see langword="null" />. (Parametry <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" />, i <paramref name="pageRange" /> wyświetlane są wszystkie <see langword="ref" /> [<see langword="ByRef" /> w języku Visual Basic] Parametry, które są inicjowane przez użytkownika i zwracany po zamknięciu okna dialogowego, dzięki czemu każdy reprezentuje dodatkowy zwrócony element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek muszą maksymalnie kwartał cala pozostałych do wydrukowania ilość wolnego miejsca wokół krawędzi każdej strony do uchwytu papieru i przenieś ją do drukarki. W przeciwnym razie toneru będzie każdą pogodę mechanizm papieru przepływu. Obszar, który może zostać zrealizowane jest "obszar obrazowania."  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma publicznego konstruktora. W związku z tym zmienna `documentImageableArea` musi być zadeklarowana i przypisane do `null` i następnie przekazywany do metody. Ta metoda Wy Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Użytkownik skonfiguruje jego zadania drukowania w oknie dialogowym (łącznie z wybraniu drukarki, rozmiar papieru, orientacji i zakresu stron). Po zamknięciu okna dialogowego `pageRangeSelection` i `pageRange` mają wartości, a `documentImageableArea` wskazuje faktyczny obiekt, którego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamyka okno dialogowe, wartość zwracana jest `null`. W rezultacie, wartość zwracana, muszą zostać sprawdzone `null` przez aplikację.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">Narzędzie zgodności isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentJobSettings">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobSettings CurrentJobSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintJobSettings CurrentJobSettings" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentJobSettings As PrintJobSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobSettings ^ CurrentJobSettings { System::Printing::PrintJobSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentJobSettings : System.Printing.PrintJobSettings" Usage="System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który zawiera ustawienia konfiguracji dla bieżącego zadania drukowania.</summary>
        <value>A <see cref="T:System.Printing.PrintJobSettings" /> wartość, która zawiera ustawienia, które obecnie drukowanie zadania. Te ustawienia obejmują opis zadania i odwołanie do zadania <see cref="T:System.Printing.PrintTicket" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Printing.PrintTicket" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket DefaultPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket DefaultPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ DefaultPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPrintTicket : System.Printing.PrintTicket with get, set" Usage="System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślne opcje drukarki skojarzony z tym <see cref="T:System.Printing.PrintQueue" />.</summary>
        <value>Wartość domyślna <see cref="T:System.Printing.PrintTicket" /> dla kolejki wydruku; lub <see langword="null" /> Jeśli wystąpił błąd w kolejce wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna <xref:System.Printing.PrintTicket> Określa opcje zadania drukowania, takich jak <xref:System.Printing.PrintTicket.CopyCount%2A>, <xref:System.Printing.PrintTicket.PageOrientation%2A>, <xref:System.Printing.PrintTicket.Duplexing%2A>, <xref:System.Printing.PrintTicket.Stapling%2A>i innym osobom.  
  
 Każdy <xref:System.Printing.PrintQueue> przechowuje swój własny <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A>.  
  
 W ramach normalnych operacji <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> właściwość zwraca <xref:System.Printing.PrintTicket>.  Jeśli <xref:System.Printing.PrintQueue> wykrywa nieprawidłowy stan <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> zwraca `null`.  Jeśli <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> zwraca `null`, aplikacja powinna wyświetlić okno dialogowe informacyjny użytkownika wystąpił błąd w tej kolejce wydruku i czy zadanie drukowania należy ponownie uruchomić z danymi wyjściowymi kierowane do innej kolejki wydruku.  
  
 Pobieranie lub ustawianie <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> właściwości nie można zweryfikować <xref:System.Printing.PrintTicket>.  <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> Metoda może służyć do sprawdzania poprawności <xref:System.Printing.PrintTicket>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości podczas testowania możliwości drukarki i konfigurowania zadania drukowania, aby móc korzystać z nich.  
  
 [!code-cpp[XpsCreate#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.UserPrintTicket" />
        <altmember cref="P:System.Printing.PrintQueue.DefaultPriority" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPriority">
      <MemberSignature Language="C#" Value="public virtual int DefaultPriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultPriority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPriority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DefaultPriority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPriority : int with get, set" Usage="System.Printing.PrintQueue.DefaultPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślny priorytet, który znajduje się do każdego nowego zadania drukowania, dodane do kolejki.</summary>
        <value>Domyślny priorytet zadania drukowania, dodane do kolejki. Możliwe wartości z zakresu od 1 do 99. Domyślnym ustawieniem jest 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Priorytet zadania drukowania może zostać zmieniony przez użytkowników, po przejściu kolejki wydruku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Printing.PrintQueue.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera opis kolejki wydruku.</summary>
        <value>Opis kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia kolejki, opis wartość domyślna to ciąg trzech części, który składa się z nazwy kolejki, modelu i lokalizacji, oddzielonych przecinkami. Kontrast <xref:System.Printing.PrintQueue.Description%2A> właściwość o <xref:System.Printing.PrintQueue.Comment%2A> właściwość, która jest widoczna dla użytkowników w wspólne okno dialogowe drukowania i listy drukarki i faksy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Printing.PrintQueue.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pełną nazwę kolejki.</summary>
        <value>Pełna nazwa kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla kolejek wydruku na lokalnym serwerze wydruku, wartość tej właściwości jest taka sama jak <xref:System.Printing.PrintQueue.Name%2A>, w przeciwnym razie obejmuje Pełna nazwa UNC (Universal Naming Convention).  
  
 <xref:System.Printing.PrintQueue> Obiekt również ma zapisywalnego <xref:System.Printing.PrintQueue.Name%2A> i <xref:System.Printing.PrintQueue.ShareName%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości podczas scalania dwóch bilety drukowania.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo GetJob (int jobId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo GetJob(int32 jobId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetJob (jobId As Integer) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ GetJob(int jobId);" />
      <MemberSignature Language="F#" Value="member this.GetJob : int -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.GetJob jobId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="jobId">Liczba zadań w kolejce.</param>
        <summary>Pobiera zadanie drukowania z określonym numerem Identyfikacyjnym.</summary>
        <returns>Element <see cref="T:System.Printing.PrintSystemJobInfo" /> , który określa właściwości zadania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również użyć <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> metody, w tym samym celu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak podczas diagnozowania problemów z zadaniem drukowania przy użyciu tej metody.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilities">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera <see cref="T:System.Printing.PrintCapabilities" /> obiektu, który identyfikuje możliwości drukarka lub urządzenie, takie jak czy drukowanie w kolorze lub jest zdolny do drukowania dwustronnego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilities () As PrintCapabilities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities();" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilities : unit -&gt; System.Printing.PrintCapabilities" Usage="printQueue.GetPrintCapabilities " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera <see cref="T:System.Printing.PrintCapabilities" /> obiektu, który identyfikuje możliwości drukarki.</summary>
        <returns>Element <see cref="T:System.Printing.PrintCapabilities" /> obiektu, który określa, jakie drukarki i nie można wykonać, takie jak dwustronnego kopiowaniu lub zszywanie automatyczne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak podczas scalania dwóch bilety wydruku przy użyciu tej metody.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException"><see cref="T:System.Printing.PrintCapabilities" /> Nie można pobrać obiektu.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">o zezwolenie na dostęp do możliwości drukowania. Wyliczenie skojarzone: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities(System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilities : System.Printing.PrintTicket -&gt; System.Printing.PrintCapabilities" Usage="printQueue.GetPrintCapabilities printTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Bilet drukowania, który stanowi podstawę, na którym są zgłaszane możliwości drukowania.</param>
        <summary>Pobiera <see cref="T:System.Printing.PrintCapabilities" /> obiektu, który identyfikuje możliwości drukarki.</summary>
        <returns>Element <see cref="T:System.Printing.PrintCapabilities" /> obiektu, który określa, jakie drukarki i nie można wykonać, takie jak dwustronnego kopiowaniu lub zszywanie automatyczne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintTicket> Parametr jest używany jako podstawa, na którym chcesz utworzyć <xref:System.Printing.PrintCapabilities> obiektu. Na przykład załóżmy, że drukarki obsługiwane tylko A typów nośnika i B z danych wejściowych pojemnika 1 i obsługiwany tylko typ nośnika C z danych wejściowych pojemnika 2. Jeśli `printTicket` określony parametr wejściowy bin 1, a następnie <xref:System.Printing.PrintCapabilities> obiekt, który jest zwracany obejmuje wszystkie typy nośników trzech, ale może zgłosić, typ C jako "ograniczone." Jeśli `printTicket` określony parametr wejściowy bin 2, a następnie <xref:System.Printing.PrintCapabilities> obiekt, który jest zwracany obejmuje wszystkie typy nośników trzech, ale może zgłosić, typów, A i B, jak "ograniczone." Zobacz [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) więcej informacji na temat ograniczeń.  
  
 Jeśli `printTicket` jest `null`, <xref:System.Printing.PrintQueue.UserPrintTicket%2A> jest używany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException"><see cref="T:System.Printing.PrintCapabilities" /> Nie można pobrać obiektu.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="printTicket" /> nie jest poprawnie sformułowany.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">o zezwolenie na dostęp do możliwości drukowania. Wyliczenie skojarzone: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilitiesAsXml">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera <see cref="T:System.IO.MemoryStream" /> obiekt, który określa strumienia możliwości drukarki w formacie XML, który jest zgodny z [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schemat XML, używany jest nazywany "Printcapabilities —," w ramach [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) systemu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilitiesAsXml () As MemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml();" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilitiesAsXml : unit -&gt; System.IO.MemoryStream" Usage="printQueue.GetPrintCapabilitiesAsXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera <see cref="T:System.IO.MemoryStream" /> obiekt, który określa strumienia możliwości drukarki w formacie XML, który jest zgodny z [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <returns>A <see cref="T:System.IO.MemoryStream" /> określenie możliwości drukarki przy użyciu schematu XML "Printcapabilities —," w ramach <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">schematu drukowania</see> systemu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">Nie można pobrać możliwości drukowania.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">o zezwolenie na dostęp do możliwości drukowania. Wyliczenie skojarzone: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml(System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilitiesAsXml : System.Printing.PrintTicket -&gt; System.IO.MemoryStream" Usage="printQueue.GetPrintCapabilitiesAsXml printTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Bilet drukowania, który stanowi podstawę, na którym są zgłaszane możliwości drukowania.</param>
        <summary>Pobiera <see cref="T:System.IO.MemoryStream" /> obiektu, który określa format możliwości drukarki w formacie XML, który jest zgodny z [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <returns>A <see cref="T:System.IO.MemoryStream" /> określenie możliwości drukarki przy użyciu schematu XML "Printcapabilities —," w ramach <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">schematu drukowania</see> systemu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintTicket> Parametr jest używany jako podstawa, na którym chcesz utworzyć możliwości drukowania XML. Na przykład załóżmy, że drukarki obsługiwane tylko A typów nośnika i B z danych wejściowych pojemnika 1 i obsługiwany tylko typ nośnika C z danych wejściowych pojemnika 2. Jeśli `printTicket` określony parametr wejściowy bin 1, a następnie obejmuje wszystkie typy nośników trzy możliwości drukowania XML, który jest zwracany, ale może zgłosić, typ C jako "ograniczone." Jeśli `printTicket` pojemnik wejściowy 2, określony przez parametr, a następnie obejmuje wszystkie typy nośników trzy możliwości drukowania XML, który jest zwracany, ale może zgłosić, typów, A i B, jak "ograniczone." Zobacz [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) więcej informacji na temat ograniczeń.  
  
 Jeśli `printTicket` jest `null`, <xref:System.Printing.PrintQueue.UserPrintTicket%2A> jest używany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Nie można pobrać możliwości drukowania.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="printTicket" /> nie jest poprawnie sformułowany.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">o zezwolenie na dostęp do możliwości drukowania. Wyliczenie skojarzone: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintJobInfoCollection">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintJobInfoCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintJobInfoCollection () As PrintJobInfoCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintJobInfoCollection ^ GetPrintJobInfoCollection();" />
      <MemberSignature Language="F#" Value="member this.GetPrintJobInfoCollection : unit -&gt; System.Printing.PrintJobInfoCollection" Usage="printQueue.GetPrintJobInfoCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kolekcję zawierającą <see cref="T:System.Printing.PrintSystemJobInfo" /> obiekt dla każdego zadania w kolejce.</summary>
        <returns>Zwraca <see cref="T:System.Printing.PrintJobInfoCollection" /> z <see cref="T:System.Printing.PrintSystemJobInfo" /> obiektów. Jest on dostępny dla każdego zadania w kolejce.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak podczas przeprowadzania tę samą akcję dla każdego zadania w kolejce przy użyciu tej metody.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPaperProblem">
      <MemberSignature Language="C#" Value="public bool HasPaperProblem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPaperProblem" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasPaperProblem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasPaperProblem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasPaperProblem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasPaperProblem : bool" Usage="System.Printing.PrintQueue.HasPaperProblem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, jeśli drukarka ma problem z papierem nieokreślony.</summary>
        <value><see langword="true" /> Jeśli występuje problem z papierem nieokreślony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 <xref:System.Printing.PrintQueue> Obiekt również ma <xref:System.Printing.PrintQueue.IsPaperJammed%2A> i <xref:System.Printing.PrintQueue.IsOutOfPaper%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasToner">
      <MemberSignature Language="C#" Value="public bool HasToner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasToner" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasToner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasToner As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasToner { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasToner : bool" Usage="System.Printing.PrintQueue.HasToner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która wskazuje, czy drukarka jest toneru.</summary>
        <value><see langword="true" /> Jeśli bieżąca drukarka toneru; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niektórzy producenci drukarek może używać tego sygnału wskazująca, że ten toneru nie jest niski. Inne mogą używać do wskazania, że kaseta toneru jest obecny i prawidłowo wstawiono podczas korzystania z <xref:System.Printing.PrintQueue.IsTonerLow%2A> do wskazania, że toneru jest niska.  
  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintServer HostingPrintServer { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HostingPrintServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HostingPrintServer As PrintServer" />
      <MemberSignature Language="C++ CLI" Value="public:  virtual property System::Printing::PrintServer ^ HostingPrintServer {  public:&#xA;System::Printing::PrintServer ^ get(); protected:&#xA; void set(System::Printing::PrintServer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HostingPrintServer : System.Printing.PrintServer with get, set" Usage="System.Printing.PrintQueue.HostingPrintServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia (chroniony) serwera wydruku, który kontroluje kolejki wydruku.</summary>
        <value>Nazwa i inne właściwości <see cref="T:System.Printing.PrintServer" /> , który jest hostem kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę właściwość można ustawić tylko przez klasę, która jest pochodną <xref:System.Printing.PrintQueue> ponieważ metoda ustawiająca właściwości `protected`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InPartialTrust">
      <MemberSignature Language="C#" Value="public bool InPartialTrust { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPartialTrust" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.InPartialTrust" />
      <MemberSignature Language="VB.NET" Value="Public Property InPartialTrust As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InPartialTrust { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InPartialTrust : bool with get, set" Usage="System.Printing.PrintQueue.InPartialTrust" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy kolejka działa w trybie częściowo zaufanych wyższego poziomu zaufania.</summary>
        <value><see langword="true" /> Jeśli kolejka działa w trybie częściowo zaufanych; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Printing.PrintQueue.InPartialTrust%2A> właściwość jest `true`, nie można utworzyć program <xref:System.Printing.PrintQueue> obiekt, który reprezentuje tę drukarkę, chyba że użytkownik ma pełne uprawnienia drukowania dla drukarki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InternalDispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.InternalDispose : bool -&gt; unit" Usage="printQueue.InternalDispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko niezarządzane zasoby.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Printing.PrintQueue" /> i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBidiEnabled">
      <MemberSignature Language="C#" Value="public bool IsBidiEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBidiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBidiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBidiEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBidiEnabled : bool" Usage="System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy włączono dwukierunkowej komunikacji z drukarką.</summary>
        <value><see langword="true" /> włączenie komunikacji dwukierunkowej z drukarką; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.Printing.PrintQueue.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy urządzenie drukowania jest zajęty.</summary>
        <value><see langword="true" /> Jeśli urządzenie jest zajęte; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zajęte nie musi oznaczać, że jest to przetwarzanie zadania drukowania. Jeśli urządzenie jest połączenie drukarki/faksu/kopiarki, następnie może być Faksowanie lub kopiowania. Porównaj z <xref:System.Printing.PrintQueue.IsProcessing%2A> właściwości.  
  
 Jeśli urządzenie nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDevQueryEnabled">
      <MemberSignature Language="C#" Value="public bool IsDevQueryEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDevQueryEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDevQueryEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDevQueryEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDevQueryEnabled : bool" Usage="System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejki drukarki i dokumentów konfiguracje nie są zgodne, przechowuje dokumenty.</summary>
        <value><see langword="true" /> Jeśli kolejka zawiera niezgodne konfiguracji. w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirect">
      <MemberSignature Language="C#" Value="public bool IsDirect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirect" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDirect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirect { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirect : bool" Usage="System.Printing.PrintQueue.IsDirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka drukuje bezpośrednio do drukarki lub buforowanie dokumentów jako pierwszy, a następnie wyświetla je.</summary>
        <value><see langword="true" /> Jeśli kolejka drukuje bezpośrednio do drukarki; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę właściwość można ustawić tylko przy użyciu Windows wspólne okno dialogowe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDoorOpened">
      <MemberSignature Language="C#" Value="public bool IsDoorOpened { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDoorOpened" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDoorOpened" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDoorOpened As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDoorOpened { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDoorOpened : bool" Usage="System.Printing.PrintQueue.IsDoorOpened" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drzwi są otwarte dla drukarki.</summary>
        <value><see langword="true" /> Jeśli drzwi są otwarte. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="C#" Value="public bool IsHidden { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHidden" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsHidden" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHidden As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHidden { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHidden : bool" Usage="System.Printing.PrintQueue.IsHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka wydruku jest ukryty w interfejsie użytkownika aplikacji.</summary>
        <value><see langword="true" /> Jeśli kolejka wydruku jest ukryty w interfejsie użytkownika programu Windows; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz nie automatycznie ukrywaj kolejki wydruku podczas ustawić tę właściwość na `true`. Program nadal należy wykonać kroki, aby upewnić się, że nie ma żadnych listę kolejek w interfejsie programu.  
  
 Kolejki wydruku, nie mogą być ukryte w interfejsie użytkownika Windows, takich jak lista drukarki i faksy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInError { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInError : bool" Usage="System.Printing.PrintQueue.IsInError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka lub urządzenie jest w stanie błędu.</summary>
        <value><see langword="true" /> Jeśli urządzenie jest w stanie Błąd; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitializing">
      <MemberSignature Language="C#" Value="public bool IsInitializing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitializing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInitializing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitializing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitializing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitializing : bool" Usage="System.Printing.PrintQueue.IsInitializing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka Trwa inicjowanie sam.</summary>
        <value><see langword="true" /> Jeśli drukarka jest inicjowane; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIOActive">
      <MemberSignature Language="C#" Value="public bool IsIOActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIOActive" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsIOActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIOActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIOActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIOActive : bool" Usage="System.Printing.PrintQueue.IsIOActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest odbierania lub wysyłania danych lub sygnałów.</summary>
        <value><see langword="true" /> Jeśli drukarka jest odbierania lub wysyłania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManualFeedRequired">
      <MemberSignature Language="C#" Value="public bool IsManualFeedRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManualFeedRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsManualFeedRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManualFeedRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsManualFeedRequired : bool" Usage="System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka powinna podawania ręcznego papieru dla bieżącego zadania drukowania.</summary>
        <value><see langword="true" /> Jeśli drukarki musi być ręcznie podawane papieru. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotAvailable">
      <MemberSignature Language="C#" Value="public bool IsNotAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsNotAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotAvailable : bool" Usage="System.Printing.PrintQueue.IsNotAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest dostępna.</summary>
        <value><see langword="true" /> Jeśli drukarka jest dostępna; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOffline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffline { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOffline : bool" Usage="System.Printing.PrintQueue.IsOffline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w trybie offline.</summary>
        <value><see langword="true" /> Jeśli drukarka jest w trybie offline; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfMemory">
      <MemberSignature Language="C#" Value="public bool IsOutOfMemory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfMemory" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfMemory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfMemory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutOfMemory : bool" Usage="System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest za mało pamięci.</summary>
        <value><see langword="true" /> Jeśli drukarka jest za mało pamięci; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfPaper">
      <MemberSignature Language="C#" Value="public bool IsOutOfPaper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfPaper" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfPaper As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfPaper { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutOfPaper : bool" Usage="System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka wymaga ponownego załadowania papier rozmiaru wymaganego dla bieżącego zadania.</summary>
        <value><see langword="true" /> Jeśli drukarka powinna zostać ponownie załadowana; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutputBinFull">
      <MemberSignature Language="C#" Value="public bool IsOutputBinFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutputBinFull" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutputBinFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutputBinFull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutputBinFull : bool" Usage="System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy obszar dane wyjściowe drukarki jest przepełnienia.</summary>
        <value><see langword="true" /> Jeśli obszar danych wyjściowych drukarki jest pełne; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperJammed">
      <MemberSignature Language="C#" Value="public bool IsPaperJammed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperJammed" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaperJammed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaperJammed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaperJammed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaperJammed : bool" Usage="System.Printing.PrintQueue.IsPaperJammed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący arkusz papieru utkwiła w automatycznej drukarki.</summary>
        <value><see langword="true" /> Jeśli ten dokument jest zablokowany; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaused : bool" Usage="System.Printing.PrintQueue.IsPaused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy została wstrzymana kolejki wydruku.</summary>
        <value><see langword="true" /> Jeśli została wstrzymana kolejka wydruku; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPendingDeletion">
      <MemberSignature Language="C#" Value="public bool IsPendingDeletion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPendingDeletion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPendingDeletion As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPendingDeletion { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPendingDeletion : bool" Usage="System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w trakcie usuwania zadania drukowania.</summary>
        <value><see langword="true" /> Jeśli drukarka usuwa zadanie. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerSaveOn">
      <MemberSignature Language="C#" Value="public bool IsPowerSaveOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerSaveOn" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerSaveOn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerSaveOn { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPowerSaveOn : bool" Usage="System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w trybie oszczędzania energii.</summary>
        <value><see langword="true" /> Jeśli drukarka jest w usłudze Power BI należy zapisać tryb; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrinting : bool" Usage="System.Printing.PrintQueue.IsPrinting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy zadanie drukowania.</summary>
        <value><see langword="true" /> Jeśli zadanie jest drukowanie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProcessing">
      <MemberSignature Language="C#" Value="public bool IsProcessing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsProcessing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsProcessing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsProcessing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsProcessing : bool" Usage="System.Printing.PrintQueue.IsProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarki są przetwarzane zadania drukowania.</summary>
        <value><see langword="true" /> Jeśli drukarka jest przetwarzanie zadania drukowania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niektórzy producenci drukarek obsługują ten sygnał zamiast mniej konkretnych <xref:System.Printing.PrintQueue.IsBusy%2A>.  
  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublished">
      <MemberSignature Language="C#" Value="public bool IsPublished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublished" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPublished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublished : bool" Usage="System.Printing.PrintQueue.IsPublished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest widoczna dla innych użytkowników sieci.</summary>
        <value><see langword="true" /> Jeśli drukarka jest widoczny dla innych użytkowników sieci. w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQueued" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsQueued" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsQueued As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsQueued { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsQueued : bool" Usage="System.Printing.PrintQueue.IsQueued" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka może obsługiwać kolejki z więcej niż jednego zadania drukowania w nim w danym momencie.</summary>
        <value><see langword="true" /> Jeśli drukarka może obsługiwać usługi kolejkowania wielu zadań drukowania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRawOnlyEnabled">
      <MemberSignature Language="C#" Value="public bool IsRawOnlyEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRawOnlyEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRawOnlyEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRawOnlyEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRawOnlyEnabled : bool" Usage="System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy EMF (rozszerzony plik metadanych) umożliwia szybsze przepływ danych z aplikacji drukowanie do buforu Windows mogą korzystać z kolejki wydruku.</summary>
        <value><see langword="true" /> Jeśli drukarka nie mogą używać drukowanie EMF; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServerUnknown">
      <MemberSignature Language="C#" Value="public bool IsServerUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServerUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsServerUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsServerUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsServerUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServerUnknown : bool" Usage="System.Printing.PrintQueue.IsServerUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w stanie błędu.</summary>
        <value><see langword="true" /> Jeśli w drukarce znajduje się w stanie błędu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Printing.PrintQueue.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest dostępna do użytku przez inne komputery w sieci.</summary>
        <value><see langword="true" /> Jeśli drukarka jest udostępniona; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę właściwość można ustawić tylko przy użyciu Windows wspólne okno dialogowe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTonerLow">
      <MemberSignature Language="C#" Value="public bool IsTonerLow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTonerLow" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsTonerLow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTonerLow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTonerLow { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTonerLow : bool" Usage="System.Printing.PrintQueue.IsTonerLow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka zaczyna brakować toneru.</summary>
        <value><see langword="true" /> Jeśli drukarka zaczyna brakować toneru; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 <xref:System.Printing.PrintQueue> Obiekt również ma <xref:System.Printing.PrintQueue.HasToner%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWaiting">
      <MemberSignature Language="C#" Value="public bool IsWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWaiting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWaiting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWaiting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWaiting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWaiting : bool" Usage="System.Printing.PrintQueue.IsWaiting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka oczekuje na zadanie, które mają zostać dodane.</summary>
        <value><see langword="true" /> Jeśli kolejka oczekuje na zadanie. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWarmingUp">
      <MemberSignature Language="C#" Value="public bool IsWarmingUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWarmingUp" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWarmingUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWarmingUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWarmingUp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWarmingUp : bool" Usage="System.Printing.PrintQueue.IsWarmingUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest rozgrzewania.</summary>
        <value><see langword="true" /> Jeśli drukarka jest rozgrzewanie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXpsDevice">
      <MemberSignature Language="C#" Value="public bool IsXpsDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXpsDevice" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsXpsDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXpsDevice As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXpsDevice { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsXpsDevice : bool" Usage="System.Printing.PrintQueue.IsXpsDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy sterownik drukarki w oparciu [Omówienie drukowania](~/docs/framework/wpf/advanced/printing-overview.md) więc używa [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] jako jego języka opisu strony.</summary>
        <value><see langword="true" /> Jeśli drukarka używa [Omówienie drukowania](~/docs/framework/wpf/advanced/printing-overview.md); w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepPrintedJobs">
      <MemberSignature Language="C#" Value="public bool KeepPrintedJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepPrintedJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeepPrintedJobs As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepPrintedJobs { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeepPrintedJobs : bool" Usage="System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka jest zapisywana plik języka drukarki, zamiast usuwania go po drukowania.</summary>
        <value><see langword="true" /> Jeśli kolejka jest zapisywana w pliku języka drukarki; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual string Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Location : string with get, set" Usage="System.Printing.PrintQueue.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia drukarki lokalizacji fizycznej.</summary>
        <value>Fizyczna lokalizacja drukarki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak można używać tej właściwości, aby wyświetlić listę podzbiór kolejek drukowania dostępne.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public static int MaxPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxPrintSchemaVersion { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxPrintSchemaVersion : int" Usage="System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera najbardziej aktualną wersję możliwe liczbę [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) używanego w kolejce.</summary>
        <value>Numer wersji najnowszej [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) używanego w kolejce.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wersja [schematu drukowania](https://go.microsoft.com/fwlink/?LinkId=186397) dostępne w systemie Windows Vista to 1.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=186397">Drukuj schematu</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeAndValidatePrintTicket">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scala dwa <see cref="T:System.Printing.PrintTicket" />s i gwarantuje, że wynikowy <see cref="T:System.Printing.PrintTicket" /> jest prawidłowa i nie wymaga żadnej funkcji drukowania, która nie obsługuje drukarki.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket);" />
      <MemberSignature Language="F#" Value="member this.MergeAndValidatePrintTicket : System.Printing.PrintTicket * System.Printing.PrintTicket -&gt; System.Printing.ValidationResult" Usage="printQueue.MergeAndValidatePrintTicket (basePrintTicket, deltaPrintTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Pierwszy bilet drukowania.</param>
        <param name="deltaPrintTicket">Drugi bilet drukowania. Może to być <see langword="null" />.</param>
        <summary>Scala dwa <see cref="T:System.Printing.PrintTicket" />s i gwarantuje, że wynikowy <see cref="T:System.Printing.PrintTicket" /> jest prawidłowa i nie wymaga żadnej funkcji drukowania, która nie obsługuje drukarki.</summary>
        <returns>A <see cref="T:System.Printing.ValidationResult" /> zawierającej scalonych <see cref="T:System.Printing.PrintTicket" /> oraz wskazanie, czy ustawienia musiały zostać zmienione w celu zagwarantowania rentowności.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda tworzy bilet drukowania wygodną; oznacza to, że bilet, który nie wymaga funkcji drukowania, które drukarki nie obsługuje. Metoda najpierw sprawdza, czy dwa wejściowych bilety drukowania względem [drukowanie schematu](https://go.microsoft.com/fwlink/?LinkId=186397). Jeśli jest albo nieprawidłowa, jest zgłaszany wyjątek.  
  
 Następnie są scalane dwóch biletów. Jeśli mają różne wartości dla określonej właściwości następnie wynikowy scalony biletu początkowo używa wartości delta biletu.  
  
 --Ticket scalonych następnie jest sprawdzana względem rzeczywiste możliwości drukarki. Jeśli istnieją ustawienia w bilecie są niezgodne z możliwościami drukarki, a następnie sterownika drukarki zmiany tych ustawień, korzystając z dowolną logikę wymaganą potrzebuje. Zazwyczaj zastępuje użytkownika lub drukarki domyślnej wartości ustawienia. Źródło sterowników, Zastąp wartości nie jest tego samego biletu jako `basePrintTicket`, --ticket scalonych może skorzystać z niektórych ustawień, które różnią się od zarówno biletów danych wejściowych. Jeśli ma sterownika drukarki zmienić dowolne ustawienia, a następnie ten fakt jest zgłaszana w <xref:System.Printing.ValidationResult.ConflictStatus%2A> właściwość <xref:System.Printing.ValidationResult>.  
  
 Scal i sprawdzanie poprawności na podstawie ustawienia domyślne kolejki wydruku, należy ustawić `basePrintTicket` do <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> lub <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 `deltaPrintTicket` Parametr może być `null`, w którym to przypadku `basePrintTicket` zweryfikowane, sprawdzane pod kątem efektywności i zwrócony, prawdopodobnie ze zmianami.  
  
 Z tego przeciążenia <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>, zarówno `deltaPrintTicket` i <xref:System.Printing.PrintTicket> w <xref:System.Printing.ValidationResult> zwracanym mają szeroki zakres zadania. Aby określić inny zakres, użyj przeciążenia tej metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak użyć tej metody do scalania dwóch bilety wydruku i reagowanie na nie <xref:System.Printing.ValidationResult> zwracanym.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Co najmniej jeden wejściowy biletów wydruku jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="basePrintTicket" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.Printing.PrintQueueException">Sprawdzanie poprawności, łączenie i efektywność sprawdzanie operacji nie powiodło się.</exception>
      </Docs>
    </Member>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket, System.Printing.PrintTicketScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket, valuetype System.Printing.PrintTicketScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket,System.Printing.PrintTicketScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket, scope As PrintTicketScope) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket, System::Printing::PrintTicketScope scope);" />
      <MemberSignature Language="F#" Value="member this.MergeAndValidatePrintTicket : System.Printing.PrintTicket * System.Printing.PrintTicket * System.Printing.PrintTicketScope -&gt; System.Printing.ValidationResult" Usage="printQueue.MergeAndValidatePrintTicket (basePrintTicket, deltaPrintTicket, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="scope" Type="System.Printing.PrintTicketScope" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Pierwszy bilet drukowania.</param>
        <param name="deltaPrintTicket">Drugi bilet drukowania. Może to być <see langword="null" />.</param>
        <param name="scope">Wartość wskazującą czy zakres <paramref name="deltaPrintTicket" />oraz zakres wydruku bilet zwracane w <see cref="T:System.Printing.ValidationResult" />, jest stroną, dokumentu lub całą pracę.</param>
        <summary>Scala dwa <see cref="T:System.Printing.PrintTicket" />s i gwarantuje, że wynikowy <see cref="T:System.Printing.PrintTicket" /> jest prawidłowa, nie wymaga żadnych funkcji drukowania nie obsługuje drukarki, a jest ograniczony do określonego zakresu.</summary>
        <returns>A <see cref="T:System.Printing.ValidationResult" /> zawierającej scalonych <see cref="T:System.Printing.PrintTicket" /> oraz wskazanie, czy ustawienia musiały zostać zmienione w celu zagwarantowania rentowności.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda tworzy bilet drukowania wygodną; oznacza to, że bilet, który nie wymaga funkcji drukowania, które drukarki nie obsługuje. Metoda najpierw sprawdza, czy dwa wejściowych bilety drukowania względem [drukowanie schematu](https://go.microsoft.com/fwlink/?LinkId=186397). Jeśli jest albo nieprawidłowa, jest zgłaszany wyjątek.  
  
 Następnie są scalane dwóch biletów. Jeśli mają różne wartości dla określonej właściwości następnie wynikowy scalony biletu początkowo używa wartości delta biletu.  
  
 --Ticket scalonych następnie jest sprawdzana względem rzeczywiste możliwości drukarki. Jeśli istnieją ustawienia w bilecie są niezgodne z możliwościami drukarki, a następnie sterownika drukarki zmiany tych ustawień, korzystając z dowolną logikę wymaganą potrzebuje. Zazwyczaj zastępuje użytkownika lub drukarki domyślnej wartości ustawienia. Źródło sterowników, Zastąp wartości nie jest tego samego biletu jako `basePrintTicket`, --ticket scalonych może skorzystać z niektórych ustawień, które różnią się od zarówno biletów danych wejściowych. Jeśli ma sterownika drukarki zmienić dowolne ustawienia, a następnie ten fakt jest zgłaszana w <xref:System.Printing.ValidationResult.ConflictStatus%2A> właściwość <xref:System.Printing.ValidationResult>.  
  
 Scal i sprawdzanie poprawności na podstawie ustawienia domyślne kolejki wydruku, należy ustawić `basePrintTicket` do <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> lub <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 `deltaPrintTicket` Parametr może być `null`, w którym to przypadku `basePrintTicket` zweryfikowane, sprawdzane pod kątem efektywności i zwrócony, prawdopodobnie ze zmianami.  
  
 Jeśli `scope` to zadanie, zwracana --ticket wydruku w <xref:System.Printing.ValidationResult> mogą obejmować [drukowanie schematu](https://go.microsoft.com/fwlink/?LinkId=186397) parametry z prefiksami zadania, dokumentów i strony. Jeśli `scope` jest dokument, a następnie ustawienia dla zadania w `deltaPrintTicket` są ignorowane,--ticket zwracany może zawierać parametry z dokumentem i prefiksy strony. Jeśli `scope` jest stroną, a następnie ustawienia dla zadania i ustawienia poszczególnych dokumentów w `deltaPrintTicket` są ignorowane i zwrócony biletu może zawierać parametry prefiksem tylko strony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Co najmniej jeden wejściowy biletów wydruku jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="basePrintTicket" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scope" /> Parametr nie ma prawidłowego <see cref="T:System.Printing.PrintTicketScope" /> wartość.</exception>
        <exception cref="T:System.Printing.PrintQueueException">Sprawdzanie poprawności, łączenie i efektywność sprawdzanie operacji nie powiodło się.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override sealed string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Printing.PrintQueue.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę kolejki wydruku.</summary>
        <value>Nazwa kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Obiekt również ma tylko do odczytu <xref:System.Printing.PrintQueue.FullName%2A> właściwości i zapisywalny <xref:System.Printing.PrintQueue.ShareName%2A> właściwości.  
  
 W przypadku kolejek na lokalnym serwerze wydruku <xref:System.Printing.PrintQueue.Name%2A> i <xref:System.Printing.PrintQueue.FullName%2A> są takie same.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak można używać tej właściwości, aby wyświetlić listę podzbiór kolejek drukowania dostępne.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedUserIntervention">
      <MemberSignature Language="C#" Value="public bool NeedUserIntervention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedUserIntervention" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NeedUserIntervention As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NeedUserIntervention { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NeedUserIntervention : bool" Usage="System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka powinna uwagę człowieka.</summary>
        <value><see langword="true" /> Jeśli drukarka wymaga uwagi ludzi; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfJobs">
      <MemberSignature Language="C#" Value="public virtual int NumberOfJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NumberOfJobs" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NumberOfJobs As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int NumberOfJobs { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberOfJobs : int" Usage="System.Printing.PrintQueue.NumberOfJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera całkowitą liczbę zadań w linii w kolejce wydruku.</summary>
        <value>Liczba zadań w kolejce.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PagePunt">
      <MemberSignature Language="C#" Value="public bool PagePunt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PagePunt" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PagePunt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagePunt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PagePunt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PagePunt : bool" Usage="System.Printing.PrintQueue.PagePunt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest nie można wydrukować bieżącą stronę.</summary>
        <value><see langword="true" /> Jeśli drukarka jest nie można wydrukować bieżącą stronę; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym znaczenia, a następnie właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Pause();" />
      <MemberSignature Language="F#" Value="abstract member Pause : unit -&gt; unit&#xA;override this.Pause : unit -&gt; unit" Usage="printQueue.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wstrzymuje kolejki wydruku. Pozostaje on wstrzymany do czasu <see cref="M:System.Printing.PrintQueue.Resume" /> jest wykonywany.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można wstrzymać drukarki.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PrintingIsCancelled">
      <MemberSignature Language="C#" Value="public bool PrintingIsCancelled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintingIsCancelled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintingIsCancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PrintingIsCancelled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PrintingIsCancelled : bool with get, set" Usage="System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy bieżące zadanie drukowania jest anulowane.</summary>
        <value><see langword="true" /> Jeśli zadanie drukowania jest anulowane; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Priority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int with get, set" Usage="System.Printing.PrintQueue.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia priorytet kolejki wydruku względem innych kolejek drukowania, które są hostowane przez ten sam serwer wydruku, które używają tej samej drukarki fizycznej.</summary>
        <value>Priorytet kolejki wydruku. Możliwe wartości to od 1 do 99. Domyślnym ustawieniem jest 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Porównaj tę właściwość z <xref:System.Printing.PrintQueue.DefaultPriority%2A> właściwość, która dotyczy względny priorytet zadań drukowania w kolejce.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public virtual void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Purge ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Purge();" />
      <MemberSignature Language="F#" Value="abstract member Purge : unit -&gt; unit&#xA;override this.Purge : unit -&gt; unit" Usage="printQueue.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie zadania w kolejce wydruku.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można usunąć niektórych zadań drukowania z kolejki.</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueAttributes">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueAttributes QueueAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueAttributes QueueAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueAttributes As PrintQueueAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueAttributes QueueAttributes { System::Printing::PrintQueueAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueAttributes : System.Printing.PrintQueueAttributes" Usage="System.Printing.PrintQueue.QueueAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera właściwości kolejki wydruku.</summary>
        <value>Bitowa kombinacja <see cref="T:System.Printing.PrintQueueAttributes" /> wartości wyliczenia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDriver">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintDriver QueueDriver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintDriver QueueDriver" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueDriver" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueueDriver As PrintDriver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintDriver ^ QueueDriver { System::Printing::PrintDriver ^ get(); void set(System::Printing::PrintDriver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueueDriver : System.Printing.PrintDriver with get, set" Usage="System.Printing.PrintQueue.QueueDriver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintDriver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia sterownika drukarki dla kolejki.</summary>
        <value><see cref="T:System.Printing.PrintDriver" /> Używającej kolejki.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePort">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintPort QueuePort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintPort QueuePort" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePort As PrintPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintPort ^ QueuePort { System::Printing::PrintPort ^ get(); void set(System::Printing::PrintPort ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueuePort : System.Printing.PrintPort with get, set" Usage="System.Printing.PrintQueue.QueuePort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintPort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia port, który korzysta z kolejki.</summary>
        <value><see cref="T:System.Printing.PrintPort" /> Przypisany do kolejki wydruku.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePrintProcessor">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintProcessor QueuePrintProcessor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintProcessor QueuePrintProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePrintProcessor As PrintProcessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintProcessor ^ QueuePrintProcessor { System::Printing::PrintProcessor ^ get(); void set(System::Printing::PrintProcessor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueuePrintProcessor : System.Printing.PrintProcessor with get, set" Usage="System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintProcessor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia procesora wydruku, który korzysta z kolejki.</summary>
        <value><see cref="T:System.Printing.PrintProcessor" /> Używanego kolejki, takie jak WinPrint lub ModiPrint.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueStatus QueueStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueStatus QueueStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueStatus As PrintQueueStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueStatus QueueStatus { System::Printing::PrintQueueStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueStatus : System.Printing.PrintQueueStatus" Usage="System.Printing.PrintQueue.QueueStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która reprezentuje stan drukarki. Obejmują one "rozgrzewanie," "Inicjowanie", "drukowania" i inne.</summary>
        <value>Bieżący <see cref="T:System.Printing.PrintQueueStatus" /> wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueattributes)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueattributes)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberSignature Language="F#" Value="override this.Refresh : unit -&gt; unit" Usage="printQueue.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualizuje właściwości <see cref="T:System.Printing.PrintQueue" /> obiekt o wartości z drukarką i narzędzie kolejki wydruku, które działają na komputerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sprawia, że program do zmiany <xref:System.Printing.PrintQueue> właściwości obiektu zostają utracone podczas <xref:System.Printing.PrintQueue.Refresh%2A> wykonuje, o ile nie został zapisany drukarki i kolejki wydruku z <xref:System.Printing.PrintQueue.Commit%2A>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak przy użyciu tej metody w ramach badania wszystkie drukarki możliwy błąd stanu.  
  
 [!code-cpp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#surveyqueues)]
 [!code-csharp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#surveyqueues)]
 [!code-vb[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#surveyqueues)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można odświeżyć niektórych właściwości.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Resume();" />
      <MemberSignature Language="F#" Value="abstract member Resume : unit -&gt; unit&#xA;override this.Resume : unit -&gt; unit" Usage="printQueue.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia ponownie kolejki wydruku, który został wstrzymany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak do używania tej metody, aby wznowić wstrzymany kolejki wydruku.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można wznowić drukarki.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Pause" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCompletedJobsFirst">
      <MemberSignature Language="C#" Value="public bool ScheduleCompletedJobsFirst { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScheduleCompletedJobsFirst" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScheduleCompletedJobsFirst As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScheduleCompletedJobsFirst { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScheduleCompletedJobsFirst : bool" Usage="System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka pobiera zadania, które zostały wykonane procesów buforowania przed zadaniami, które nie zostały w pełni buforowane, nawet wtedy, gdy ten ostatni wprowadzony kolejki pierwszy lub mają wyższy priorytet.</summary>
        <value><see langword="true" /> Jeśli zadania, które ukończenie procesu buforowania przed zadaniami, które nie zostały w pełni buforowane; wydruku w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorFile">
      <MemberSignature Language="C#" Value="public virtual string SeparatorFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SeparatorFile" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.SeparatorFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SeparatorFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SeparatorFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SeparatorFile : string with get, set" Usage="System.Printing.PrintQueue.SeparatorFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę i nazwę pliku, który zostanie wstawiony na początku każdego zadania drukowania.</summary>
        <value>Ścieżka i nazwa pliku separatora.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj jest to plik jednej strony, używane do ułatwienia oddzielnych danych wyjściowych innego zadania drukowania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShareName">
      <MemberSignature Language="C#" Value="public virtual string ShareName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShareName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ShareName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShareName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ShareName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShareName : string with get, set" Usage="System.Printing.PrintQueue.ShareName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę drukarki, która jest widoczna dla użytkowników w sieci, gdy zostanie on udostępniony.</summary>
        <value>Publiczna nazwa drukarki udostępnionej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Obiekt również ma tylko do odczytu <xref:System.Printing.PrintQueue.FullName%2A> właściwości i zapisywalny <xref:System.Printing.PrintQueue.Name%2A> właściwości. W przypadku kolejek na lokalnym serwerze wydruku te właściwości mają taką samą wartość.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int StartTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property StartTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int StartTimeOfDay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.StartTimeOfDay : int with get, set" Usage="System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia najwcześniejszą godzinę, wyrażone jako liczba minut po północy uniwersalnego czasu koordynowanego (UTC) (również o nazwie uniwersalny Greenwich [GMT]), czy drukarka będzie drukować zadania.</summary>
        <value>Godzinę, o które drukarki najpierw staje się dostępna, wyrażone jako liczba minut po północy (UTC). Wartość maksymalna to 1439. Jeśli drukarka najpierw został zainstalowany przy użyciu [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] Kreatora dodawania drukarki drukarki wartością domyślną jest dostępny przez cały czas, a ta właściwość zwraca wartość 0 w wszystkich strefach czasowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie jesteś w strefie czasowej UTC, musisz dodać lub Odejmij wielokrotności 60, aby ustawić lub pobrać ustawiony prawidłowy czas dla strefy czasowej. Na przykład jeśli jesteś w strefie czasu pacyficznego z Ameryki Północnej i czasu letniego czasu nie jest w efekcie czasu lokalnego jest wcześniejsze niż UTC 8 godzin. Aby ustawić <xref:System.Printing.PrintQueue.StartTimeOfDay%2A> do 0: 00 w strefie czasowej, zostanie ustawiona do 8: 00 czasu UTC, co jest 480 (= 8 * 60). Należy również pamiętać o który czas najedzie na zero, po upływie 24 godzin (to znaczy; po minucie 1439th). Aby ustawić go do 18: 00 w strefie czasowej, należy ustawić go 2: 00 czasu UTC, czyli 120 (= 2 * 60). Zobacz <xref:System.TimeZone>, <xref:System.TimeSpan>, i <xref:System.DateTime> klasy przydatne strefy czasowej, manipulowanie metody.  
  
 Jeśli drukarka jest zawsze dostępny, następnie ta właściwość zwraca wartość 0 w wszystkich strefach czasowych.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak ta właściwość służy do określenia, czy drukarki są dostępne w danej chwili.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int UntilTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UntilTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UntilTimeOfDay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UntilTimeOfDay : int with get, set" Usage="System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ostatni czas, wyrażone jako liczba minut po północy uniwersalnego czasu koordynowanego (UTC) (również o nazwie uniwersalny Greenwich [GMT]), czy drukarka będzie drukować zadania.</summary>
        <value>Godzinę, o które drukarki nie jest już dostępny, wyrażone jako liczba minut po północy (UTC). Wartość maksymalna to 1439. Jeśli drukarka najpierw został zainstalowany przy użyciu [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] Kreatora dodawania drukarki drukarki wartością domyślną jest dostępny przez cały czas, a ta właściwość zwraca wartość 0 w wszystkich strefach czasowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie jesteś w strefie czasowej UTC, musisz dodać lub Odejmij wielokrotności 60, aby ustawić lub pobrać ustawiony prawidłowy czas dla strefy czasowej. Na przykład jeśli jesteś w strefie czasu pacyficznego z Ameryki Północnej i czasu letniego czasu nie jest w efekcie czasu lokalnego jest wcześniejsze niż UTC 8 godzin. Aby ustawić <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A> do 0: 00 w strefie czasowej, zostanie ustawiona do 8: 00 czasu UTC, co jest 480 (= 8 * 60). Należy również pamiętać o tym czasie najedzie na zero, po upływie 24 godziny (1439th minutę). Aby ustawić go do 18: 00 w strefie czasowej, należy ustawić go 2: 00 czasu UTC, czyli 120 (= 2 * 60). Zobacz <xref:System.TimeZone>, <xref:System.TimeSpan>, i <xref:System.DateTime> klasy przydatne strefy czasowej, manipulowanie metody.  
  
 Jeśli drukarka jest zawsze dostępny, następnie ta właściwość zwraca wartość 0 w wszystkich strefach czasowych.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak ta właściwość służy do określenia, czy drukarki są dostępne w danej chwili.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UserPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket UserPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket UserPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UserPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UserPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ UserPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UserPrintTicket : System.Printing.PrintTicket with get, set" Usage="System.Printing.PrintQueue.UserPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślny bieżącego użytkownika <see cref="T:System.Printing.PrintTicket" /> obiektu, który zawiera szczegółowe informacje o zadaniu drukowania.</summary>
        <value><see cref="T:System.Printing.PrintTicket" /> Dla bieżącego użytkownika lub <see langword="null" /> Jeśli użytkownik <see cref="T:System.Printing.PrintTicket" /> nie został określony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy użytkownik może mieć własne domyślne <xref:System.Printing.PrintTicket>.  
  
 Ta właściwość może być `null`.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości podczas scalania dwóch bilety drukowania.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      </Docs>
    </Member>
  </Members>
</Type>