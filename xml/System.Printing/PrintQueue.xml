<Type Name="PrintQueue" FullName="System.Printing.PrintQueue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c894ae6d0e5d41543a1fb6b97dfb6d69132b4f98" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30561775" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PrintQueue : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintQueue extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintQueue" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintQueue&#xA;Inherits PrintSystemObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintQueue : System::Printing::PrintSystemObject" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zarządza drukarki i zadań drukowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niektóre właściwości <xref:System.Printing.PrintQueue> obiekt reprezentuje charakterystykę narzędzie kolejki wydruku, które działają na komputerze, ale są inne funkcje lub stany drukarki. Na przykład <xref:System.Printing.PrintQueue.NumberOfJobs%2A> charakterystycznej kolejki wydruku, ale <xref:System.Printing.PrintQueue.Location%2A> jest właściwością, drukarki. Wiele właściwości drukarki, takie jak czy wymaga ona uwagi użytkownika, muszą być przekazywane w sposób <xref:System.Printing.PrintQueue.Refresh%2A> metody z drukarki do <xref:System.Printing.PrintQueue> obiektu. Należy to zrobić przed odpowiadających im właściwości (<xref:System.Printing.PrintQueue.NeedUserIntervention%2A>) jest odczytywany przez program. Podobnie, program zmiany wartości właściwości jednego lub więcej <xref:System.Printing.PrintQueue> obiektu, zmiana musi być przystosowana do narzędzia rzeczywiste kolejki wydruku na komputerze. W tym z <xref:System.Printing.PrintQueue.Commit%2A> metody.  
  
> [!CAUTION]
>  Klasy w <xref:System.Printing> przestrzeni nazw nie są obsługiwane do użycia w ramach usługi systemu Windows lub aplikacji ASP.NET lub usługi. Podjęto próbę użycia tych klas z jednej z tych typów aplikacji może dać nieoczekiwane problemy, takie jak ograniczyć obsługi wyjątków wydajności i czasu wykonywania.  
  
 Jeśli chcesz wydrukuj z aplikacji formularzy systemu Windows, temacie <xref:System.Drawing.Printing> przestrzeni nazw.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Printing.PrintServer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku do obsługi kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> przy użyciu określonego <see cref="T:System.Printing.PrintServer" /> i nazwy kolejki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślną wartość parametru <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który obsługuje kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="printSchemaVersion">Wersja schematu drukowania do użycia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, nazwę kolejki i drukowanie wersji schematu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślną wartość parametru <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 [Schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) wersji wydanej w systemie Windows Vista ma wartość "1".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który obsługuje kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości, które określa wartości właściwości w celu zainicjowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, nazwa kolejki i tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości w celu zainicjowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślną wartość parametru <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 Użyj konstruktora z `propertyFilter` parametr zwiększa wydajność.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który obsługuje kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="desiredAccess">Jeden z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, które określają typ dostępu do kolejki wydruku, który wymaga programu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, nazwę kolejki i potrzeby dostępu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> to wartość, która może być zastosowane tylko do <see cref="T:System.Printing.PrintServer" /> obiektu nie <see cref="T:System.Printing.PrintQueue" /> obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który obsługuje kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica nazw właściwości, aby zainicjować.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, nazwę kolejki i tablicę nazw właściwości do zainicjowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Konstruktory, które nie zawierają <xref:System.Printing.PrintSystemDesiredAccess> domyślną wartość parametru <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> dostępu.  
  
 Użyj konstruktora z `propertyFilter` parametr zwiększa wydajność.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który obsługuje kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="printSchemaVersion">Wersja schematu drukowania do użycia.</param>
        <param name="desiredAccess">Jeden z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, które określają typ dostępu do kolejki wydruku, który wymaga programu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, kolejka nazwy, wersji schematu i żądany dostęp wydruku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) wersji wydanej w systemie Windows Vista ma wartość "1".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> to wartość, która może być zastosowane tylko do <see cref="T:System.Printing.PrintServer" /> obiektu nie <see cref="T:System.Printing.PrintQueue" /> obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który obsługuje kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości, które określa właściwości inicjowania.</param>
        <param name="desiredAccess">Jeden z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, które określają typ dostępu do kolejki wydruku, który wymaga programu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> klasy z określonym <see cref="T:System.Printing.PrintServer" />, nazwę kolejki, tablica <see cref="T:System.Printing.PrintQueueIndexedProperty" /> wartości do inicjowania i uzyskać właściwy dostęp.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj konstruktora z `propertyFilter` parametr zwiększa wydajność.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> to wartość, która może być zastosowane tylko do <see cref="T:System.Printing.PrintServer" /> obiektu nie <see cref="T:System.Printing.PrintQueue" /> obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serwer wydruku, który obsługuje kolejki wydruku.</param>
        <param name="printQueueName">Nazwa kolejki wydruku.</param>
        <param name="propertyFilter">Tablica nazw właściwości, aby zainicjować.</param>
        <param name="desiredAccess">Jeden z <see cref="T:System.Printing.PrintSystemDesiredAccess" /> wartości, które określają typ dostępu do kolejki wydruku, który wymaga programu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Printing.PrintQueue" /> przy użyciu określonego <see cref="T:System.Printing.PrintServer" />, kolejka nazwy, filtr właściwości i potrzeby dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj konstruktora z `propertyFilter` parametr zwiększa wydajność.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> to wartość, która może być zastosowane tylko do <see cref="T:System.Printing.PrintServer" /> obiektu nie <see cref="T:System.Printing.PrintQueue" /> obiektu. Na przykład <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddJob">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wstawia nowego zadania drukowania w kolejce.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli kolejka jest wstrzymana lub w stanie błędu zadania są drukowane po osiągnięciu górnej kolejki, więc to funkcję drukowania.  
  
 Inne sposoby wydruku w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] obejmują <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> metodę, która może być używany z lub bez konieczności otwierania okna dialogowego i wielu <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> i <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metody <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob () As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wstawia nowy (objęty nazwane) zadania drukowania, których zawartość znajduje się <see cref="T:System.Byte" /> tablicy w kolejce.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do zapisu w pliku buforu, które nie są automatycznie uwzględnione w określonych informacji o urządzeniu, [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] buforu. Oczywiście, musisz wiedzieć, czy plik buforu jest [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] lub [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]. Jeśli wolisz pracować z <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], można użyć <xref:System.Printing.PrintQueueStream> klasy zamiast tej metody.  
  
 Po <xref:System.Printing.PrintQueue.AddJob%2A> została wywołana metoda, należy napisać <xref:System.Byte> tablicy do <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> właściwość <xref:System.Printing.PrintSystemJobInfo> zwróconego przez <xref:System.Printing.PrintQueue.AddJob%2A> lub utworzeniu nie zadania drukowania. Ta tablica jest drukuje co w przypadku, gdy działa drukarki, a nie została wstrzymana.  
  
> [!CAUTION]
>  Jeśli <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> nie został zamknięty z <xref:System.IO.Stream.Close%2A> przed końcem wątku, w którym <xref:System.Printing.PrintQueue.AddJob%2A> jest wywoływana, a następnie <xref:System.InvalidOperationException> jest generowany, gdy wątek zakończy się, ponieważ wątek buforu nie może przejąć kontrolę nad <xref:System.IO.Stream> obiektu.  
  
 W tej kolejce wydruku [!INCLUDE[TLA#tla_gui](~/includes/tlasharptla-gui-md.md)], zadanie ma nazwę "Wydrukować dokument systemu". Aby podać inną nazwę zadania, należy użyć <xref:System.Printing.PrintQueue.AddJob%28System.String%29> przeciążenia.  
  
 Inne sposoby wydruku w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] obejmują <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> metodę, która może być używany z lub bez konieczności otwierania okna dialogowego i wielu <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> i <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metody <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Printing.PrintQueue.AddJob> do wysyłania <xref:System.Byte> tablicy do kolejki wydruku. Ten kod działa tylko z drukarek, które mogą wykrywać i wydrukować zwykłego tekstu. Niektóre z nich nie.  
  
 [!code-csharp[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addunnamedjob)]
 [!code-vb[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addunnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobName">Nazwa zadania drukowania.</param>
        <summary>Wstawia nowe zadanie drukowania, których zawartość znajduje się <see cref="T:System.Byte" /> tablicy w kolejce.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do zapisu w pliku buforu, które nie są automatycznie uwzględnione w określonych informacji o urządzeniu, [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] buforu. Oczywiście, musisz wiedzieć, czy plik buforu jest [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] lub [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]. Jeśli wolisz pracować z <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], można użyć <xref:System.Printing.PrintQueueStream> klasy zamiast tej metody.  
  
 Po <xref:System.Printing.PrintQueue.AddJob%2A> została wywołana metoda, należy napisać <xref:System.Byte> tablicy do <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> właściwość <xref:System.Printing.PrintSystemJobInfo> zwróconego przez <xref:System.Printing.PrintQueue.AddJob%2A> lub utworzeniu nie zadania drukowania. Ta tablica jest drukuje co w przypadku, gdy działa drukarki, a nie została wstrzymana.  
  
> [!CAUTION]
>  Jeśli <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> nie został zamknięty z <xref:System.IO.Stream.Close%2A> przed końcem wątku, w którym <xref:System.Printing.PrintQueue.AddJob%2A> jest wywoływana, a następnie <xref:System.InvalidOperationException> jest generowany, gdy wątek zakończy się, ponieważ wątek buforu nie może przejąć kontrolę nad <xref:System.IO.Stream> obiektu.  
  
 Inne sposoby wydruku w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] obejmują <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> metodę, która może być używany z lub bez konieczności otwierania okna dialogowego i wielu <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> i <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metody <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Printing.PrintQueue.AddJob%28System.String%29> można odczytać pliku do <xref:System.Byte> tablicy i wysyłać tablicy do kolejki wydruku. Ten kod zakłada, że plik o nazwie test.txt w folderze głównym dysku C:. Ten kod działa tylko z drukarek, które mogą wykrywać i wydrukować zwykłego tekstu. Niektóre z nich nie.  
  
 [!code-csharp[WriteToSpoolFile#AddNamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addnamedjob)]
 [!code-vb[WriteToSpoolFile#AddNamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="printTicket">Ustawienia zadania drukowania.</param>
        <summary>Wstawia nowe zadanie drukowania dla [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dokumentu do kolejki oraz zapewnia jej określoną nazwę i ustawienia.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz <xref:System.Printing.PrintQueue.AddJob%28System.String%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String, documentPath As String, fastCopy As Boolean) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobName">Nazwa zadania drukowania.</param>
        <param name="documentPath">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="fastCopy">
          <see langword="true" /> do buforowania szybko bez opinii strony strona postępu i weryfikowania, czy plik jest prawidłowy [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]; w przeciwnym razie <see langword="false" />.</param>
        <summary>Wstawia nowe zadanie drukowania dla [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dokumentu do kolejki, zapewnia jej określonej nazwy i określa, czy mają być weryfikowane.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fastCopy` jest `true`, musi być drukarki [Omówienie drukowania](~/docs/framework/wpf/advanced/printing-overview.md). Jeśli nie, <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> metoda zgłasza wyjątek.  
  
 Jeśli `fastCopy` jest `false`, a następnie nie jest konieczne używanie drukarki XPSDrv. [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] Plików dodawane do kolejki jest konwertowana na język opisu strony drukarki, takie jak PCL lub Postscript. Jednak tego rodzaju drukowanie nawiązuje połączenie [!INCLUDE[TLA#tla_com](~/includes/tlasharptla-com-md.md)]. Wywołanie [!INCLUDE[TLA2#tla_com](~/includes/tla2sharptla-com-md.md)] musi mieć wywołania wątku jednowątkowego apartamentu (<xref:System.Threading.ApartmentState.STA>) zamiast wielowątkowym apartamentu (<xref:System.Threading.ApartmentState.MTA>) jest to wartość domyślna w [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 2.0 lub nowszy. (Aby uzyskać więcej informacji na temat stany wątków i apartamentu zobacz [zarządzane i niezarządzane wątkowość](http://msdn.microsoft.com/library/db425c20-4b2f-4433-bf96-76071c7881e5), i <xref:System.Threading.ApartmentState>.) Istnieją dwa sposoby w ten sposób:  
  
-   Najprostszym sposobem jest dodanie <xref:System.STAThreadAttribute> (to znaczy "`[System.STAThreadAttribute()]`") powyżej pierwszy wiersz aplikacji `Main` — metoda (zazwyczaj "`static void Main(string[] args)`").  
  
-   Jeśli potrzebujesz Twojej `Main` stanu apartamentu wątku <xref:System.Threading.ApartmentState.MTA>, mogą znajdować się wywołanie <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> w oddzielnym wątku, w których stanu apartamentu ma ustawioną wartość <xref:System.Threading.ApartmentState.STA> z <xref:System.Threading.Thread.SetApartmentState%2A>. W poniższym przykładzie przedstawiono ten drugi sposób.  
  
> [!NOTE]
>  Nie można zastosować <xref:System.STAThreadAttribute> do dowolnej metody, z wyjątkiem `Main` i nie można użyć <xref:System.Threading.Thread.SetApartmentState%2A> dla `Main` wątku.  
  
 Inne sposoby wydruku w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] obejmują <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> metodę, która może być używany z lub bez konieczności otwierania okna dialogowego i wielu <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> i <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> metody <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> do przetwarzania wsadowego Drukowanie całości [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] pliki w katalogu.  
  
 [!code-csharp[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/csharp/VS_Snippets_Wpf/BatchPrintXPSFiles/CSharp/Program.cs#batchprintxpsfiles)]
 [!code-vb[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BatchPrintXPSFiles/visualbasic/program.vb#batchprintxpsfiles)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ApartmentState" />
        <altmember cref="T:System.STAThreadAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="documentPath">Ścieżka i nazwa dokumentu, który jest drukowany.</param>
        <param name="fastCopy">
          <see langword="true" /> do buforowania szybko bez opinii strony strona postępu i weryfikowania, czy plik jest prawidłowy [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]; w przeciwnym razie <see langword="false" />.</param>
        <param name="printTicket">Ustawienia zadania drukowania.</param>
        <summary>Wstawia nowe zadanie drukowania dla [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dokumentu do kolejki, umożliwia on określoną nazwę i ustawienia oraz określa, czy mają być weryfikowane.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> reprezentujący zadania drukowania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveragePagesPerMinute">
      <MemberSignature Language="C#" Value="public virtual int AveragePagesPerMinute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AveragePagesPerMinute" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AveragePagesPerMinute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AveragePagesPerMinute { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera szybkość drukarki w stron na minutę.</summary>
        <value>Średnia liczba stron drukowane na minutę drukarki.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public int ClientPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ClientPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ClientPrintSchemaVersion { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wersję [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <value>Wersja [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) w użyciu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) wersji wydanej w systemie Windows Vista to 1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public virtual string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Comment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Comment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Comment { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia komentarz dotyczący drukarki.</summary>
        <value>Komentarz dotyczący drukarki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Komentarz jest widoczna dla użytkowników na liście drukarek systemu Windows i na wspólnej okno dialogowe systemu Windows. Zawiera on informacje nie są zawarte w nazwę drukarki, modelu i lokalizacja właściwości, które są widoczne w tym samym miejscach; na przykład "zastrzeżony dla płacowego działu między 15: 00 i 16: 00." ( <xref:System.Printing.PrintQueue.Description%2A> Właściwości umożliwia przechowywanie informacji, które użytkownicy nie mogą wyświetlać, chyba że aplikacji powoduje, że jest ona widoczna.)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje bieżący właściwości <see cref="T:System.Printing.PrintQueue" /> obiektu, do rzeczywistych kolejki wydruku na serwerze wydruku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiany, które program wprowadza właściwości <xref:System.Printing.PrintQueue> obiektu nie faktycznie zastosowana aż do wykonuje program <xref:System.Printing.PrintQueue.Commit%2A> metody.  
  
 Metoda wymaga, aby <xref:System.Printing.PrintQueue> można utworzyć obiektu z <xref:System.Printing.PrintSystemDesiredAccess.AdministratePrinter> praw.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej metody podczas scalania dwóch biletów wydruku.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Niektóre właściwości nie można zatwierdzić.</exception>
        <exception cref="T:System.Printing.PrintCommitAttributesException">Niektóre właściwości nie można zatwierdzić.  
  
 \- lub -  
  
 <see cref="T:System.Printing.PrintQueue" /> Obiekt nie został utworzony z wystarczającymi prawami.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Refresh" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateXpsDocumentWriter">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Odwołanie do obiektu zawierającego wymiary obszaru strony, na którym można drukować urządzenia. Od czasu jego typu danych nie ma publicznego konstruktora, ten parametr jest przekazywany jako niezainicjowany.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu, otwiera Windows wspólnego okna dialogowego drukowania i zwraca <see langword="ref" /> (<see langword="ByRef" /> w języku Visual Basic) parametr, który reprezentuje informacje o obszarze obrazowania i wymiary nośnika.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Który zapisuje dane XPS do strumienia. Może to być <see langword="null" />. (Parametr <paramref name="documentImageableArea" /> jest <see langword="ref" /> [<see langword="ByRef" /> w języku Visual Basic] parametr, który został zainicjowany przez metodę, więc reprezentuje sekundy zwrócony element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek muszą celu kwartału cala pozostałych do wydrukowania miejsca wokół krawędzi każdej strony do uchwytu papieru w górę i przenieś ją do drukarki. W przeciwnym razie toneru czy każdą pogodę mechanizmu przepływu papieru. Obszaru, w którym można go wydrukować jest "obszar obrazowania."  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma publicznego konstruktora. W związku z tym zmiennej `documentImageableArea` musi być zadeklarowana i przypisane `null` , a następnie przekazywany do metody. Ta metoda Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Po wybrane drukarki, rozmiar papieru i orientację i zamknąć okno dialogowe użytkownik `documentImageableArea` punkty do rzeczywistego obiektu i jego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamyka okno dialogowe, jest zwracana wartość `null`. W rezultacie, zwracana wartość musi być zaznaczone dla `null` przez aplikację.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (System.Printing.PrintQueue printQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintQueue printQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintQueue ^ printQueue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
      </Parameters>
      <Docs>
        <param name="printQueue">Kolejki wydruku, aby wydrukować dokument XPS.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu i kojarzy ją z określoną kolejkę wydruku.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Zapisuje strumienia XPS.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej metody do tworzenia <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
 [!code-csharp[XpsPrint#PrintQueueSnip](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#printqueuesnip)]
 [!code-vb[XpsPrint#PrintQueueSnip](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#printqueuesnip)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref double width, ref double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(float64&amp; width, float64&amp; height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Double@,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef width As Double, ByRef height As Double) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(double % width, double % height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="height" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="width">Szerokość dokument XPS.</param>
        <param name="height">Wysokość dokument XPS.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu z określonym wymiarów.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Zapisuje strumienia XPS. Może to być <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Jeśli użytkownik anuluje lub zamyka okno dialogowe, jest zwracana wartość `null`. W rezultacie, zwracana wartość musi być zaznaczone dla `null` przez aplikację.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Nazwa zadania drukowania. Wygląda na to w interfejsie użytkownika systemu Windows drukowania.</param>
        <param name="documentImageableArea">Odwołanie do obiektu zawierającego wymiary obszaru strony, na którym można drukować urządzenia. Od czasu jego typu danych nie ma publicznego konstruktora, ten parametr jest przekazywany jako niezainicjowany.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu, otwiera Windows wspólnego okna dialogowego drukowania (i zawiera jego opis zadania) i zwraca <see langword="ref" /> (<see langword="ByRef" /> w języku Visual Basic) parametr, który reprezentuje informacje o obszarze obrazowania i wymiary nośnika .</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Który zapisuje dane XPS do strumienia. Może to być <see langword="null" />. (Parametr <paramref name="documentImageableArea" /> jest <see langword="ref" /> [<see langword="ByRef" /> w języku Visual Basic] parametr, który został zainicjowany przez metodę, więc reprezentuje sekundy zwrócony element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek muszą celu kwartału cala pozostałych do wydrukowania miejsca wokół krawędzi każdej strony do uchwytu papieru w górę i przenieś ją do drukarki. W przeciwnym razie toneru czy każdą pogodę mechanizmu przepływu papieru. Obszaru, w którym można go wydrukować jest "obszar obrazowania."  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma publicznego konstruktora. W związku z tym zmiennej `documentImageableArea` musi być zadeklarowana i przypisane `null` , a następnie przekazywany do metody. Ta metoda Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Po wybrane drukarki, rozmiar papieru i orientację i zamknąć okno dialogowe użytkownik `documentImageableArea` punkty do rzeczywistego obiektu i jego właściwości są inicjowane.  
  
 Jeśli użytkownik anuluje lub zamyka okno dialogowe, jest zwracana wartość `null`. W rezultacie, zwracana wartość musi być zaznaczone dla `null` przez aplikację.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection&amp;" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Odwołanie do obiektu zawierającego wymiary obszaru strony, na którym można drukować urządzenia. Od czasu jego typu danych nie ma publicznego konstruktora, ten parametr jest przekazywany jako niezainicjowany.</param>
        <param name="pageRangeSelection">Wartość, która określa, czy drukowanie wszystkich stron lub tylko zakresu określonego przez użytkownika.</param>
        <param name="pageRange">Zakres stron, który jest drukowana.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu, otwiera Windows wspólnego okna dialogowego drukowania, zawiera okno dialogowe z zakresu stron i opis zadania drukowania i zwraca <see langword="ref" /> (<see langword="ByRef" /> w języku Visual Basic) parametr, który reprezentuje informacje o obszar obrazowania i wymiary nośnika.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Który zapisuje dane XPS do strumienia. Może to być <see langword="null" />. (Parametry <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" />, i <paramref name="pageRange" /> są wszystkie <see langword="ref" /> [<see langword="ByRef" /> w języku Visual Basic] Parametry, które są inicjowane przez użytkownika i zwrócony po zamknięciu okna dialogowego, więc każdy reprezentuje dodatkowe zwrócony element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek muszą celu kwartału cala pozostałych do wydrukowania miejsca wokół krawędzi każdej strony do uchwytu papieru w górę i przenieś ją do drukarki. W przeciwnym razie toneru czy każdą pogodę mechanizmu przepływu papieru. Obszaru, w którym można go wydrukować jest "obszar obrazowania."  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma publicznego konstruktora. W związku z tym zmiennej `documentImageableArea` musi być zadeklarowana i przypisane `null` , a następnie przekazywany do metody. Ta metoda Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Użytkownik konfiguruje jego zadania drukowania w oknie dialogowym (w tym wybór drukarek, rozmiar papieru, orientację i zakres stron). Po zamknięciu okna dialogowego `pageRangeSelection` i `pageRange` wartości, i `documentImageableArea` wskazuje rzeczywistego obiektu, którego właściwości są zainicjowane.  
  
 Jeśli użytkownik anuluje lub zamyka okno dialogowe, jest zwracana wartość `null`. W rezultacie, zwracana wartość musi być zaznaczone dla `null` przez aplikację.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection&amp;" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Nazwa zadania drukowania. Wygląda na to w interfejsie użytkownika systemu Windows drukowania.</param>
        <param name="documentImageableArea">Odwołanie do obiektu zawierającego wymiary obszaru strony, na którym można drukować urządzenia. Od czasu jego typu danych nie ma publicznego konstruktora, ten parametr jest przekazywany jako niezainicjowany.</param>
        <param name="pageRangeSelection">Wartość, która określa, czy drukowanie wszystkich stron lub tylko zakresu określonego przez użytkownika.</param>
        <param name="pageRange">Zakres stron, który jest drukowana.</param>
        <summary>Tworzy <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> obiektu, otwiera Windows wspólnego okna dialogowego drukowania, zawiera okno dialogowe z zakresu stron i zwraca <see langword="ref" /> (<see langword="ByRef" /> w języku Visual Basic) parametr, który reprezentuje informacje o obszarze obrazowania i wymiary nośnika.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> Który zapisuje dane XPS do strumienia. Może to być <see langword="null" />. (Parametry <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" />, i <paramref name="pageRange" /> są wszystkie <see langword="ref" /> [<see langword="ByRef" /> w języku Visual Basic] Parametry, które są inicjowane przez użytkownika i zwrócony po zamknięciu okna dialogowego, więc każdy reprezentuje dodatkowe zwrócony element.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele drukarek muszą celu kwartału cala pozostałych do wydrukowania miejsca wokół krawędzi każdej strony do uchwytu papieru w górę i przenieś ją do drukarki. W przeciwnym razie toneru czy każdą pogodę mechanizmu przepływu papieru. Obszaru, w którym można go wydrukować jest "obszar obrazowania."  
  
 Typ <xref:System.Printing.PrintDocumentImageableArea> nie ma publicznego konstruktora. W związku z tym zmiennej `documentImageableArea` musi być zadeklarowana i przypisane `null` , a następnie przekazywany do metody. Ta metoda Wyświetla <xref:System.Windows.Controls.PrintDialog> wprowadzania danych przez użytkownika. Użytkownik konfiguruje jego zadania drukowania w oknie dialogowym (w tym wybór drukarek, rozmiar papieru, orientację i zakres stron). Po zamknięciu okna dialogowego `pageRangeSelection` i `pageRange` wartości, i `documentImageableArea` wskazuje rzeczywistego obiektu, którego właściwości są zainicjowane.  
  
 Jeśli użytkownik anuluje lub zamyka okno dialogowe, jest zwracana wartość `null`. W rezultacie, zwracana wartość musi być zaznaczone dla `null` przez aplikację.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentJobSettings">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobSettings CurrentJobSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintJobSettings CurrentJobSettings" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentJobSettings As PrintJobSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobSettings ^ CurrentJobSettings { System::Printing::PrintJobSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który zawiera ustawienia konfiguracji dla bieżącego zadania drukowania.</summary>
        <value>A <see cref="T:System.Printing.PrintJobSettings" /> wartość, która przechowuje ustawienia zadania obecnie drukowania. Te ustawienia obejmują opis zadania i odwołanie do zadania <see cref="T:System.Printing.PrintTicket" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Printing.PrintTicket" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket DefaultPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket DefaultPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ DefaultPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślne opcje drukarki skojarzony z tym <see cref="T:System.Printing.PrintQueue" />.</summary>
        <value>Wartość domyślna <see cref="T:System.Printing.PrintTicket" /> dla kolejki wydruku; lub <see langword="null" /> Jeśli wystąpił błąd w kolejce wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna <xref:System.Printing.PrintTicket> Określa opcje zadania drukowania, takie jak <xref:System.Printing.PrintTicket.CopyCount%2A>, <xref:System.Printing.PrintTicket.PageOrientation%2A>, <xref:System.Printing.PrintTicket.Duplexing%2A>, <xref:System.Printing.PrintTicket.Stapling%2A>i inne.  
  
 Każdy <xref:System.Printing.PrintQueue> zachowuje własną <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A>.  
  
 W normalnych warunkach <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> zwraca właściwość <xref:System.Printing.PrintTicket>.  Jeśli <xref:System.Printing.PrintQueue> wykrywa nieprawidłowy stan <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> zwraca `null`.  Jeśli <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> zwraca `null`, okno dialogowe informacyjną użytkownika wystąpił błąd dla aplikacji powinien być wyświetlany w tej kolejce wydruku i że zadanie drukowania powinien zostać uruchomiony ponownie dane wyjściowe kierowane do innej kolejki wydruku.  
  
 Pobierania lub ustawiania <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> nie można zweryfikować właściwości <xref:System.Printing.PrintTicket>.  <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> Metody można użyć do zweryfikowania <xref:System.Printing.PrintTicket>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości podczas testowania możliwości drukarki i konfigurowania zadania drukowania, aby móc korzystać z nich.  
  
 [!code-cpp[XpsCreate#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.UserPrintTicket" />
        <altmember cref="P:System.Printing.PrintQueue.DefaultPriority" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPriority">
      <MemberSignature Language="C#" Value="public virtual int DefaultPriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultPriority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPriority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DefaultPriority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślnego priorytetu nadawanego każdego nowego zadania drukowania, dodane do kolejki.</summary>
        <value>Domyślny priorytet dodane do kolejki zadań drukowania. Możliwe wartości z zakresu od 1 do 99. Domyślnym ustawieniem jest 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Priorytet zadania drukowania może zostać zmieniony przez użytkowników, wejdzie kolejki wydruku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera opis kolejki wydruku.</summary>
        <value>Opis kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia kolejki, opis domyślnie trzech części ciąg, który składa się z nazwy kolejki, modelu i lokalizacja rozdzielonych przecinkami. Kontrast <xref:System.Printing.PrintQueue.Description%2A> właściwości o <xref:System.Printing.PrintQueue.Comment%2A> właściwości, które są widoczne dla użytkowników na liście drukarki i faksy i wspólnego okna dialogowego drukowania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pełną nazwę kolejki.</summary>
        <value>Pełna nazwa kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla kolejek wydruku na lokalnym serwerze wydruku, wartość tej właściwości jest identyczna jak <xref:System.Printing.PrintQueue.Name%2A>, w przeciwnym razie zawiera pełną nazwą UNC (Universal Naming Convention).  
  
 <xref:System.Printing.PrintQueue> Obiekt ma również zapisywalny <xref:System.Printing.PrintQueue.Name%2A> i <xref:System.Printing.PrintQueue.ShareName%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości podczas scalania dwóch biletów wydruku.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo GetJob (int jobId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo GetJob(int32 jobId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetJob (jobId As Integer) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ GetJob(int jobId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="jobId">Liczba zadań w kolejce.</param>
        <summary>Pobiera zadania drukowania z określonym identyfikatorem.</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> , który określa właściwości zadania i jego stan.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również użyć <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> metody do takiej obsługi.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej metody podczas diagnozowania problemu z zadania drukowania.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilities">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera <see cref="T:System.Printing.PrintCapabilities" /> obiekt, który identyfikuje możliwości drukarka lub urządzenie, takie jak czy drukuje w kolorze lub jest w stanie druku dwustronnego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilities () As PrintCapabilities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera <see cref="T:System.Printing.PrintCapabilities" /> obiektu, który identyfikuje możliwości drukarki.</summary>
        <returns>A <see cref="T:System.Printing.PrintCapabilities" /> obiekt określający co drukarki jest i nie może wykonać, takich jak dwustronnego skopiowanie lub zszywania automatycznego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia użycie tej metody podczas scalania dwóch biletów wydruku.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <see cref="T:System.Printing.PrintCapabilities" /> Nie można pobrać obiektu.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">uprawnienia można pobrać możliwości drukowania. Wyliczenie skojarzone: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities(System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Bilet wydruku stanowi podstawę, w którym są zgłaszane możliwości drukowania.</param>
        <summary>Pobiera <see cref="T:System.Printing.PrintCapabilities" /> obiektu, który identyfikuje możliwości drukarki.</summary>
        <returns>A <see cref="T:System.Printing.PrintCapabilities" /> obiekt określający co drukarki jest i nie może wykonać, takich jak dwustronnego skopiowanie lub zszywania automatycznego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintTicket> Parametr jest używany jako podstawa, na których chcesz utworzyć <xref:System.Printing.PrintCapabilities> obiektu. Załóżmy na przykład, drukarki obsługiwane tylko A typów nośników i B z pojemnik wejściowy 1 i obsługiwane tylko typ nośnika C z pojemnik wejściowy 2. Jeśli `printTicket` określony parametr wejściowy bin 1, a następnie <xref:System.Printing.PrintCapabilities> obiekt, który jest zwracany obejmie wszystkie typy nośnika trzy, ale rozpoczną przesyłanie raportów typu C jako "ograniczone." Jeśli `printTicket` określony parametr wejściowy bin 2, a następnie <xref:System.Printing.PrintCapabilities> obiekt, który jest zwracany obejmie wszystkie typy nośnika trzy, ale rozpoczną przesyłanie raportów typy A i B, jak "ograniczenia". Zobacz [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) Aby uzyskać więcej informacji na temat ograniczeń.  
  
 Jeśli `printTicket` jest `null`, <xref:System.Printing.PrintQueue.UserPrintTicket%2A> jest używany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <see cref="T:System.Printing.PrintCapabilities" /> Nie można pobrać obiektu.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="printTicket" /> nie jest poprawnie sformułowany.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">uprawnienia można pobrać możliwości drukowania. Wyliczenie skojarzone: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilitiesAsXml">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera <see cref="T:System.IO.MemoryStream" /> obiekt, który określa strumienia możliwości drukarki w formacie XML, który jest zgodny z [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schemat XML, używany jest nazywany "Elementu PrintCapabilities," część [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) systemu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilitiesAsXml () As MemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera <see cref="T:System.IO.MemoryStream" /> obiekt, który określa strumienia możliwości drukarki w formacie XML, który jest zgodny z [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <returns>A <see cref="T:System.IO.MemoryStream" /> określenie możliwości drukarki przy użyciu schematu XML "Elementu PrintCapabilities," część [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) systemu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">Nie można pobrać możliwości drukowania.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">uprawnienia można pobrać możliwości drukowania. Wyliczenie skojarzone: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml(System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Bilet wydruku stanowi podstawę, w którym są zgłaszane możliwości drukowania.</param>
        <summary>Pobiera <see cref="T:System.IO.MemoryStream" /> obiekt, który określa format możliwości drukarki w formacie XML, który jest zgodny z [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <returns>A <see cref="T:System.IO.MemoryStream" /> określenie możliwości drukarki przy użyciu schematu XML "Elementu PrintCapabilities," część [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) systemu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintTicket> Parametr jest używany jako podstawa, na których chcesz utworzyć możliwości drukowania XML. Załóżmy na przykład, drukarki obsługiwane tylko A typów nośników i B z pojemnik wejściowy 1 i obsługiwane tylko typ nośnika C z pojemnik wejściowy 2. Jeśli `printTicket` określony parametr wejściowy bin 1, a następnie obejmuje wszystkie typy nośnika trzy możliwości drukowania XML, który jest zwracany, ale rozpoczną przesyłanie raportów typu C jako "ograniczone." Jeśli `printTicket` określony parametr wejściowy bin 2, a następnie obejmuje wszystkie typy nośnika trzy możliwości drukowania XML, który jest zwracany, ale rozpoczną przesyłanie raportów typy A i B, jak "ograniczenia". Zobacz [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) Aby uzyskać więcej informacji na temat ograniczeń.  
  
 Jeśli `printTicket` jest `null`, <xref:System.Printing.PrintQueue.UserPrintTicket%2A> jest używany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Nie można pobrać możliwości drukowania.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="printTicket" /> nie jest poprawnie sformułowany.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">uprawnienia można pobrać możliwości drukowania. Wyliczenie skojarzone: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintJobInfoCollection">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintJobInfoCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintJobInfoCollection () As PrintJobInfoCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintJobInfoCollection ^ GetPrintJobInfoCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kolekcję zawierającą <see cref="T:System.Printing.PrintSystemJobInfo" /> obiekt dla każdego zadania w kolejce.</summary>
        <returns>Zwraca <see cref="T:System.Printing.PrintJobInfoCollection" /> z <see cref="T:System.Printing.PrintSystemJobInfo" /> obiektów. Jest on dostępny dla każdego zadania w kolejce.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia użycie tej metody, podczas wykonywania tego samego działania na każde zadanie w kolejce.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPaperProblem">
      <MemberSignature Language="C#" Value="public bool HasPaperProblem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPaperProblem" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasPaperProblem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasPaperProblem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasPaperProblem { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, jeśli drukarka jest występuje problem nieokreślony papieru.</summary>
        <value>
          <see langword="true" /> w przypadku problemu nieokreślony papieru; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 <xref:System.Printing.PrintQueue> Obiekt ma również <xref:System.Printing.PrintQueue.IsPaperJammed%2A> i <xref:System.Printing.PrintQueue.IsOutOfPaper%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasToner">
      <MemberSignature Language="C#" Value="public bool HasToner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasToner" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasToner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasToner As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasToner { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy toneru drukarki.</summary>
        <value>
          <see langword="true" /> Jeśli bieżąca drukarka ma toneru; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niektórzy producenci drukarek może używać tego sygnału, aby wskazać, że ten toneru nie jest niski. Inne osoby mogą go użyć do wskazują, że z tonerem jest obecny i prawidłowo wstawionego podczas korzystania z <xref:System.Printing.PrintQueue.IsTonerLow%2A> informujące o tym toneru niski.  
  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintServer HostingPrintServer { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HostingPrintServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HostingPrintServer As PrintServer" />
      <MemberSignature Language="C++ CLI" Value="public:  virtual property System::Printing::PrintServer ^ HostingPrintServer {  public:&#xA;System::Printing::PrintServer ^ get(); protected:&#xA; void set(System::Printing::PrintServer ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia (chronionej) serwera wydruku, która kontroluje kolejki wydruku.</summary>
        <value>Nazwa i inne właściwości <see cref="T:System.Printing.PrintServer" /> , który jest hostem kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej właściwości można ustawić tylko przez klasy, która jest pochodną <xref:System.Printing.PrintQueue> ponieważ metody ustawiającej właściwości `protected`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InPartialTrust">
      <MemberSignature Language="C#" Value="public bool InPartialTrust { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPartialTrust" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.InPartialTrust" />
      <MemberSignature Language="VB.NET" Value="Public Property InPartialTrust As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InPartialTrust { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy kolejka działa w trybie częściowo zaufany, wyższy poziom zaufania.</summary>
        <value>
          <see langword="true" /> Jeśli kolejka działa w trybie częściowo zaufany; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Printing.PrintQueue.InPartialTrust%2A> właściwość jest `true`, program nie może utworzyć <xref:System.Printing.PrintQueue> obiekt, który reprezentuje tę drukarkę, chyba że użytkownik ma pełne uprawnienia drukowania do drukarek.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InternalDispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Printing.PrintQueue" /> i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBidiEnabled">
      <MemberSignature Language="C#" Value="public bool IsBidiEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBidiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBidiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBidiEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy włączono komunikację dwukierunkową z drukarką.</summary>
        <value>
          <see langword="true" /> Jeśli włączono komunikację dwukierunkową z drukarką; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy urządzenie drukowania jest zajęty.</summary>
        <value>
          <see langword="true" /> Jeśli urządzenie jest zajęta; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zajęty nie musi oznaczać, że to przetwarzanie zadania drukowania. Jeśli urządzenie jest połączenie drukarki/faksu/kopiarki, następnie może być Faksowanie lub kopiowania. Porównaj z <xref:System.Printing.PrintQueue.IsProcessing%2A> właściwości.  
  
 Jeśli urządzenie nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDevQueryEnabled">
      <MemberSignature Language="C#" Value="public bool IsDevQueryEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDevQueryEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDevQueryEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDevQueryEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejki drukarki i dokumentów konfiguracje nie są zgodne, przechowuje dokumenty.</summary>
        <value>
          <see langword="true" /> Jeśli kolejka zawiera niedopasowane konfiguracji; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirect">
      <MemberSignature Language="C#" Value="public bool IsDirect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirect" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDirect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirect { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka drukuje bezpośrednio do drukarki lub buforowanie dokumentów pierwszy, a następnie drukuje je.</summary>
        <value>
          <see langword="true" /> Jeśli kolejka drukuje bezpośrednio do drukarki; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej właściwości można ustawić tylko za pośrednictwem wspólnego okno dialogowe systemu Windows.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDoorOpened">
      <MemberSignature Language="C#" Value="public bool IsDoorOpened { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDoorOpened" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDoorOpened" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDoorOpened As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDoorOpened { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drzwi są otwarte na drukarce.</summary>
        <value>
          <see langword="true" /> Jeśli drzwi są otwarte. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="C#" Value="public bool IsHidden { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHidden" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsHidden" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHidden As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHidden { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka wydruku jest ukryty w interfejsie użytkownika aplikacji.</summary>
        <value>
          <see langword="true" /> Jeśli kolejka wydruku jest ukryty w interfejsie użytkownika systemu Windows; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użytkownik nie należy automatycznie ukrywać kolejki wydruku po ustawieniu tej właściwości na `true`. Program nadal należy wykonać kroki, aby upewnić się, że nie ma żadnych Lista kolejek w interfejsie programu.  
  
 Nie można ukryć kolejek wydruku w interfejsie użytkownika systemu Windows, takich jak drukarki i faksy listy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInError { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka lub urządzenie jest w stanie błędu.</summary>
        <value>
          <see langword="true" /> Jeśli urządzenie jest w stanie błędu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitializing">
      <MemberSignature Language="C#" Value="public bool IsInitializing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitializing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInitializing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitializing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitializing { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy inicjowanie drukarki sam.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest inicjowany; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIOActive">
      <MemberSignature Language="C#" Value="public bool IsIOActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIOActive" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsIOActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIOActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIOActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest odbieranie lub wysyłanie danych lub sygnałów.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest odbieranie lub wysyłanie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManualFeedRequired">
      <MemberSignature Language="C#" Value="public bool IsManualFeedRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManualFeedRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsManualFeedRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManualFeedRequired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka powinna ręcznie podawanego papieru dla bieżącego zadania drukowania.</summary>
        <value>
          <see langword="true" /> Jeśli trzeba drukarki można ręcznie podawane papieru. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotAvailable">
      <MemberSignature Language="C#" Value="public bool IsNotAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsNotAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotAvailable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest dostępna.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest dostępna; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOffline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffline { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w trybie offline.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest w trybie offline; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfMemory">
      <MemberSignature Language="C#" Value="public bool IsOutOfMemory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfMemory" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfMemory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfMemory { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest za mało pamięci.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest za mało pamięci; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfPaper">
      <MemberSignature Language="C#" Value="public bool IsOutOfPaper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfPaper" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfPaper As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfPaper { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka wymaga ponownego załadowania papier rozmiar wymagany dla bieżącego zadania.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka musi zostać ponownie załadowana; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutputBinFull">
      <MemberSignature Language="C#" Value="public bool IsOutputBinFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutputBinFull" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutputBinFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutputBinFull { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy obszar wyjściowy drukarki jest przepełnienia.</summary>
        <value>
          <see langword="true" /> Jeśli obszar danych wyjściowych drukarki jest pełny; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperJammed">
      <MemberSignature Language="C#" Value="public bool IsPaperJammed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperJammed" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaperJammed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaperJammed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaperJammed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący arkusz papieru utkwiła w drukarce.</summary>
        <value>
          <see langword="true" /> Jeśli dokument jest zablokowany; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy została wstrzymana kolejki wydruku.</summary>
        <value>
          <see langword="true" /> Jeśli została wstrzymana kolejki wydruku; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPendingDeletion">
      <MemberSignature Language="C#" Value="public bool IsPendingDeletion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPendingDeletion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPendingDeletion As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPendingDeletion { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w trakcie usuwania zadania drukowania.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest usunięcie zadania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerSaveOn">
      <MemberSignature Language="C#" Value="public bool IsPowerSaveOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerSaveOn" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerSaveOn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerSaveOn { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w trybie oszczędzania energii.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest zasilania zapisać tryb; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinting { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy zadania drukowania.</summary>
        <value>
          <see langword="true" /> Jeśli zadanie drukowania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProcessing">
      <MemberSignature Language="C#" Value="public bool IsProcessing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsProcessing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsProcessing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsProcessing { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest przetwarzanie zadania drukowania.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest przetwarzanie zadania drukowania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niektórzy producenci drukarek obsługują tego sygnału zamiast mniej konkretnym <xref:System.Printing.PrintQueue.IsBusy%2A>.  
  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublished">
      <MemberSignature Language="C#" Value="public bool IsPublished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublished" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPublished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublished { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest widoczny dla innych użytkowników sieci.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest widoczny dla innych użytkowników sieci. w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQueued" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsQueued" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsQueued As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsQueued { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka może obsługiwać kolejki z więcej niż jedno zadanie drukowania w nim naraz.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka może obsługiwać kolejkowania wielu zadań drukowania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRawOnlyEnabled">
      <MemberSignature Language="C#" Value="public bool IsRawOnlyEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRawOnlyEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRawOnlyEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRawOnlyEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejki wydruku, mogą używać EMF (Enhanced plik Meta) umożliwia szybsze przepływ danych drukowania aplikacji do buforu systemu Windows.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka nie można użyć drukowanie EMF; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServerUnknown">
      <MemberSignature Language="C#" Value="public bool IsServerUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServerUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsServerUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsServerUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsServerUnknown { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest w stanie błędu.</summary>
        <value>
          <see langword="true" /> Jeśli w drukarce jest w stanie błędu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest dostępny do użytku przez inne komputery w sieci.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest udostępniana; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej właściwości można ustawić tylko z typowych okno dialogowe systemu Windows.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTonerLow">
      <MemberSignature Language="C#" Value="public bool IsTonerLow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTonerLow" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsTonerLow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTonerLow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTonerLow { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka zaczyna brakować toneru.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka zaczyna brakować toneru; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 <xref:System.Printing.PrintQueue> Obiekt ma również <xref:System.Printing.PrintQueue.HasToner%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWaiting">
      <MemberSignature Language="C#" Value="public bool IsWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWaiting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWaiting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWaiting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWaiting { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka jest oczekiwanie na zadanie ma zostać dodana.</summary>
        <value>
          <see langword="true" /> Jeśli kolejka jest oczekiwanie na zadanie. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWarmingUp">
      <MemberSignature Language="C#" Value="public bool IsWarmingUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWarmingUp" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWarmingUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWarmingUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWarmingUp { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest rozgrzewania.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest rozgrzewanie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXpsDevice">
      <MemberSignature Language="C#" Value="public bool IsXpsDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXpsDevice" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsXpsDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXpsDevice As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXpsDevice { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy sterownik drukarki jest oparty na [Omówienie drukowania](~/docs/framework/wpf/advanced/printing-overview.md) więc używa [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] jako jego języka opisu strony.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka używa [Omówienie drukowania](~/docs/framework/wpf/advanced/printing-overview.md); w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepPrintedJobs">
      <MemberSignature Language="C#" Value="public bool KeepPrintedJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepPrintedJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeepPrintedJobs As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepPrintedJobs { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolejka jest zapisanie pliku języka drukarki zamiast usuwania następującego drukowania.</summary>
        <value>
          <see langword="true" /> Jeśli kolejka jest zapisanie pliku języka drukarki; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual string Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia drukarki fizycznej lokalizacji.</summary>
        <value>Drukarki fizycznej lokalizacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości do wyświetlenia podzbioru dostępnych kolejek wydruku.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public static int MaxPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxPrintSchemaVersion { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera najnowsze numer wersji możliwe [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) używanego dla kolejki.</summary>
        <value>Numer wersji najnowszej [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) używanego dla kolejki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wersja [schematu drukowania](http://go.microsoft.com/fwlink/?LinkId=186397) dostępne w systemie Windows Vista to 1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeAndValidatePrintTicket">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scala dwie <see cref="T:System.Printing.PrintTicket" />s i gwarantuje, że powstałe w ten sposób <see cref="T:System.Printing.PrintTicket" /> jest prawidłowa i nie wymaga żadnej funkcji drukowania, która nie obsługuje drukarki.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Pierwszy bilet wydruku.</param>
        <param name="deltaPrintTicket">Drugi bilet wydruku. Może to być <see langword="null" />.</param>
        <summary>Scala dwie <see cref="T:System.Printing.PrintTicket" />s i gwarantuje, że powstałe w ten sposób <see cref="T:System.Printing.PrintTicket" /> jest prawidłowa i nie wymaga żadnej funkcji drukowania, która nie obsługuje drukarki.</summary>
        <returns>A <see cref="T:System.Printing.ValidationResult" /> zawiera scalone <see cref="T:System.Printing.PrintTicket" /> oraz czy ustawienia musiały zostać zmienione w celu zagwarantowania efektywność.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda tworzy bilet wydruku działało; oznacza to, że bilet, który nie jest proszony o funkcji drukowania drukarka nie obsługuje. Metoda najpierw sprawdza, czy dwa wejściowych biletów wydruku przed [drukowanie schematu](http://go.microsoft.com/fwlink/?LinkId=186397). Jeśli jest albo nieprawidłowa, zwracany jest wyjątek.  
  
 Dwa biletów następnie zostaną scalone. Jeśli mają różne wartości dla określonej właściwości następnie wynikowy scalony biletu początkowo używa wartości delta biletu.  
  
 Scalone biletu następnie porównywany rzeczywiste możliwości drukarki. Jeśli ustawienia w bilecie są niezgodne z możliwości drukarki, a następnie sterownika drukarki zmiany tych ustawień za pomocą niezależnie od reguł, które chce. Zazwyczaj zastępuje wymiar użytkownika lub drukarki domyślnej wartości ustawienia. Źródło sterownika SUBSTITUTE może mieć wartości nie jest tym samym biletu jako `basePrintTicket`, scalonych biletu może być niektórych ustawień, które różnią się od obu wejściowych biletów. Jeśli ma sterownika drukarki zmienić ustawienia, zgłaszany jest ten fakt <xref:System.Printing.ValidationResult.ConflictStatus%2A> właściwość <xref:System.Printing.ValidationResult>.  
  
 Aby scalić i sprawdzić poprawności na podstawie ustawień domyślnych kolejki wydruku, należy ustawić `basePrintTicket` do <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> lub <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 `deltaPrintTicket` Parametr może być `null`, w którym to przypadku `basePrintTicket` jest zweryfikowany, sprawdzane pod kątem żywotność i zwracany, prawdopodobnie zmiany.  
  
 Z tego przeciążenia <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>, oba `deltaPrintTicket` i <xref:System.Printing.PrintTicket> w <xref:System.Printing.ValidationResult> który jest zwracany ma szeroki zakres zadania. Aby określić przeciążenie tej metody należy użyć innego zasięgu.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej metody scalić dwóch biletów wydruku i reagowanie na <xref:System.Printing.ValidationResult> który jest zwracany.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Co najmniej jeden wejściowy biletów wydruku jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basePrintTicket" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.Printing.PrintQueueException">Sprawdzanie poprawności, łączenie i żywotność sprawdzanie operacji nie powiodło się.</exception>
      </Docs>
    </Member>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket, System.Printing.PrintTicketScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket, valuetype System.Printing.PrintTicketScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket,System.Printing.PrintTicketScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket, scope As PrintTicketScope) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket, System::Printing::PrintTicketScope scope);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="scope" Type="System.Printing.PrintTicketScope" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Pierwszy bilet wydruku.</param>
        <param name="deltaPrintTicket">Drugi bilet wydruku. Może to być <see langword="null" />.</param>
        <param name="scope">Wartość wskazującą czy zakres <c>deltaPrintTicket</c>oraz zakres wydruku bilet zwracane w <see cref="T:System.Printing.ValidationResult" />, jest strony, dokumentu lub całego zadania.</param>
        <summary>Scala dwie <see cref="T:System.Printing.PrintTicket" />s i gwarantuje, że powstałe w ten sposób <see cref="T:System.Printing.PrintTicket" /> jest prawidłowy, nie wymaga żadnej funkcji drukowania nie obsługuje drukarki i jest ograniczone do określonego zakresu.</summary>
        <returns>A <see cref="T:System.Printing.ValidationResult" /> zawiera scalone <see cref="T:System.Printing.PrintTicket" /> oraz czy ustawienia musiały zostać zmienione w celu zagwarantowania efektywność.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda tworzy bilet wydruku działało; oznacza to, że bilet, który nie jest proszony o funkcji drukowania drukarka nie obsługuje. Metoda najpierw sprawdza, czy dwa wejściowych biletów wydruku przed [drukowanie schematu](http://go.microsoft.com/fwlink/?LinkId=186397). Jeśli jest albo nieprawidłowa, zwracany jest wyjątek.  
  
 Dwa biletów następnie zostaną scalone. Jeśli mają różne wartości dla określonej właściwości następnie wynikowy scalony biletu początkowo używa wartości delta biletu.  
  
 Scalone biletu następnie porównywany rzeczywiste możliwości drukarki. Jeśli ustawienia w bilecie są niezgodne z możliwości drukarki, a następnie sterownika drukarki zmiany tych ustawień za pomocą niezależnie od reguł, które chce. Zazwyczaj zastępuje wymiar użytkownika lub drukarki domyślnej wartości ustawienia. Źródło sterownika SUBSTITUTE może mieć wartości nie jest tym samym biletu jako `basePrintTicket`, scalonych biletu może być niektórych ustawień, które różnią się od obu wejściowych biletów. Jeśli ma sterownika drukarki zmienić ustawienia, zgłaszany jest ten fakt <xref:System.Printing.ValidationResult.ConflictStatus%2A> właściwość <xref:System.Printing.ValidationResult>.  
  
 Aby scalić i sprawdzić poprawności na podstawie ustawień domyślnych kolejki wydruku, należy ustawić `basePrintTicket` do <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> lub <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 `deltaPrintTicket` Parametr może być `null`, w którym to przypadku `basePrintTicket` jest zweryfikowany, sprawdzane pod kątem żywotność i zwracany, prawdopodobnie zmiany.  
  
 Jeśli `scope` jest zadanie, zwracana w bilecie wydruku <xref:System.Printing.ValidationResult> mogą obejmować [drukowanie schematu](http://go.microsoft.com/fwlink/?LinkId=186397) parametry z prefiksami zadania, dokumentów i strony. Jeśli `scope` jest dokumentu, a następnie ustawienia dla zadania w `deltaPrintTicket` są ignorowane i zwrócony biletu mogą zawierać parametrów z dokumentu i prefiksy strony. Jeśli `scope` jest strony, a następnie ustawienia dla zadania i ustawienia poszczególnych dokumentów w `deltaPrintTicket` są ignorowane i zwrócony biletu może zawierać parametry prefiksie strony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Co najmniej jeden wejściowy biletów wydruku jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basePrintTicket" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="scope" /> Parametru nie ma prawidłowej <see cref="T:System.Printing.PrintTicketScope" /> wartość.</exception>
        <exception cref="T:System.Printing.PrintQueueException">Sprawdzanie poprawności, łączenie i żywotność sprawdzanie operacji nie powiodło się.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override sealed string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę kolejki wydruku.</summary>
        <value>Nazwa kolejki wydruku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Obiekt ma również tylko do odczytu <xref:System.Printing.PrintQueue.FullName%2A> właściwości i zapisu <xref:System.Printing.PrintQueue.ShareName%2A> właściwości.  
  
 W przypadku kolejek na lokalnym serwerze wydruku <xref:System.Printing.PrintQueue.Name%2A> i <xref:System.Printing.PrintQueue.FullName%2A> są takie same.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości do wyświetlenia podzbioru dostępnych kolejek wydruku.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedUserIntervention">
      <MemberSignature Language="C#" Value="public bool NeedUserIntervention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedUserIntervention" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NeedUserIntervention As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NeedUserIntervention { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka powinna zauważone przez człowieka.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka wymaga uwagi człowieka; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfJobs">
      <MemberSignature Language="C#" Value="public virtual int NumberOfJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NumberOfJobs" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NumberOfJobs As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int NumberOfJobs { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera całkowitą liczbę zadań wyrównana w kolejce wydruku.</summary>
        <value>Liczba zadań w kolejce.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PagePunt">
      <MemberSignature Language="C#" Value="public bool PagePunt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PagePunt" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PagePunt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagePunt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PagePunt { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy drukarka jest do drukowania bieżącej strony.</summary>
        <value>
          <see langword="true" /> Jeśli drukarka jest nie można wydrukować bieżącą stronę; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli drukarka nie obsługuje sygnał o tym, co oznacza, ta właściwość jest zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Pause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wstrzymuje kolejkę wydruku. Pozostaje on wstrzymany do czasu <see cref="M:System.Printing.PrintQueue.Resume" /> jest wykonywana.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można wstrzymać drukarki.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PrintingIsCancelled">
      <MemberSignature Language="C#" Value="public bool PrintingIsCancelled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintingIsCancelled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintingIsCancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PrintingIsCancelled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy bieżące zadanie drukowania zostało anulowane.</summary>
        <value>
          <see langword="true" /> Jeśli trwa anulowanie zadania drukowania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Priority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia priorytet kolejki wydruku względem innych kolejki wydruku, które są obsługiwane przez ten sam serwer wydruku, które korzystają z tej samej drukarki fizycznej.</summary>
        <value>Priorytet dla kolejki wydruku. Możliwe wartości to od 1 do 99. Domyślnym ustawieniem jest 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Natomiast tę właściwość z <xref:System.Printing.PrintQueue.DefaultPriority%2A> właściwość, która dotyczy względny priorytet zadania drukowania w kolejce.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public virtual void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Purge ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Purge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie zadania w kolejce wydruku.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można usunąć niektórych zadań drukowania z kolejki.</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueAttributes">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueAttributes QueueAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueAttributes QueueAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueAttributes As PrintQueueAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueAttributes QueueAttributes { System::Printing::PrintQueueAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera właściwości kolejki wydruku.</summary>
        <value>Bitowe połączenie <see cref="T:System.Printing.PrintQueueAttributes" /> wartości wyliczenia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDriver">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintDriver QueueDriver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintDriver QueueDriver" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueDriver" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueueDriver As PrintDriver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintDriver ^ QueueDriver { System::Printing::PrintDriver ^ get(); void set(System::Printing::PrintDriver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintDriver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia sterownika drukarki dla kolejki.</summary>
        <value>
          <see cref="T:System.Printing.PrintDriver" /> Używającej kolejki.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePort">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintPort QueuePort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintPort QueuePort" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePort As PrintPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintPort ^ QueuePort { System::Printing::PrintPort ^ get(); void set(System::Printing::PrintPort ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintPort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia port, który korzysta z kolejki.</summary>
        <value>
          <see cref="T:System.Printing.PrintPort" /> Przypisany do kolejki wydruku.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePrintProcessor">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintProcessor QueuePrintProcessor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintProcessor QueuePrintProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePrintProcessor As PrintProcessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintProcessor ^ QueuePrintProcessor { System::Printing::PrintProcessor ^ get(); void set(System::Printing::PrintProcessor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintProcessor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia procesora wydruku, który korzysta z kolejki.</summary>
        <value>
          <see cref="T:System.Printing.PrintProcessor" /> Używanego kolejki, takie jak WinPrint lub ModiPrint.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueStatus QueueStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueStatus QueueStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueStatus As PrintQueueStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueStatus QueueStatus { System::Printing::PrintQueueStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która reprezentuje stan drukarki. Obejmują one "rozgrzewanie," "Inicjowanie", "Drukowanie" i inne.</summary>
        <value>Bieżący <see cref="T:System.Printing.PrintQueueStatus" /> wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości w ramach badania wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueattributes)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueattributes)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualizuje właściwości <see cref="T:System.Printing.PrintQueue" /> obiektu wartościami z drukarką i narzędzie kolejki wydruku, które działają na komputerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiany powoduje w programie <xref:System.Printing.PrintQueue> właściwości obiektu są utracone podczas <xref:System.Printing.PrintQueue.Refresh%2A> wykonuje, chyba że zostały one zapisane do drukarki i kolejki wydruku z <xref:System.Printing.PrintQueue.Commit%2A>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak przy użyciu tej metody jako część ankietę wszystkie drukarki dla stanu może zawierać błąd.  
  
 [!code-cpp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#surveyqueues)]
 [!code-csharp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#surveyqueues)]
 [!code-vb[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#surveyqueues)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można odświeżyć niektórych właściwości.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Resume();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia ponownie kolejki wydruku, który został wstrzymany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia użycie tej metody na wznowienie wstrzymanego kolejki wydruku.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Nie można wznowić drukarki.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Pause" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCompletedJobsFirst">
      <MemberSignature Language="C#" Value="public bool ScheduleCompletedJobsFirst { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScheduleCompletedJobsFirst" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScheduleCompletedJobsFirst As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScheduleCompletedJobsFirst { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wydruku zadań wykonanych procesów buforowania przed zadaniami, które nie mają pełni buforowane, nawet jeśli jego wprowadzone kolejki pierwszy lub mają wyższy priorytet.</summary>
        <value>
          <see langword="true" /> Jeśli wydruku zadań wykonanych procesów buforowania przed zadaniami, które nie zostały całkowicie buforowane; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorFile">
      <MemberSignature Language="C#" Value="public virtual string SeparatorFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SeparatorFile" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.SeparatorFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SeparatorFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SeparatorFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę i nazwę pliku, który dodaje się na początku każdego zadania drukowania.</summary>
        <value>Ścieżka i nazwa pliku separatora.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj jest to plik jednostronicowej umożliwia łatwiejsze do oddzielania danych wyjściowych różnych zadań drukowania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShareName">
      <MemberSignature Language="C#" Value="public virtual string ShareName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShareName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ShareName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShareName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ShareName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę drukarki, która jest widoczna dla użytkowników w sieci, gdy są one udostępniane.</summary>
        <value>Publiczna nazwa drukarki udostępnionej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Obiekt ma również tylko do odczytu <xref:System.Printing.PrintQueue.FullName%2A> właściwości i zapisu <xref:System.Printing.PrintQueue.Name%2A> właściwości. W przypadku kolejek na lokalnym serwerze wydruku te właściwości mają taką samą wartość.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int StartTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property StartTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int StartTimeOfDay { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia najwcześniejszą godzinę, wyrażone jako liczba minut po północy uniwersalny czas koordynowany (UTC) (również o nazwie uniwersalny Greenwich [GMT]), że drukarka będzie drukować zadania.</summary>
        <value>Pora dnia drukarki staje się dostępna, wyrażone jako liczba minut po północy (UTC). Wartość maksymalna to 1439. Jeśli najpierw zainstalowano drukarki przy użyciu [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] Kreatora dodawania drukarki drukarki wartością domyślną jest dostępna przez cały czas i ta właściwość zwraca wartość 0 w wszystkich strefach czasowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie jesteś w strefie czasowej UTC, musisz dodać lub odjąć wielokrotności 60, aby ustawić lub pobrać prawidłowego czasu Twoją strefą czasową. Na przykład jeśli jesteś w czasie oszczędność czasu pacyficznego strefy Ameryce Północnej i letni nie jest w rezultacie czasu lokalnego jest starszy niż UTC 8 godzin. Aby ustawić <xref:System.Printing.PrintQueue.StartTimeOfDay%2A> 00: 00 w strefie czasowej, należy ustawić na czas UTC 8 AM, czyli 480 (= 8 * 60). Również należy pamiętać, że czas najedzie na do zera po 24 godzinach (czyli; po minucie 1439th). Aby ustawić ją do 18: 00 w strefie czasowej, ustawiony na czas UTC 2 AM, która jest 120 (= 2 * 60). Zobacz <xref:System.TimeZone>, <xref:System.TimeSpan>, i <xref:System.DateTime> klasy dla metod manipulowania przydatne strefy czasowej.  
  
 Jeśli drukarka jest zawsze dostępna, następnie ta właściwość zwraca 0 we wszystkich strefach czasu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w celu określenia, czy drukarka jest dostępna w danej chwili.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int UntilTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UntilTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UntilTimeOfDay { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ostatni czas, wyrażone jako liczba minut po północy uniwersalny czas koordynowany (UTC) (również o nazwie uniwersalny Greenwich [GMT]), że drukarka będzie drukować zadania.</summary>
        <value>Pora dnia drukarki nie jest już dostępny, wyrażone jako liczba minut po północy (UTC). Wartość maksymalna to 1439. Jeśli najpierw zainstalowano drukarki przy użyciu [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] Kreatora dodawania drukarki drukarki wartością domyślną jest dostępna przez cały czas i ta właściwość zwraca wartość 0 w wszystkich strefach czasowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie jesteś w strefie czasowej UTC, musisz dodać lub odjąć wielokrotności 60, aby ustawić lub pobrać prawidłowego czasu Twoją strefą czasową. Na przykład jeśli jesteś w czasie oszczędność czasu pacyficznego strefy Ameryce Północnej i letni nie jest w rezultacie czasu lokalnego jest starszy niż UTC 8 godzin. Aby ustawić <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A> 00: 00 w strefie czasowej, należy ustawić na czas UTC 8 AM, czyli 480 (= 8 * 60). Należy również pamiętać o tej godzinie najedzie na do zera po 24 godziny (1439th minutę). Aby ustawić ją do 18: 00 w strefie czasowej, ustawiony na czas UTC 2 AM, która jest 120 (= 2 * 60). Zobacz <xref:System.TimeZone>, <xref:System.TimeSpan>, i <xref:System.DateTime> klasy dla metod manipulowania przydatne strefy czasowej.  
  
 Jeśli drukarka jest zawsze dostępna, następnie ta właściwość zwraca 0 we wszystkich strefach czasu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać tej właściwości w celu określenia, czy drukarka jest dostępna w danej chwili.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UserPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket UserPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket UserPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UserPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UserPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ UserPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżący użytkownik ma domyślnie <see cref="T:System.Printing.PrintTicket" /> obiektu, który zawiera szczegółowe informacje o zadaniu drukowania.</summary>
        <value>
          <see cref="T:System.Printing.PrintTicket" /> Dla bieżącego użytkownika lub <see langword="null" /> Jeśli użytkownik <see cref="T:System.Printing.PrintTicket" /> nie został określony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy użytkownik może mieć własne domyślne <xref:System.Printing.PrintTicket>.  
  
 Ta właściwość może być `null`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie tej właściwości podczas scalania dwóch biletów wydruku.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      </Docs>
    </Member>
  </Members>
</Type>