<Type Name="XamlServices" FullName="System.Xaml.XamlServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b34e14110aa65e54e7ebad88c3081a75a17bdd15" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39796877" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class XamlServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XamlServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlServices" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlServices abstract sealed" />
  <TypeSignature Language="F#" Value="type XamlServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia usługi wyższego poziomu (statycznej metody) do wykonywania typowych zadań XAML odczytywania XAML i zapisywania wykresu obiektu; Odczytywanie wykresu obiektu lub zapisywania danych wyjściowych w pliku XAML do celów serializacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryby <xref:System.Xaml.XamlServices> klasy, które są używane w najbardziej typowych XAML odczytywanie i zapisywanie scenariuszy zależą od tego, tworzenie wystąpień XAML czytników i składników zapisywania XAML. Takie czytniki i moduły zapisujące są specjalistyczne, ale wewnętrznej implementacji klasy publiczne, takie jak <xref:System.Xml.XmlReader>, <xref:System.Xaml.XamlXmlReader>, i <xref:System.Xaml.XamlObjectWriter>. Aby użyć <xref:System.Xaml.XamlServices> w przypadku większości scenariuszy, możesz polegać na domyślnej implementacji wewnętrznych w celu uzyskania wyników, które mają. W przypadku scenariuszy bardziej wyspecjalizowane możesz zdefiniować czytników i składników zapisywania i przekazywania ich jako argumentów dla przeciążenia <xref:System.Xaml.XamlServices> metody.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> to nie zalecane XAML do czytania lub XAML zapisuje interfejsu API ustawionego w przypadku przetwarzania typów zdefiniowanych przez WPF lub typy, oparte na WPF. Aby uzyskać [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] użycia, użyj <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> do czytania lub ładowania XAML (lub BAML) i <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> celu ich zapisania zwrotnego XAML. W ramach tych zajęć korzystanie z interfejsów API programu .NET Framework XAML usług i czytników XAML i moduły zapisujące XAML w ich realizacji; jednak zapewniają także pomoc techniczna i wyspecjalizowane kontekst schematu XAML dla pojęcia charakterystyczne dla WPF, takie jak Optymalizacja pod kątem właściwości zależności i WPF znanych typów.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ładuje źródła dla czytnika XAML i zapisuje dane wyjściowe jako wykresu obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Xaml.XamlServices.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który można załadować jako dane wejściowe.</param>
        <summary>Ładunki <see cref="T:System.IO.Stream" /> źródła dla czytnika XAML i zapisuje dane wyjściowe jako wykresu obiektu.</summary>
        <returns>Wykres obiektu, który jest zapisywany jako dane wyjściowe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Różnych podpisów dla <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> metoda Określ różnego rodzaju dane wejściowe dla źródła XAML. <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> Wewnętrznej implementacji najpierw tworzy <xref:System.Xml.XmlReader> przez wywołanie metody <xref:System.Xml.XmlReader.Create%28System.IO.Stream%29> , a następnie tworzy nowe wystąpienie klasy wyspecjalizowanego <xref:System.Xaml.XamlReader> która przetwarza dane wejściowe.  
  
 Aby <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> wywołanie do pomyślnego utworzenia wykresu obiektu, muszą być spełnione następujące:  
  
-   Źródło jest dobrze sformułowany i prawidłowy kod XML.  
  
-   Źródło jest prawidłowy XAML na poziomie języka.  
  
-   Typy XAML, które są określone w źródle XAML musi zostać rozpoznany zapasowy typów w odpowiednich przestrzeni nazw XAML. Na przykład typy przestrzenie nazw WPF XAML może prowadzić do przestrzeni nazw WPF XAML, jak to określono w XAML; zestawy dla WPF musi być uwzględniony w projekcie lub dostępne w czasie wykonywania. i tak dalej.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> nie jest zalecane materiały do przeczytania XAML lub interfejsu API do pisania XAML ustawiony w przypadku przetwarzania [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] typów, lub na podstawie [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Aby uzyskać [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] użycia, użyj <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> do czytania lub ładowania XAML; i <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> celu ich zapisania zwrotnego XAML. Użyj tych klas <xref:System.Xaml> interfejsów API wewnętrznie w ich realizacji; jednak są również umożliwiają pojęcia charakterystyczne dla WPF, które mają wpływ na rodzaj XAML, Odczyt i zapis, takie jak Optymalizacja pod kątem właściwości zależności.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; obj" Usage="System.Xaml.XamlServices.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <see cref="T:System.IO.TextReader" /> Do użycia jako podstawy dla utworzonego <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Tworzy czytnik XAML z <see cref="T:System.IO.TextReader" />i zwraca wykresu obiektu.</summary>
        <returns>Wykres obiektu, który jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zwrócić wykresu obiektu `textReader` danych wejściowych powinien być skonstruowany przy użyciu odpowiednich danych wejściowych. Na przykład, powinna przekazać <xref:System.IO.StringReader> który jest konstruowany przy użyciu prawidłowych danych wejściowych XAML jako parametry dla <xref:System.IO.StringReader.%23ctor%28System.String%29> konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textReader" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (fileName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; obj" Usage="System.Xaml.XamlServices.Load fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwa pliku, aby załadować i użyć jako źródła.</param>
        <summary>Ładunki <see cref="T:System.IO.Stream" /> źródła dla czytnika XAML i zwraca wykresu obiektu.</summary>
        <returns>Wykres obiektu, który jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Różnych podpisów dla <xref:System.Xaml.XamlServices.Load%2A> metoda Określ różnego rodzaju dane wejściowe dla źródła XAML. <xref:System.Xaml.XamlServices.Load%2A> Wewnętrznej implementacji najpierw tworzy <xref:System.Xml.XmlReader> przez wywołanie metody <xref:System.Xml.XmlReader.Create%28System.String%29> , a następnie tworzy nowe wystąpienie klasy wyspecjalizowanego <xref:System.Xaml.XamlReader> która przetwarza dane wejściowe.  
  
 Aby <xref:System.Xaml.XamlServices.Load%28System.String%29> wywołanie do pomyślnego utworzenia wykresu obiektu, muszą być spełnione następujące:  
  
-   Źródło jest dobrze sformułowany i prawidłowy kod XML.  
  
-   Źródło jest prawidłowy XAML na poziomie języka.  
  
-   Typy XAML, które są określone w źródle XAML musi zostać rozpoznany zapasowy typów w odpowiednich przestrzeni nazw XAML. Na przykład typy przestrzenie nazw WPF XAML może prowadzić do przestrzeni nazw WPF XAML, jak to określono w XAML; zestawy dla WPF, muszą być zawarte w projekcie lub znajdować się w czasie wykonywania. i tak dalej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> dane wejściowe są <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader xamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader xamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ xamlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xamlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Implementacja czytnika XAML do użycia jako czytnik dla tego <see langword="Load" /> operacji.</param>
        <summary>Ładuje określoną implementację czytnika XAML i zwraca wykresu obiektu.</summary>
        <returns>Wykres obiektu, który jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj należy używać tego podpisu tylko w następujących przypadkach:  
  
-   Zdefiniowane własną implementację <xref:System.Xaml.XamlReader>.  
  
-   Określone ustawienia <xref:System.Xaml.XamlReader> które różnią się od ustawienia domyślne.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> dane wejściowe są <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <see cref="T:System.Xml.XmlReader" /> Wdrożenia do użycia jako czytnik to <see langword="Load" /> operacji.</param>
        <summary>Ładuje określoną implementację czytnika XML i zwraca wykresu obiektu.</summary>
        <returns>Wykres obiektu danych wyjściowych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj należy używać tego podpisu tylko wtedy, gdy zdefiniowane w implementacji programu <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> dane wejściowe są <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xaml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xaml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xaml As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xaml);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Xaml.XamlServices.Parse xaml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xaml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xaml">Wprowadzony ciąg XAML można przeanalizować.</param>
        <summary>Odczytuje XAML jako dane wyjściowe ciąg i zwraca wykresu obiektu.</summary>
        <returns>Wykres obiektu, który jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby <xref:System.Xaml.XamlServices.Parse%2A> wywołać, aby pomyślnie utworzyć drzewa obiektów, muszą być spełnione następujące:  
  
-   `xaml` Danych wejściowych jest dobrze sformułowany i prawidłowy kod XML.  
  
-   `xaml` Dane wejściowe są prawidłowe XAML na poziomie języka.  
  
-   Typy XAML, które są określone w `xaml` danych wejściowych musi zostać rozpoznany kopii typy w odpowiednich przestrzeni nazw XAML. Na przykład typy nazw WPF XAML może prowadzić do przestrzeni nazw WPF XAML, jak to określono w XAML; zestawy dla WPF, muszą być zawarte w projekcie lub znajdować się w czasie wykonywania. i tak dalej.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> nie jest zalecane materiały do przeczytania XAML lub interfejsu API do pisania XAML ustawiony w przypadku przetwarzania [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] typów, lub na podstawie [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Aby uzyskać [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] użycia, użyj <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> do czytania lub ładowania XAML, i <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> celu ich zapisania zwrotnego XAML. Użyj tych klas <xref:System.Xaml> interfejsów API wewnętrznie w ich realizacji; jednak są również umożliwiają pojęcia charakterystyczne dla WPF, które mają wpływ na rodzaj XAML, Odczyt i zapis, takie jak Optymalizacja pod kątem właściwości zależności.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xaml" /> dane wejściowe są <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przetwarza wykres udostępnionego obiektu reprezentację węzłów XAML, a następnie do formatu danych wyjściowych do serializacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static string Save (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Save(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Save (instance As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Save(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : obj -&gt; string" Usage="System.Xaml.XamlServices.Save instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Katalog główny wykresu obiektu do przetworzenia.</param>
        <summary>Przetwarza drzewa udostępnionego obiektu reprezentację węzłów XAML i zwraca ciąg reprezentujący XAML w danych wyjściowych.</summary>
        <returns>Dane wyjściowe znaczników XAML jako ciąg.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dane wyjściowe z tej metody jest `ToString` wynik <xref:System.Xml.XmlWriter> tworzone przez wywołanie metody. Czy <xref:System.Xml.XmlWriter> jest tworzona przy użyciu następujących ustawień: <xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType> jest `true`; i <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType> jest `true`.  
  
 Zwracany ciąg może być załadowany jako prawidłowy kod XML za pomocą <xref:System.Xml.XmlReader.Create%2A> metodę, jeśli przetwarzane z ciągu do strumienia lub czytnika bardziej przeznaczonych wyłącznie dla XAML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.Stream stream, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.Stream stream, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::Stream ^ stream, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.Stream * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (stream, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień docelowy.</param>
        <param name="instance">Katalog główny wykresu obiektu do przetworzenia.</param>
        <summary>Przetwarza wykres udostępnionego obiektu reprezentację węzłów XAML, a następnie do strumienia wyjściowego do serializacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> nie jest zalecane materiały do przeczytania XAML lub interfejsu API do pisania XAML ustawiony w przypadku przetwarzania [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] typów, lub na podstawie [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Aby uzyskać [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] użycia, użyj <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> do czytania lub ładowania XAML; i <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> celu ich zapisania zwrotnego XAML. Użyj tych klas <xref:System.Xaml> interfejsów API wewnętrznie w ich realizacji; jednak są również umożliwiają pojęcia charakterystyczne dla WPF, które mają wpływ na rodzaj XAML, Odczyt i zapis, takie jak Optymalizacja pod kątem właściwości zależności.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> dane wejściowe są <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.TextWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.TextWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As TextWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::TextWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.TextWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Który zapisuje dane wyjściowe.</param>
        <param name="instance">Katalog główny wykresu obiektu do przetworzenia.</param>
        <summary>Przetwarza wykres udostępnionego obiektu reprezentację węzłów XAML, a następnie do danych wyjściowych trafia do podanych <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> dane wejściowe są <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (string fileName, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(string fileName, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (fileName As String, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::String ^ fileName, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : string * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (fileName, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwę i lokalizację pliku do zapisu danych wyjściowych.</param>
        <param name="instance">Katalog główny wykresu obiektu do przetworzenia.</param>
        <summary>Przetwarza wykres udostępnionego obiektu reprezentację węzłów XAML, a następnie zapisuje je do pliku wyjściowego w podanej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `fileName` Wartość parametru jest używana jako `outputFileName` dane wejściowe na potrzeby wywołania <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>, co powoduje utworzenie <xref:System.Xml.XmlWriter> jako część wywołania metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileName" /> jest ciągiem pustym.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xaml.XamlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xaml.XamlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XamlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xaml::XamlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xaml.XamlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xaml.XamlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Xaml.XamlWriter" /> Wdrożenia do użycia.</param>
        <param name="instance">Katalog główny wykresu obiektu do przetworzenia.</param>
        <summary>Przetwarza wykres udostępnionego obiektu reprezentację węzłów XAML, a następnie zapisuje je do podanego Edytor XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj należy używać tego podpisu tylko w następujących przypadkach:  
  
-   Zdefiniowane własną implementację <xref:System.Xaml.XamlWriter>.  
  
-   Określone ustawienia <xref:System.Xaml.XamlWriter> które różnią się od ustawienia domyślne.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> dane wejściowe są <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xml.XmlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xml.XmlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XmlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xml::XmlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xml.XmlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Xml.XmlWriter" /> Wdrożenia do użycia.</param>
        <param name="instance">Katalog główny wykresu obiektu do przetworzenia.</param>
        <summary>Przetwarza wykres udostępnionego obiektu reprezentację węzłów XAML, a następnie zapisuje je w udostępnionej <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> dane wejściowe są <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Łączy <see cref="T:System.Xaml.XamlReader" /> i <see cref="T:System.Xaml.XamlWriter" /> aby można było używać zestawu pośredniczące wspólnej węzłów XAML. Potencjalnie przekształca zawartość w zależności od tego, jakiego rodzaju czytników i składników zapisywania, które są dostarczane.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
      </Parameters>
      <Docs>
        <param name="xamlReader">
          <see cref="T:System.Xaml.XamlReader" /> Wdrożenia do użycia.</param>
        <param name="xamlWriter">
          <see cref="T:System.Xaml.XamlWriter" /> Do użycia.</param>
        <summary>Łączy <see cref="T:System.Xaml.XamlReader" /> i <see cref="T:System.Xaml.XamlWriter" /> do użycia zestawu pośredniczące wspólnej węzłów XAML. Potencjalnie przekształca zawartość w zależności od tego, jakiego rodzaju czytników i składników zapisywania, które są dostarczane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest otokę <xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29>, gdzie `closeWriter` jest określony jako `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> lub <paramref name="xamlWriter" /> dane wejściowe są <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlException">Kontekst schematu XAML jest niezgodny podane <paramref name="xamlReader" /> i <paramref name="xamlWriter" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter, bool closeWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter, bool closeWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter, bool closeWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter * bool -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter, closeWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
        <Parameter Name="closeWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xamlReader">
          <see cref="T:System.Xaml.XamlReader" /> Wdrożenia do użycia.</param>
        <param name="xamlWriter">
          <see cref="T:System.Xaml.XamlWriter" /> Do użycia.</param>
        <param name="closeWriter">
          <see langword="true" /> Aby zamknąć Edytor po ukończeniu wywołania; <see langword="false" /> do pozostaw moduł zapisujący active ostatnia pozycja napisane.</param>
        <summary>Łączy <see cref="T:System.Xaml.XamlReader" /> i <see cref="T:System.Xaml.XamlWriter" /> do użycia zestawu pośredniczące wspólnej węzłów XAML. Potencjalnie przekształca zawartość w zależności od tego, jakiego rodzaju czytników i składników zapisywania, które są dostarczane. Udostępnia parametru do określenia, czy chcesz zamknąć Edytor po zakończeniu wywołanie.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> lub <paramref name="xamlWriter" /> dane wejściowe są <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlException">Kontekst schematu XAML jest niezgodny podane <paramref name="xamlReader" /> i <paramref name="xamlWriter" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>