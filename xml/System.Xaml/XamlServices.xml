<Type Name="XamlServices" FullName="System.Xaml.XamlServices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e824de90c70a2b73633faa66d220aee6ddc6969e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69415929" /></Metadata><TypeSignature Language="C#" Value="public static class XamlServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XamlServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlServices" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlServices abstract sealed" />
  <TypeSignature Language="F#" Value="type XamlServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia usługi wyższego poziomu (metody statyczne) dla typowych zadań XAML odczytywania XAML i pisania grafu obiektów; lub odczytywanie grafu obiektów i zapisywanie danych wyjściowych w pliku XAML na potrzeby serializacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryby <xref:System.Xaml.XamlServices> klasy, które są używane w najpopularniejszych scenariuszach odczytywania i pisania kodu XAML polegają na tworzeniu wystąpień czytników XAML i autorów XAML. Ci czytelnicy i autorzy są wyspecjalizowanymi, ale wewnętrznymi implementacjami klas <xref:System.Xml.XmlReader>publicznych <xref:System.Xaml.XamlXmlReader>, takimi jak,, i <xref:System.Xaml.XamlObjectWriter>. Aby korzystać <xref:System.Xaml.XamlServices> z większości scenariuszy, można polegać na domyślnych implementacjach wewnętrznych w celu uzyskania żądanych wyników. W przypadku bardziej wyspecjalizowanych scenariuszy można samodzielnie definiować czytelników i autorów, a następnie przekazać je jako argumenty dla przeciążenia <xref:System.Xaml.XamlServices> metod.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices>nie jest zalecanym zestawem interfejsów API zapisu w języku XAML ani w przypadku przetwarzania typów zdefiniowanych przez WPF lub typów opartych na platformie WPF. W [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] celu użycia Użyj <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> do odczytu lub ładowania kodu XAML (lub BAML) oraz <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> do zapisywania kodu XAML. Klasy te używają .NET Framework interfejsów API usług XAML i czytników XAML i autorów XAML wewnętrznie w ich implementacji. jednak zapewniają również obsługę i wyspecjalizowany kontekst schematu XAML dla pojęć specyficznych dla platformy WPF, takich jak optymalizacje dla właściwości zależności i znanych typów WPF.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ładuje Źródło dla czytnika XAML i zapisuje jego dane wyjściowe jako Graf obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Xaml.XamlServices.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który ma zostać załadowany jako dane wejściowe.</param>
        <summary><see cref="T:System.IO.Stream" /> Ładuje Źródło dla czytnika XAML i zapisuje jego dane wyjściowe jako Graf obiektu.</summary>
        <returns>Wykres obiektu, który jest zapisywana jako wyjście.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Różne sygnatury dla <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> metody określają różne typy danych wejściowych dla źródłowego kodu XAML. Implementacja wewnętrzna najpierw <xref:System.Xml.XmlReader> tworzy przez wywołanie <xref:System.Xml.XmlReader.Create%28System.IO.Stream%29> , a następnie tworzy nowe wystąpienie wyspecjalizowane <xref:System.Xaml.XamlReader> , które przetwarza dane wejściowe. <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29>  
  
 <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> Aby wywołanie powiodło się utworzenie grafu obiektów, muszą być spełnione następujące warunki:  
  
-   Źródło jest poprawnie sformułowane i prawidłowym kodem XML.  
  
-   Źródło jest prawidłowym XAML na poziomie języka.  
  
-   Typy XAML, które są określone w źródłowym kodzie XAML, muszą rozpoznać do typów zapasowych w odpowiednich przestrzeniach nazw XAML. Na przykład typy XAML dla przestrzeni nazw WPF mogą być rozpoznawane jako przestrzeń nazw WPF XAML, jak określono w kodzie XAML; Zestawy dla WPF muszą być zawarte w projekcie lub dostępne w czasie wykonywania; i tak dalej.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices>nie jest zalecanym zestawem interfejsów API zapisu w kodzie XAML lub w języku [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] XAML, jeśli przetwarzasz typy [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]lub typy oparte na. W [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] celu użycia służy <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> do odczytywania lub ładowania języka XAML <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> oraz pisania kodu XAML. Klasy te używają <xref:System.Xaml> interfejsów API wewnętrznie w ich implementacji, ale zapewniają również obsługę koncepcji specyficznych dla platformy WPF, które wpływają na charakter odczytu i zapisu XAML, na przykład optymalizacje dla właściwości zależności.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; obj" Usage="System.Xaml.XamlServices.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">Do użycia jako podstawa dla utworzonego <see cref="T:System.Xml.XmlReader" />elementu. <see cref="T:System.IO.TextReader" /></param>
        <summary>Tworzy czytnik XAML z <see cref="T:System.IO.TextReader" />i zwraca Graf obiektu.</summary>
        <returns>Wykres obiektów, który jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było zwrócić Graf obiektów, `textReader` dane wejściowe powinny być skonstruowane przy użyciu odpowiednich danych wejściowych. Na przykład należy przekazać obiekt <xref:System.IO.StringReader> , który jest zbudowany przy użyciu prawidłowego danych wyjściowych języka XAML jako ciągu <xref:System.IO.StringReader.%23ctor%28System.String%29> dla konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textReader" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (fileName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; obj" Usage="System.Xaml.XamlServices.Load fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwa pliku do załadowania i użycia jako źródło.</param>
        <summary><see cref="T:System.IO.Stream" /> Ładuje Źródło dla czytnika XAML i zwraca Graf obiektu.</summary>
        <returns>Wykres obiektów, który jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Różne sygnatury dla <xref:System.Xaml.XamlServices.Load%2A> metody określają różne typy danych wejściowych dla źródłowego kodu XAML. Implementacja wewnętrzna najpierw <xref:System.Xml.XmlReader> tworzy przez wywołanie <xref:System.Xml.XmlReader.Create%28System.String%29> , a następnie tworzy nowe wystąpienie wyspecjalizowane <xref:System.Xaml.XamlReader> , które przetwarza dane wejściowe. <xref:System.Xaml.XamlServices.Load%2A>  
  
 <xref:System.Xaml.XamlServices.Load%28System.String%29> Aby wywołanie powiodło się utworzenie grafu obiektów, muszą być spełnione następujące warunki:  
  
-   Źródło jest poprawnie sformułowane i prawidłowym kodem XML.  
  
-   Źródło jest prawidłowym XAML na poziomie języka.  
  
-   Typy XAML, które są określone w źródłowym kodzie XAML, muszą rozpoznać do typów zapasowych w odpowiednich przestrzeniach nazw XAML. Na przykład typy XAML dla przestrzeni nazw WPF mogą być rozpoznawane jako przestrzeń nazw WPF XAML, jak określono w kodzie XAML; Zestawy dla WPF muszą być zawarte w projekcie lub być dostępne w czasie wykonywania; i tak dalej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="fileName" />dane wejściowe <see langword="null" />to.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader xamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader xamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ xamlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xamlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Implementacja czytnika XAML do użycia jako czytelnik dla tej <see langword="Load" /> operacji.</param>
        <summary>Ładuje określoną implementację czytnika XAML i zwraca Graf obiektu.</summary>
        <returns>Wykres obiektów, który jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj tej sygnatury należy używać tylko w następujących przypadkach:  
  
-   Zdefiniowano własną implementację <xref:System.Xaml.XamlReader>programu.  
  
-   Określono ustawienia dla <xref:System.Xaml.XamlReader> , które różnią się od ustawień domyślnych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />dane wejściowe <see langword="null" />to.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">Implementacja, która ma być używana jako czytelnik dla <see langword="Load" /> tej operacji. <see cref="T:System.Xml.XmlReader" /></param>
        <summary>Ładuje określoną implementację czytnika XML i zwraca Graf obiektu.</summary>
        <returns>Wykres obiektu wyjściowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej sygnatury należy zwykle używać tylko wtedy, gdy zdefiniowano własną implementację <xref:System.Xml.XmlReader>programu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />dane wejściowe <see langword="null" />to.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xaml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xaml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xaml As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xaml);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Xaml.XamlServices.Parse xaml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xaml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xaml">Dane wejściowe ciągu XAML do analizy.</param>
        <summary>Odczytuje kod XAML jako ciąg wyjściowy i zwraca Graf obiektu.</summary>
        <returns>Wykres obiektów, który jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlServices.Parse%2A> Aby wywołanie powiodło się w celu pomyślnego utworzenia drzewa obiektów, należy wykonać następujące czynności:  
  
-   `xaml` Dane wejściowe są poprawnie sformułowane i prawidłowym kodem XML.  
  
-   `xaml` Dane wejściowe są prawidłowe w kodzie XAML na poziomie języka.  
  
-   Typy XAML, które są określone w `xaml` danych wejściowych, muszą być rozpoznawane jako typy zapasowe w odpowiednich przestrzeniach nazw XAML. Na przykład typy XAML dla przestrzeni nazw WPF można rozpoznać do przestrzeni nazw WPF XAML, jak określono w kodzie XAML; Zestawy dla WPF muszą być zawarte w projekcie lub być dostępne w czasie wykonywania; i tak dalej.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices>nie jest zalecanym zestawem interfejsów API zapisu w kodzie XAML lub w języku [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] XAML, jeśli przetwarzasz typy [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]lub typy oparte na. W [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] celu użycia Użyj <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> do odczytu lub ładowania kodu XAML oraz <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> do zapisywania kodu XAML. Klasy te używają <xref:System.Xaml> interfejsów API wewnętrznie w ich implementacji, ale zapewniają również obsługę koncepcji specyficznych dla platformy WPF, które wpływają na charakter odczytu i zapisu XAML, na przykład optymalizacje dla właściwości zależności.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xaml" />dane wejściowe <see langword="null" />to.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przetwarza dostarczony wykres obiektu do reprezentacji węzła XAML, a następnie do formatu wyjściowego dla serializacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static string Save (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Save(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Save (instance As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Save(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : obj -&gt; string" Usage="System.Xaml.XamlServices.Save instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Katalog główny grafu obiektów do przetworzenia.</param>
        <summary>Przetwarza dostarczone drzewo obiektów do reprezentacji węzła XAML i zwraca ciąg reprezentujący wyjściowy kod XAML.</summary>
        <returns>Dane wyjściowe znacznika XAML w postaci ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dane wyjściowe tej metody są `ToString` wynikiem <xref:System.Xml.XmlWriter> , który jest tworzony przez wywołanie metody. `true` <xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType> `true` <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType> Jest tworzony przy użyciu następujących ustawień: is; i is. <xref:System.Xml.XmlWriter>  
  
 Zwrócony ciąg może być ładowany jako prawidłowy kod XML za pomocą <xref:System.Xml.XmlReader.Create%2A> metody, jeśli przetworzono ciąg w strumieniu lub czytelnik jest bardziej specjalnie dedykowany dla języka XAML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.Stream stream, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.Stream stream, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::Stream ^ stream, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.Stream * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (stream, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień docelowy.</param>
        <param name="instance">Katalog główny grafu obiektów do przetworzenia.</param>
        <summary>Przetwarza dostarczony wykres obiektu do reprezentacji węzła XAML, a następnie do strumienia wyjściowego na potrzeby serializacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices>nie jest zalecanym zestawem interfejsów API zapisu w kodzie XAML lub w języku [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] XAML, jeśli przetwarzasz typy [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]lub typy oparte na. W [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] celu użycia służy <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> do odczytywania lub ładowania języka XAML <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> oraz pisania kodu XAML. Klasy te używają <xref:System.Xaml> interfejsów API wewnętrznie w ich implementacji, ale zapewniają również obsługę koncepcji specyficznych dla platformy WPF, które wpływają na charakter odczytu i zapisu XAML, na przykład optymalizacje dla właściwości zależności.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />dane wejściowe <see langword="null" />to.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.TextWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.TextWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As TextWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::TextWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.TextWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Zapisuje dane wyjściowe.</param>
        <param name="instance">Katalog główny grafu obiektów do przetworzenia.</param>
        <summary>Przetwarza dostarczony wykres obiektu do reprezentacji węzła XAML, a następnie do danych wyjściowych, które przechodzą <see cref="T:System.IO.TextWriter" />do podanego elementu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />dane wejściowe <see langword="null" />to.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (string fileName, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(string fileName, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (fileName As String, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::String ^ fileName, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : string * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (fileName, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwa i lokalizacja pliku, do którego mają zostać zapisane dane wyjściowe.</param>
        <param name="instance">Katalog główny grafu obiektów do przetworzenia.</param>
        <summary>Przetwarza dostarczony wykres obiektu do reprezentacji węzła XAML, a następnie zapisuje go w pliku wyjściowym w podanej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość parametru jest używana `outputFileName` jako <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>dane wejściowe wywołania, które tworzy <xref:System.Xml.XmlWriter> jako część wywołania metody. `fileName`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="fileName" />jest pustym ciągiem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="fileName" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xaml.XamlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xaml.XamlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XamlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xaml::XamlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xaml.XamlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xaml.XamlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xaml.XamlWriter" /> Implementacja do użycia.</param>
        <param name="instance">Katalog główny grafu obiektów do przetworzenia.</param>
        <summary>Przetwarza dostarczony wykres obiektu do reprezentacji węzła XAML, a następnie zapisuje go do podanego składnika zapisywania XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj tej sygnatury należy używać tylko w następujących przypadkach:  
  
-   Zdefiniowano własną implementację <xref:System.Xaml.XamlWriter>programu.  
  
-   Określono ustawienia <xref:System.Xaml.XamlWriter> , które różnią się od ustawień domyślnych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />dane wejściowe <see langword="null" />to.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xml.XmlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xml.XmlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XmlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xml::XmlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xml.XmlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" /> Implementacja do użycia.</param>
        <param name="instance">Katalog główny grafu obiektów do przetworzenia.</param>
        <summary>Przetwarza dostarczony wykres obiektu do reprezentacji węzła XAML, a następnie zapisuje go w podanej <see cref="T:System.Xml.XmlWriter" />wartości.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />dane wejściowe <see langword="null" />to.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Łączy a <see cref="T:System.Xaml.XamlWriter" /> i a w celu użycia wspólnego pośrednika zestawu węzłów XAML. <see cref="T:System.Xaml.XamlReader" /> Może przekształcać zawartość, w zależności od typów czytelników i autorów, które są dostarczane.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
      </Parameters>
      <Docs>
        <param name="xamlReader"><see cref="T:System.Xaml.XamlReader" /> Implementacja do użycia.</param>
        <param name="xamlWriter"><see cref="T:System.Xaml.XamlWriter" /> Do użycia.</param>
        <summary>Łączy a <see cref="T:System.Xaml.XamlWriter" /> i a, aby używać wspólnego pośrednika zestawu węzłów XAML. <see cref="T:System.Xaml.XamlReader" /> Może przekształcać zawartość, w zależności od typów czytelników i autorów, które są dostarczane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest otoką wokół <xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29>, gdzie `closeWriter` jest określony jako `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />lub <paramref name="xamlWriter" /> dane wejściowe <see langword="null" />to.</exception>
        <exception cref="T:System.Xaml.XamlException">Kontekst schematu XAML nie jest zgodny z podanymi <paramref name="xamlReader" /> i. <paramref name="xamlWriter" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter, bool closeWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter, bool closeWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter, bool closeWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter * bool -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter, closeWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
        <Parameter Name="closeWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xamlReader"><see cref="T:System.Xaml.XamlReader" /> Implementacja do użycia.</param>
        <param name="xamlWriter"><see cref="T:System.Xaml.XamlWriter" /> Do użycia.</param>
        <param name="closeWriter"><see langword="true" />Aby zamknąć składnik zapisywania po zakończeniu wywołania; <see langword="false" /> pozostawienie składnika zapisywania jako aktywnego na ostatnim zapisaniu.</param>
        <summary>Łączy a <see cref="T:System.Xaml.XamlWriter" /> i a, aby używać wspólnego pośrednika zestawu węzłów XAML. <see cref="T:System.Xaml.XamlReader" /> Może przekształcać zawartość, w zależności od typów czytelników i autorów, które są dostarczane. Zawiera parametr służący do określania, czy należy zamknąć składnik zapisywania po zakończeniu wywołania.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />lub <paramref name="xamlWriter" /> dane wejściowe <see langword="null" />to.</exception>
        <exception cref="T:System.Xaml.XamlException">Kontekst schematu XAML nie jest zgodny z podanymi <paramref name="xamlReader" /> i. <paramref name="xamlWriter" /></exception>
      </Docs>
    </Member>
  </Members>
</Type>
