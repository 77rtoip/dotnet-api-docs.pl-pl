<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6318f99d06fd4e39419aa23954098e71e2abdfde" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69427209" /></Metadata><TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zawiera definicje podstawowe dla klas, które wykorzystują dane wejściowe XAML i generują strumienie węzłów XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlReader>jest klasą abstrakcyjną i nie dostarcza implementacji ani definicji, które mają wynik roboczy dla wszystkich elementów członkowskich. Elementy członkowskie, które mają implementację <xref:System.Xaml.XamlReader> w programie, są wymienione w uwagach dla tego elementu członkowskiego. W przypadku <xref:System.Xaml.XamlReader> , ma kilka abstrakcyjnych elementów członkowskich, które muszą być zaimplementowane, oraz kilku wirtualnych elementów członkowskich.  
  
 Wirtualnych elementów członkowskich, <xref:System.Xaml.XamlReader.ReadSubtree%2A> a <xref:System.Xaml.XamlReader.Skip%2A> każda z nich zawiera domyślną implementację, która jest odpowiednia dla większości przypadków. Jednak implementacje <xref:System.Xaml.XamlReader.Skip%2A>idomyślne zależą od innych oczekiwanych zachowań implementacji czytnika XAML, w szczególności polegają na <xref:System.Xaml.XamlReader.Read%2A> przesłonięciu. <xref:System.Xaml.XamlReader.ReadSubtree%2A> <xref:System.Xaml.XamlReader.Dispose%2A>jest również wirtualnym elementem członkowskim, który ma działającą domyślną implementację.  
  
 Poniższe dwie klasy to najbardziej odpowiednie i praktyczne klasy pochodne w .NET Framework usługach XAML i zestaw system. XAML:  
  
-   <xref:System.Xaml.XamlObjectReader>, który odczytuje Graf obiektu, taki jak wykres aktywnego obiektu aplikacji w czasie wykonywania.  
  
-   <xref:System.Xaml.XamlXmlReader>, który odczytuje kod XAML w postaci pliku tekstowego XML przy użyciu ogólnego <xref:System.Xml.XmlReader> , który ładuje plik jako pośrednik pośredniczący.  
  
 Inne czytniki XAML z innych platform obejmują <xref:System.Windows.Baml2006.Baml2006Reader> i <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.  
  
 <xref:System.Xaml.XamlReader>różni się [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] od <xref:System.Xml.XmlReader> i projektowania zasad <xref:System.Xaml.XamlReader> , `Create` ponieważ nie ma metody zwracającej podstawowe implementacje czytnika XAML. Zamiast tego należy utworzyć wystąpienie określonych pochodnych klas czytnika XAML przez wywołanie ich konstruktorów lub innych interfejsów API pomocników specyficznych dla klasy.  
  
## <a name="subtree-readers"></a>Czytniki poddrzewa  
 W większości przypadków interfejs API jest wywoływany <xref:System.Xaml.XamlReader> w kontekście określonych klas czytnika XAML, które pochodzą od. <xref:System.Xaml.XamlReader> Jednak w jednym z określonych przypadków dostęp do <xref:System.Xaml.XamlReader> interfejsu API jest możliwe w przypadku praktycznego wystąpienia czytnika XAML, które nie jest publiczne ani nie pochodzi od <xref:System.Xaml.XamlObjectReader> lub <xref:System.Xaml.XamlXmlReader>. W tym przypadku jest wywoływana <xref:System.Xaml.XamlReader.ReadSubtree%2A>, która <xref:System.Xaml.XamlReader> zwraca wystąpienie. W implementacji domyślnej, <xref:System.Xaml.XamlReader> która jest zwracana przez ten interfejs API jest klasą wewnętrzną.  
  
 Odczyt dla odczytu poddrzewa ma prawidłowe akcje dotyczące interfejsów API, takich <xref:System.Xaml.XamlReader.Read%2A> jak <xref:System.Xaml.XamlReader.NodeType%2A>i, a te akcje są oparte na klasie czytnika nadrzędnego. <xref:System.Xaml.XamlReader> Ten projekt umożliwia wewnętrznej klasie śledzenie poziomu ramki, w której został wprowadzony poddrzewo. Poddrzewo <xref:System.Xaml.XamlReader> działa, upewniając się, że jeśli bieżące położenie węzła jest przenoszone poza granice poddrzewa, określony czytnik poddrzewa zgłasza koniec pliku lub `null` w bieżącym węźle.  
  
 Uwagi dotyczące użycia czytnika poddrzewa są zawarte w niektórych <xref:System.Xaml.XamlReader> interfejsach API.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
    <related type="Article" href="https://msdn.microsoft.com/library/7c11abec-1075-474c-9d9b-778e5dab21c3">Zapoznanie się ze strukturami i koncepcjami strumienia węzłów XAML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xaml.XamlReader" /> Inicjuje klasę.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka strumień węzłów XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W implementacji <xref:System.Xaml.XamlReader.Close%2A> podstawowej wywołania wywołań <xref:System.Xaml.XamlReader.Dispose%2A> z `isDisposing` parametrem jako `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />Aby zwolnić zarządzane zasoby; w przeciwnym razie. <see langword="false" /></param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Xaml.XamlReader" />program, a opcjonalnie zwalnia zarządzane zasoby.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy wywołać klasę bazową, aby uzyskać <xref:System.Xaml.XamlReader.IsDisposed%2A>.  =  `true`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> czy został wywołany.</summary>
        <value><see langword="true" />Jeśli <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> został wywołany; <see langword="false" />w przeciwnym razie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera wartość, która określa, czy pozycja czytnika jest na końcu pliku.</summary>
        <value><see langword="true" />Jeśli pozycja znajduje się na koncepcyjnym końcu pliku strumienia węzła XAML; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czytelnicy poddrzewa mogą wywoływać <xref:System.Xaml.XamlReader.IsEof%2A>, z zachowaniem, które prawidłowo odzwierciedla granice wprowadzonego poddrzewa. Aby uzyskać więcej informacji, zobacz sekcję "czytelnicy poddrzewa" w <xref:System.Xaml.XamlReader>temacie <xref:System.Xaml.XamlReader.ReadSubtree%2A>lub.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera bieżący element członkowski w pozycji czytnika, jeśli pozycja czytnika znajduje się na <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
        <value>Bieżący element członkowski; lub <see langword="null" />, jeśli pozycja czytnika nie znajduje się na elemencie członkowskim.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czytelnicy poddrzewa mogą wywoływać <xref:System.Xaml.XamlReader.Member%2A>, z ograniczeniami zachowania. Aby uzyskać więcej informacji, zobacz sekcję "czytelnicy poddrzewa" w <xref:System.Xaml.XamlReader>temacie <xref:System.Xaml.XamlReader.ReadSubtree%2A>lub.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera informacje o przestrzeni nazw XAML z bieżącego węzła.</summary>
        <value>Informacje o przestrzeni nazw XAML, jeśli są dostępne; w przeciwnym razie. <see langword="null" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamierzony projekt tego interfejsu API ma zwrócić wynik o wartości innej niż null tylko wtedy, <xref:System.Xaml.XamlReader.NodeType%2A> gdy bieżącym węzłem jest <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>. Właściwość nie raportuje przestrzeni nazw XAML, która ma zastosowanie do obiektów lub elementów członkowskich w ogólnym sensie zakresu, jak to jest interpretowane w kontekście schematu XAML. Aplikacja musi udostępniać środki do buforowania informacji dla działającej przestrzeni nazw XAML podczas przechodzenia przez węzły XAML, jeśli potrzebne są te informacje w sposób inny niż sposób, w jaki kontekst schematu XAML zgłasza go do składnika zapisywania. Zapoznaj <xref:System.Xaml.XamlXmlReader.Namespace%2A> się z informacjami dotyczącymi implementacji odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera typ bieżącego węzła.</summary>
        <value>Wartość <see cref="T:System.Xaml.XamlNodeType" /> wyliczenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czytelnicy poddrzewa mogą wywoływać <xref:System.Xaml.XamlReader.NodeType%2A>, z ograniczeniami zachowania. Aby uzyskać więcej informacji, zobacz sekcję "czytelnicy poddrzewa" w <xref:System.Xaml.XamlReader>temacie <xref:System.Xaml.XamlReader.ReadSubtree%2A>lub.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej program udostępnia następny węzeł XAML ze źródła, jeśli węzeł jest dostępny.</summary>
        <returns><see langword="true" />Jeśli węzeł jest dostępny; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czytelnicy poddrzewa mogą wywoływać <xref:System.Xaml.XamlReader.Read%2A>, z ograniczeniami zachowania. Aby uzyskać więcej informacji, zobacz sekcję "czytelnicy poddrzewa" w <xref:System.Xaml.XamlReader>temacie <xref:System.Xaml.XamlReader.ReadSubtree%2A>lub.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca obiekt <see cref="T:System.Xaml.XamlReader" /> , który jest oparty na bieżącym <see cref="T:System.Xaml.XamlReader" />, gdzie zwrócony <see cref="T:System.Xaml.XamlReader" /> jest używany do iteracji za pośrednictwem poddrzewa struktury węzła XAML.</summary>
        <returns>Nowe wystąpienie czytnika XAML dla poddrzewa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma implementację domyślną i zwraca prawidłowy <xref:System.Xaml.XamlReader>. Zwracana <xref:System.Xaml.XamlReader> jest wewnętrzna Klasa, która ogranicza niektóre <xref:System.Xaml.XamlReader> akcje. Ograniczenia są spójne z celem odczytywania tylko wymiarów poddrzewa o większej liczbie źródeł dla zestawu węzłów XAML i zwracania końca pliku lub `null` w bieżącym węźle po zakończeniu poddrzewa.  
  
 Ogólnie rzecz biorąc, należy sprawdzić bieżący węzeł od początku <xref:System.Xaml.XamlReader.Read%2A> , aby określić, czy potrzebujesz czytnika poddrzewa. Sprawdzanie, czy może to być specyficzne dla implementacji; należy jednak unikać tworzenia wielu czytników poddrzewa dla każdego poddrzewa. Ponadto należy unikać wywoływania czytnika poddrzewa dla określonych przypadków węzłów (na przykład dla <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>), które nie mogą zawierać poddrzewa węzłów.  
  
 Po uzyskaniu czytnika poddrzewa należy wywołać <xref:System.Xaml.XamlReader.Read%2A> go w celu uzyskania bieżącego węzła (lub wywołania <xref:System.Xaml.XamlReader.Skip%2A> w celu uzyskania następnego węzła). Podczas tworzenia nie jest automatycznie pobierana początkowa pozycja węzła z czytnika poddrzewa.  
  
 Czytnik uzyskany przez wywołanie <xref:System.Xaml.XamlReader.ReadSubtree%2A> z tej domyślnej implementacji jest klasą wewnętrzną. Klasa wewnętrzna opiera się na <xref:System.Xaml.XamlReader> zachowaniu implementacji, która jest używana, gdy <xref:System.Xaml.XamlReader.ReadSubtree%2A> jest wywoływana. Celem wewnętrznej klasy jest zawinięcie <xref:System.Xaml.XamlReader.Read%2A> i ogólne zachowanie przechodzenia. Przechodzenie pozostaje <xref:System.Xaml.XamlNodeType.StartMember> w zamierzonym poddrzewie przez / <xref:System.Xaml.XamlNodeType.EndObject> <xref:System.Xaml.XamlNodeType.EndMember> śledzenie par lub <xref:System.Xaml.XamlNodeType.StartObject> / par. Zwraca `false` równieżpoprawne`true` wartości<xref:System.Xaml.XamlReader.IsEof%2A> i dla momentu, gdy czytnik znajduje się na końcu poddrzewa, zgodnie z definicją w punkcie wejścia. <xref:System.Xaml.XamlReader.Read%2A> Ogólnie rzecz biorąc, zakłada się, <xref:System.Xaml.XamlReader> że każdy interfejs API wywoływany z czytnika poddrzewa ma taką samą implementację <xref:System.Xaml.XamlReader> jak ogólna, z wyjątkiem zachowania związanego z przechodzeniem.  
  
 <xref:System.Xaml.XamlReader.ReadSubtree%2A> Jest to jednak wirtualne. W związku z tym <xref:System.Xaml.XamlReader> określona implementacja może zapewnić zachowanie, które różni <xref:System.Xaml.XamlReader> się od zachowania <xref:System.Xaml.XamlReader> otoki wewnętrznej, a implementacja może nawet wyłączyć funkcję czytnika poddrzewa <xref:System.NotImplementedException> przez zwrócenie lub inne wyłączenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera obiekt, który dostarcza informacje kontekstu schematu XAML dla zestawu informacji.</summary>
        <value>Obiekt, który dostarcza informacje kontekstu schematu XAML dla zestawu informacji.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pomija bieżący węzeł i przesuwa pozycję czytnika do następnego węzła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po pominięciu <xref:System.Xaml.XamlReader.Read%2A> jest wywoływana przez implementację <xref:System.Xaml.XamlReader.Skip%2A> domyślną. Zazwyczaj nie jest wywoływana <xref:System.Xaml.XamlReader.Skip%2A> i <xref:System.Xaml.XamlReader.Read%2A> w kolejności.  
  
 W implementacji domyślnej <xref:System.Xaml.XamlReader.Skip%2A> różne akcje są wykonywane w zależności od tego, które <xref:System.Xaml.XamlReader.NodeType%2A> miejsce czytelnika jest obecnie włączone. Jeśli pozycja czytnika znajduje się obecnie na <xref:System.Xaml.XamlNodeType.StartMember> lub <xref:System.Xaml.XamlNodeType.StartObject>, ten element członkowski lub obiekt jest pomijany. W przypadku <xref:System.Xaml.XamlReader.NodeType%2A> innych wartości żadne działanie nie jest inne niż wywołanie <xref:System.Xaml.XamlReader.Read%2A> z bieżącego położenia.  
  
 Czytelnicy poddrzewa mogą wywoływać <xref:System.Xaml.XamlReader.Skip%2A>, z ograniczeniami zachowania. Aby uzyskać więcej informacji, zobacz sekcję "czytelnicy poddrzewa" w <xref:System.Xaml.XamlReader>temacie <xref:System.Xaml.XamlReader.ReadSubtree%2A>lub.  
  
 Zachowanie <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> drzewa węzłów jest oparte na odpowiedniku <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>w kodzie XML. Na podstawie równoważności zachowań pomija węzeł i jego poddrzewo, a nie tylko węzeł pojedynczego wpisu. <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Xaml.XamlReader" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera <see cref="T:System.Xaml.XamlType" /> bieżący węzeł.</summary>
        <value>Bieżącego węzła lub <see langword="null" />, jeśli bieżący element czytnika nie znajduje się w obiekcie. <see cref="T:System.Xaml.XamlType" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czytelnicy poddrzewa mogą wywoływać <xref:System.Xaml.XamlReader.Type%2A>, z ograniczeniami zachowania. Aby uzyskać więcej informacji, zobacz sekcję "czytelnicy poddrzewa" w <xref:System.Xaml.XamlReader>temacie <xref:System.Xaml.XamlReader.ReadSubtree%2A>lub.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera wartość bieżącego węzła.</summary>
        <value>Wartość bieżącego węzła; lub <see langword="null" />, jeśli bieżąca pozycja czytnika nie znajduje się <see cref="F:System.Xaml.XamlNodeType.Value" /> w typie węzła.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>
