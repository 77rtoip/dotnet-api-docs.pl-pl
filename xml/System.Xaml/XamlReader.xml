<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cddde32ba28f1f851491799aa1745a920f8d7f14" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36444046" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia podstawowe definicje klas, które zużywają wprowadzania XAML i generować strumienie węzłów XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlReader> jest to klasa abstrakcyjna i nie zapewnia implementacji ani definicje, które zawierają wynik pracy dla wszystkich elementów członkowskich. Elementy członkowskie, które mają implementację w <xref:System.Xaml.XamlReader> są wymienione w uwagach do tego członka. W szczególności <xref:System.Xaml.XamlReader> ma kilka abstrakcyjne elementy członkowskie, które muszą zostać zaimplementowane i kilka wirtualnych elementów członkowskich.  
  
 Wirtualne członków <xref:System.Xaml.XamlReader.ReadSubtree%2A> i <xref:System.Xaml.XamlReader.Skip%2A> każdego udostępnia domyślną implementację, która jest odpowiednia w większości przypadków. Jednak <xref:System.Xaml.XamlReader.ReadSubtree%2A> i <xref:System.Xaml.XamlReader.Skip%2A> domyślnej implementacji zależą od innych oczekiwane zachowanie czytnika danych wykonawczych XAML; w szczególności opierają się na <xref:System.Xaml.XamlReader.Read%2A> zastąpienia. <xref:System.Xaml.XamlReader.Dispose%2A> jest również element członkowski wirtualnego pracy domyślną implementację.  
  
 Następujące dwie klasy są najbardziej odpowiednie i praktyczne klas pochodnych usługi XAML .NET Framework i zestawu System.Xaml:  
  
-   <xref:System.Xaml.XamlObjectReader>, która odczytuje wykresu obiektów, takich jak wykres obiektu aktywnej aplikacji w czasie wykonywania.  
  
-   <xref:System.Xaml.XamlXmlReader>, która odczytuje XAML w formie pliku tekstowego XML przy użyciu ogólnej <xref:System.Xml.XmlReader> który ładuje plik jako klasy pośredniczącej pomocy.  
  
 Inne czytników XAML z innych platform, obejmują <xref:System.Windows.Baml2006.Baml2006Reader> i <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.  
  
 <xref:System.Xaml.XamlReader> różni się od [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] i <xref:System.Xml.XmlReader> projektowania zasad, ponieważ <xref:System.Xaml.XamlReader> nie ma `Create` metodę, aby zwrócić podstawowej domyślne implementacje czytnika XAML. Należy zamiast tego wystąpienia określonych klas pochodnych czytnika XAML wywołując ich konstruktorów lub innych pomocnika specyficzne interfejsów API.  
  
## <a name="subtree-readers"></a>Czytniki poddrzewo  
 W większości przypadków należy wywołać <xref:System.Xaml.XamlReader> interfejsu API w kontekście określonej klasy czytnika XAML, który pochodzi z <xref:System.Xaml.XamlReader>. Jednak w przypadku jednego, możesz uzyskać dostęp do <xref:System.Xaml.XamlReader> interfejsu API w wystąpieniu praktyczne czytnika XAML, który nie jest publiczna i nie pochodną <xref:System.Xaml.XamlObjectReader> lub <xref:System.Xaml.XamlXmlReader>. Ten przypadek jest podczas wywoływania <xref:System.Xaml.XamlReader.ReadSubtree%2A>, która zwraca <xref:System.Xaml.XamlReader> wystąpienia. W implementacji domyślnej <xref:System.Xaml.XamlReader> czyli zwróconych przez ten interfejs API jest klasą wewnętrzną.  
  
 <xref:System.Xaml.XamlReader> Uzyskane dla odczytu poddrzewo ma prawidłowe akcje dla interfejsów API, takich jak <xref:System.Xaml.XamlReader.Read%2A> i <xref:System.Xaml.XamlReader.NodeType%2A>, a te akcje są oparte na klasie nadrzędnej czytnika. Ten projekt umożliwia Wewnętrzna klasa do śledzenia poziomu ramki, którym wprowadzono poddrzewa. Poddrzewo działania <xref:System.Xaml.XamlReader> upewnia się, że jeśli bieżące położenie węzeł zostanie przeniesiona poza granice poddrzewo, czytnika poddrzewo określonych raportów plik końcowy lub `null` w bieżącym węźle.  
  
 Uwagi dotyczące użycia czytnika poddrzewo znajdują się na niektórych <xref:System.Xaml.XamlReader> interfejsów API.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje <see cref="T:System.Xaml.XamlReader" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka strumień węzłów XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W podstawowej implementacji wywoływania <xref:System.Xaml.XamlReader.Close%2A> wywołania <xref:System.Xaml.XamlReader.Dispose%2A> z `isDisposing` parametr jako `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane. w przeciwnym razie <see langword="false" />.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Xaml.XamlReader" />i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy wywołać klasy podstawowej, aby uzyskać <xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czy <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> została wywołana.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> została wywołana; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera wartość, która informuje, czy pozycja czytnik jest na końcu pliku.</summary>
        <value>
          <see langword="true" /> Jeśli pozycja znajduje się na koncepcyjnej koniec pliku strumienia węzłów XAML; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poddrzewo czytelnicy mogą wywoływać <xref:System.Xaml.XamlReader.IsEof%2A>, z zachowaniem poprawnie odzwierciedlający granice wprowadzone poddrzewo. Aby uzyskać więcej informacji, zobacz sekcję "Poddrzewo czytników" w <xref:System.Xaml.XamlReader>, lub zobacz <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej, pobiera bieżący element członkowski w pozycji czytnika, jeśli pozycja czytnik znajduje się na <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
        <value>Bieżący element członkowski; lub <see langword="null" />, jeśli pozycja czytnika nie znajduje się w elemencie członkowskim.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poddrzewo czytelnicy mogą wywoływać <xref:System.Xaml.XamlReader.Member%2A>, z ograniczeniami zachowanie. Aby uzyskać więcej informacji, zobacz sekcję "Poddrzewo czytników" w <xref:System.Xaml.XamlReader>, lub zobacz <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera informacji dotyczących przestrzeni nazw XAML z bieżącego węzła.</summary>
        <value>Informacji przestrzeń nazw XAML, jeśli jest dostępna; w przeciwnym razie <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Projektowi tego interfejsu API jest do zwrócenia wyniku inną niż null tylko wtedy, gdy <xref:System.Xaml.XamlReader.NodeType%2A> bieżącego węzła jest <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>. Właściwość nie raportuje przestrzeni nazw XAML, która ma zastosowanie do obiektów lub elementów członkowskich w ogólnym sensie zakresu, jak jest interpretowana w kontekście schematu XAML. Aplikacja musi zapewniać możliwość do pamięci podręcznej informacje o działający przestrzeni nazw XAML w postaci, w jakiej są przesyłane za pośrednictwem węzłów XAML, jeśli potrzebujesz informacji w sposób niż jak kontekst schematu XAML zgłasza do modułu zapisującego. Zobacz <xref:System.Xaml.XamlXmlReader.Namespace%2A> notatek wykonania odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera typ bieżącego węzła.</summary>
        <value>Wartość <see cref="T:System.Xaml.XamlNodeType" /> wyliczenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poddrzewo czytelnicy mogą wywoływać <xref:System.Xaml.XamlReader.NodeType%2A>, z ograniczeniami zachowanie. Aby uzyskać więcej informacji, zobacz sekcję "Poddrzewo czytników" w <xref:System.Xaml.XamlReader>, lub zobacz <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej, zawiera kolejnego węzła XAML ze źródła, jeśli węzeł jest dostępny.</summary>
        <returns>
          <see langword="true" /> Jeśli węzeł jest dostępny; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poddrzewo czytelnicy mogą wywoływać <xref:System.Xaml.XamlReader.Read%2A>, z ograniczeniami zachowanie. Aby uzyskać więcej informacji, zobacz sekcję "Poddrzewo czytników" w <xref:System.Xaml.XamlReader>, lub zobacz <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.Xaml.XamlReader" /> jest oparty na bieżącej <see cref="T:System.Xaml.XamlReader" />, gdzie zwróconego <see cref="T:System.Xaml.XamlReader" /> jest używany do iterowania po poddrzewo struktury węzła XAML.</summary>
        <returns>Nowe wystąpienie czytnika XAML dla poddrzewa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest domyślna implementacja i zwraca prawidłowe <xref:System.Xaml.XamlReader>. Zwrócona <xref:System.Xaml.XamlReader> jest klasą wewnętrzną, która ogranicza niektórych <xref:System.Xaml.XamlReader> akcje. Ograniczenia są spójne w celu odczytywania poddrzewo wymiarów tylko większych źródła zestawu węzłów XAML i przekazujących plik końcowy lub `null` na bieżącego węzła, gdy zostanie zakończone poddrzewa.  
  
 Ogólnie rzecz biorąc, zapoznaj się z bieżącego węzła z początkowej <xref:System.Xaml.XamlReader.Read%2A> ustalenie, czy potrzebujesz czytnik poddrzewo. Jak sprawdzić to może być konkretnej implementacji. jednak Unikaj tworzenia wielu czytników poddrzewo dla każdego poddrzewo. Ponadto należy unikać wywoływania czytnik poddrzewo w niektórych przypadkach węzła (na przykład <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) który nie może zawierać poddrzewa węzłów.  
  
 Po uzyskaniu czytnik poddrzewo, należy wywołać <xref:System.Xaml.XamlReader.Read%2A> w celu uzyskania bieżącego węzła (lub zadzwoń <xref:System.Xaml.XamlReader.Skip%2A> uzyskać następnego węzła). Nie automatycznie zyskuje Pozycja węzła początkowego z czytnika poddrzewo podczas jego tworzenia.  
  
 Czytnik uzyskać przez wywołanie metody <xref:System.Xaml.XamlReader.ReadSubtree%2A> z tej domyślnej implementacji jest klasą wewnętrzną. Wewnętrzna klasa określa zachowanie na <xref:System.Xaml.XamlReader> implementację, która ma zostać użyta, gdy <xref:System.Xaml.XamlReader.ReadSubtree%2A> jest wywoływana. Wewnętrzna klasa ma na celu zawijać <xref:System.Xaml.XamlReader.Read%2A> i przechodzenie ogólne zachowanie. Przechodzenie pozostaje w zamierzonej poddrzewo przez śledzenie <xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember> pary lub <xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject> pary. Zwraca także poprawnie `false` dla <xref:System.Xaml.XamlReader.Read%2A> i `true` dla <xref:System.Xaml.XamlReader.IsEof%2A> gdy czytnik jest na końcu poddrzewo, zgodnie z definicją w jego punktu wejścia. Ogólnie rzecz biorąc, można założyć, że wszystkie <xref:System.Xaml.XamlReader> interfejsu API można wywołać z czytnika poddrzewo ma tej samej implementacji jako ogólnych <xref:System.Xaml.XamlReader> z wyjątkiem przechodzenie ograniczenia zachowanie.  
  
 Jednak <xref:System.Xaml.XamlReader.ReadSubtree%2A> jest wirtualna. W związku z tym określony <xref:System.Xaml.XamlReader> implementacja może zapewnić zachowanie różni się od <xref:System.Xaml.XamlReader> zachowania wewnętrznych otoki; i <xref:System.Xaml.XamlReader> implementacji nawet można wyłączyć funkcji czytnika poddrzewo zwracając <xref:System.NotImplementedException> lub innych wyjątki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera obiekt, który zawiera informacje o kontekście schematu XAML dla zestawu informacji.</summary>
        <value>Ustaw obiekt, który zawiera informacje o kontekście schematu XAML informacje.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pomija bieżącego węzła i zmienia pozycję czytnik do następnego węzła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pominięto raz <xref:System.Xaml.XamlReader.Read%2A> jest wywoływana przez domyślny <xref:System.Xaml.XamlReader.Skip%2A> implementacji. Zazwyczaj nie zostanie wywołana <xref:System.Xaml.XamlReader.Skip%2A> i <xref:System.Xaml.XamlReader.Read%2A> w sekwencji.  
  
 W domyślnej <xref:System.Xaml.XamlReader.Skip%2A> implementacji, w zależności od tego, które są podejmowane akcje różnych <xref:System.Xaml.XamlReader.NodeType%2A> pozycji czytnik jest obecnie włączone. Jeśli pozycja czytnik jest aktualnie <xref:System.Xaml.XamlNodeType.StartMember> lub <xref:System.Xaml.XamlNodeType.StartObject>, elementu członkowskiego lub obiektu zostało pominięte. Dla innych <xref:System.Xaml.XamlReader.NodeType%2A> wartości, a nie podjęto żadnej akcji innego niż wywołania <xref:System.Xaml.XamlReader.Read%2A> od bieżącego położenia.  
  
 Poddrzewo czytelnicy mogą wywoływać <xref:System.Xaml.XamlReader.Skip%2A>, z ograniczeniami zachowanie. Aby uzyskać więcej informacji, zobacz sekcję "Poddrzewo czytników" w <xref:System.Xaml.XamlReader>, lub zobacz <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 Węzeł drzewa zachowanie <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> opiera się na równoważne XML <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>. Na podstawie <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> równoważność zachowanie <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> pomija węzła i jego poddrzewa, nie tylko pojedynczy wpis węzeł.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.Xaml.XamlReader" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera <see cref="T:System.Xaml.XamlType" /> bieżącego węzła.</summary>
        <value>
          <see cref="T:System.Xaml.XamlType" /> Bieżącego węzła; lub <see langword="null" />, jeśli bieżące położenie czytnika nie jest obiektem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poddrzewo czytelnicy mogą wywoływać <xref:System.Xaml.XamlReader.Type%2A>, z ograniczeniami zachowanie. Aby uzyskać więcej informacji, zobacz sekcję "Poddrzewo czytników" w <xref:System.Xaml.XamlReader>, lub zobacz <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej pobiera wartość bieżącego węzła.</summary>
        <value>Wartość bieżącego węzła; lub <see langword="null" />, jeśli bieżące położenie czytnik nie jest włączony <see cref="F:System.Xaml.XamlNodeType.Value" /> typu węzła.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>