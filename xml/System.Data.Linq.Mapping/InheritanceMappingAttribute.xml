<Type Name="InheritanceMappingAttribute" FullName="System.Data.Linq.Mapping.InheritanceMappingAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e3e656a4c730a4067e203463ec7ba596afd76f70" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48633316" /></Metadata><TypeSignature Language="C#" Value="public sealed class InheritanceMappingAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InheritanceMappingAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InheritanceMappingAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InheritanceMappingAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type InheritanceMappingAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="badd7-101">Mapuje Hierarchia dziedziczenia w składniku LINQ do SQL aplikacji.</span><span class="sxs-lookup"><span data-stu-id="badd7-101">Maps an inheritance hierarchy in a LINQ to SQL application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="badd7-102">Jeden <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute> jest określona dla każdej klasy zamapowany.</span><span class="sxs-lookup"><span data-stu-id="badd7-102">One <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute> is specified per mapped class.</span></span>  
  
 <span data-ttu-id="badd7-103">Należy pamiętać, że gdy mapowanie hierarchii dziedziczenia:</span><span class="sxs-lookup"><span data-stu-id="badd7-103">Note the following when you map inheritance hierarchies:</span></span>  
  
-   <span data-ttu-id="badd7-104">Wszystkie klasy w hierarchii musi być zamapowany na pojedynczą tabelę.</span><span class="sxs-lookup"><span data-stu-id="badd7-104">All classes in a hierarchy must be mapped to a single table.</span></span>  
  
-   <span data-ttu-id="badd7-105">Hierarchia dziedziczenia w tabeli musi być zadeklarowany mapowanego typu, który znajduje się na szczycie hierarchii.</span><span class="sxs-lookup"><span data-stu-id="badd7-105">The table for an inheritance hierarchy must be declared on the mapped type that is at the top of the hierarchy.</span></span> <span data-ttu-id="badd7-106">Nie można określić tabelę lub mapowania atrybutów w klasie, która jest pochodną klasy najważniejsze.</span><span class="sxs-lookup"><span data-stu-id="badd7-106">You cannot specify the table or mapping attributes in a class that is derived from the top class.</span></span>  
  
-   <span data-ttu-id="badd7-107">Można użyć interfejsu w hierarchii, ale [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] nie jest mapowany.</span><span class="sxs-lookup"><span data-stu-id="badd7-107">You can use an interface in a hierarchy, but [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] does not map it.</span></span>  
  
-   <span data-ttu-id="badd7-108">Podczas mapowania klas, ale aby wykonać zapytanie względem tylko mapowanego klasy, można pominąć klas w hierarchii.</span><span class="sxs-lookup"><span data-stu-id="badd7-108">You can skip a class in the hierarchy when you map classes, but you can query against mapped classes only.</span></span>  
  
 <span data-ttu-id="badd7-109">Materializacja poprawne wartości kodu dyskryminatora muszą być unikatowe i odpowiadają wartościom w bazie danych.</span><span class="sxs-lookup"><span data-stu-id="badd7-109">For correct materialization, discriminator code values must be unique and match the values in the database.</span></span> <span data-ttu-id="badd7-110">Wiersz z wartością kodu dyskryminatora, która nie jest dokładnie dopasowana (nawet przez wielkość liter) tworzy wystąpienie klasy za pomocą <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A> równa `true`.</span><span class="sxs-lookup"><span data-stu-id="badd7-110">A row with a discriminator code value that does not exactly match (even by casing) instantiates the class by using <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A> set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="badd7-111">W tym przykładzie przedstawiono mapowanie hierarchii dziedziczenia, gdzie mapowane górnej, klasa (`Shape`) jest abstrakcyjna.</span><span class="sxs-lookup"><span data-stu-id="badd7-111">This example shows inheritance mapping for a hierarchy where the top, mapped class (`Shape`) is abstract.</span></span>  
  
 [!code-csharp[System.Data.Linq.Mapping.InheritanceMappingAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.InheritanceMappingAttribute/cs/Program.cs#1)]
 [!code-vb[System.Data.Linq.Mapping.InheritanceMappingAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.InheritanceMappingAttribute/vb/Module1.vb#1)]  
  
 <span data-ttu-id="badd7-112">Poniższy przykład pokazuje włączenie niezamapowane klasy.</span><span class="sxs-lookup"><span data-stu-id="badd7-112">The following example shows the inclusion of unmapped classes.</span></span> <span data-ttu-id="badd7-113">Niezamapowane klasy można umieścić w dowolnym miejscu w hierarchii.</span><span class="sxs-lookup"><span data-stu-id="badd7-113">You can put unmapped classes anywhere in the hierarchy.</span></span>  
  
 [!code-csharp[System.Data.Linq.Mapping.InheritanceMappingAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.InheritanceMappingAttribute/cs/Program.cs#2)]
 [!code-vb[System.Data.Linq.Mapping.InheritanceMappingAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.InheritanceMappingAttribute/vb/Module1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InheritanceMappingAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InheritanceMappingAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="badd7-114">Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="badd7-114">Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Code">
      <MemberSignature Language="C#" Value="public object Code { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Code" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Code" />
      <MemberSignature Language="VB.NET" Value="Public Property Code As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Code { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Code : obj with get, set" Usage="System.Data.Linq.Mapping.InheritanceMappingAttribute.Code" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="badd7-115">Pobiera lub ustawia wartość dyskryminatora kodu w hierarchii dziedziczenia zamapowany.</span><span class="sxs-lookup"><span data-stu-id="badd7-115">Gets or sets the discriminator code value in a mapped inheritance hierarchy.</span></span></summary>
        <value><span data-ttu-id="badd7-116">Musi być określone przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="badd7-116">Must be user-specified.</span></span> <span data-ttu-id="badd7-117">Nie ma żadnej wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="badd7-117">There is no default value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public bool IsDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool with get, set" Usage="System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="badd7-118">Pobiera lub ustawia informację, czy obiekt tego typu w tworzone, gdy wartość dyskryminatora jest niezgodny z określonym elementem value.</span><span class="sxs-lookup"><span data-stu-id="badd7-118">Gets or sets whether an object of this type in instantiated when the discriminator value does not match a specified value.</span></span></summary>
        <value><span data-ttu-id="badd7-119">Domyślne = <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="badd7-119">Default = <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="badd7-120">Dokładnie jeden z <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute> atrybutów musi być zadeklarowany z <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A> jako `true`.</span><span class="sxs-lookup"><span data-stu-id="badd7-120">Exactly one of the <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute> attributes must be declared with <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A> as `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Data.Linq.Mapping.InheritanceMappingAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="badd7-121">Pobiera lub ustawia typ klasy, w hierarchii.</span><span class="sxs-lookup"><span data-stu-id="badd7-121">Gets or sets the type of the class in the hierarchy.</span></span></summary>
        <value><span data-ttu-id="badd7-122">Musi być określone przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="badd7-122">Must be user-specified.</span></span> <span data-ttu-id="badd7-123">Nie ma żadnej wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="badd7-123">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="badd7-124">W hierarchii dziedziczenia, łącznie z typem głównym, należy używać dowolnego typu nieabstrakcyjnej.</span><span class="sxs-lookup"><span data-stu-id="badd7-124">Use any non-abstract type in the inheritance hierarchy, including the root type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>