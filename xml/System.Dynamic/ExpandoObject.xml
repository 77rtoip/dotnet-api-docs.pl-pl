<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExpandoObject.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5819b018355c643d951c9252212c100d95e7d4b18.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">819b018355c643d951c9252212c100d95e7d4b18</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Dynamic.ExpandoObject">
          <source>Represents an object whose members can be dynamically added and removed at run time.</source>
          <target state="translated">Reprezentuje obiekt, której członkowie mogą być dynamicznie dodawane lub usuwane w czasie wykonywania.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class enables you to add and delete members of its instances at run time and also to set and get values of these members.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> Klasy umożliwia dodawanie i usuwanie elementów członkowskich jego wystąpień w czasie wykonywania, a także ustawianie i pobieranie wartości z tych elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This class supports dynamic binding, which enables you to use standard syntax like <ph id="ph1">`sampleObject.sampleMember`</ph> instead of more complex syntax like <ph id="ph2">`sampleObject.GetAttribute("sampleMember")`</ph>.</source>
          <target state="translated">Ta klasa obsługuje wiązania dynamicznego, dzięki czemu można użyć standardowego składnię <ph id="ph1">`sampleObject.sampleMember`</ph> zamiast bardziej złożonych składnię <ph id="ph2">`sampleObject.GetAttribute("sampleMember")`</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the standard Dynamic Language Runtime (DLR) interface <ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, which enables you to share instances of the <ph id="ph3">`ExpandoObject`</ph> class between languages that support the DLR interoperability model.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> Klasa implementuje interfejs standardowego dynamiczne Language Runtime (DLR) <ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, co umożliwia udostępnianie wystąpienia <ph id="ph3">`ExpandoObject`</ph> klasy między języków, które obsługują modelu współdziałanie Runtime.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For example, you can create an instance of the <ph id="ph1">`ExpandoObject`</ph> class in C# and then pass it to an IronPython function.</source>
          <target state="translated">Na przykład można utworzyć wystąpienia <ph id="ph1">`ExpandoObject`</ph> klasy w języku C#, a następnie przekazać do funkcji IronPython.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept> and <bpt id="p2">[</bpt>Introducing the ExpandoObject<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=169157)</ept> on the C# Frequently Asked Questions Web site.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>Przegląd środowiska uruchomieniowego języka dynamicznego<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept> i <bpt id="p2">[</bpt>wprowadzenie klasie ExpandoObject<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=169157)</ept> w C# często zadawane pytania dotyczące witryny sieci Web.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class is an implementation of the dynamic object concept that enables getting, setting, and invoking members.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> Klasa jest implementacją koncepcji obiekt dynamiczny, która umożliwia pobieranie, ustawienie i wywoływanie elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you want to define types that have their own dynamic dispatch semantics, use the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">Jeśli chcesz określić typy, które mają własne dynamicznie wysyłania semantyki, użyj <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you want to define how dynamic objects participate in the interoperability protocol and manage DLR fast dynamic dispatch caching, create your own implementation of the <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> interface.</source>
          <target state="translated">Jeśli chcesz zdefiniować jak obiekty dynamiczne uczestniczyć w protokole współdziałanie i zarządzać nimi Runtime fast dynamicznej alokacji pamięci podręcznej, należy utworzyć własną implementację <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Creating an Instance</source>
          <target state="translated">Tworzenie wystąpienia</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In C#, to enable late binding for an instance of the <ph id="ph1">`ExpandoObject`</ph> class, you must use the <ph id="ph2">`dynamic`</ph> keyword.</source>
          <target state="translated">W języku C#, aby włączyć późne wiązanie dla wystąpienia <ph id="ph1">`ExpandoObject`</ph> klasy, należy użyć <ph id="ph2">`dynamic`</ph> — słowo kluczowe.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>przy użyciu typu dynamicznego<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In Visual Basic, dynamic operations are supported by late binding.</source>
          <target state="translated">W języku Visual Basic operacji dynamicznych, są obsługiwane przez późne wiązanie.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>wczesnego i późne wiązanie<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to create an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia wystąpienia <ph id="ph1">`ExpandoObject`</ph> klasy.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Adding New Members</source>
          <target state="translated">Dodawanie nowych elementów członkowskich</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>You can add properties, methods, and events to instances of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">Można dodać właściwości, metod i zdarzeń do wystąpień <ph id="ph1">`ExpandoObject`</ph> klasy.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add a new property to an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje sposób dodawania nowych właściwości do wystąpienia <ph id="ph1">`ExpandoObject`</ph> klasy.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The methods represent lambda expressions that are stored as delegates, which can be invoked when they are needed.</source>
          <target state="translated">Metody reprezentują wyrażenia lambda, które są przechowywane w postaci obiektów delegowanych, które mogą być wywoływane, gdy są potrzebne.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add a method that increments a value of the dynamic property.</source>
          <target state="translated">Poniższy przykład kodu pokazuje sposób dodawania metody, która zwiększa wartość właściwości dynamicznych.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add an event to an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób dodawania zdarzenia można instancji <ph id="ph1">`ExpandoObject`</ph> klasy.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Passing As a Parameter</source>
          <target state="translated">Przekazywanie jako parametru</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>You can pass instances of the <ph id="ph1">`ExpandoObject`</ph> class as parameters.</source>
          <target state="translated">Można przekazać wystąpienia <ph id="ph1">`ExpandoObject`</ph> klasy jako parametry.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Note that these instances are treated as dynamic objects in C# and late-bound objects in Visual Basic.</source>
          <target state="translated">Należy pamiętać, że te wystąpienia są traktowane jako dynamicznych w języku C# i późnym wiązaniem obiektów w Visual Basic.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This means that you do not have IntelliSense for object members and you do not receive compiler errors when you call non-existent members.</source>
          <target state="translated">Oznacza to, że nie masz IntelliSense dla elementów członkowskich obiektu i nie otrzymują błędów kompilatora podczas wywoływania elementów członkowskich nie istnieje.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you call a member that does not exist, an exception occurs.</source>
          <target state="translated">Wywołanie elementu członkowskiego, który nie istnieje, wystąpi wyjątek.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how you can create and use a method to print the names and values of properties.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano, jak tworzyć i użyć metody do drukowania, nazwy i wartości właściwości.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Enumerating and Deleting Members</source>
          <target state="translated">Wyliczania i usuwania elementów członkowskich</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interface.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> Klasa implementuje <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This enables enumeration of members added to the instance of the <ph id="ph1">`ExpandoObject`</ph> class at run time.</source>
          <target state="translated">Dzięki temu wyliczenie elementy członkowskie dodane do wystąpienia <ph id="ph1">`ExpandoObject`</ph> klasy w czasie wykonywania.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This can be useful if you do not know at compile time what members an instance might have.</source>
          <target state="translated">Może to być przydatne, jeśli nie znasz w czasie kompilacji członków, jakie może mieć wystąpienie.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example shows how you can cast an instance of the <ph id="ph1">`ExpandoObject`</ph> class to the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface and enumerate the instance's members.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak można rzutować wystąpienia <ph id="ph1">`ExpandoObject`</ph> klasy do <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interfejsu i wyliczania elementów członkowskich wystąpień.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In languages that do not have syntax for deleting members (such as C# and Visual Basic), you can delete a member by implicitly casting an instance of the <ph id="ph1">`ExpandoObject`</ph> to the <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interface and then deleting the member as a key/value pair.</source>
          <target state="translated">W językach, które nie mają składni związanych z usuwaniem elementów członkowskich (na przykład C# i Visual Basic), można usunąć członka niejawnie rzutowanie wystąpienia <ph id="ph1">`ExpandoObject`</ph> do <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interfejs, a następnie usuwając element członkowski jako pary klucza/wartości.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This is shown in the following example.</source>
          <target state="translated">Przedstawiono to w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Receiving Notifications of Property Changes</source>
          <target state="translated">Odbieranie powiadomień o zmianach właściwości</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface and can raise a <ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph> event when a member is added, deleted, or modified.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> Klasa implementuje <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interfejsu i może wiązać się z <ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph> zdarzenie, gdy element członkowski jest dodany, usunięty lub zmodyfikowany.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This enables <ph id="ph1">`ExpandoObject`</ph> class integration with Windows Presentation Foundation (WPF) data binding and other environments that require notification about changes in the object content.</source>
          <target state="translated">Dzięki temu <ph id="ph1">`ExpandoObject`</ph> klasy integracji z programem Windows Presentation Foundation (WPF), wiązanie danych oraz innych środowiskach, które wymagają powiadomienia o zmianach wprowadzonych w zawartości obiektu.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to create an event handler for the <ph id="ph1">`PropertyChanged`</ph> event.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób tworzenia programu obsługi zdarzeń dla <ph id="ph1">`PropertyChanged`</ph> zdarzeń.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.#ctor">
          <source>Initializes a new <ph id="ph1">&lt;see langword="ExpandoObject" /&gt;</ph> that does not have members.</source>
          <target state="translated">Inicjuje nowy <ph id="ph1">&lt;see langword="ExpandoObject" /&gt;</ph> , która nie ma elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> Który może służyć do iterowania po kolekcji.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.</source>
          <target state="translated">Wyrażenie, które reprezentuje Metaobiekt wysłania do metod dynamicznych wirtualnych.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The provided MetaObject will dispatch to the dynamic virtual methods.</source>
          <target state="translated">Podana Metaobiekt wyśle do metod dynamicznych wirtualnych.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.</source>
          <target state="translated">Obiekt może hermetyzowany wewnątrz innego Metaobiekt zapewniające niestandardowych dla poszczególnych działań.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object of the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> type.</source>
          <target state="translated">W obiekcie <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> typu.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>