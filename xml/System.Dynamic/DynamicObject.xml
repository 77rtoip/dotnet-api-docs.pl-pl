<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="048b7221c8f650af7e40e1fc748386ee05216b4b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30452700" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="83d5b-101">Zawiera klasę podstawową w celu określenia dynamicznego zachowania w czasie wykonywania.</span>
      <span class="sxs-lookup">
        <span data-stu-id="83d5b-101">Provides a base class for specifying dynamic behavior at run time.</span>
      </span>
      <span data-ttu-id="83d5b-102">Ta klasa musi być dziedziczone z; nie możesz utworzyć wystąpienia go bezpośrednio.</span>
      <span class="sxs-lookup">
        <span data-stu-id="83d5b-102">This class must be inherited from; you cannot instantiate it directly.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-103">`DynamicObject` Klasa umożliwia zdefiniowanie operacje mogą być wykonywane na obiekty dynamiczne i wykonać te operacje.</span><span class="sxs-lookup"><span data-stu-id="83d5b-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="83d5b-104">Na przykład można zdefiniować, co się dzieje, gdy próbuje pobrać lub ustawić właściwości obiektu, wywołanie metody lub wykonywania standardowych operacji matematycznych, takich jak dodawanie i mnożenie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="83d5b-105">Ta klasa może być przydatne, jeśli chcesz utworzyć wygodniejsze protokołu dla biblioteki.</span><span class="sxs-lookup"><span data-stu-id="83d5b-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="83d5b-106">Na przykład, jeśli użytkownicy biblioteki muszą używać składni, takich jak `Scriptobj.SetProperty("Count", 1)`, zapewniają możliwość używania tak samo, jak dużo prostsze składni `scriptobj.Count = 1`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="83d5b-107">Nie można bezpośrednio utworzyć wystąpienia `DynamicObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="83d5b-108">Aby zaimplementować dynamicznego zachowania, może zajść potrzeba dziedziczyć `DynamicObject` klasy i zastąpić metody niezbędne.</span><span class="sxs-lookup"><span data-stu-id="83d5b-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="83d5b-109">Na przykład, jeśli potrzebujesz tylko operacje do ustawiania i pobierania właściwości, można zastąpić tylko <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="83d5b-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="83d5b-110">W języku C#, aby włączyć dynamiczne zachowanie dla wystąpień klas pochodnych `DynamicObject` klasy, należy użyć `dynamic` — słowo kluczowe.</span><span class="sxs-lookup"><span data-stu-id="83d5b-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="83d5b-111">Aby uzyskać więcej informacji, zobacz [przy użyciu typu dynamicznego](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="83d5b-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="83d5b-112">W języku Visual Basic operacji dynamicznych, są obsługiwane przez późne wiązanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="83d5b-113">Aby uzyskać więcej informacji, zobacz [wczesnego i późne wiązanie](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="83d5b-113">For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
 <span data-ttu-id="83d5b-114">Poniższy przykładowy kod przedstawia sposób tworzenia wystąpienia klasy, która jest pochodną `DynamicObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="83d5b-115">Możesz także dodać własne elementy członkowskie do klas pochodnych `DynamicObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="83d5b-116">Jeśli klasa definiuje właściwości i zastępuje również <xref:System.Dynamic.DynamicObject.TrySetMember%2A> metoda, środowisko uruchomieniowe języka dynamicznego (DLR) najpierw używa integratora języka do wyszukania statycznych definicji właściwości w klasie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="83d5b-117">Jeśli nie ma takich właściwości, wywołuje metodę DLR <xref:System.Dynamic.DynamicObject.TrySetMember%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="83d5b-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="83d5b-118">`DynamicObject` Klasa implementuje interfejs DLR <xref:System.Dynamic.IDynamicMetaObjectProvider>, co umożliwia udostępnianie wystąpienia `DynamicObject` klasy między języków, które obsługują modelu współdziałanie Runtime.</span><span class="sxs-lookup"><span data-stu-id="83d5b-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="83d5b-119">Na przykład można utworzyć wystąpienia `DynamicObject` klasy w języku C#, a następnie przekazać do funkcji IronPython.</span><span class="sxs-lookup"><span data-stu-id="83d5b-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="83d5b-120">Aby uzyskać więcej informacji, zobacz [Przegląd środowiska uruchomieniowego języka dynamicznego](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span><span class="sxs-lookup"><span data-stu-id="83d5b-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83d5b-121">Jeśli masz Prosty scenariusz, w którym wymagany jest obiekt, który można tylko dodawać i usuwać elementy członkowskie w czasie wykonywania, ale wymagające zdefiniować określonych operacji i nie mieć statyczne elementy członkowskie, skorzystaj <xref:System.Dynamic.ExpandoObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="83d5b-122">Jeśli masz bardziej zaawansowanym scenariuszu, w którym należy zdefiniować sposób dynamiczne obiekty uczestniczyć w protokole współdziałania lub trzeba zarządzać Runtime fast dynamicznej alokacji pamięci podręcznej, utworzyć własną implementację <xref:System.Dynamic.IDynamicMetaObjectProvider> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="83d5b-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-123">Załóżmy chcesz zapewnić alternatywne składni do uzyskiwania dostępu do wartości w słowniku, więc to zamiast elementu zapisu `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` w języku Visual Basic), można napisać `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="83d5b-124">Ponadto chcesz tej składni, aby uwzględniać wielkości liter, tak aby `sampleDictionary.Text` jest odpowiednikiem `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="83d5b-125">Poniższy przykład kodu pokazuje `DynamicDictionary` klasy, która jest pochodną `DynamicObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="83d5b-126">`DynamicDictionary` Klasa zawiera obiekt `Dictionary<string, object>` typu (`Dictionary(Of String, Object)` w języku Visual Basic) do przechowywania par klucz wartość i zastąpienia <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody służące do obsługi nowej składni.</span><span class="sxs-lookup"><span data-stu-id="83d5b-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="83d5b-127">Zapewnia także `Count` zawiera właściwość, która zawiera słownik ile właściwości dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="83d5b-128">Aby uzyskać więcej przykładów, zobacz [tworzenia otoki z klasy DynamicObject](http://go.microsoft.com/fwlink/?LinkId=169008) na blogu C# — często zadawane pytania.</span><span class="sxs-lookup"><span data-stu-id="83d5b-128">For more examples, see [Creating Wrappers with DynamicObject](http://go.microsoft.com/fwlink/?LinkId=169008) on the C# Frequently Asked Questions blog.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83d5b-129">Typy zainicjować nowe wystąpienie klasy pochodne umożliwia <see cref="T:System.Dynamic.DynamicObject" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-130">Nie można bezpośrednio utworzyć wystąpienia <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-131">Aby zaimplementować dynamicznego zachowania, muszą dziedziczyć <xref:System.Dynamic.DynamicObject> klasy i zastąpić metody niezbędne.</span><span class="sxs-lookup"><span data-stu-id="83d5b-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="83d5b-132">W języku C#, aby włączyć dynamiczne zachowanie dla wystąpienia klas pochodnych <xref:System.Dynamic.DynamicObject> klasy, należy użyć `dynamic` — słowo kluczowe.</span><span class="sxs-lookup"><span data-stu-id="83d5b-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="83d5b-133">Aby uzyskać więcej informacji, zobacz [przy użyciu typu dynamicznego](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="83d5b-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="83d5b-134">W języku Visual Basic operacji dynamicznych, są obsługiwane przez późne wiązanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="83d5b-135">Aby uzyskać więcej informacji, zobacz [wczesnego i późne wiązanie](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="83d5b-135">For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-136">Poniższy przykładowy kod przedstawia sposób tworzenia wystąpienia klasy, które są pochodnymi <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83d5b-137">Zwraca wyliczenie wszystkich nazw dynamicznego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-137">Returns the enumeration of all dynamic member names.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-138">Sekwencja zawierającej nazwy dynamicznego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-138">A sequence that contains dynamic member names.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-139">Ta metoda służy tylko do celów debugowania.</span><span class="sxs-lookup"><span data-stu-id="83d5b-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="83d5b-140">Wyrażenie, które reprezentuje <see cref="T:System.Dynamic.DynamicMetaObject" /> do wysłania do metod dynamicznych wirtualnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-141">Udostępnia <see cref="T:System.Dynamic.DynamicMetaObject" /> który wywołuje dynamicznych metod wirtualnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span>
          </span>
          <span data-ttu-id="83d5b-142">Obiekt może być hermetyzowany wewnątrz innego <see cref="T:System.Dynamic.DynamicMetaObject" /> zapewniające niestandardowych dla poszczególnych działań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span>
          </span>
          <span data-ttu-id="83d5b-143">Ta metoda obsługuje infrastrukturę środowiska Dynamic Language Runtime dla obiektów implementujących języka i nie jest on przeznaczony do użycia bezpośrednio w kodzie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-144">Obiekt <see cref="T:System.Dynamic.DynamicMetaObject" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-145">Zawiera informacje o operację binarną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-145">Provides information about the binary operation.</span>
          </span>
          <span data-ttu-id="83d5b-146">
            <c>Integratora. Operacja</c> zwraca właściwość <see cref="T:System.Linq.Expressions.ExpressionType" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span>
          </span>
          <span data-ttu-id="83d5b-147">Na przykład w przypadku <c>Suma = najpierw + drugi</c> instrukcji, gdzie <c>pierwszy</c> i <c>drugi</c> pochodne <see langword="DynamicObject" /> klasy, <c>integratora. Operacja</c> zwraca <c>ExpressionType.Add</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="83d5b-148">Prawy operand operację binarną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-148">The right operand for the binary operation.</span>
          </span>
          <span data-ttu-id="83d5b-149">Na przykład w przypadku <c>Suma = najpierw + drugi</c> instrukcji, gdzie <c>pierwszy</c> i <c>drugi</c> pochodne <see langword="DynamicObject" /> klasy, <c>arg</c>jest równa <c>drugi</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>arg</c> is equal to <c>second</c>.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="83d5b-150">Wynik operacji danych binarnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-150">The result of the binary operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-151">Udostępnia implementację dla operacji binarnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-151">Provides implementation for binary operations.</span>
          </span>
          <span data-ttu-id="83d5b-152">Klasy wyprowadzone z <see cref="T:System.Dynamic.DynamicObject" /> klasy mogą przesłaniać tę metodę, aby określić zachowanie dynamicznych dla operacji, takich jak dodawanie i mnożenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-153">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-153">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-154">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-155">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-155">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-156">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić realizację operacji binarnych dla obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="83d5b-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="83d5b-157">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-158">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-159">Ta metoda jest wywoływana, gdy masz operacji binarnych, takich jak dodawanie lub mnożenie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="83d5b-160">Na przykład jeśli <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> metoda zostanie przesłonięta, jest wywoływana automatycznie dla instrukcji, takich jak `sum = first + second` lub `multiply = first*second`, gdzie `first` jest pochodną `DynamicObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="83d5b-161">Informacje o typie operację binarną można uzyskać za pomocą `Operation` właściwość `binder` parametru.</span><span class="sxs-lookup"><span data-stu-id="83d5b-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="83d5b-162">Jeśli obiekt dynamiczny jest używana tylko w języku C# i Visual Basic, `binder.Operation` właściwości może mieć jeden z następujących wartości z <xref:System.Linq.Expressions.ExpressionType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="83d5b-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="83d5b-163">Jednak w innych językach takich jak IronPython lub IronRuby może mieć inne wartości.</span><span class="sxs-lookup"><span data-stu-id="83d5b-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="83d5b-164">Wartość</span><span class="sxs-lookup"><span data-stu-id="83d5b-164">Value</span></span>|<span data-ttu-id="83d5b-165">Opis</span><span class="sxs-lookup"><span data-stu-id="83d5b-165">Description</span></span>|<span data-ttu-id="83d5b-166">C#</span><span class="sxs-lookup"><span data-stu-id="83d5b-166">C#</span></span>|<span data-ttu-id="83d5b-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="83d5b-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="83d5b-168">Operacja dodawania bez sprawdzanie przepełnienia dla argumentów operacji liczbowych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="83d5b-169">Operacja przydział złożony dodawania bez sprawdzanie przepełnienia dla argumentów operacji liczbowych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="83d5b-170">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="83d5b-171">Bitowej `AND` operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="83d5b-172">Bitowej `AND` złożone operacji przypisania.</span><span class="sxs-lookup"><span data-stu-id="83d5b-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="83d5b-173">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="83d5b-174">Operacja arytmetycznego dzielenia.</span><span class="sxs-lookup"><span data-stu-id="83d5b-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="83d5b-175">Przydział złożony arytmetycznego dzielenia operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="83d5b-176">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="83d5b-177">Bitowej `XOR` operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="83d5b-178">Bitowej `XOR` złożone operacji przypisania.</span><span class="sxs-lookup"><span data-stu-id="83d5b-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="83d5b-179">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="83d5b-180">Porównanie "większe niż".</span><span class="sxs-lookup"><span data-stu-id="83d5b-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="83d5b-181">Porównanie "większe lub równe".</span><span class="sxs-lookup"><span data-stu-id="83d5b-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="83d5b-182">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="83d5b-183">Operacja bitowa przesunięcia w lewo.</span><span class="sxs-lookup"><span data-stu-id="83d5b-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="83d5b-184">Operacja bitowe przesunięcia w lewo przydział złożony.</span><span class="sxs-lookup"><span data-stu-id="83d5b-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="83d5b-185">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="83d5b-186">Porównanie "mniejsze niż".</span><span class="sxs-lookup"><span data-stu-id="83d5b-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="83d5b-187">Porównanie "mniejsza niż lub równa".</span><span class="sxs-lookup"><span data-stu-id="83d5b-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="83d5b-188">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="83d5b-189">Operacji arytmetycznych resztę.</span><span class="sxs-lookup"><span data-stu-id="83d5b-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="83d5b-190">Przydział złożony arytmetyczne pozostałej operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="83d5b-191">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="83d5b-192">Mnożenie bez sprawdzanie przepełnienia dla argumentów operacji liczbowych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="83d5b-193">Przydział złożony mnożenie bez sprawdzanie przepełnienia dla argumentów operacji liczbowych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="83d5b-194">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="83d5b-195">Porównanie nierówności.</span><span class="sxs-lookup"><span data-stu-id="83d5b-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="83d5b-196">A bitowe lub logicznej `OR` operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="83d5b-197">A bitowe lub logicznej `OR` przydział złożony.</span><span class="sxs-lookup"><span data-stu-id="83d5b-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="83d5b-198">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="83d5b-199">Matematyczne działanie podniesienia liczby do potęgi.</span><span class="sxs-lookup"><span data-stu-id="83d5b-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="83d5b-200">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="83d5b-201">Operacja bitowa przesunięcia w prawo.</span><span class="sxs-lookup"><span data-stu-id="83d5b-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="83d5b-202">Operacja bitowe przydział złożony przesunięcia w prawo.</span><span class="sxs-lookup"><span data-stu-id="83d5b-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="83d5b-203">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="83d5b-204">Operacja odejmowania bez sprawdzanie przepełnienia dla argumentów operacji liczbowych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="83d5b-205">Operacja przydział złożony odejmowania bez sprawdzanie przepełnienia dla argumentów operacji liczbowych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="83d5b-206">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="83d5b-207">Aby zaimplementować `OrElse` (`a || b`) i `AndAlso` (`a && b`) operacji dynamicznej obiektów w języku C#, można zaimplementować zarówno <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> — metoda i <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> — metoda.</span><span class="sxs-lookup"><span data-stu-id="83d5b-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="83d5b-208">`OrElse` Operacja obejmuje jednoargumentowego `IsTrue` operacji i plik binarny `Or` operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="83d5b-209">`Or` Jest wykonywane tylko wtedy, gdy wynik `IsTrue` operacji `false`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="83d5b-210">`AndAlso` Operacja obejmuje jednoargumentowego `IsFalse` operacji i plik binarny `And` operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="83d5b-211">`And` Jest wykonywane tylko wtedy, gdy wynik `IsFalse` operacji `false`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-212">Założono, że należy to struktura danych do przechowywania numerycznych i tekstowych reprezentacji liczb, i chcesz zdefiniować podstawowych operacji matematycznych, takich jak dodawanie i odejmowanie dla tych danych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="83d5b-213">Poniższy przykład kodu pokazuje `DynamicNumber` klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-214">`DynamicNumber` zastępuje <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> metody w celu umożliwienia operacji matematycznych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="83d5b-215">Zastępuje ona również <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody w celu umożliwienia dostępu do elementów.</span><span class="sxs-lookup"><span data-stu-id="83d5b-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="83d5b-216">W tym przykładzie tylko operacje dodawania i odejmowania są obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="83d5b-217">Próba zapisu instrukcję, takich jak `resultNumber = firstNumber*secondNumber`, jest zgłaszany wyjątek czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="83d5b-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-218">Udostępnia informacje na temat operacji konwersji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-218">Provides information about the conversion operation.</span>
          </span>
          <span data-ttu-id="83d5b-219">
            <c>Integratora. Typ</c> właściwość zawiera typ, do którego można przekonwertować obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span>
          </span>
          <span data-ttu-id="83d5b-220">Na przykład dla instrukcji <c>sampleObject (ciąg)</c> w języku C# (<c>CType (sampleObject, typ)</c> w języku Visual Basic), gdzie <c>sampleObject</c> jest wystąpieniem klasy pochodnej z <see cref="T:System.Dynamic.DynamicObject" /> klasy <c>integratora. Typ</c> zwraca <see cref="T:System.String" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span>
          </span>
          <span data-ttu-id="83d5b-221">
            <c>Integratora. Jawne</c> właściwość zawiera informacje o rodzaj konwersji, która występuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span>
          </span>
          <span data-ttu-id="83d5b-222">Zwraca <see langword="true" /> dla jawnej konwersji i <see langword="false" /> dla niejawnej konwersji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="83d5b-223">Wynik operacji konwersji typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-223">The result of the type conversion operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-224">Udostępnia implementację dla typu operacji konwersji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-224">Provides implementation for type conversion operations.</span>
          </span>
          <span data-ttu-id="83d5b-225">Klasy wyprowadzone z <see cref="T:System.Dynamic.DynamicObject" /> klasy mogą przesłaniać tę metodę, aby określić zachowanie dynamicznych dla operacji, które przekonwertować obiektu typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-226">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-226">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-227">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-228">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-228">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-229">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić, jak dla obiekt dynamiczny, w którym powinien można przeprowadzić konwersji typu.</span><span class="sxs-lookup"><span data-stu-id="83d5b-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="83d5b-230">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-231">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-232">W języku C# Jeśli ta metoda zostanie przesłonięta, jest automatycznie wywoływana, gdy masz konwersji jawnych ani niejawnych, jak pokazano w poniższym przykładzie kodu.</span><span class="sxs-lookup"><span data-stu-id="83d5b-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="83d5b-233">W języku Visual Basic jest obsługiwana tylko jawnej konwersji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="83d5b-234">Jeśli przesłonięcia tej metody należy wywołać przy użyciu <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> lub <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> funkcji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-235">Założono, że należy to struktura danych do przechowywania tekstową i numeryczne liczbami w postaci i chcesz zdefiniować konwersje tej struktury danych do ciągów i liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="83d5b-236">Poniższy przykład kodu pokazuje `DynamicNumber` klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-237">`DynamicNumber` zastępuje <xref:System.Dynamic.DynamicObject.TryConvert%2A> metody w celu umożliwienia przeprowadzenia konwersji typu.</span><span class="sxs-lookup"><span data-stu-id="83d5b-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="83d5b-238">Zastępuje ona również <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody w celu umożliwienia dostępu do elementów danych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="83d5b-239">W tym przykładzie jest obsługiwana tylko konwersja do ciągów i liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="83d5b-240">Jeśli zostanie podjęta próba konwersji obiektu do innego typu, zwracany jest wyjątek czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="83d5b-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-241">Udostępnia informacje na temat operacji inicjowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-241">Provides information about the initialization operation.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="83d5b-242">Argumenty, które są przekazywane do obiektu podczas inicjowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-242">The arguments that are passed to the object during initialization.</span>
          </span>
          <span data-ttu-id="83d5b-243">Na przykład w przypadku <c>nowe SampleType(100)</c> operacji, gdzie <c>SampleType</c> jest typ jest pochodną <see cref="T:System.Dynamic.DynamicObject" /> klasy, <c>argumentów [0]</c> jest równa 100.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="83d5b-244">Wynik inicjowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-244">The result of the initialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-245">Udostępnia implementację dla operacji, które inicjuje nowe wystąpienie obiektu dynamicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span>
          </span>
          <span data-ttu-id="83d5b-246">Ta metoda nie jest przeznaczony do użycia w języku C# lub Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-246">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-247">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-247">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-248">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-249">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-249">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-250">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić, jak można zainicjować nowego wystąpienia obiektu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="83d5b-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="83d5b-251">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-252">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-253">C# i Visual Basic kompilatory nigdy nie Emituj kod, aby użyć tej metody, ponieważ nie obsługują typów najwyższej jakości.</span><span class="sxs-lookup"><span data-stu-id="83d5b-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="83d5b-254">Ta metoda jest przeznaczona dla języków, które obsługuje inicjowania obiekty dynamiczne przy użyciu składni, takich jak `dynamic new`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-255">Zawiera informacje dotyczące usuwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-255">Provides information about the deletion.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="83d5b-256">Indeksy, które mają zostać usunięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-256">The indexes to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-257">Udostępnia implementację dla operacji, które usuwanie według indeksu obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-257">Provides the implementation for operations that delete an object by index.</span>
          </span>
          <span data-ttu-id="83d5b-258">Ta metoda nie jest przeznaczony do użycia w języku C# lub Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-258">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-259">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-259">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-260">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-261">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-261">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-262">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić, jak wartość, która ma określony indeks powinien zostać usunięty.</span><span class="sxs-lookup"><span data-stu-id="83d5b-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="83d5b-263">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-264">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-265">C# i Visual Basic kompilatory nigdy nie Emituj kod, aby użyć tej metody, ponieważ nie obsługują tego rodzaju operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="83d5b-266">Ta metoda jest przeznaczona dla języków, które obsługuje składni usuwania obiektów przez indeks, takich jak `del sampleObject[1,2]` w języku Python.</span><span class="sxs-lookup"><span data-stu-id="83d5b-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-267">Zawiera informacje dotyczące usuwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-267">Provides information about the deletion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-268">Udostępnia implementację dla operacji, które usunąć elemencie członkowskim obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-268">Provides the implementation for operations that delete an object member.</span>
          </span>
          <span data-ttu-id="83d5b-269">Ta metoda nie jest przeznaczony do użycia w języku C# lub Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-269">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-270">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-270">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-271">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-272">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-272">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-273">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić, jak można usunąć elementu członkowskiego obiektu.</span><span class="sxs-lookup"><span data-stu-id="83d5b-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="83d5b-274">W przypadku tej metody nie jest przesłonięcia integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-275">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-276">C# i Visual Basic kompilatory nigdy nie Emituj kod, aby użyć tej metody, ponieważ nie obsługują tego rodzaju operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="83d5b-277">Ta metoda jest przeznaczona dla języków, które obsługuje składni związanych z usuwaniem elementów członkowskich, takich jak `del sampleObject.SampleMember` w języku Python.</span><span class="sxs-lookup"><span data-stu-id="83d5b-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-278">Udostępnia informacje na temat operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-278">Provides information about the operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="83d5b-279">Indeksy, które są używane w ramach operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-279">The indexes that are used in the operation.</span>
          </span>
          <span data-ttu-id="83d5b-280">Na przykład w przypadku <c>sampleObject [3]</c> operacji w języku C# (<c>sampleObject(3)</c> w języku Visual Basic), gdzie <c>sampleObject</c> jest pochodną <see langword="DynamicObject" /> klasy, <c>indeksy [0]</c> ma wartość 3.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="83d5b-281">Wynik operacji indeksowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-281">The result of the index operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-282">Udostępnia implementację dla operacji, które uzyskują wartości według indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-282">Provides the implementation for operations that get a value by index.</span>
          </span>
          <span data-ttu-id="83d5b-283">Klasy wyprowadzone z <see cref="T:System.Dynamic.DynamicObject" /> klasy mogą przesłaniać tę metodę, aby określić zachowanie dynamicznych dla operacji indeksowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-284">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-284">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-285">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-286">(W większości przypadków czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-286">(In most cases, a run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-287">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić sposób uzyskiwania wartości według indeksu należy wykonać dla obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="83d5b-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="83d5b-288">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-289">(W większości przypadków czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-290">Jeśli ta metoda zostanie przesłonięta, jest automatycznie wywoływana, gdy masz operacji, takich jak `sampleObject[3]` w języku C# lub `sampleObject(3)` w Visual Basic, gdzie `sampleObject` jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-291">Założono chcesz utworzyć obiekt, w którym właściwości mogą być dostępne przez nazw takich jak `Property0`, `Property1`i tak dalej lub według indeksu, dzięki czemu, na przykład `sampleObject.Property0` jest odpowiednikiem `sampleObject[0]` w języku C# lub `sampleObject(0)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="83d5b-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="83d5b-292">Poniższy przykład kodu pokazuje `SampleDynamicObject` klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-293">`SampleDynamicObject` Klasa zawiera obiekt `Dictionary<string, object>` typu (`Dictionary(Of String, Object)` w języku Visual Basic) do przechowywania par klucz wartość.</span><span class="sxs-lookup"><span data-stu-id="83d5b-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="83d5b-294">`SampleDynamicObject` zastępuje <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> i <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> metody, aby umożliwić dostęp przez indeks.</span><span class="sxs-lookup"><span data-stu-id="83d5b-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="83d5b-295">Zastępuje on <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody w celu umożliwienia dostępu przez właściwość name.</span><span class="sxs-lookup"><span data-stu-id="83d5b-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-296">Zawiera informacje o obiekcie, który wywołał operację dynamiczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-296">Provides information about the object that called the dynamic operation.</span>
          </span>
          <span data-ttu-id="83d5b-297">
            <c>Integratora. Nazwa</c> właściwość zawiera nazwę elementu członkowskiego, na których jest wykonywana operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span>
          </span>
          <span data-ttu-id="83d5b-298">Na przykład w przypadku <c>Console.WriteLine(sampleObject.SampleProperty)</c> instrukcji, gdzie <c>sampleObject</c> jest wystąpienie klasy pochodnej z <see cref="T:System.Dynamic.DynamicObject" /> klasy <c>integratora . Nazwa</c> zwraca "SampleProperty".</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span>
          </span>
          <span data-ttu-id="83d5b-299">
            <c>Integratora. IgnoreCase</c> właściwość określa, czy nazwa elementu członkowskiego jest rozróżniana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="83d5b-300">Wynik operacji get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-300">The result of the get operation.</span>
          </span>
          <span data-ttu-id="83d5b-301">Na przykład, jeśli metoda jest wywoływana dla właściwości, można przypisać wartości właściwości do <c>wynik</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-301">For example, if the method is called for a property, you can assign the property value to <c>result</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-302">Udostępnia implementację dla operacji, które uzyskują wartości elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-302">Provides the implementation for operations that get member values.</span>
          </span>
          <span data-ttu-id="83d5b-303">Klasy wyprowadzone z <see cref="T:System.Dynamic.DynamicObject" /> klasy mogą przesłaniać tę metodę, aby określić zachowanie dynamicznych dla operacji, takich jak pobierania wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-304">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-304">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-305">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-306">(W większości przypadków czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-306">(In most cases, a run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-307">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić realizację operacji, które uzyskują wartości elementu członkowskiego dla obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="83d5b-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="83d5b-308">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-309">(W większości przypadków czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-310">Ta metoda jest wywoływana, gdy masz instrukcje, takie jak `Console.WriteLine(sampleObject.SampleProperty)`, gdzie `sampleObject` jest wystąpienie klasy pochodnej z <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="83d5b-311">Możesz także dodać własne elementy członkowskie do klas pochodnych `DynamicObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="83d5b-312">Jeśli klasa definiuje właściwości i zastępuje również <xref:System.Dynamic.DynamicObject.TrySetMember%2A> metoda, środowisko uruchomieniowe języka dynamicznego (DLR) najpierw używa integratora języka do wyszukania statycznych definicji właściwości w klasie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="83d5b-313">Jeśli nie ma takich właściwości, wywołuje metodę DLR <xref:System.Dynamic.DynamicObject.TrySetMember%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="83d5b-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-314">Załóżmy chcesz zapewnić alternatywne składni do uzyskiwania dostępu do wartości w słowniku, więc to zamiast elementu zapisu `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` w języku Visual Basic), można napisać `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="83d5b-315">Ponadto ta Składnia musi być bez uwzględniania wielkości liter, tak aby `sampleDictionary.Text` jest odpowiednikiem `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="83d5b-316">Poniższy przykład kodu pokazuje `DynamicDictionary` klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-317">`DynamicDictionary` Klasa zawiera obiekt `Dictionary<string, object>` typu (`Dictionary(Of String, Object)` w języku Visual Basic) do przechowywania par klucz wartość i zastąpienia <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody służące do obsługi nowej składni.</span><span class="sxs-lookup"><span data-stu-id="83d5b-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="83d5b-318">Zapewnia także `Count` zawiera właściwość, która zawiera słownik ile właściwości dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-319">Udostępnia informacje na temat operacji invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-319">Provides information about the invoke operation.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="83d5b-320">Argumenty, które są przekazywane do obiektu podczas operacji wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-320">The arguments that are passed to the object during the invoke operation.</span>
          </span>
          <span data-ttu-id="83d5b-321">Na przykład w przypadku <c>sampleObject(100)</c> operacji, gdy <c>sampleObject</c> jest pochodną <see cref="T:System.Dynamic.DynamicObject" /> klasy, <c>argumentów [0]</c> jest równa 100.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="83d5b-322">Wynik wywołania obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-322">The result of the object invocation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-323">Udostępnia implementację dla operacji, które wywołują obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-323">Provides the implementation for operations that invoke an object.</span>
          </span>
          <span data-ttu-id="83d5b-324">Klasy wyprowadzone z <see cref="T:System.Dynamic.DynamicObject" /> klasy mogą przesłaniać tę metodę, aby określić zachowanie dynamicznych dla operacji, takich jak wywoływanie obiektu lub delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-325">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-325">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-326">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-327">(W większości przypadków, jest zgłaszany wyjątek czasu wykonywania specyficzny dla języka.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-327">(In most cases, a language-specific run-time exception is thrown.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-328">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić realizację operacji, które wywołują obiektu dla obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="83d5b-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="83d5b-329">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-330">(W większości przypadków czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-331">Jeśli ta metoda zostanie przesłonięta, jest automatycznie wywoływana, gdy masz operacji, takich jak `sampleObject(100)`, gdzie `sampleObject` jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="83d5b-332">Operacja do wywoływania obiektu jest obsługiwana w języku C#, ale nie w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="83d5b-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="83d5b-333">Kompilator Visual Basic nigdy nie emituje kod, aby użyć tej metody i języka Visual Basic nie obsługuje składnię `sampleObject(100)`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-334">Załóżmy, należy to struktura danych do przechowywania tekstową i numeryczne liczbami w postaci.</span><span class="sxs-lookup"><span data-stu-id="83d5b-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="83d5b-335">Chcesz można było określić wartość dla każdej właściwości pojedynczo, a także do zainicjowania wszystkich właściwości w jednej instrukcji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="83d5b-336">Poniższy przykład kodu pokazuje `DynamicNumber` klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-337">`DynamicNumber` zastępuje <xref:System.Dynamic.DynamicObject.TryInvoke%2A> metody, aby umożliwić inicjowanie wszystkich właściwości w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="83d5b-338">Zastępuje ona również <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody w celu umożliwienia dostępu do właściwości pojedynczego obiektu.</span><span class="sxs-lookup"><span data-stu-id="83d5b-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-339">Informacje na temat operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-339">Provides information about the dynamic operation.</span>
          </span>
          <span data-ttu-id="83d5b-340">
            <c>Integratora. Nazwa</c> właściwość zawiera nazwę elementu członkowskiego, na których jest wykonywana operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span>
          </span>
          <span data-ttu-id="83d5b-341">Na przykład dla instrukcji <c>sampleObject.SampleMethod(100)</c>, gdzie <c>sampleObject</c> jest wystąpienie klasy pochodnej z <see cref="T:System.Dynamic.DynamicObject" /> klasy <c>integratora. Nazwa</c> zwraca "SampleMethod".</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span>
          </span>
          <span data-ttu-id="83d5b-342">
            <c>Integratora. IgnoreCase</c> właściwość określa, czy nazwa elementu członkowskiego jest rozróżniana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="83d5b-343">Argumenty, które są przekazywane do elementu obiektu podczas operacji wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-343">The arguments that are passed to the object member during the invoke operation.</span>
          </span>
          <span data-ttu-id="83d5b-344">Na przykład dla instrukcji <c>sampleObject.SampleMethod(100)</c>, gdzie <c>sampleObject</c> jest pochodną <see cref="T:System.Dynamic.DynamicObject" /> klasy <c>argumentów [0]</c> jest równa 100.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="83d5b-345">Wynik wywołania elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-345">The result of the member invocation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-346">Udostępnia implementację dla operacji, które wywołują element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-346">Provides the implementation for operations that invoke a member.</span>
          </span>
          <span data-ttu-id="83d5b-347">Klasy wyprowadzone z <see cref="T:System.Dynamic.DynamicObject" /> klasy mogą przesłaniać tę metodę, aby określić zachowanie dynamicznych dla operacji, takich jak wywołanie metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-348">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-348">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-349">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-350">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-350">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-351">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić realizację operacji, które wywołują element członkowski obiektu dla obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="83d5b-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="83d5b-352">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-353">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-354">Jeśli ta metoda zostanie przesłonięta, automatycznie jest wywoływana podczas wykonywania operacji, takich jak `sampleObject.SampleMethod(100)`, gdzie `sampleObject` jest pochodną `DynamicObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="83d5b-355">Można również dodać własne metody do klasy, które są pochodnymi <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-356">Na przykład, jeśli można zastąpić <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> metody dynamicznej alokacji system najpierw próbuje określić, czy określona metoda istnieje w klasie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="83d5b-357">Jeśli metoda nie zostanie znaleziona, używa <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="83d5b-358">Ta metoda nie obsługuje `ref` i `out` parametrów.</span><span class="sxs-lookup"><span data-stu-id="83d5b-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="83d5b-359">Wszystkie parametry w `args` tablicy są przekazywane przez wartość.</span><span class="sxs-lookup"><span data-stu-id="83d5b-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-360">Załóżmy chcesz zapewnić alternatywne składni do uzyskiwania dostępu do wartości w słowniku, więc to zamiast elementu zapisu `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` w języku Visual Basic), można napisać `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="83d5b-361">Ponadto chcesz można wywołać metody standardowe słownika dla tego słownika.</span><span class="sxs-lookup"><span data-stu-id="83d5b-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="83d5b-362">Poniższy przykład kodu pokazuje `DynamicDictionary` klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-363">`DynamicDictionary` Klasa zawiera obiekt `Dictionary<string, object>` typu (`Dictionary(Of String, Object)` w języku Visual Basic) do przechowywania par klucz wartość.</span><span class="sxs-lookup"><span data-stu-id="83d5b-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="83d5b-364">Zastępuje on <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> metody do obsługi metod <xref:System.Collections.Generic.Dictionary%602> klasy i zastąpień <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody służące do obsługi nowej składni.</span><span class="sxs-lookup"><span data-stu-id="83d5b-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="83d5b-365">Zapewnia także `Print` metodę, która wyświetla wszystkie słownik kluczy i wartości.</span><span class="sxs-lookup"><span data-stu-id="83d5b-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-366">Udostępnia informacje na temat operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-366">Provides information about the operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="83d5b-367">Indeksy, które są używane w ramach operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-367">The indexes that are used in the operation.</span>
          </span>
          <span data-ttu-id="83d5b-368">Na przykład w przypadku <c>sampleObject [3] = 10</c> operacji w języku C# (<c>sampleObject(3) = 10</c> w języku Visual Basic), gdzie <c>sampleObject</c> jest pochodną <see cref="T:System.Dynamic.DynamicObject" /> klasy <c>indeksy [0]</c> ma wartość 3.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="83d5b-369">Wartość do ustawienia do obiektu, który ma określony indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-369">The value to set to the object that has the specified index.</span>
          </span>
          <span data-ttu-id="83d5b-370">Na przykład w przypadku <c>sampleObject [3] = 10</c> operacji w języku C# (<c>sampleObject(3) = 10</c> w języku Visual Basic), gdzie <c>sampleObject</c> jest pochodną <see cref="T:System.Dynamic.DynamicObject" /> klasy <c>wartość</c> jest równa 10.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>value</c> is equal to 10.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-371">Udostępnia implementację dla operacji, które ustalają wartości według indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-371">Provides the implementation for operations that set a value by index.</span>
          </span>
          <span data-ttu-id="83d5b-372">Klasy wyprowadzone z <see cref="T:System.Dynamic.DynamicObject" /> klasy mogą przesłaniać tę metodę, aby określić zachowanie dynamicznych dla operacji, które uzyskują dostęp do obiektów przy określonym indeksie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-373">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-373">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-374">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-375">(W większości przypadków, jest zgłaszany wyjątek czasu wykonywania specyficzny dla języka.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-375">(In most cases, a language-specific run-time exception is thrown.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-376">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić realizację operacje, które uzyskują dostęp do obiektu przez indeks dla obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="83d5b-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="83d5b-377">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-378">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-379">Jeśli ta metoda zostanie przesłonięta, jest automatycznie wywoływana, gdy masz operacji, takich jak `sampleObject[3] = 10` w języku C# lub `sampleObject(3) = 10` w Visual Basic, gdzie `sampleObject` jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-380">Założono chcesz utworzyć obiekt, w którym właściwości mogą być dostępne przez nazw takich jak `Property0`, `Property1`i tak dalej lub według indeksu, dzięki czemu, na przykład `sampleObject.Property0` jest odpowiednikiem `sampleObject[0]` w języku C# lub `sampleObject(0)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="83d5b-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="83d5b-381">Poniższy przykład kodu pokazuje `SampleDynamicObject` klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-382">`SampleDynamicObject` Klasa zawiera obiekt `Dictionary<string, object>` typu (`Dictionary(Of String, Object)` w języku Visual Basic) do przechowywania par klucz wartość.</span><span class="sxs-lookup"><span data-stu-id="83d5b-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="83d5b-383">`SampleDynamicObject` zastępuje <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> i <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> metody, aby umożliwić dostęp przez indeks.</span><span class="sxs-lookup"><span data-stu-id="83d5b-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="83d5b-384">Zastępuje on <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody w celu umożliwienia dostępu przez właściwość name.</span><span class="sxs-lookup"><span data-stu-id="83d5b-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-385">Zawiera informacje o obiekcie, który wywołał operację dynamiczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-385">Provides information about the object that called the dynamic operation.</span>
          </span>
          <span data-ttu-id="83d5b-386">
            <c>Integratora. Nazwa</c> właściwość zawiera nazwę elementu członkowskiego, do którego jest przypisana wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span>
          </span>
          <span data-ttu-id="83d5b-387">Na przykład dla instrukcji <c>sampleObject.SampleProperty = "Test"</c>, gdzie <c>sampleObject</c> jest wystąpienie klasy pochodnej z <see cref="T:System.Dynamic.DynamicObject" /> klasy <c>integratora. Nazwa</c> zwraca "SampleProperty".</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span>
          </span>
          <span data-ttu-id="83d5b-388">
            <c>Integratora. IgnoreCase</c> właściwość określa, czy nazwa elementu członkowskiego jest rozróżniana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="83d5b-389">Wartość do ustawienia do elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-389">The value to set to the member.</span>
          </span>
          <span data-ttu-id="83d5b-390">Na przykład w przypadku <c>sampleObject.SampleProperty = "Test"</c>, gdzie <c>sampleObject</c> jest wystąpienie klasy pochodnej z <see cref="T:System.Dynamic.DynamicObject" /> klasy <c>wartość</c> jest " Test".</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <c>value</c> is "Test".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-391">Udostępnia implementację dla operacji, które ustalają wartości członka.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-391">Provides the implementation for operations that set member values.</span>
          </span>
          <span data-ttu-id="83d5b-392">Klasy wyprowadzone z <see cref="T:System.Dynamic.DynamicObject" /> klasy mogą przesłaniać tę metodę, aby określić zachowanie dynamicznych dla operacji, takich jak ustawienie wartości dla właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-393">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-393">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-394">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-395">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-395">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-396">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić realizację operacji, które ustalają wartości do elementu członkowskiego dla obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="83d5b-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="83d5b-397">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-398">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-399">Ta metoda jest wywoływana, gdy masz instrukcje, takie jak `sampleObject.SampleProperty = "Test"`, gdzie `sampleObject` jest wystąpieniem klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="83d5b-400">Możesz także dodać własne elementy członkowskie do klas pochodnych `DynamicObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="83d5b-401">Jeśli klasa definiuje właściwości i zastępuje również <xref:System.Dynamic.DynamicObject.TrySetMember%2A> metoda, środowisko uruchomieniowe języka dynamicznego (DLR) najpierw używa integratora języka do wyszukania statycznych definicji właściwości w klasie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="83d5b-402">Jeśli nie ma takich właściwości, wywołuje metodę DLR <xref:System.Dynamic.DynamicObject.TrySetMember%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="83d5b-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-403">Załóżmy chcesz zapewnić alternatywne składni do uzyskiwania dostępu do wartości w słowniku, więc to zamiast elementu zapisu `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` w języku Visual Basic), można napisać `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="83d5b-404">Ponadto ta Składnia musi być bez uwzględniania wielkości liter, tak aby `sampleDictionary.Text` jest odpowiednikiem `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="83d5b-405">Poniższy przykład kodu pokazuje `DynamicDictionary` klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-406">`DynamicDictionary` Klasa zawiera obiekt `Dictionary<string, object>` typu (`Dictionary(Of String, Object)` w języku Visual Basic) do przechowywania par klucz wartość i zastąpienia <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody służące do obsługi nowej składni.</span><span class="sxs-lookup"><span data-stu-id="83d5b-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="83d5b-407">Zapewnia także `Count` zawiera właściwość, która zawiera słownik ile właściwości dynamicznych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="83d5b-408">Zawiera informacje o operację jednoargumentową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-408">Provides information about the unary operation.</span>
          </span>
          <span data-ttu-id="83d5b-409">
            <c>Integratora. Operacja</c> zwraca właściwość <see cref="T:System.Linq.Expressions.ExpressionType" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span>
          </span>
          <span data-ttu-id="83d5b-410">Na przykład w przypadku <c>negativeNumber = - numer</c> instrukcji, gdzie <c>numer</c> jest pochodną <see langword="DynamicObject" /> klasy, <c>integratora. Operacja</c> zwraca "Negate".</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="83d5b-411">Wynik operację jednoargumentową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-411">The result of the unary operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5b-412">Udostępnia implementację dla operacji jednoargumentowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-412">Provides implementation for unary operations.</span>
          </span>
          <span data-ttu-id="83d5b-413">Klasy wyprowadzone z <see cref="T:System.Dynamic.DynamicObject" /> klasy mogą przesłaniać tę metodę, aby określić zachowanie dynamicznych dla operacji, takich jak negacji, przyrost lub zmniejszenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5b-414">
            <see langword="true" /> Jeśli operacja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-414">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="83d5b-415">Jeśli ta metoda zwraca <see langword="false" />, integratora środowiska wykonawczego języka określa zachowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="83d5b-416">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5b-416">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83d5b-417">Klasy wyprowadzone z <xref:System.Dynamic.DynamicObject> klasy mogą przesłaniać tę metodę, aby określić realizację jednoargumentowy operacje dla obiekt dynamiczny.</span><span class="sxs-lookup"><span data-stu-id="83d5b-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="83d5b-418">Gdy metoda nie jest zastępowany, integratora środowiska wykonawczego języka określa zachowanie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="83d5b-419">(W większości przypadków specyficzny dla języka czasu wykonywania jest wyjątek.)</span><span class="sxs-lookup"><span data-stu-id="83d5b-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="83d5b-420">Ta metoda jest wywoływana, gdy mają jednoargumentowy operacji, takich jak negacji, przyrost lub zmniejszenie.</span><span class="sxs-lookup"><span data-stu-id="83d5b-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="83d5b-421">Na przykład jeśli <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> metoda zostanie przesłonięta, ta metoda jest wywoływana automatycznie dla instrukcji, takich jak `negativeNumber = -number`, gdzie `number` jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="83d5b-422">Informacje o typie operację jednoargumentową można uzyskać za pomocą `Operation` właściwość `binder` parametru.</span><span class="sxs-lookup"><span data-stu-id="83d5b-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="83d5b-423">Jeśli obiekt dynamiczny jest używana tylko w języku C# i Visual Basic, `binder.Operation` właściwości może mieć jeden z następujących wartości z <xref:System.Linq.Expressions.ExpressionType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="83d5b-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="83d5b-424">Jednak w innych językach takich jak IronPython lub IronRuby może mieć inne wartości.</span><span class="sxs-lookup"><span data-stu-id="83d5b-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="83d5b-425">Wartość</span><span class="sxs-lookup"><span data-stu-id="83d5b-425">Value</span></span>|<span data-ttu-id="83d5b-426">Opis</span><span class="sxs-lookup"><span data-stu-id="83d5b-426">Description</span></span>|<span data-ttu-id="83d5b-427">C#</span><span class="sxs-lookup"><span data-stu-id="83d5b-427">C#</span></span>|<span data-ttu-id="83d5b-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="83d5b-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="83d5b-429">Zmniejszenie operację jednoargumentową.</span><span class="sxs-lookup"><span data-stu-id="83d5b-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="83d5b-430">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="83d5b-431">Operację jednoargumentową przyrostu.</span><span class="sxs-lookup"><span data-stu-id="83d5b-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="83d5b-432">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="83d5b-433">Negacja arytmetyczne.</span><span class="sxs-lookup"><span data-stu-id="83d5b-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="83d5b-434">Logiczna negacja.</span><span class="sxs-lookup"><span data-stu-id="83d5b-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="83d5b-435">Te dopełnienia.</span><span class="sxs-lookup"><span data-stu-id="83d5b-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="83d5b-436">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="83d5b-437">Wartość fałszywego warunku.</span><span class="sxs-lookup"><span data-stu-id="83d5b-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="83d5b-438">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="83d5b-439">Wartość warunek o wartości true.</span><span class="sxs-lookup"><span data-stu-id="83d5b-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="83d5b-440">Nieobsługiwane.</span><span class="sxs-lookup"><span data-stu-id="83d5b-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="83d5b-441">Jednoargumentowe plus.</span><span class="sxs-lookup"><span data-stu-id="83d5b-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="83d5b-442">Aby zaimplementować `OrElse` (`a || b`) i `AndAlso` (`a && b`) operacji dynamicznej obiektów w języku C#, można zaimplementować zarówno <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> — metoda i <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> — metoda.</span><span class="sxs-lookup"><span data-stu-id="83d5b-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="83d5b-443">`OrElse` Operacja obejmuje jednoargumentowego `IsTrue` operacji i plik binarny `Or` operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="83d5b-444">`Or` Jest wykonywane tylko wtedy, gdy wynik `IsTrue` operacji `false`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="83d5b-445">`AndAlso` Operacja obejmuje jednoargumentowego `IsFalse` operacji i plik binarny `And` operacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="83d5b-446">`And` Jest wykonywane tylko wtedy, gdy wynik `IsFalse` operacji `false`.</span><span class="sxs-lookup"><span data-stu-id="83d5b-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83d5b-447">Założono, że należy to struktura danych do przechowywania tekstową i numeryczne liczbami w postaci i chcesz zdefiniować operacji matematycznych negacji dla tych danych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="83d5b-448">Poniższy przykład kodu pokazuje `DynamicNumber` klasy, która jest pochodną <xref:System.Dynamic.DynamicObject> klasy.</span><span class="sxs-lookup"><span data-stu-id="83d5b-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="83d5b-449">`DynamicNumber` zastępuje <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> metodę, aby umożliwić wykonanie operacji matematycznych negacji.</span><span class="sxs-lookup"><span data-stu-id="83d5b-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="83d5b-450">Jest również zastąpienia <xref:System.Dynamic.DynamicObject.TrySetMember%2A> i <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metody w celu umożliwienia dostępu do elementów.</span><span class="sxs-lookup"><span data-stu-id="83d5b-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="83d5b-451">W tym przykładzie jest obsługiwana tylko operacja negacji matematycznych.</span><span class="sxs-lookup"><span data-stu-id="83d5b-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="83d5b-452">Próba zapisu instrukcję, takich jak `negativeNumber = +number`, wystąpi wyjątek czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="83d5b-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>