<Type Name="BinaryServerFormatterSink" FullName="System.Runtime.Remoting.Channels.BinaryServerFormatterSink">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c3a6ca3d0edfeb864f51041f2c2b21f73be1057b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30567379" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BinaryServerFormatterSink : System.Runtime.Remoting.Channels.IChannelSinkBase, System.Runtime.Remoting.Channels.IServerChannelSink" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryServerFormatterSink extends System.Object implements class System.Runtime.Remoting.Channels.IChannelSinkBase, class System.Runtime.Remoting.Channels.IServerChannelSink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryServerFormatterSink&#xA;Implements IChannelSinkBase, IServerChannelSink" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryServerFormatterSink : System::Runtime::Remoting::Channels::IChannelSinkBase, System::Runtime::Remoting::Channels::IServerChannelSink" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelSinkBase</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IServerChannelSink</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia implementację dla serwera zbiornika programu formatującego, który używa <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strumienia żądania propaguje z serwera zbiornika transportu za pośrednictwem wychwytywanie kanału serwera, dopóki nie osiągnie zbiornika odpowiedniego elementu formatującego. Zbiornika programu formatującego deserializuje wiadomości i przekazuje je za pośrednictwem potoku. Zbiornik specjalne wysyłania dodaje się na końcu łańcucha zbiornik kanału przez <xref:System.Runtime.Remoting.Channels.ChannelServices.CreateServerChannelSinkChain%2A?displayProperty=nameWithType> metodę, która jest wywoływana przez kanały serwera, aby utworzyć serwer łańcuchów zbiornika kanału. Gdy wiadomość osiągnie zbiornika wysyłania, ujście wysyłania przekazaniem do zdalnej infrastrukturze.  
  
 W poniższej tabeli przedstawiono sink właściwości konfiguracyjne, które można określić dla bieżącego dostawcy zbiornika.  
  
|Właściwość|Opis|  
|--------------|-----------------|  
|`includeVersions`|Określa, czy element formatujący będzie zawierać informacje na temat wersji. Wartości `true` lub `false`.|  
|`strictBinding`|Wskazuje, że odbierania program formatujący próbują używać najpierw do identyfikacji typu przy użyciu informacji o pełną wersję, jeśli istnieje przed użyciem tylko nazwę typu i nazwy zestawu bez informacji o wersji. Wartości `true` lub `false`. Domyślnie oba elementy formatujące dostarczane przez system `false`.|  
|`typeFilterLevel`|Wartość ciągu, który określa poziom automatycznej deserializacji, podejmowanych przez kanał serwera. Obsługiwane wartości to `Low` (ustawienie domyślne) i `Full`. Aby uzyskać więcej informacji o poziomach deserializacji, zobacz [ &#91; \<topic://cpconAutomaticDeserializationInNETRemoting >&#93;](http://msdn.microsoft.com/library/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).<br /><br /> Ta właściwość jest obsługiwana tylko przez program .NET Framework w wersji 1.1 na następujących platformach: rodziny Windows 98, Windows NT 4.0, Windows Millennium Edition, Windows 2000, Windows XP Home Edition, Windows XP Professional, Windows Server 2003.|  
  
> [!IMPORTANT]
>  Za pomocą wystąpienia tego obiektu z niezaufanych danych lub przez kanał niezabezpieczone stanowi zagrożenie bezpieczeństwa. Ten obiekt jest używany tylko z zaufanych danych i przez bezpieczny kanał. Aby uzyskać więcej informacji, zobacz [sprawdzanie poprawności danych](https://www.owasp.org/index.php/Data_Validation).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryServerFormatterSink (System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol protocol, System.Runtime.Remoting.Channels.IServerChannelSink nextSink, System.Runtime.Remoting.Channels.IChannelReceiver receiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Remoting.Channels.BinaryServerFormatterSink/Protocol protocol, class System.Runtime.Remoting.Channels.IServerChannelSink nextSink, class System.Runtime.Remoting.Channels.IChannelReceiver receiver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.#ctor(System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol,System.Runtime.Remoting.Channels.IServerChannelSink,System.Runtime.Remoting.Channels.IChannelReceiver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryServerFormatterSink(System::Runtime::Remoting::Channels::BinaryServerFormatterSink::Protocol protocol, System::Runtime::Remoting::Channels::IServerChannelSink ^ nextSink, System::Runtime::Remoting::Channels::IChannelReceiver ^ receiver);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="protocol" Type="System.Runtime.Remoting.Channels.BinaryServerFormatterSink+Protocol" />
        <Parameter Name="nextSink" Type="System.Runtime.Remoting.Channels.IServerChannelSink" />
        <Parameter Name="receiver" Type="System.Runtime.Remoting.Channels.IChannelReceiver" />
      </Parameters>
      <Docs>
        <param name="protocol">
          <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol" /> Który będzie używany z bieżącym wystąpieniem <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</param>
        <param name="nextSink">Następny zbiornika w łańcuchu zbiornika kanału.</param>
        <param name="receiver">Wskazuje kanał, który będzie odbierać komunikaty, które są serializowane przez nowe wystąpienie klasy <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncProcessResponse">
      <MemberSignature Language="C#" Value="public void AsyncProcessResponse (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AsyncProcessResponse(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AsyncProcessResponse(System::Runtime::Remoting::Channels::IServerResponseChannelSinkStack ^ sinkStack, System::Object ^ state, System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Channels::ITransportHeaders ^ headers, System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="headers" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Stos wychwytywanie, który prowadzi wstecz do ujścia transportu serwera.</param>
        <param name="state">Informacje, które są skojarzone z bieżącym sink wygenerowane na stronie żądanie i na stronie odpowiedzi.</param>
        <param name="msg">Komunikat odpowiedzi.</param>
        <param name="headers">Nagłówki, które można dodać do komunikat zwrotny, która jest nagłówkiem do klienta.</param>
        <param name="stream">Strumień, który jest nagłówek zbiornika transportu.</param>
        <summary>Przetwarzanie żądań odpowiedzi po wywołaniu metody wysyłanym asynchronicznie.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Runtime.Remoting.Channels.ServerChannelSinkStack" />
        <altmember cref="M:System.Runtime.Remoting.Channels.ServerChannelSinkStack.Push(System.Runtime.Remoting.Channels.IServerChannelSink,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetResponseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetResponseStream (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetResponseStream(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetResponseStream (sinkStack As IServerResponseChannelSinkStack, state As Object, msg As IMessage, headers As ITransportHeaders) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetResponseStream(System::Runtime::Remoting::Channels::IServerResponseChannelSinkStack ^ sinkStack, System::Object ^ state, System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Channels::ITransportHeaders ^ headers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="headers" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Stos wychwytywanie, który prowadzi wstecz do ujścia transportu serwera.</param>
        <param name="state">Informacje, które są skojarzone z bieżącym sink wygenerowane na stronie żądanie i na stronie odpowiedzi.</param>
        <param name="msg">Komunikat odpowiedzi do serializacji.</param>
        <param name="headers">Nagłówki, które mają zostać umieszczone w strumieniu odpowiedzi do klienta.</param>
        <summary>Zwraca <see cref="T:System.IO.Stream" /> na który komunikat odpowiedzi podana jest zserializowana.</summary>
        <returns>
          <see cref="T:System.IO.Stream" /> Na który komunikat odpowiedzi podana jest zserializowana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana, gdy musi zostać utworzona strumienia odpowiedzi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextChannelSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.NextChannelSink" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextChannelSink As IServerChannelSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Remoting::Channels::IServerChannelSink ^ NextChannelSink { System::Runtime::Remoting::Channels::IServerChannelSink ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.IServerChannelSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera następnych <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> w łańcuchu ujścia.</summary>
        <value>Następne <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> w łańcuchu ujścia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage (System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage requestMsg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Messaging.IMessage responseMsg, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(class System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, class System.Runtime.Remoting.Messaging.IMessage requestMsg, class System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class System.IO.Stream requestStream, [out] class System.Runtime.Remoting.Messaging.IMessage&amp; responseMsg, [out] class System.Runtime.Remoting.Channels.ITransportHeaders&amp; responseHeaders, [out] class System.IO.Stream&amp; responseStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessMessage (sinkStack As IServerChannelSinkStack, requestMsg As IMessage, requestHeaders As ITransportHeaders, requestStream As Stream, ByRef responseMsg As IMessage, ByRef responseHeaders As ITransportHeaders, ByRef responseStream As Stream) As ServerProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Channels::ServerProcessing ProcessMessage(System::Runtime::Remoting::Channels::IServerChannelSinkStack ^ sinkStack, System::Runtime::Remoting::Messaging::IMessage ^ requestMsg, System::Runtime::Remoting::Channels::ITransportHeaders ^ requestHeaders, System::IO::Stream ^ requestStream, [Runtime::InteropServices::Out] System::Runtime::Remoting::Messaging::IMessage ^ % responseMsg, [Runtime::InteropServices::Out] System::Runtime::Remoting::Channels::ITransportHeaders ^ % responseHeaders, [Runtime::InteropServices::Out] System::IO::Stream ^ % responseStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.ServerProcessing</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerChannelSinkStack" />
        <Parameter Name="requestMsg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="requestHeaders" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
        <Parameter Name="requestStream" Type="System.IO.Stream" />
        <Parameter Name="responseMsg" Type="System.Runtime.Remoting.Messaging.IMessage&amp;" RefType="out" />
        <Parameter Name="responseHeaders" Type="System.Runtime.Remoting.Channels.ITransportHeaders&amp;" RefType="out" />
        <Parameter Name="responseStream" Type="System.IO.Stream&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Stos kanału wychwytywanie wymagane bieżącego obiektu sink.</param>
        <param name="requestMsg">Komunikat, który zawiera żądanie.</param>
        <param name="requestHeaders">Nagłówki, które są pobierane z komunikatu przychodzącego z klienta.</param>
        <param name="requestStream">Strumień musi być przetwarzane i przekazywane do ujścia deserializacji.</param>
        <param name="responseMsg">Po powrocie z tej metody zawiera <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> zawierający komunikat odpowiedzi. Ten parametr jest przekazywany niezainicjowany.</param>
        <param name="responseHeaders">Po powrocie z tej metody zawiera <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> przechowuje nagłówków, aby dodać do komunikat zwrotny, która jest nagłówkiem do klienta. Ten parametr jest przekazywany niezainicjowany.</param>
        <param name="responseStream">Po powrocie z tej metody zawiera <see cref="T:System.IO.Stream" /> czyli nagłówka do ujścia transportu. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Komunikat żądania przetwarzania z bieżącego obiektu sink.</summary>
        <returns>A <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> wartość stanu, który zawiera informacje o przetwarzaniu wiadomości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Serwer proxy zadanie jest przekonwertować wywołania metody, które jest wywoływane na nim do wiadomości. Komunikat, który implementuje <xref:System.Runtime.Remoting.Messaging.IMessage> interfejsu, jest przekazywany po stronie klienta w celu serwera za pomocą <xref:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage%2A> obiektów sink komunikatu. Wychwytywanie wiadomości są połączone, co oznacza, że zbiornika każdy komunikat jest odpowiedzialny za wywoływanie <xref:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage%2A> dalej zbiornika komunikat po zakończeniu pracy bieżącego odbioru wiadomości. Na przykład zbiorniku wiadomość dotycząca synchronizacji może spowodować blokady nabyte lub zwolnione i delegować do odbioru wiadomości podrzędne.  
  
 Gdy program formatujący zbiornik kanału pobiera komunikat, który musi być wysyłana za pośrednictwem kanału, wywołuje <xref:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage%2A>, przekazując komunikatu jako parametr. Zbiornika programu formatującego tworzy następnie tablicy nagłówka transportu i wywołania <xref:System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream%2A> zbiornika programu formatującego. To wywołanie jest przekazywany w łańcuchu zbiornika, a wszelkie odbioru można utworzyć strumienia żądania, który zostanie przekazany do zbiornika programu formatującego. Następnie wywołaj zwraca, wiadomość jest serializowana, <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A> nosi nazwę pierwszego łańcucha w łańcuchu zbiornika i wiadomość jest przekazywana do ujścia kanału.  
  
 Po wychwytywanie kanał jest wyświetlany komunikat, ich zapisywania danych w strumieniu, Dodaj nagłówki do tablicy nagłówka i dodawanie siebie do stosu zbiornika przed przekazaniem wywołania do ujścia dalej. Gdy wywołanie osiągnie zbiornika transportu na końcu łańcucha, ujście transportu wysyła nagłówki i serializacji komunikat przez kanał do serwera, gdy proces został wycofany.  
  
 Gdy pobiera komunikat, aby po stronie serwera, zbiornika transportu pobiera nagłówki i serializacji komunikat ze strumienia i przekazuje je poprzez łańcuch zbiornika, aż do osiągnięcia zbiornika programu formatującego. Następnie zbiornika programu formatującego deserializuje wiadomości i przekazuje go w zdalnej infrastrukturze. Następnie w zdalnej infrastrukturze zmieni się komunikat w wywołaniu metody i wywołuje metodę obiektu serwera.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Properties" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IDictionary ^ Properties { System::Collections::IDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.IDictionary" /> właściwości dla bieżącego zbiornika kanału.</summary>
        <value>A <see cref="T:System.Collections.IDictionary" /> właściwości dla bieżącego zbiornika kanału.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz [ &#91; \<topic://cpconchannelformatterconfigurationproperties >&#93;](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeFilterLevel">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.TypeFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeFilterLevel As TypeFilterLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::Formatters::TypeFilterLevel TypeFilterLevel { System::Runtime::Serialization::Formatters::TypeFilterLevel get(); void set(System::Runtime::Serialization::Formatters::TypeFilterLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.TypeFilterLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see langword="TypeFilterLevel" /> deserializacji wartości automatyczne, który <see langword="BinaryServerFormatterSink" /> wykonuje.</summary>
        <value>
          <see langword="TypeFilterLevel" /> Reprezentujący bieżący poziom automatycznej deserializacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługiwane wartości to `Low` (ustawienie domyślne) i `Full`. Aby uzyskać więcej informacji o poziomach deserializacji, zobacz [automatycznej deserializacji w funkcji zdalnych .NET](http://msdn.microsoft.com/library/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>