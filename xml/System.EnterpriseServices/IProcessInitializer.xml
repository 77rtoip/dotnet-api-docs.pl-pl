<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b546154b2741a73df0a438f3a4f3e34d79275333" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39972978" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Obsługuje metody, które mogą być wywoływane, gdy składnik COM, uruchamiania lub zamykania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.EnterpriseServices.IProcessInitializer> metod interfejsu na obsługiwanych składników czy chcesz uruchomić inicjowania kod zamknięcia po procesu serwera (Dllhost.exe) uruchamiania lub zamykania, odpowiednio.  
  
 COM + zawiera `Startup` i `Shutdown` zdarzenia w przypadku Dllhost.exe rozpoczyna i kończy. Ta funkcja umożliwia żadnych składników modelu COM +, które są zainstalowane w aplikacji serwera COM + (nazywane składniki serwera poniżej) do uruchamiania niestandardowe inicjowanie i oczyszczanie kodu. Wystąpienia każdego składnika, który implementuje <xref:System.EnterpriseServices.IProcessInitializer> interfejs zostanie utworzona i przechowywane przez czas trwania procesu i potrzebny podczas uruchamiania i zamykania metod interfejsu. Po zaimplementowaniu w <xref:System.EnterpriseServices.ServicedComponent>, podczas rejestracji składnika `InitializesServerApplication` parametru w `COMAdminCatalogObject` w ramach składników kolekcji jest ustawiona na `true`.  
  
 Za pomocą `Startup` i `Shutdown` zdarzenia, można zainicjować zasobów, tworzenie połączeń, inicjowania udostępnionych danych, a następnie uruchom kod porządkujący. Nie wymaga jednak dostępu stany, które są specyficzne dla modelu COM +, ponieważ wystąpienia serwera składników, które nie zostały jeszcze utworzone. Ponadto kod w `Startup` i `Shutdown` zdarzenia powinna zwrócić tak szybko, jak to możliwe, ponieważ system oczekuje tylko 90 sekund dla Dllhost.exe przygotowując się do akceptowania aktywacji po procesie uruchamiania systemu. Jeśli Dllhost.exe nie sygnalizuje, że jest gotowa w ciągu 90 sekund, system kończy proces; w efekcie wszystkie inicjowania przetwarzania musi zostać zakończony w tym przedziale czasu. Każdy składnik serwera, który uczestniczy w inicjowania musi obsługiwać <xref:System.EnterpriseServices.IProcessInitializer> interfejsu. Przy uruchamianiu DllHost.exe modelu COM + tworzy wszystkie składniki serwera, które zażądał tej usługi, wywołania `QueryInterface` dla <xref:System.EnterpriseServices.IProcessInitializer> interfejsu i wywołania <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> funkcji. Podobnie, gdy proces DllHost.exe zostanie zamknięta, wywoływanych przez nią <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> funkcji na te wcześniej zapisane wskaźniki interfejsu.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje akcje zamknięcia. Wywołuje się, gdy Dllhost.exe zostanie zamknięta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> nie jest wywoływana podczas failfast lub innych zdarzeń zamknięcia krytycznego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">W systemie Microsoft Windows XP, wskaźnik do <see langword="IUnknown" /> interfejs składnika COM uruchamiania. W systemie Microsoft Windows 2000 ten argument jest zawsze <see langword="null" />.</param>
        <summary>Wykonuje inicjowanie przy uruchamianiu. Wywołuje się, gdy Dllhost.exe została uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawiera odwołanie do obiektu `punkProcessControl` implementuje <xref:System.EnterpriseServices.IProcessInitControl> interfejsu. <xref:System.EnterpriseServices.IProcessInitControl> obsługuje pojedynczej metody <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 Kod inicjowania w <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> może wywołać <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, przy użyciu limitu czasu, ustaw wartość początkową limit czasu składników czas pozostały czas w sekundach.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>