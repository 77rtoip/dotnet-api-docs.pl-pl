<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53f02b0dca103a2278f68dfe7522f65b914e4d15" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69358563" /></Metadata><TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="91ba9-101">Obsługuje metody, które mogą być wywoływane, gdy składnik COM zostanie uruchomiony lub zamknięty.</span><span class="sxs-lookup"><span data-stu-id="91ba9-101">Supports methods that can be called when a COM component starts up or shuts down.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91ba9-102">Zaimplementuj <xref:System.EnterpriseServices.IProcessInitializer> metody interfejsu na składnikach serwisowanych, jeśli chcesz uruchomić kod inicjalizacji lub zamknięcia, gdy proces serwera (dllhost. exe) zostanie uruchomiony odpowiednio lub zamknięty.</span><span class="sxs-lookup"><span data-stu-id="91ba9-102">Implement the <xref:System.EnterpriseServices.IProcessInitializer> interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.</span></span>  
  
 <span data-ttu-id="91ba9-103">W przypadku `Startup` uruchomienia `Shutdown` i zakończenia pliku dllhost. exe model com+ udostępnia zdarzenia i.</span><span class="sxs-lookup"><span data-stu-id="91ba9-103">COM+ provides `Startup` and `Shutdown` events when Dllhost.exe starts and ends.</span></span> <span data-ttu-id="91ba9-104">Ta funkcja włącza wszystkie składniki COM+, które są zainstalowane w aplikacji serwera COM+ (zwanej dalej składnikami serwera) do uruchamiania niestandardowego inicjowania i czyszczenia kodu.</span><span class="sxs-lookup"><span data-stu-id="91ba9-104">This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code.</span></span> <span data-ttu-id="91ba9-105">Każdemu składnikowi implementującemu <xref:System.EnterpriseServices.IProcessInitializer> interfejs zostanie utworzony i zapisany na czas trwania procesu i wywołany w metodach interfejsu podczas uruchamiania i zamykania.</span><span class="sxs-lookup"><span data-stu-id="91ba9-105">An instance of each component that implements the <xref:System.EnterpriseServices.IProcessInitializer> interface will be created and stored for the duration of the process, and called on the interface methods during startup and shutdown.</span></span> <span data-ttu-id="91ba9-106">Po zaimplementowaniu <xref:System.EnterpriseServices.ServicedComponent>na, podczas rejestracji składnika `InitializesServerApplication` , parametr w `COMAdminCatalogObject` kolekcji Components ma ustawioną wartość `true`.</span><span class="sxs-lookup"><span data-stu-id="91ba9-106">When implemented on a <xref:System.EnterpriseServices.ServicedComponent>, during registration of the component, the `InitializesServerApplication` parameter in the `COMAdminCatalogObject` within the Components collection is set to `true`.</span></span>  
  
 <span data-ttu-id="91ba9-107">Przy użyciu zdarzeń `Shutdown`imożna inicjować zasoby, tworzyć połączenia, inicjować udostępnione dane i uruchamiać oczyszczanie kodu. `Startup`</span><span class="sxs-lookup"><span data-stu-id="91ba9-107">Using the `Startup` and `Shutdown` events, you can initialize resources, create connections, initialize shared data, and run cleanup code.</span></span> <span data-ttu-id="91ba9-108">Jednak nie ma dostępu do Stanów specyficznych dla modelu COM+, ponieważ wystąpienia składników serwera nie zostały jeszcze utworzone.</span><span class="sxs-lookup"><span data-stu-id="91ba9-108">However, you must not access states that are specific to COM+ because instances of server components have not yet been created.</span></span> <span data-ttu-id="91ba9-109">Ponadto kod w `Startup` zdarzeniach i `Shutdown` powinien zwrócić się tak szybko, jak to możliwe, ponieważ system czeka na 90 sekund dla programu dllhost. exe, aby przygotować się do przyjęcia aktywacji po rozpoczęciu procesu przez system.</span><span class="sxs-lookup"><span data-stu-id="91ba9-109">In addition, the code in the `Startup` and `Shutdown` events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process.</span></span> <span data-ttu-id="91ba9-110">Jeśli program dllhost. exe nie sygnalizuje, że jest gotowy w ciągu 90 sekund, system skończy proces; w tym celu należy wykonać wszystkie zadania przetwarzania w tym przedziale czasowym.</span><span class="sxs-lookup"><span data-stu-id="91ba9-110">If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame.</span></span> <span data-ttu-id="91ba9-111">Każdy składnik serwera, który uczestniczy w inicjacji, <xref:System.EnterpriseServices.IProcessInitializer> musi obsługiwać interfejs.</span><span class="sxs-lookup"><span data-stu-id="91ba9-111">Each server component that participates in initialization must support the <xref:System.EnterpriseServices.IProcessInitializer> interface.</span></span> <span data-ttu-id="91ba9-112">Po uruchomieniu programu dllhost. exe model COM+ tworzy wszystkie składniki serwera, które żądają tej `QueryInterface` usługi, <xref:System.EnterpriseServices.IProcessInitializer> wywołuje <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> interfejs i wywołuje funkcję.</span><span class="sxs-lookup"><span data-stu-id="91ba9-112">On DllHost.exe startup, COM+ creates all server components that requested this service, calls `QueryInterface` for the <xref:System.EnterpriseServices.IProcessInitializer> interface, and calls the <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> function.</span></span> <span data-ttu-id="91ba9-113">Podobnie, gdy proces dllhost. exe jest wyłączony, wywołuje <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> funkcję na tych wcześniej przechowywanych wskaźnikach interfejsu.</span><span class="sxs-lookup"><span data-stu-id="91ba9-113">Similarly, when the DllHost.exe process is shut down, it calls the <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> function on those previously stored interface pointers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91ba9-114">Wykonuje akcje zamknięcia.</span><span class="sxs-lookup"><span data-stu-id="91ba9-114">Performs shutdown actions.</span></span> <span data-ttu-id="91ba9-115">Wywoływana, gdy plik dllhost. exe jest wyłączony.</span><span class="sxs-lookup"><span data-stu-id="91ba9-115">Called when Dllhost.exe is shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91ba9-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A>nie jest wywoływana podczas podłączania lub innych katastrofalnych zdarzeń zamknięcia.</span><span class="sxs-lookup"><span data-stu-id="91ba9-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> is not called during a failfast or other catastrophic shutdown events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl"><span data-ttu-id="91ba9-117">W systemie Microsoft Windows XP wskaźnik do <see langword="IUnknown" /> interfejsu składnika modelu COM uruchamiany.</span><span class="sxs-lookup"><span data-stu-id="91ba9-117">In Microsoft Windows XP, a pointer to the <see langword="IUnknown" /> interface of the COM component starting up.</span></span> <span data-ttu-id="91ba9-118">W systemie Microsoft Windows 2000 ten argument jest zawsze <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="91ba9-118">In Microsoft Windows 2000, this argument is always <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="91ba9-119">Wykonuje inicjalizację przy uruchamianiu.</span><span class="sxs-lookup"><span data-stu-id="91ba9-119">Performs initialization at startup.</span></span> <span data-ttu-id="91ba9-120">Wywoływana, gdy jest uruchamiany plik dllhost. exe.</span><span class="sxs-lookup"><span data-stu-id="91ba9-120">Called when Dllhost.exe is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91ba9-121">Obiekt, do którego `punkProcessControl` odwołuje <xref:System.EnterpriseServices.IProcessInitControl> się element implementujący interfejs.</span><span class="sxs-lookup"><span data-stu-id="91ba9-121">The object referenced by `punkProcessControl` implements an <xref:System.EnterpriseServices.IProcessInitControl> interface.</span></span> <span data-ttu-id="91ba9-122"><xref:System.EnterpriseServices.IProcessInitControl>obsługuje pojedynczą metodę <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</span><span class="sxs-lookup"><span data-stu-id="91ba9-122"><xref:System.EnterpriseServices.IProcessInitControl> supports the single method <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</span></span>  
  
 <span data-ttu-id="91ba9-123">Kod inicjalizacji w <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> programie może <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>wywoływać metodę, z ustawionym limitem czasu równym liczbie sekund pozostałej przed ponownym uruchomieniem składnika.</span><span class="sxs-lookup"><span data-stu-id="91ba9-123">The initialization code in <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> can call the <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, with the time-out set equal to the number of seconds remaining before the startup of the component times out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
