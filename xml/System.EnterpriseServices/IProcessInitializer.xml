<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="65909f2ec439d52a6e219ae1ac7909475679abd1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36563528" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Obsługuje metody, które mogą być wywoływane, gdy składnik COM uruchamiania lub wyłączania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.EnterpriseServices.IProcessInitializer> metody interfejsu w obsługiwanych składników Jeśli chcesz uruchomić inicjowania lub zamknięcia kodu podczas procesu serwera (Dllhost.exe) uruchamiania lub zamykania, odpowiednio.  
  
 COM + zawiera `Startup` i `Shutdown` zdarzenia, gdy Dllhost.exe początkowej i końcowej. Ta funkcja umożliwia wszystkie składniki modelu COM + w aplikacji serwera COM + (nazywane składniki serwera poniżej) do uruchamiania niestandardowych inicjowanie i oczyszczanie kodu są zainstalowane. Wystąpienia każdego składnika, który implementuje <xref:System.EnterpriseServices.IProcessInitializer> interfejs zostanie utworzona i przechowywana w czasie trwania procesu i wywołano metody interfejsu podczas uruchamiania i wyłączania. Po zaimplementowaniu na <xref:System.EnterpriseServices.ServicedComponent>, podczas rejestracji składnika `InitializesServerApplication` parametru w `COMAdminCatalogObject` w składnikach kolekcji ustawiono `true`.  
  
 Przy użyciu `Startup` i `Shutdown` zdarzenia, można zainicjować zasobów, tworzyć połączenia, zainicjować udostępnionych danych, a następnie uruchom oczyszczanie kodu. Nie należy jednak dostępu stanów, które są specyficzne dla modelu COM +, ponieważ wystąpienia serwera składników nie został jeszcze utworzony. Ponadto kod w `Startup` i `Shutdown` zdarzenia powinien zwrócić tak szybko jak to możliwe, ponieważ system oczekuje tylko 90 sekund na Dllhost.exe w celu przygotowania do akceptowania aktywacji po procesie uruchamiania systemu. Jeśli nie Dllhost.exe sygnalizuje, że jest gotowy w ciągu 90 sekund, system kończy proces; w związku z tym wszystkie inicjowania przetwarzania musi zostać wykonane w tym przedziale czasu. Składnik każdego serwera, który uczestniczy w inicjowania musi obsługiwać <xref:System.EnterpriseServices.IProcessInitializer> interfejsu. Przy uruchamianiu DllHost.exe COM + tworzy wszystkie składniki serwera, którzy zażądali tej usługi, wywołania `QueryInterface` dla <xref:System.EnterpriseServices.IProcessInitializer> interfejsu i wywołania <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> funkcji. Podobnie podczas zamykania procesu DllHost.exe wywołuje <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> funkcja tych wcześniej zapisanych wskaźniki interfejsu.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje akcje zamknięcia. Wywoływana, gdy Dllhost.exe zostanie zamknięta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> nie jest wywoływana podczas natychmiastowy błąd lub inne zdarzenia zamknięcia krytycznego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">W systemie Microsoft Windows XP wskaźnik do <see langword="IUnknown" /> interfejs składnika COM uruchamiania. W systemie Windows 2000, ten argument jest zawsze <see langword="null" />.</param>
        <summary>Wykonuje inicjowania podczas uruchamiania. Wywołuje się po uruchomieniu Dllhost.exe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawiera odwołanie do obiektu `punkProcessControl` implementuje <xref:System.EnterpriseServices.IProcessInitControl> interfejsu. <xref:System.EnterpriseServices.IProcessInitControl> obsługuje pojedynczej metody <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 Kod inicjujący w <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> można wywołać <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, z równa ponownego uruchamiania razy składnika limit czasu w sekundach limit czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>