<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d8244a38f035a96f53aaf4b667da80a3de717304" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69358529" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b4886-101">Działa w umieszczonych w kolejce składnikach w nienormalnej obsłudze błędów odtwarzania po stronie serwera i błędach po stronie klienta mechanizmu dostarczania usługi kolejkowania komunikatów.</span><span class="sxs-lookup"><span data-stu-id="b4886-101">Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4886-102">Klasa wyjątku zdefiniowana dla składnika w wykazie modelu COM+ implementuje zarówno <xref:System.EnterpriseServices.IPlaybackControl> i interfejs dla oryginalnej klasy.</span><span class="sxs-lookup"><span data-stu-id="b4886-102">The exception class defined for the component in the COM+ catalog implements both <xref:System.EnterpriseServices.IPlaybackControl> and the interface for the original class.</span></span> <span data-ttu-id="b4886-103">Implementacje metod oryginalnego interfejsu klasy są używane do wykonywania obsługi wyjątków dla metod zakończonych niepowodzeniem w samej klasie.</span><span class="sxs-lookup"><span data-stu-id="b4886-103">The method implementations of the original class interface are used to perform the exception handling for the failed methods in the class itself.</span></span> <span data-ttu-id="b4886-104">Zostaną one wywołane po <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> lub <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> , aby przetworzyć wyjątki dla metody, która została pierwotnie wywołana.</span><span class="sxs-lookup"><span data-stu-id="b4886-104">They will be called after <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> or <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> to process exceptions for the method originally called.</span></span>  
  
 <span data-ttu-id="b4886-105">Odtwarzacz składników znajdujących się w kolejce wywołuje <xref:System.EnterpriseServices.IPlaybackControl> metody w celu informowania obiektu programu obsługi wyjątków, który komunikat ma zostać umieszczony w końcowej kolejki REST lub utraconych liter.</span><span class="sxs-lookup"><span data-stu-id="b4886-105">The Queued Components Player calls the methods of <xref:System.EnterpriseServices.IPlaybackControl> to inform the exception-handler object that a message is about to be placed on the final resting or dead letter queue.</span></span> <span data-ttu-id="b4886-106">Odtwarzacz składników umieszczonych w kolejce następnie wywołuje tę samą metodę w obiekcie programu obsługi wyjątków, który nie powiódł się w oryginalnym wywołaniu metody.</span><span class="sxs-lookup"><span data-stu-id="b4886-106">The Queued Components Player then calls the same method in the exception-handler object that had failed in the original method call.</span></span> <span data-ttu-id="b4886-107">Obiekt programu obsługi wyjątków może zaimplementować alternatywę, na przykład przez zbieranie informacji diagnostycznych dotyczących problemów lub generowanie obiektu lub komunikatu, który informuje klienta o problemie.</span><span class="sxs-lookup"><span data-stu-id="b4886-107">The exception-handler object can implement an alternative, for example, by gathering problem diagnosis information or generating an object or message that informs the client of the problem.</span></span> <span data-ttu-id="b4886-108">Jeśli aplikacja nie jest zaimplementowana <xref:System.EnterpriseServices.IPlaybackControl>, Trująca wiadomość jest umieszczana w kolejce końcowa lub utraconych list, gdy odtwarzacz składników znajdujących się w kolejce wyczerpuje wszystkie ponowne próby.</span><span class="sxs-lookup"><span data-stu-id="b4886-108">If the application does not implement <xref:System.EnterpriseServices.IPlaybackControl>, the poison message is placed on the final resting or dead letter queue when the Queued Components Player exhausts all retries.</span></span>  
  
 <span data-ttu-id="b4886-109">Trująca wiadomość jest komunikatem, którego nie można przetworzyć z jakiegoś powodu, prawdopodobnie z powodu problemu z serwerem lub systemem kolejkowania.</span><span class="sxs-lookup"><span data-stu-id="b4886-109">A poison message is a message that cannot be processed for some reason, perhaps because of a problem with the server or queuing system.</span></span> <span data-ttu-id="b4886-110">Transakcja zostanie wycofana, a Trująca wiadomość przechodzi do góry kolejki.</span><span class="sxs-lookup"><span data-stu-id="b4886-110">The transaction is rolled back, and the poison message goes to the top of the queue.</span></span> <span data-ttu-id="b4886-111">Po ponownym zakończeniu kolejki komunikat jest w tym samym stanie.</span><span class="sxs-lookup"><span data-stu-id="b4886-111">When the message is dequeued again, the same condition occurs.</span></span> <span data-ttu-id="b4886-112">Ten komunikat może kontynuować zapętlenie w nieskończoność, dopóki coś nie zostanie zrobione w celu rozwiązania problemu.</span><span class="sxs-lookup"><span data-stu-id="b4886-112">This message can continue looping indefinitely until something is done to correct the problem.</span></span> <span data-ttu-id="b4886-113">Usługa składniki w kolejce obsługuje skażony komunikat przy użyciu serii ponownych prób.</span><span class="sxs-lookup"><span data-stu-id="b4886-113">The Queued Components service handles the poison message by using a series of retries.</span></span> <span data-ttu-id="b4886-114">Po kilku nieudanych ponownych próbach komunikat zostanie przeniesiony do końcowej kolejki Rest.</span><span class="sxs-lookup"><span data-stu-id="b4886-114">After several unsuccessful retries, the message is moved to a final resting queue.</span></span> <span data-ttu-id="b4886-115">Trujące komunikaty pozostają w kolejce REST do momentu ręcznego przesunięcia przy użyciu narzędzia przenoszenia komunikatów składniki w kolejce.</span><span class="sxs-lookup"><span data-stu-id="b4886-115">Poison messages remain in the resting queue until manually moved by using the Queued Components Message Mover tool.</span></span>  
  
 <span data-ttu-id="b4886-116">Można również programowo rozwiązać problem skażonej wiadomości przy użyciu <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> metody, która informuje autora składnika po stronie serwera, że wszystkie próby odtworzenia odroczonej aktywacji nie powiodły się.</span><span class="sxs-lookup"><span data-stu-id="b4886-116">The poison message situation can also be resolved programmatically, using the <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> method, which informs the server-side component author that all attempts to play back the deferred activation have failed.</span></span>  
  
 <span data-ttu-id="b4886-117">Jeśli wykryjesz trującą wiadomość, możesz szybko rozwiązać podstawową przyczynę problemu.</span><span class="sxs-lookup"><span data-stu-id="b4886-117">If you discover a poison message, you might be able to solve the underlying cause of the problem quickly.</span></span> <span data-ttu-id="b4886-118">Jeśli na przykład serwer był w trybie offline z jakiegoś powodu, możesz przywrócić serwer do trybu online.</span><span class="sxs-lookup"><span data-stu-id="b4886-118">For example, if the server was offline for some reason, you can bring the server back online.</span></span> <span data-ttu-id="b4886-119">Jeśli nie możesz szybko rozwiązać tego problemu, możesz automatycznie wygenerować kolejną transakcję, która powiadamia obiekt żądający, że transakcja nie została wykonana.</span><span class="sxs-lookup"><span data-stu-id="b4886-119">If you cannot solve the problem quickly, you can automatically generate another transaction that notifies the requestor that the transaction did not occur.</span></span> <span data-ttu-id="b4886-120">Obiekt żądający może następnie wykonać transakcję kompensacyjną, która odwraca efekt transakcji, która została już zatwierdzona.</span><span class="sxs-lookup"><span data-stu-id="b4886-120">The requestor can then make a compensating transaction that reverses the effect of a transaction that has already committed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b4886-121">Informuje składnik obsługi wyjątków po stronie klienta, który usługa kolejkowania komunikatów próbuje dostarczyć komunikat do serwera, został odrzucony, a komunikat zakończył się w kolejce utraconych wiadomości po stronie klienta.</span><span class="sxs-lookup"><span data-stu-id="b4886-121">Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4886-122">Po nadejściu komunikatów do kolejki utraconych wiadomości dla opcji XACT model COM+ próbuje wywołać procedurę obsługi wyjątków po stronie klienta powiązaną z klasą serwera w celu dostarczenia tego powiadomienia.</span><span class="sxs-lookup"><span data-stu-id="b4886-122">As messages arrive in the Xact Dead Letter queue, COM+ attempts to invoke a client-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="b4886-123">Wykonuje to po pierwsze wywołanie <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, a następnie wywołuje wersję obsługującą wyjątek metody zakończonej niepowodzeniem w obiekcie programu obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="b4886-123">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, then calling the exception-handling version of the failed method in the exception-handler object.</span></span> <span data-ttu-id="b4886-124">Ta metoda wyjątku może następnie wykonać akcję wyjątku, taką jak rejestrowanie błędu, wysyłanie wiadomości e-mail do administratora lub podejmowanie akcji kompensacyjnej po stronie klienta (odwracanie skutku wcześniejszej transakcji).</span><span class="sxs-lookup"><span data-stu-id="b4886-124">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="b4886-125">Jeśli metoda wyjątku nie powiedzie się, komunikat zostanie pozostawiony w kolejce utraconych wiadomości dla opcji XACT.</span><span class="sxs-lookup"><span data-stu-id="b4886-125">If the exception method is not successful, the message is left on the Xact Dead Letter queue.</span></span>  
  
 <span data-ttu-id="b4886-126">Kolejka utraconych wiadomości dla opcji XACT może być wyświetlana w Eksploratorze kolejki komunikatów firmy Microsoft (MSMQ).</span><span class="sxs-lookup"><span data-stu-id="b4886-126">The Xact Dead Letter queue can be viewed in the Microsoft Message Queue (MSMQ) Explorer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b4886-127">Informuje implementację klasy wyjątku po stronie serwera, że wszystkie próby odtworzenia odroczonej aktywacji do serwera zakończą się niepowodzeniem, a komunikat zostanie przeniesiony do końcowej kolejki Rest.</span><span class="sxs-lookup"><span data-stu-id="b4886-127">Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4886-128">Po nadejściu komunikatów do kolejki utraconych wiadomości dla opcji XACT model COM+ próbuje wywołać procedurę obsługi wyjątków po stronie serwera powiązaną z klasą serwera w celu dostarczenia tego powiadomienia.</span><span class="sxs-lookup"><span data-stu-id="b4886-128">As messages arrive on the Xact Dead Letter queue, COM+ attempts to invoke a server-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="b4886-129">Wykonuje to przez pierwsze wywołanie <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, a następnie wywołanie wersji obsługującej wyjątek metody zakończonej niepowodzeniem w obiekcie obsługi wyjątków.</span><span class="sxs-lookup"><span data-stu-id="b4886-129">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, then calling the exception handling version of the failed method in the exception handler object.</span></span> <span data-ttu-id="b4886-130">Ta metoda wyjątku może następnie wykonać akcję wyjątku, taką jak rejestrowanie błędu, wysyłanie wiadomości e-mail do administratora lub podejmowanie akcji kompensacyjnej po stronie klienta (odwracanie skutku wcześniejszej transakcji).</span><span class="sxs-lookup"><span data-stu-id="b4886-130">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="b4886-131">Obiekt serwera powinien podejmować wszelkie wysiłki, aby pomyślnie zakończyć tę transakcję.</span><span class="sxs-lookup"><span data-stu-id="b4886-131">The server object should make every effort to complete this transaction successfully.</span></span> <span data-ttu-id="b4886-132">W przeciwnym razie interwencja ręczna jest wymagana do ponownego przetworzenia komunikatu.</span><span class="sxs-lookup"><span data-stu-id="b4886-132">Otherwise, manual intervention is required to reprocess the message.</span></span> <span data-ttu-id="b4886-133">Jeśli metoda wyjątku nie powiedzie się, komunikat zostanie przeniesiony do końcowej kolejki Rest.</span><span class="sxs-lookup"><span data-stu-id="b4886-133">If the exception method is not successful, the message is moved to the final resting queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
