<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fe897989dbaa72abda8d3820c890c8ab8d72397b" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53478314" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Funkcje w składnikach umieszczane w kolejce w nieprawidłowej obsługi błędy odtwarzania po stronie serwera i klienta błędów mechanizm dostarczania usługi kolejkowania komunikatów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy wyjątków zdefiniowanych dla składnika w wykazie modelu COM + implementuje interfejsy <xref:System.EnterpriseServices.IPlaybackControl> i interfejs dla klasy oryginalnej. Implementacje metod, oryginalnym interfejsu klasy są używane do wykonywania obsługi dla metod nie powiodło się w samej klasy wyjątków. Zostanie wywołana po <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> lub <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> przetwarzania wyjątków dla metody pierwotnie.  
  
 Player składników w kolejce wywołuje metody <xref:System.EnterpriseServices.IPlaybackControl> poinformować obiekt programu obsługi wyjątków, który ma można umieścić w ostatnim kolejki przechowywany lub utraconych wiadomości. Odtwarzacz składników w kolejce następnie wywołuje taką samą metodę jak w obiekcie obsługi wyjątków, który nie powiodło się w wywołaniu metody oryginalnym. Obiekt programu obsługi wyjątków można zaimplementować zamiast, na przykład przez zbieranie informacji diagnozowania problemu lub generowania obiektu lub komunikat, który informuje klienta problemu. Jeśli aplikacja nie implementuje <xref:System.EnterpriseServices.IPlaybackControl>, zarządzanie skażonymi komunikatami jest umieszczany na końcowy kolejki przechowywany lub utraconych wiadomości, gdy gracz składników w kolejce przekroczy ponawiania prób.  
  
 Zarządzanie skażonymi komunikatami jest komunikat, który nie można przetworzyć jakiegoś powodu, prawdopodobnie z powodu problemu z serwerem lub systemie kolejkowania. Transakcja zostanie wycofana, a zarządzanie skażonymi komunikatami, przechodzi do początku kolejki. Komunikat jest usunięty z kolejki ponownie, ten sam wystąpi. Ten komunikat nadal pętli na czas nieokreślony, aż coś, co jest gotowe, aby rozwiązać ten problem. Usługa kolejki składników obsługuje zarządzanie skażonymi komunikatami, używając serii ponownych prób. Po kilku nieudanych próbach wiadomość zostanie przeniesiona do końcowej kolejce nieaktywnych. Skażone wiadomości pozostaną w kolejce nieaktywnych, do momentu ręcznego przeniesienia za pomocą narzędzia w kolejce składniki komunikat modułu przenoszącego spójne kolekcje.  
  
 Sytuacja Zarządzanie skażonymi komunikatami można także rozwiązać programowo, za pomocą <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> metody, która informuje Autor składnik po stronie serwera, który wszystkie próby odtwarzania odroczonego aktywacji nie powiodło się.  
  
 Jeśli użytkownik stwierdzi, zarządzanie skażonymi komunikatami, można szybko rozwiązać podstawową przyczyną problemu. Na przykład jeśli serwer był w trybie offline jakiegoś powodu, może przynieść serwer w tryb online. Nie można szybko rozwiązać ten problem, możesz automatycznie wygenerować innej transakcji, która powiadamia obiekt żądający, która nie nastąpiła transakcji. Obiekt żądający może następnie wprowadzić transakcja wyrównująca, która cofa efekt transakcji, która została już zatwierdzona.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informuje składnik obsługi wyjątków po stronie klienta, że wszystkie usługi kolejkowania komunikatów prób dostarczenia komunikatu do serwera zostały odrzucone, a komunikat zakończył w kolejce zadania Xact utraconych po stronie klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nadejścia nowych wiadomości w kolejce utraconych zadania Xact, modelu COM + próbuje wywołać program obsługi wyjątków po stronie klienta dotyczy klasy serwera, aby dostarczyć to powiadomienie. Robi to za pośrednictwem pierwszego wywołania <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, a następnie wywoływania wersji obsługi wyjątków metody nie powiodło się w obiekcie obsługi wyjątków. Ta metoda wyjątek następnie podjąć działanie wyjątku, takie jak rejestrowanie błędu, wysyłanie wiadomości e-mail do administratora lub podejmowania działań wyrównującej po stronie klienta, (cofania efekt wcześniejszych transakcji). Metoda wyjątku zakończy się niepowodzeniem, wiadomość pozostanie w kolejce zadania Xact utraconych wiadomości.  
  
 Kolejka utraconych wiadomości zadania Xact mogą być wyświetlane w Eksploratorze Microsoft kolejki komunikatów (MSMQ).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implementacja klasy wyjątków po stronie serwera informuje, że wszystkie próby odtwarzania odroczonego aktywacji z serwerem nie powiodło się i wiadomość ma zostać przeniesione do jego końcowej kolejce nieaktywnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nadejścia nowych wiadomości w kolejce utraconych zadania Xact, modelu COM + próbuje wywołać program obsługi wyjątków po stronie serwera związane z klasy serwera, aby dostarczyć to powiadomienie. Robi to za pośrednictwem pierwszego wywołania <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, a następnie wywoływania wyjątków, obsługa wersji metody nie powiodło się w obiekcie programu obsługi wyjątków. Ta metoda wyjątek następnie podjąć działanie wyjątku, takie jak rejestrowanie błędu, wysyłanie wiadomości e-mail do administratora lub podejmowania działań wyrównującej po stronie klienta, (cofania efekt wcześniejszych transakcji). Obiekt serwera upewnić wszelkich starań, aby pomyślnie ukończyć tej transakcji. W przeciwnym razie ręcznej interwencji jest wymagana, aby ponownie przetworzyć komunikatu. Jeśli metoda wyjątku zakończy się niepowodzeniem, wiadomość zostanie przeniesiona do końcowej kolejce nieaktywnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>