<Type Name="HttpParseException" FullName="System.Web.HttpParseException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0974f67aad21574e55df3e709781fff788a84b65" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37528909" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpParseException : System.Web.HttpException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit HttpParseException extends System.Web.HttpException" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpParseException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpParseException&#xA;Inherits HttpException" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpParseException sealed : System::Web::HttpException" />
  <TypeSignature Language="F#" Value="type HttpParseException = class&#xA;    inherit HttpException" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.HttpException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Wyjątek, który jest generowany, gdy wystąpi błąd podczas analizy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpParseException> Klasa to klasa wyjątków specyficzne dla protokołu HTTP, który umożliwia informacje o wyjątku analizatora składni danych wyjściowych platformy ASP.NET. Aby uzyskać więcej informacji na temat tworzenia i obsługi wyjątków, zobacz [wyjątki](http://msdn.microsoft.com/library/f99a1d29-a2a8-47af-9707-9909f9010735).  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.HttpParseException> dostosować wygenerowane błędy podczas analizowania strony. W tym przykładzie niestandardową <xref:System.Web.UI.HtmlControls.HtmlSelect> zdefiniowano kontrolkę. Jeśli nie są określonego typu elementów podrzędnych kontrolki niestandardowej, a następnie <xref:System.Web.HttpParseException> jest zgłaszany w zgodnym z przesłoniętą <xref:System.Web.UI.HtmlControls.HtmlSelectBuilder.GetChildControlType%2A> metoda niestandardowa <xref:System.Web.UI.HtmlControls.HtmlSelectBuilder>. Do generowania wyjątków analizy, zmień element podrzędny literału `MyCustomOption` do innego ciągu.  
  
 [!code-aspx-csharp[HttpParseException#1](~/samples/snippets/csharp/VS_Snippets_CLR/HttpParseException/cs/source.aspx#1)]
 [!code-aspx-vb[HttpParseException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HttpParseException/vb/source.aspx#1)]  
  
 [!code-csharp[HttpParseException#2](~/samples/snippets/csharp/VS_Snippets_CLR/HttpParseException/cs/source.cs#2)]
 [!code-vb[HttpParseException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/HttpParseException/vb/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.HtmlControls.HtmlSelect" />
    <altmember cref="T:System.Web.UI.HtmlControls.HtmlSelectBuilder" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpParseException" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpParseException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpParseException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpParseException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpParseException" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpParseException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpParseException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpParseException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpParseException : string -&gt; System.Web.HttpParseException" Usage="new System.Web.HttpParseException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat wyjątku, aby określić, gdy wystąpi błąd.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpParseException" /> klasy przy użyciu określonego komunikatu o błędzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Web.HttpException.%23ctor%2A> konstruktora.  Na przykład kompletny kod działa, zobacz <xref:System.Web.HttpParseException> temat.  
  
 [!code-csharp[HttpParseException#3](~/samples/snippets/csharp/VS_Snippets_CLR/HttpParseException/cs/source.cs#3)]
 [!code-vb[HttpParseException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/HttpParseException/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpParseException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpParseException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpParseException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpParseException : string * Exception -&gt; System.Web.HttpParseException" Usage="new System.Web.HttpParseException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat wyjątku, aby określić, gdy wystąpi błąd.</param>
        <param name="innerException">Wyjątek, który jest przyczyną bieżącego wyjątku. Jeśli <c>innerException</c> parametr nie jest <see langword="null" />, bieżący wyjątek jest zgłaszany w <see langword="catch" /> blok, który obsługuje wyjątek wewnętrzny.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpParseException" /> klasy przy użyciu określonego komunikatu o błędzie i odwołania do wewnętrznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpParseException (string message, Exception innerException, string virtualPath, string sourceCode, int line);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException, string virtualPath, string sourceCode, int32 line) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpParseException.#ctor(System.String,System.Exception,System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception, virtualPath As String, sourceCode As String, line As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpParseException(System::String ^ message, Exception ^ innerException, System::String ^ virtualPath, System::String ^ sourceCode, int line);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpParseException : string * Exception * string * string * int -&gt; System.Web.HttpParseException" Usage="new System.Web.HttpParseException (message, innerException, virtualPath, sourceCode, line)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="sourceCode" Type="System.String" />
        <Parameter Name="line" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat wyjątku, aby określić, gdy wystąpi błąd.</param>
        <param name="innerException">Wyjątek, który jest przyczyną bieżącego wyjątku. Jeśli <c>innerException</c> nie <see langword="null" />, bieżący wyjątek jest zgłaszany w <see langword="catch" /> blok, który obsługuje wyjątek wewnętrzny.</param>
        <param name="virtualPath">Ścieżka wirtualna, dla wyjątku.</param>
        <param name="sourceCode">Kod źródłowy jest kompilowane, gdy wystąpi wyjątek.</param>
        <param name="line">Numer wiersza w którym wyjątek wystąpił.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpParseException" /> klasy przy użyciu określonych informacji o kodzie źródłowym jest kompilowane i wierszu numer w którym wyjątek wystąpił.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpParseException.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Web.HttpParseException.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę pliku przetwarzane w sytuacji, gdy wystąpi błąd.</summary>
        <value>Ścieżka fizyczna do pliku źródłowego, który jest analizowana, gdy wystąpi błąd; w przeciwnym razie <see langword="null" />, jeśli ścieżka fizyczna <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpParseException.FileName%2A> Właściwość zwraca ścieżkę fizyczną do pliku źródłowego, w którym występuje błąd, chyba że jest ścieżka fizyczna `null`, w którym to przypadku zwraca `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="httpParseException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Zawierający dane zserializowanego obiektu dotyczące zgłaszanego wyjątku.</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> Zawierający informacje kontekstowe o źródle lub miejscu docelowym.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, ustawia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> obiektów z informacją o wyjątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpParseException.GetObjectData%2A> Metody ustawia <xref:System.Runtime.Serialization.SerializationInfo> obiekt z wszystkimi danymi obiekt wyjątku, przeznaczony dla serializacji. Podczas deserializacji wyjątek jest odtworzonych z SerializationInfo przesyłanego w strumieniu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje jak zdefiniować pochodnej serializacji <xref:System.Exception> klasę, która implementuje <xref:System.Web.HttpParseException.GetObjectData%2A> metody, która sprawia, że drobne zmiany do dwie właściwości, a następnie wywołuje klasę bazową do wykonywania serializacji. Przykład wymusza błąd dzielenie przez 0, a następnie tworzy wystąpienie klasy pochodnej <xref:System.Exception>. Kod wykonuje serializację wystąpień z plikiem, deserializuje go do nowego <xref:System.Exception>, który go zgłasza wyjątek, a następnie przechwytuje i wyświetla dane o wyjątkach.  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> Parametr <see langword="null" />.</exception>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
    <Member MemberName="Line">
      <MemberSignature Language="C#" Value="public int Line { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Line" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpParseException.Line" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Line As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Line { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Line : int" Usage="System.Web.HttpParseException.Line" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera numer wiersza przetwarzane w sytuacji, gdy wystąpi błąd.</summary>
        <value>Numer wiersza, przetwarzane w sytuacji, gdy wystąpi błąd. Ta wartość jest oparty na 1, nie oparty na 0.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParserErrors">
      <MemberSignature Language="C#" Value="public System.Web.ParserErrorCollection ParserErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.ParserErrorCollection ParserErrors" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpParseException.ParserErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParserErrors As ParserErrorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::ParserErrorCollection ^ ParserErrors { System::Web::ParserErrorCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParserErrors : System.Web.ParserErrorCollection" Usage="System.Web.HttpParseException.ParserErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.ParserErrorCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera analizator błędów dla bieżącego wyjątku.</summary>
        <value>Kolekcja błędy parsera dla bieżącego wyjątku.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VirtualPath">
      <MemberSignature Language="C#" Value="public string VirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpParseException.VirtualPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ VirtualPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPath : string" Usage="System.Web.HttpParseException.VirtualPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ścieżkę wirtualną do pliku źródłowego, który wygenerował błąd.</summary>
        <value>Ścieżka wirtualna pliku źródłowego, który wygenerował błąd.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>