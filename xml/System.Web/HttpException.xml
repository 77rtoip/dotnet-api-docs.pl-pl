<Type Name="HttpException" FullName="System.Web.HttpException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7905d3d848180d81c3583ba77b11bbeac228d644" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36574361" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpException : System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit HttpException extends System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpException" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpException&#xA;Inherits ExternalException" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpException : System::Runtime::InteropServices::ExternalException" />
  <TypeSignature Language="F#" Value="type HttpException = class&#xA;    inherit ExternalException" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.InteropServices.ExternalException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>W tym artykule opisano wyjątek, który wystąpił podczas przetwarzania żądania HTTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpException> Klasa jest klasą wyjątków specyficzne dla protokołu HTTP, która umożliwia platformę ASP.NET do generowania informacji o wyjątku. Aby uzyskać więcej informacji na temat zgłaszanie i obsługa wyjątków, zobacz [wyjątki](http://msdn.microsoft.com/library/f99a1d29-a2a8-47af-9707-9909f9010735).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.HttpException> klasy zgłaszanie wyjątków dostosowane. `Button_Click` Metoda określa, który przycisk został kliknięty, a następnie wywołuje albo `CheckNumber` lub `CheckBoolean` metody. Jeśli użytkownik wprowadził wartość w polu tekstowym nie odpowiada na oczekiwany typ <xref:System.Web.HttpException> wyjątek nie zostanie utworzona i zgłoszony niestandardowy komunikat na podstawie typu błędu.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException/cs/httpexceptioncs.aspx#1)]
 [!code-aspx-vb[HttpException#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException/vb/httpexceptionvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpException" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpException" /> klasy i tworzy pustą <see cref="T:System.Web.HttpException" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas obsługi wyjątków, może być przydatne do przechwytywania szereg powiązanych wyjątków z zewnętrznym zgłaszanego wyjątku w odpowiedzi na wyjątek wewnętrzny.  
  
 Odwołanie do wyjątek wewnętrzny, który spowodował wyjątek zewnętrzny jest dostępny z <xref:System.Exception.InnerException%2A> właściwości Wyjątek zewnętrzny. Ten mechanizm zachowuje przez wcześniejszych wyjątki, łącznie oryginalnego wyjątki podczas pozwala na tworzenie bardziej zrozumiałej wyjątki zewnętrzne informacje o błędzie. Aby uzyskać więcej informacji, zobacz <xref:System.Exception.InnerException%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Web.HttpException.%23ctor%2A> konstruktora <xref:System.Web.HttpException> klasy. `CheckNumber` Metoda przyjmuje wartość wprowadzonych przez użytkownika za pomocą pola tekstowego i sprawdza, czy jest liczbą całkowitą. Jeśli wartość nie jest liczbą całkowitą, jest zgłaszany wyjątek, a następnie nowy <xref:System.Web.HttpException> obiekt jest tworzony i zgłoszony. Jest wyjątek w `Button_Click` obsługi zdarzeń i komunikat o błędzie jest wyświetlany w przeglądarce.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException_Constructor1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor1/CS/httpexception_constructor1.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor1/VB/httpexception_constructor1.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : string -&gt; System.Web.HttpException" Usage="new System.Web.HttpException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wyświetlony komunikat o błędzie do klienta podczas wyjątku.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpException" /> przy użyciu dostarczonego komunikat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Web.HttpException.%23ctor%2A> konstruktora <xref:System.Web.HttpException> klasy. <xref:System.Web.HttpException> Jest generowany, jeśli użytkownik wprowadził wartość wynosi 0.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[Classic HttpException.HttpException1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpException.HttpException1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpException.HttpException1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpException.HttpException1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (httpCode As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(int httpCode, System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : int * string -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (httpCode, message)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="httpCode">Kod stanu odpowiedzi HTTP wysyłane do klienta odpowiadający tego błędu.</param>
        <param name="message">Wyświetlony komunikat o błędzie do klienta podczas wyjątku.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpException" /> przy użyciu kodu stanu odpowiedzi HTTP i komunikat o błędzie.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Zawierający dane zserializowanego obiektu dotyczące zgłaszanego wyjątku.</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> Przechowuje informacje kontekstowe dotyczące źródła lub miejsca docelowego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpException" /> z zserializowanymi danymi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpException.%23ctor%2A> Konstruktor jest wywoływana podczas deserializacji do odtworzenia obiekt wyjątku przesyłanych przez strumień. Aby uzyskać więcej informacji, zobacz [XML i serializacji SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : string * Exception -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Wyświetlony komunikat o błędzie do klienta podczas wyjątku.</param>
        <param name="innerException">
          <see cref="P:System.Exception.InnerException" />(Jeśli istnieje), która zgłosiła bieżącego wyjątku.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpException" /> przy użyciu komunikat o błędzie i <see cref="P:System.Exception.InnerException" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas obsługi wyjątków, może być przydatne do przechwytywania szereg powiązanych wyjątków z zewnętrznym zgłaszanego wyjątku w odpowiedzi na wyjątek wewnętrzny.  
  
 Odwołanie do wyjątek wewnętrzny, który spowodował wyjątek zewnętrzny jest dostępny z <xref:System.Exception.InnerException%2A> właściwości Wyjątek zewnętrzny. Ten mechanizm zachowuje przez wcześniejszych wyjątki, łącznie oryginalnego wyjątki podczas pozwala na tworzenie bardziej zrozumiałej wyjątki zewnętrzne informacje o błędzie. Aby uzyskać więcej informacji, zobacz <xref:System.Exception.InnerException%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Web.HttpException.%23ctor%2A> konstruktora <xref:System.Web.HttpException> klasy. `CheckNumber` Metoda przyjmuje wartość wprowadzonych przez użytkownika za pomocą pola tekstowego i sprawdza, czy jest liczbą całkowitą. Jeśli wartość nie jest liczbą całkowitą, jest zgłaszany wyjątek, a następnie w bloku catch nowy <xref:System.Web.HttpException> obiekt jest tworzony i zgłoszony. Jest wyjątek w `Button_Click` obsługi zdarzeń i komunikat o błędzie jest wyświetlany w przeglądarce.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException_Constructor2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor2/CS/httpexception_constructor2.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor2/VB/httpexception_constructor2.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message, int hr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, int32 hr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, hr As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(System::String ^ message, int hr);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : string * int -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (message, hr)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="hr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Wyświetlony komunikat o błędzie do klienta podczas wyjątku.</param>
        <param name="hr">Kod wyjątku, który definiuje błąd.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpException" /> przy użyciu komunikat o błędzie i kod wyjątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Web.HttpException.%23ctor%2A> konstruktora <xref:System.Web.HttpException> klasy. <xref:System.Web.HttpException> Jest zgłaszany wyjątek, jeśli użytkownik wprowadził wartość wynosi 0.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[Classic HttpException.HttpException2 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpException.HttpException2 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpException.HttpException2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpException.HttpException2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (httpCode As Integer, message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(int httpCode, System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : int * string * Exception -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (httpCode, message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="httpCode">Kod stanu odpowiedzi HTTP wyświetlane na kliencie.</param>
        <param name="message">Wyświetlony komunikat o błędzie do klienta podczas wyjątku.</param>
        <param name="innerException">
          <see cref="P:System.Exception.InnerException" />(Jeśli istnieje), która zgłosiła bieżącego wyjątku.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpException" /> przy użyciu kod stanu odpowiedzi HTTP, komunikat o błędzie i <see cref="P:System.Exception.InnerException" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas obsługi wyjątków, może być przydatne do przechwytywania szereg powiązanych wyjątków z zewnętrznym zgłaszanego wyjątku w odpowiedzi na wyjątek wewnętrzny.  
  
 Odwołanie do wyjątek wewnętrzny, który spowodował wyjątek zewnętrzny jest dostępny z <xref:System.Exception.InnerException%2A> właściwości Wyjątek zewnętrzny. Ten mechanizm zachowuje przez wcześniejszych wyjątki, łącznie oryginalnego wyjątki podczas pozwala na tworzenie bardziej zrozumiałej wyjątki zewnętrzne informacje o błędzie. Aby uzyskać więcej informacji, zobacz <xref:System.Exception.InnerException%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Web.HttpException.%23ctor%2A> konstruktora <xref:System.Web.HttpException> klasy. `CheckNumber` Metoda przyjmuje wartość wprowadzonych przez użytkownika i sprawdza, czy jest liczbą całkowitą. Jeśli wartość nie jest liczbą całkowitą, jest zgłaszany wyjątek i następnie nowych <xref:System.Web.HttpException> tworzony jest obiekt zawierający kod stanu odpowiedzi HTTP, komunikat o wyjątku i wszelkie wyjątek wewnętrzny. Jest wyjątek w `Button_Click` są wyświetlane obsługi zdarzeń oraz komunikat o błędzie, kod błędu i wyjątek wewnętrzny.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException_Constructor3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor3/CS/httpexception_constructor3.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor3/VB/httpexception_constructor3.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message, int hr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message, int32 hr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (httpCode As Integer, message As String, hr As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(int httpCode, System::String ^ message, int hr);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : int * string * int -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (httpCode, message, hr)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="hr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="httpCode">Kod stanu odpowiedzi HTTP wyświetlane na kliencie.</param>
        <param name="message">Wyświetlony komunikat o błędzie do klienta podczas wyjątku.</param>
        <param name="hr">Kod wyjątku, który definiuje błąd.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpException" /> przy użyciu kodu stanu odpowiedzi HTTP, komunikat o błędzie i kod wyjątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Web.HttpException.%23ctor%2A> konstruktora <xref:System.Web.HttpException> klasy. Informacje o nazwę i adres e-mail użytkownika są wprowadzane przez użytkownika w polach tekstowych podana. Jeśli żadnego pola są puste, <xref:System.Web.HttpException> obiekt jest tworzony i zgłoszony. Kod błędu <xref:System.Web.HttpException> są uzyskiwane przez <xref:System.Web.HttpException.GetHttpCode%2A> — metoda i wyświetlane na stronie sieci Web.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException_Constructor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor/CS/httpexception_constructor5.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor/VB/httpexception_constructor5.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromLastError">
      <MemberSignature Language="C#" Value="public static System.Web.HttpException CreateFromLastError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpException CreateFromLastError(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.CreateFromLastError(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromLastError (message As String) As HttpException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpException ^ CreateFromLastError(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member CreateFromLastError : string -&gt; System.Web.HttpException" Usage="System.Web.HttpException.CreateFromLastError message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpException</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wyświetlony komunikat o błędzie do klienta podczas wyjątku.</param>
        <summary>Tworzy nowy <see cref="T:System.Web.HttpException" /> wyjątek oparte na kod błędu, który jest zwracany z interfejsu API Win32 <see langword="GetLastError()" /> metody.</summary>
        <returns>
          <see cref="T:System.Web.HttpException" /> Na podstawie kodu błędu, która jest zwracana z wywołania funkcji API Win32 <see langword="GetLastError()" /> metody.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetHtmlErrorMessage">
      <MemberSignature Language="C#" Value="public string GetHtmlErrorMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetHtmlErrorMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetHtmlErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHtmlErrorMessage () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetHtmlErrorMessage();" />
      <MemberSignature Language="F#" Value="member this.GetHtmlErrorMessage : unit -&gt; string" Usage="httpException.GetHtmlErrorMessage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera komunikat o błędzie HTML do zwrócenia do klienta.</summary>
        <returns>Komunikat o błędzie HTML.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetHttpCode">
      <MemberSignature Language="C#" Value="public int GetHttpCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHttpCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetHttpCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHttpCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHttpCode();" />
      <MemberSignature Language="F#" Value="member this.GetHttpCode : unit -&gt; int" Usage="httpException.GetHttpCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kod stanu odpowiedzi HTTP do zwrócenia do klienta.</summary>
        <returns>Niezerowy kod HTTP reprezentujący wyjątek lub <see cref="P:System.Exception.InnerException" /> kod; w przeciwnym razie kod stanu odpowiedzi HTTP: 500.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku kodu zera HTTP, jest zwracana. W przeciwnym razie <xref:System.Exception.InnerException%2A> zwrócony kod. Jeśli żadna <xref:System.Exception.InnerException%2A> kodu ani kod HTTP inną niż zero nie jest dostępny, zwrócony kod stanu odpowiedzi HTTP 500. Aby uzyskać więcej informacji na kody stanu odpowiedzi HTTP, zobacz definicje kod stanu protokołu HTTP - HTTP/1.1 na świecie [witryny sieci Web szerokiej sieci Web konsorcjum W3C](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="httpException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Zawierający dane zserializowanego obiektu dotyczące zgłaszanego wyjątku.</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> Przechowuje informacje kontekstowe dotyczące źródła lub miejsca docelowego.</param>
        <summary>Pobiera informacje o wyjątku i dodaje go do <see cref="T:System.Runtime.Serialization.SerializationInfo" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpException.GetObjectData%2A> Metody dodaje informacje o wyjątku, aby <xref:System.Runtime.Serialization.SerializationInfo> obiekt, który jest przeznaczony dla serializacji. Podczas deserializacji, wyjątek jest odtworzonych z <xref:System.Runtime.Serialization.SerializationInfo> który są przesyłane za pośrednictwem strumienia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="WebEventCode">
      <MemberSignature Language="C#" Value="public int WebEventCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WebEventCode" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpException.WebEventCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WebEventCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WebEventCode { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WebEventCode : int" Usage="System.Web.HttpException.WebEventCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kody zdarzeń, które są skojarzone z wyjątek HTTP.</summary>
        <value>Całkowitą reprezentującą kod zdarzeń sieci Web.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>