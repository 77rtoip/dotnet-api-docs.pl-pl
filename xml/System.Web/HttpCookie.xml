<Type Name="HttpCookie" FullName="System.Web.HttpCookie">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e32991c825745b0fc263bbafa6ecb924be0ffea1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36374909" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpCookie" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpCookie extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpCookie" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpCookie" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpCookie sealed" />
  <TypeSignature Language="F#" Value="type HttpCookie = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia bezpieczny sposób tworzenia i modyfikowania poszczególnych plików cookie protokołu HTTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpCookie> Klasy pobiera i ustawia właściwości poszczególnych plików cookie. <xref:System.Web.HttpCookieCollection> Klasa dostarcza metody do przechowywania, pobieranie i zarządzania nimi wiele plików cookie.  
  
 Program ASP.NET zawiera dwie kolekcje wewnętrzne pliku cookie. Kolekcja dostępne za pośrednictwem <xref:System.Web.HttpRequest.Cookies%2A> Kolekcja <xref:System.Web.HttpRequest> obiekt zawiera pliki cookie wysłanych przez klienta do serwera w `Cookie` nagłówka. Kolekcja dostępne za pośrednictwem <xref:System.Web.HttpResponse.Cookies%2A> Kolekcja <xref:System.Web.HttpResponse> obiekt zawiera nowe pliki cookie utworzone na serwerze i przesyłane do klienta w `Set-Cookie` nagłówka odpowiedzi HTTP.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak sprawdzić, czy plik cookie o nazwie `DateCookieExample` w <xref:System.Web.HttpRequest> obiektu. Jeśli plik cookie nie zostanie znaleziony, jest tworzony i dodawany do <xref:System.Web.HttpResponse> obiektu. Plik cookie ma ustawioną wartość wygaśnie w ciągu 10 minut.  
  
 [!code-aspx-csharp[System.Web.HttpCookie#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpCookie/cs/HttpCookie.cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpCookie#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpCookie/vb/HttpCookie.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.HttpResponse" />
    <altmember cref="T:System.Web.HttpRequest" />
    <altmember cref="T:System.Web.HttpCookieCollection" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.HttpCookie" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpCookie (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpCookie.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpCookie(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpCookie : string -&gt; System.Web.HttpCookie" Usage="new System.Web.HttpCookie name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa nowego pliku cookie.</param>
        <summary>Tworzy i nazwy nowego pliku cookie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu tworzy i nazwy nowego pliku cookie.  
  
 [!code-csharp[Classic HttpCookie.HttpCookie Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.HttpCookie Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.HttpCookie Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.HttpCookie Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpCookie (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpCookie.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpCookie(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpCookie : string * string -&gt; System.Web.HttpCookie" Usage="new System.Web.HttpCookie (name, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa nowego pliku cookie.</param>
        <param name="value">Wartość nowego pliku cookie.</param>
        <summary>Tworzy, nazwy i przypisuje wartość do nowego pliku cookie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu tworzy nazwy i ustawia wartość nowy plik cookie.  
  
 [!code-csharp[Classic HttpCookie.HttpCookie1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.HttpCookie1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.HttpCookie1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.HttpCookie1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Domain { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string with get, set" Usage="System.Web.HttpCookie.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domenę do skojarzenia z plikiem cookie.</summary>
        <value>Nazwa domeny do skojarzenia z plikiem cookie. Wartość domyślna to bieżącej domeny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie `Domain` atrybut ogranicza przesyłania pliku cookie klientom żądającym zasobu z tej domeny.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia domenę pliku cookie.  
  
 [!code-csharp[Classic HttpCookie.Domain Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Domain Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Domain Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Domain Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expires">
      <MemberSignature Language="C#" Value="public DateTime Expires { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Expires" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Expires" />
      <MemberSignature Language="VB.NET" Value="Public Property Expires As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Expires { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Expires : DateTime with get, set" Usage="System.Web.HttpCookie.Expires" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia datę i godzinę wygaśnięcia pliku cookie.</summary>
        <value>Godzina dnia (na kliencie), w którym wygasa plik cookie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu ustawia czas wygaśnięcia pliku cookie do 10 minut od bieżącego czasu.  
  
 [!code-csharp[Classic HttpCookie.Expires Example#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Expires Example/CS/default.aspx#2)]
 [!code-vb[Classic HttpCookie.Expires Example#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Expires Example/VB/default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKeys">
      <MemberSignature Language="C#" Value="public bool HasKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasKeys" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.HasKeys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasKeys As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasKeys { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasKeys : bool" Usage="System.Web.HttpCookie.HasKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy plik cookie ma podklucze.</summary>
        <value>
          <see langword="true" /> Jeśli plik cookie ma podklucze, w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu sprawdza, czy każdy element członkowski kolekcji plików cookie dla wielu wartości. Jeśli plik cookie <xref:System.Web.HttpCookie.HasKeys%2A> właściwość jest `true`, wskazującą, czy występują wiele wartości, w tym przykładzie kopiuje nazwy wartości w tablicy ciągów jednego i odpowiadające im wartości do innej tablicy ciągów. Na przykład sposobu tworzenia wielu wartości pliku cookie, zobacz <xref:System.Web.HttpCookie.Values%2A>.  
  
 [!code-csharp[Classic HttpCookie.HasKeys Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.HasKeys Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.HasKeys Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.HasKeys Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.NameValueCollection" />
        <altmember cref="P:System.Web.HttpCookie.Value" />
      </Docs>
    </Member>
    <Member MemberName="HttpOnly">
      <MemberSignature Language="C#" Value="public bool HttpOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HttpOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.HttpOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property HttpOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HttpOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HttpOnly : bool with get, set" Usage="System.Web.HttpCookie.HttpOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy plik cookie jest dostępny za pomocą skryptu po stronie klienta.</summary>
        <value>
          <see langword="true" /> Jeśli plik cookie ma <see langword="HttpOnly" /> atrybutu i nie może być używane za pomocą skryptu po stronie klienta; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Program Microsoft Internet Explorer w wersji 6 z dodatkiem Service Pack 1 lub nowszym obsługuje właściwości pliku cookie, <xref:System.Web.HttpCookie.HttpOnly%2A>, które mogą pomóc w zmniejszenie zagrożeń związanych skryptów między witrynami, które powodują powstanie kradzieży plików cookie. Kradzieży plików cookie mogą zawierać poufne informacje identyfikujące użytkownika do witryny, takich jak ASP.NET sesji Identyfikatora lub formularze biletu uwierzytelniania i być powtórzone przez osobę atakującą w celu udają użytkownika lub uzyskać poufne informacje. Gdy `HttpOnly` plik cookie jest odbierany przez przeglądarki zgodne, jest niedostępny do skryptu po stronie klienta.  
  
> [!CAUTION]
>  Ustawienie <xref:System.Web.HttpCookie.HttpOnly%2A> właściwości `true` nie uniemożliwia osobie atakującej dostęp do kanał sieciowy bezpośrednie uzyskiwanie dostępu do pliku cookie. Należy wziąć pod uwagę przy użyciu protokołu Secure Sockets Layer (SSL) w celu ochrony przed tym. Zabezpieczeń stacji roboczej istotne jest również jako złośliwy użytkownik może Użyj otwartego okna przeglądarki lub komputer zawierający trwałe pliki cookie można uzyskać dostępu do witryny sieci Web o tożsamości przez wiarygodnego użytkownika.  
  
 Aby uzyskać więcej informacji na ataki i jak ta właściwość może pomóc w ich ograniczania, zobacz [Podręcznik Mitigating Cross-site skryptów z plików cookie tylko HTTP](http://go.microsoft.com/fwlink/?LinkId=41580).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak napisać `HttpOnly` pliku cookie i pokazuje, jak nie jest dostępny przez klienta za pomocą języka ECMAScript.  
  
 [!code-aspx-csharp[HttpOnlyCookie#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpOnlyCookie/CS/httponlycookiecs.aspx#1)]
 [!code-aspx-vb[HttpOnlyCookie#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpOnlyCookie/vb/httponlycookievb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[string key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ key); void set(System::String ^ key, System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string with get, set" Usage="System.Web.HttpCookie.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Klucz (indeks) wartość pliku cookie.</param>
        <summary>Pobiera skrót do <see cref="P:System.Web.HttpCookie.Values" /> właściwości. Ta właściwość jest dostępne w celu zgodności z poprzednimi wersjami programu Active Server Pages (ASP).</summary>
        <value>Wartość pliku cookie.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.HttpCookie.Value" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Web.HttpCookie.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę pliku cookie.</summary>
        <value>Wartość domyślna to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), chyba że konstruktora Określa, w przeciwnym razie wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu odbiera kolekcję plików cookie przez klienta w `Cookie` nagłówka i pętlę szuka pliku cookie przy użyciu nazwy określonej kolekcji.  
  
 [!code-csharp[Classic HttpCookie.Name Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Name Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Name Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpCookie.Value" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Web.HttpCookie.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę wirtualną do przesłania z bieżącym plikiem cookie.</summary>
        <value>Ścieżka wirtualna do przesłania z plikiem cookie. Wartość domyślna to <see langword="/" />, który jest głównym serwera.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpCookie.Path%2A> Rozszerza właściwości <xref:System.Web.HttpCookie.Domain%2A> właściwości całkowicie opisujący określony adres URL, którego dotyczy pliku cookie. Na przykład w www.microsoft.com/asp http:/ adres URL, domena jest www.microsoft.com i ścieżka jest /asp.  
  
   
  
## Examples  
 Poniższy kod przykładzie <xref:System.Web.HttpCookie.Path%2A> właściwości nowy plik cookie.  
  
 [!code-csharp[Classic HttpCookie.Path Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Path Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Path Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Path Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpCookie.Domain" />
      </Docs>
    </Member>
    <Member MemberName="SameSite">
      <MemberSignature Language="C#" Value="public System.Web.SameSiteMode SameSite { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.SameSiteMode SameSite" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.SameSite" />
      <MemberSignature Language="VB.NET" Value="Public Property SameSite As SameSiteMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SameSiteMode SameSite { System::Web::SameSiteMode get(); void set(System::Web::SameSiteMode value); };" />
      <MemberSignature Language="F#" Value="member this.SameSite : System.Web.SameSiteMode with get, set" Usage="System.Web.HttpCookie.SameSite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SameSiteMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość atrybutu SameSite pliku cookie.</summary>
        <value>Jedna z wartości wyliczenia, które reprezentuje trybu wymuszania z pliku cookie. Jeśli aplikacja jest przeznaczony dla platformy .NET Framework 4.7.2 lub nowszy, wartością domyślną jest <see cref="F:System.Web.SameSiteMode.Lax" />; w przeciwnym razie wartość domyślna to <see cref="F:System.Web.SameSiteMode.None" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Secure">
      <MemberSignature Language="C#" Value="public bool Secure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Secure" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Secure" />
      <MemberSignature Language="VB.NET" Value="Public Property Secure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Secure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Secure : bool with get, set" Usage="System.Web.HttpCookie.Secure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy do przesyłania pliku cookie, przy użyciu Secure Sockets Layer (SSL)--, oznacza to, za pośrednictwem protokołu HTTPS tylko.</summary>
        <value>
          <see langword="true" /> Aby przesłać plik cookie przez połączenie SSL (HTTPS); w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby ustawić przekazywania plików cookie dla całej aplikacji przy użyciu protokołu SSL, należy włączyć ją w pliku konfiguracji aplikacji, Web.config, który znajduje się w katalogu głównym aplikacji. Aby uzyskać więcej informacji, zobacz [httpCookies — Element (schemat ustawień programu ASP.NET)](http://msdn.microsoft.com/library/74790718-bfa3-4935-bc9a-59c88797e08f). Ustaw wartości programowo przy użyciu <xref:System.Web.HttpCookie.Secure%2A> właściwości Zastąp wartości w pliku Web.config.  
  
 Podczas pracy nad poufne informacje, zdecydowanie zaleca się używania protokołu HTTPS z szyfrowaniem SSL. Protokół SSL chroni przed danych zmienianego (integralność danych), chroni tożsamości użytkownika (poufność) i gwarantuje, że dane pochodzą od oczekiwanego klienta (uwierzytelnianie). Aby uzyskać więcej informacji o zaletach szyfrowania, zobacz [usługi kryptograficzne](~/docs/standard/security/cryptographic-services.md). Aby uzyskać więcej informacji o konfigurowaniu protokołu SSL na serwerze sieci Web usług Internet Information Services (IIS), zobacz [Konfigurowanie protokołu SSL na serwerze sieci Web lub witryny sieci Web](http://go.microsoft.com/fwlink/?LinkId=38553).  
  
   
  
## Examples  
 Poniższy przykładowy kod ma akcję, jeśli plik cookie ma zostać przesłany przy użyciu protokołu SSL.  
  
 [!code-csharp[Classic HttpCookie.Secure Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Secure Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Secure Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Secure Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shareable">
      <MemberSignature Language="C#" Value="public bool Shareable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Shareable" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Shareable" />
      <MemberSignature Language="VB.NET" Value="Public Property Shareable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Shareable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Shareable : bool with get, set" Usage="System.Web.HttpCookie.Shareable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy plik cookie mogą uczestniczyć w buforowanie danych wyjściowych.</summary>
        <value>
          <see langword="true" /> Aby określić, że buforowanie danych wyjściowych nie zostanie wyłączone dla danego <see cref="T:System.Web.HttpResponse" /> zawierający co najmniej jeden wychodzące pliki cookie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli dany <xref:System.Web.HttpResponse> zawiera jeden lub więcej plików cookie wychodzące z <xref:System.Web.HttpCookie.Shareable%2A> ma ustawioną wartość `false` (wartość domyślna), dane wyjściowe buforowania będą pomijane dla odpowiedzi. Zapobiega to pliki cookie, które zawierają potencjalnie poufnych informacji w pamięci podręcznej w odpowiedzi i wysyłane do wielu klientów.  Umożliwia odpowiedzi zawierające pliki cookie można buforować, skonfiguruj zwykle buforowanie odpowiedzi, np. przy użyciu `OutputCache` dyrektywy lub MVC [OutputCache] atrybutu i wszystkich plików cookie wychodzących, aby ustawić <xref:System.Web.HttpCookie.Shareable%2A> ustawioną `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out System.Web.HttpCookie result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] class System.Web.HttpCookie&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpCookie.TryParse(System.String,System.Web.HttpCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As HttpCookie) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] System::Web::HttpCookie ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.Web.HttpCookie.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.Web.HttpCookie&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Reprezentacja ciągu pliku cookie.</param>
        <param name="result">Jeśli konwersja powiodła się, zawiera <see cref="T:System.Web.HttpCookie" /> wartość odpowiednikiem zawarte w pliku cookie <paramref name="input" />. Jeśli konwersja nie powiodła się, <paramref name="result" /> jest <see langword="null" />. Konwersja nie powiedzie się, jeśli <paramref name="input" /> parametr jest <see langword="null" /> lub puste lub jeśli nie można określić nazwę pliku cookie z <paramref name="input" />. Wartość tego parametru jest zastępowany przez metodę; parametr jest przekazywana przez odwołanie i ustawić wartości null, jak metoda została wprowadzona.</param>
        <summary>Konwertuje określoną reprezentację ciągu pliku cookie do jego <see cref="T:System.Web.HttpCookie" /> równoważne i zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="input" /> został przekonwertowany pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : string with get, set" Usage="System.Web.HttpCookie.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość pliku cookie indywidualnych.</summary>
        <value>Wartość pliku cookie. Wartość domyślna to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu określa wartość istniejący plik cookie do "abc123".  
  
 [!code-csharp[Classic HttpCookie.Value Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Value Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Value Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Value Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ Values { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Specialized.NameValueCollection" Usage="System.Web.HttpCookie.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję par klucz/wartość, które są zawarte w obiekcie pojedynczego pliku cookie.</summary>
        <value>Kolekcja wartości plików cookie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu tworzy nowy plik cookie i dodaje do niej kilka wartości. Na przykład jak wyodrębnianie wartości wielu z jednego pliku cookie, zobacz <xref:System.Web.HttpCookie.HasKeys%2A>.  
  
 [!code-csharp[Classic HttpCookie.Values Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Values Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Values Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Values Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpCookie.Value" />
      </Docs>
    </Member>
  </Members>
</Type>