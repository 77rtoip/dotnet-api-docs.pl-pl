<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c0af3086a39a9ec32e66cb3393068e7b0233d4ac" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37528493" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje kontrakt, który ASP.NET implementuje synchronicznego przetwarzania żądania HTTP sieci Web przy użyciu niestandardowych programów obsługi HTTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz tworzyć niestandardowe funkcje obsługi protokołu HTTP do przetwarzania określonych, wstępnie zdefiniowanych typów żądań HTTP w dowolnym języku zgodny z Common Language Specification (CLS). Kod wykonywalny zdefiniowane w `HttpHandler` klasy zamiast konwencjonalne stron ASP lub ASP.NET sieci Web, odpowiada na te określone żądania. Programy obsługi HTTP zapewnia sposób interakcji z niskiego poziomu żądania i odpowiedzi usługi serwera sieci Web usług IIS i udostępniają funkcje, wiele takich jak rozszerzenia ISAPI, ale prostszym modelu programowania.  
  
 Jeśli Twoje procedury obsługi będzie dostęp do wartości stanu sesji, musi on implementować <xref:System.Web.SessionState.IRequiresSessionState> interfejsu (interfejs znacznika z żadnych metod).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy inne żądanie może użyć <see cref="T:System.Web.IHttpHandler" /> wystąpienia.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Web.IHttpHandler" /> wystąpienie jest wielokrotnego użytku; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jawnie ustawić <xref:System.Web.IHttpHandler.IsReusable%2A> właściwości `true` lub `false` przez kod, należy podać zastępujący <xref:System.Web.IHttpHandler.IsReusable%2A> właściwość metody dostępu (getter).  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje dane ze strumienia wyjściowego HTTP w odpowiedzi na żądania klienta dla strony o nazwie handler.aspx cztery wiersze tekstu. Wszystkie żądania dotyczące handler.aspx są obsługiwane przez `MyHttpHandler` klasy w przestrzeni nazw `HandlerExample` są zawarte w zestawie HandlerTest.dll.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> Obiekt, który zawiera odwołania do wewnętrznych obiektów serwera (na przykład <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, i <see langword="Server" />) używane do obsługi żądań HTTP.</param>
        <summary>Umożliwia przetwarzanie żądań sieci HTTP Web przez niestandardowy <see langword="HttpHandler" /> implementującej <see cref="T:System.Web.IHttpHandler" /> interfejsu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Umieść niestandardowe `HttpHandler` możesz pisać kod w <xref:System.Web.IHttpHandler.ProcessRequest%2A> metodę wirtualną, jak pokazano w poniższym przykładzie.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje dane ze strumienia wyjściowego HTTP w odpowiedzi na żądania klienta dla strony o nazwie handler.aspx cztery wiersze tekstu. Wszystkie żądania dotyczące handler.aspx są obsługiwane przez `MyHttpHandler` klasy w przestrzeni nazw `HandlerExample` są zawarte w zestawie HandlerTest.dll.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>