<Type Name="HttpApplicationState" FullName="System.Web.HttpApplicationState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="64d5e8546f604e8cb9575861f944212b31639bf3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36374948" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpApplicationState : System.Collections.Specialized.NameObjectCollectionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpApplicationState extends System.Collections.Specialized.NameObjectCollectionBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpApplicationState" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpApplicationState&#xA;Inherits NameObjectCollectionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpApplicationState sealed : System::Collections::Specialized::NameObjectCollectionBase" />
  <TypeSignature Language="F#" Value="type HttpApplicationState = class&#xA;    inherit NameObjectCollectionBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.Specialized.NameObjectCollectionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="62607-101">Umożliwia udostępnianie danych globalnych między wiele sesji i żądań w aplikacji ASP.NET.</span>
      <span class="sxs-lookup">
        <span data-stu-id="62607-101">Enables sharing of global information across multiple sessions and requests within an ASP.NET application.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62607-102">Aplikacja ASP.NET to suma wszystkich plików, stron, programy obsługi, moduły i kod w zakresie wirtualnego katalogu i jego podkatalogach na jednym serwerze sieci Web.</span><span class="sxs-lookup"><span data-stu-id="62607-102">An ASP.NET application is the sum of all files, pages, handlers, modules, and code within the scope of a virtual directory and its subdirectories on a single Web server.</span></span>  
  
 <span data-ttu-id="62607-103">Pojedyncze wystąpienie <xref:System.Web.HttpApplicationState> klasy jest tworzony po raz pierwszy klient żąda dowolnego zasobu adresu URL z określonego katalogu wirtualnego aplikacji ASP.NET.</span><span class="sxs-lookup"><span data-stu-id="62607-103">A single instance of an <xref:System.Web.HttpApplicationState> class is created the first time a client requests any URL resource from within a particular ASP.NET application virtual directory.</span></span> <span data-ttu-id="62607-104">Oddzielne pojedyncze wystąpienie jest tworzone dla każdej aplikacji ASP.NET na serwerze sieci Web.</span><span class="sxs-lookup"><span data-stu-id="62607-104">A separate single instance is created for each ASP.NET application on a Web server.</span></span> <span data-ttu-id="62607-105">Odwołanie do każdego wystąpienia jest następnie udostępniane za pośrednictwem funkcji wewnętrznej <xref:System.Web.HttpContext.Application%2A> obiektu.</span><span class="sxs-lookup"><span data-stu-id="62607-105">A reference to each instance is then exposed via the intrinsic <xref:System.Web.HttpContext.Application%2A> object.</span></span>  
  
 <span data-ttu-id="62607-106">Stan aplikacji nie jest współużytkowana przez kolektywu serwerów sieci Web (w którym aplikacja znajduje się na wielu serwerach) lub ogrodu sieci Web (w którym aplikacja znajduje się wielu procesom na tym samym komputerze).</span><span class="sxs-lookup"><span data-stu-id="62607-106">Application state is not shared across either a Web farm (in which an application is hosted across multiple servers) or a Web garden (in which an application is hosted across multiple processes on the same computer).</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="62607-107">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="62607-107">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Web.HttpContext" />
    <altmember cref="T:System.Web.HttpApplication" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj -&gt; unit" Usage="httpApplicationState.Add (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="62607-108">Nazwa obiektu, który ma zostać dodany do kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-108">The name of the object to be added to the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="62607-109">Wartość obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-109">The value of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62607-110">Dodaje nowy obiekt do <see cref="T:System.Web.HttpApplicationState" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-110">Adds a new object to the <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-111">W poniższym przykładzie dodano dwie zmienne aplikacji o nazwie MyAppVar1 i MyAppVar2 do kolekcji aplikacji.</span><span class="sxs-lookup"><span data-stu-id="62607-111">The following example adds two application variables named MyAppVar1 and MyAppVar2 to the Application collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Add Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Add Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllKeys">
      <MemberSignature Language="C#" Value="public string[] AllKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AllKeys" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.AllKeys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllKeys As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AllKeys { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AllKeys : string[]" Usage="System.Web.HttpApplicationState.AllKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62607-112">Pobiera klucze dostępu w <see cref="T:System.Web.HttpApplicationState" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-112">Gets the access keys in the <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62607-113">Tablica ciągów <see cref="T:System.Web.HttpApplicationState" /> nazwy obiektów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-113">A string array of <see cref="T:System.Web.HttpApplicationState" /> object names.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-114">Poniższy przykład wypełnia tablicy ciągów z nazwami obiektów w kolekcji stanu aplikacji.</span><span class="sxs-lookup"><span data-stu-id="62607-114">The following example fills a string array with all the object names in the application state collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.AllKeys Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.AllKeys Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.AllKeys Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.AllKeys Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="httpApplicationState.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62607-115">Usuwa wszystkie obiekty z <see cref="T:System.Web.HttpApplicationState" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-115">Removes all objects from an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-116">Poniższy przykład powoduje usunięcie wszystkich <xref:System.Web.HttpApplicationState> zmiennych z kolekcji.</span><span class="sxs-lookup"><span data-stu-id="62607-116">The following example removes all <xref:System.Web.HttpApplicationState> variables from the collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public System.Web.HttpApplicationState Contents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpApplicationState Contents" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Contents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Contents As HttpApplicationState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpApplicationState ^ Contents { System::Web::HttpApplicationState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Contents : System.Web.HttpApplicationState" Usage="System.Web.HttpApplicationState.Contents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpApplicationState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62607-117">Pobiera odwołanie do <see cref="T:System.Web.HttpApplicationState" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-117">Gets a reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62607-118">Odwołanie do <see cref="T:System.Web.HttpApplicationState" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-118">A reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62607-119">Ta właściwość zapewnia zgodność z wcześniejszymi wersjami programu ASP.</span><span class="sxs-lookup"><span data-stu-id="62607-119">This property provides compatibility with earlier versions of ASP.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62607-120">Poniższy przykład tworzy nową <xref:System.Web.HttpApplicationState> obiekt, który umożliwia dostęp do nazwy obiektu w kolekcji stanu aplikacji.</span><span class="sxs-lookup"><span data-stu-id="62607-120">The following example creates a new <xref:System.Web.HttpApplicationState> object that is used to access the object names in the application state collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Contents Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Contents Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Contents Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Contents Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public override int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.HttpApplicationState.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62607-121">Pobiera liczbę obiektów w <see cref="T:System.Web.HttpApplicationState" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-121">Gets the number of objects in the <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62607-122">Liczba obiektów elementu w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-122">The number of item objects in the collection.</span>
          </span>
          <span data-ttu-id="62607-123">Wartość domyślna to 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-123">The default is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-124">Poniższy przykład wykonuje tylko wtedy, gdy liczba obiektów w kolekcji przekracza pięć.</span><span class="sxs-lookup"><span data-stu-id="62607-124">The following example executes only if the number of objects in the collection exceeds five.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Count Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Count Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62607-125">Pobiera <see cref="T:System.Web.HttpApplicationState" /> obiektu przez nazwę lub indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-125">Gets an <see cref="T:System.Web.HttpApplicationState" /> object by name or index.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object Get (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Get(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Get(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(int index);" />
      <MemberSignature Language="F#" Value="member this.Get : int -&gt; obj" Usage="httpApplicationState.Get index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="62607-126">Indeks obiektu stanu aplikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-126">The index of the application state object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62607-127">Pobiera <see cref="T:System.Web.HttpApplicationState" /> obiektu indeksu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-127">Gets an <see cref="T:System.Web.HttpApplicationState" /> object by numerical index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62607-128">Zawiera odwołanie do obiektu <paramref name="index" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-128">The object referenced by <paramref name="index" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-129">Poniższy przykład zwraca pierwszy obiekt (indeks = 0) z <xref:System.Web.HttpApplicationState> kolekcji wewnętrznych <xref:System.Web.HttpContext.Application%2A> obiektu i kopiuje go do nowej zmiennej obiektu.</span><span class="sxs-lookup"><span data-stu-id="62607-129">The following example returns the first object (index = 0) from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Get1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Get1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Get1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Get1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object Get (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Get(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Get : string -&gt; obj" Usage="httpApplicationState.Get name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="62607-130">Nazwa obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-130">The name of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62607-131">Pobiera <see cref="T:System.Web.HttpApplicationState" /> obiektu według nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-131">Gets an <see cref="T:System.Web.HttpApplicationState" /> object by name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62607-132">Zawiera odwołanie do obiektu <paramref name="name" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-132">The object referenced by <paramref name="name" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62607-133">Poniższy przykład zwraca obiekt o nazwie MyAppVar1 z <xref:System.Web.HttpApplicationState> kolekcji wewnętrznych <xref:System.Web.HttpContext.Application%2A> obiektu i kopiuje go do nowej zmiennej obiektu.</span><span class="sxs-lookup"><span data-stu-id="62607-133">The following example returns an object named MyAppVar1 from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.</span></span>  
  
```vb  
Dim MyObject As Object  
MyObject = Application.Get("MyAppVar1")  
```  
  
```csharp  
Object MyObject;  
MyObject = Application.Get("MyAppVar1");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public string GetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetKey(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.GetKey(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKey (index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetKey(int index);" />
      <MemberSignature Language="F#" Value="member this.GetKey : int -&gt; string" Usage="httpApplicationState.GetKey index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="62607-134">Indeks obiektu stanu aplikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-134">The index of the application state object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62607-135">Pobiera <see cref="T:System.Web.HttpApplicationState" /> nazwa obiektu przez indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-135">Gets an <see cref="T:System.Web.HttpApplicationState" /> object name by index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62607-136">Nazwa, w którym został zapisany stan aplikacji obiektu aplikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-136">The name under which the application state object was saved.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-137">Poniższy przykład zwraca nazwy wszystkich obiektów w kolekcji stanu aplikacji i przechowuje nazwy w tablicy ciągów.</span><span class="sxs-lookup"><span data-stu-id="62607-137">The following example returns the names of all the objects in the application state collection and stores the names in a string array.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.GetKey Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.GetKey Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.GetKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.GetKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62607-138">Uzyskuje dostęp do obiektu w <see cref="T:System.Web.HttpApplicationState" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-138">Gets access to an object in an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
          <span data-ttu-id="62607-139">Ta właściwość jest przeciążony się zezwolić na dostęp do obiektu według nazwy lub indeksu liczbowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-139">This property is overloaded to allow access to an object by name or numerical index.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="System.Web.HttpApplicationState.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="62607-140">Indeksu liczbowego obiektu w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-140">The numerical index of the object in the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62607-141">Pobiera jeden <see cref="T:System.Web.HttpApplicationState" /> obiektu przez indeks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-141">Gets a single <see cref="T:System.Web.HttpApplicationState" /> object by index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62607-142">Zawiera odwołanie do obiektu <paramref name="index" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-142">The object referenced by <paramref name="index" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-143">Poniższy przykład zwraca pierwszy obiekt (indeks = 0) z <xref:System.Web.HttpApplicationState> kolekcji wewnętrznych <xref:System.Web.HttpContext.Application%2A> obiektu i kopiuje go do nowej zmiennej obiektu.</span><span class="sxs-lookup"><span data-stu-id="62607-143">The following example returns the first object (index = 0) from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.this1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.this1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.this1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.this1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); void set(System::String ^ name, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Web.HttpApplicationState.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="62607-144">Nazwa obiektu w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-144">The name of the object in the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62607-145">Pobiera wartość jedną <see cref="T:System.Web.HttpApplicationState" /> obiektu według nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-145">Gets the value of a single <see cref="T:System.Web.HttpApplicationState" /> object by name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62607-146">Zawiera odwołanie do obiektu <paramref name="name" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-146">The object referenced by <paramref name="name" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-147">Poniższy przykład zwraca obiekt o nazwie `MyAppVar1` z <xref:System.Web.HttpApplicationState> kolekcji wewnętrznych <xref:System.Web.HttpContext.Application%2A> obiektu i kopiuje go do nowej zmiennej obiektu.</span><span class="sxs-lookup"><span data-stu-id="62607-147">The following example returns an object named `MyAppVar1` from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.this Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.this Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.this Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.this Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Lock" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Lock();" />
      <MemberSignature Language="F#" Value="member this.Lock : unit -&gt; unit" Usage="httpApplicationState.Lock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62607-148">Blokuje dostęp do <see cref="T:System.Web.HttpApplicationState" /> zmiennej, aby ułatwić dostęp do synchronizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-148">Locks access to an <see cref="T:System.Web.HttpApplicationState" /> variable to facilitate access synchronization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62607-149"><xref:System.Web.HttpApplicationState> Klasa wykonuje automatyczne blokowanie i odblokowywanie z <xref:System.Web.HttpApplicationState.AllKeys%2A> i <xref:System.Web.HttpApplicationState.Count%2A> właściwości i <xref:System.Web.HttpApplicationState.Add%2A>, <xref:System.Web.HttpApplicationState.Clear%2A>, <xref:System.Web.HttpApplicationState.Get%2A>, <xref:System.Web.HttpApplicationState.GetKey%2A>, <xref:System.Web.HttpApplicationState.Remove%2A>, <xref:System.Web.HttpApplicationState.RemoveAt%2A> i <xref:System.Web.HttpApplicationState.Set%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="62607-149">The <xref:System.Web.HttpApplicationState> class performs automatic locking and unlocking with the <xref:System.Web.HttpApplicationState.AllKeys%2A> and <xref:System.Web.HttpApplicationState.Count%2A> properties and the <xref:System.Web.HttpApplicationState.Add%2A>, <xref:System.Web.HttpApplicationState.Clear%2A>, <xref:System.Web.HttpApplicationState.Get%2A>, <xref:System.Web.HttpApplicationState.GetKey%2A>, <xref:System.Web.HttpApplicationState.Remove%2A>, <xref:System.Web.HttpApplicationState.RemoveAt%2A> and <xref:System.Web.HttpApplicationState.Set%2A> methods.</span></span> <span data-ttu-id="62607-150">Jednak jawnie za pomocą <xref:System.Web.HttpApplicationState.Lock%2A> i <xref:System.Web.HttpApplicationState.UnLock%2A> metody, gdy masz serii operacji może być bardziej efektywny.</span><span class="sxs-lookup"><span data-stu-id="62607-150">However, explicitly using the <xref:System.Web.HttpApplicationState.Lock%2A> and <xref:System.Web.HttpApplicationState.UnLock%2A> methods when you have a series of operations may be more efficient.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62607-151">W poniższym przykładzie użyto <xref:System.Web.HttpApplicationState.Lock%2A> — metoda i <xref:System.Web.HttpApplicationState.UnLock%2A> metodę, aby uniemożliwić zmianę wartości dwie zmienne aplikacji do sesji lokalnej zmianie ich innych sesji.</span><span class="sxs-lookup"><span data-stu-id="62607-151">The following example uses the <xref:System.Web.HttpApplicationState.Lock%2A> method and <xref:System.Web.HttpApplicationState.UnLock%2A> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpApplicationState.UnLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="httpApplicationState.Remove name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="62607-152">Nazwa obiektu, który ma zostać usunięty z kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-152">The name of the object to be removed from the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62607-153">Usuwa nazwanego obiektu z <see cref="T:System.Web.HttpApplicationState" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-153">Removes the named object from an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-154">Poniższy przykład umożliwia usunięcie jednej zmiennej stanu aplikacji z kolekcji.</span><span class="sxs-lookup"><span data-stu-id="62607-154">The following example removes one application state variable from the collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Remove Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Remove Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Remove Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Remove Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : unit -&gt; unit" Usage="httpApplicationState.RemoveAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62607-155">Usuwa wszystkie obiekty z <see cref="T:System.Web.HttpApplicationState" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-155">Removes all objects from an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62607-156"><xref:System.Web.HttpApplicationState.RemoveAll%2A> jest wywołaniem wewnętrznym do <xref:System.Web.HttpApplicationState.Clear%2A>.</span><span class="sxs-lookup"><span data-stu-id="62607-156"><xref:System.Web.HttpApplicationState.RemoveAll%2A> is an internal call to <xref:System.Web.HttpApplicationState.Clear%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62607-157">Poniższy przykład powoduje usunięcie wszystkich <xref:System.Web.HttpApplicationState> zmiennych z kolekcji.</span><span class="sxs-lookup"><span data-stu-id="62607-157">The following example removes all <xref:System.Web.HttpApplicationState> variables from the collection.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.RemoveAll Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.RemoveAll Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.RemoveAll Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.RemoveAll Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="httpApplicationState.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="62607-158">Pozycja w kolekcji element do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-158">The position in the collection of the item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62607-159">Usuwa <see cref="T:System.Web.HttpApplicationState" /> obiekt z kolekcji według indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-159">Removes an <see cref="T:System.Web.HttpApplicationState" /> object from a collection by index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-160">W poniższym przykładzie pokazano, jak wstawić dwie zmienne aplikacji do kolekcji, a następnie użyj <xref:System.Web.HttpApplicationState.RemoveAt%2A> metodę, aby usunąć pierwszej zmiennej w niestandardowej <xref:System.Web.HttpApplicationState> obiektu.</span><span class="sxs-lookup"><span data-stu-id="62607-160">The following code example demonstrates how to insert two application variables into the collection, and then use the <xref:System.Web.HttpApplicationState.RemoveAt%2A> method to remove the first variable in a custom <xref:System.Web.HttpApplicationState> object.</span></span>  
  
 [!code-aspx-csharp[HttpApplicationStateRemoveAt#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpApplicationStateRemoveAt/CS/httpapplicationstate_removeatcs.aspx#1)]
 [!code-aspx-vb[HttpApplicationStateRemoveAt#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpApplicationStateRemoveAt/VB/httpapplicationstate_removeatvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Set(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Set : string * obj -&gt; unit" Usage="httpApplicationState.Set (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="62607-161">Nazwa obiektu do zaktualizowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-161">The name of the object to be updated.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="62607-162">Zaktualizowano wartość obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-162">The updated value of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62607-163">Aktualizuje wartość obiektu w <see cref="T:System.Web.HttpApplicationState" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-163">Updates the value of an object in an <see cref="T:System.Web.HttpApplicationState" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62607-164">Poniższy przykład aktualizuje wartość istniejącej zmiennej stanu aplikacji.</span><span class="sxs-lookup"><span data-stu-id="62607-164">The following example updates the value of an existing application state variable.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Set Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Set Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Set Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Set Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticObjects">
      <MemberSignature Language="C#" Value="public System.Web.HttpStaticObjectsCollection StaticObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpStaticObjectsCollection StaticObjects" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.StaticObjects" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StaticObjects As HttpStaticObjectsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpStaticObjectsCollection ^ StaticObjects { System::Web::HttpStaticObjectsCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StaticObjects : System.Web.HttpStaticObjectsCollection" Usage="System.Web.HttpApplicationState.StaticObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpStaticObjectsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="62607-165">Pobiera wszystkie obiekty deklarowana przez <see langword="&lt;object&gt;" /> tag, którego zakres ustawiono "Aplikacji" w aplikacji ASP.NET.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-165">Gets all objects declared by an <see langword="&lt;object&gt;" /> tag where the scope is set to "Application" within the ASP.NET application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="62607-166">Kolekcja obiektów na stronie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-166">A collection of objects on the page.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62607-167">Obiekty aplikacji są zdefiniowane w pliku Global.asax wewnątrz `<object runat="server" scope="Application"> </object>` tagów.</span><span class="sxs-lookup"><span data-stu-id="62607-167">Application objects are defined in the Global.asax file inside the `<object runat="server" scope="Application"> </object>` tags.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62607-168">Poniższy przykład pobiera wszystkich obiektów aplikacji do <xref:System.Web.HttpStaticObjectsCollection> zmiennej i procedura jest wykonywana tylko wtedy, gdy liczba obiektów jest większa niż 0.</span><span class="sxs-lookup"><span data-stu-id="62607-168">The following example gets all application objects into a <xref:System.Web.HttpStaticObjectsCollection> variable and executes a routine only if the number of objects is greater than 0.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.StaticObjects Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.StaticObjects Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.StaticObjects Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.StaticObjects Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnLock">
      <MemberSignature Language="C#" Value="public void UnLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.UnLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnLock();" />
      <MemberSignature Language="F#" Value="member this.UnLock : unit -&gt; unit" Usage="httpApplicationState.UnLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="62607-169">Umożliwia odblokowanie dostępu do <see cref="T:System.Web.HttpApplicationState" /> zmiennej, aby ułatwić dostęp do synchronizacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62607-169">Unlocks access to an <see cref="T:System.Web.HttpApplicationState" /> variable to facilitate access synchronization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62607-170"><xref:System.Web.HttpApplicationState> Klasa wykonuje automatyczne blokowanie i odblokowywanie z <xref:System.Web.HttpApplicationState.AllKeys%2A> i <xref:System.Web.HttpApplicationState.Count%2A> właściwości i <xref:System.Web.HttpApplicationState.Add%2A>, <xref:System.Web.HttpApplicationState.Clear%2A>, <xref:System.Web.HttpApplicationState.Get%2A>, <xref:System.Web.HttpApplicationState.GetKey%2A>, <xref:System.Web.HttpApplicationState.Remove%2A>, <xref:System.Web.HttpApplicationState.RemoveAt%2A> i <xref:System.Web.HttpApplicationState.Set%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="62607-170">The <xref:System.Web.HttpApplicationState> class performs automatic locking and unlocking with the <xref:System.Web.HttpApplicationState.AllKeys%2A> and <xref:System.Web.HttpApplicationState.Count%2A> properties and the <xref:System.Web.HttpApplicationState.Add%2A>, <xref:System.Web.HttpApplicationState.Clear%2A>, <xref:System.Web.HttpApplicationState.Get%2A>, <xref:System.Web.HttpApplicationState.GetKey%2A>, <xref:System.Web.HttpApplicationState.Remove%2A>, <xref:System.Web.HttpApplicationState.RemoveAt%2A> and <xref:System.Web.HttpApplicationState.Set%2A> methods.</span></span> <span data-ttu-id="62607-171">Jednak jawnie za pomocą <xref:System.Web.HttpApplicationState.Lock%2A> i <xref:System.Web.HttpApplicationState.UnLock%2A> metody, gdy masz serii operacji może być bardziej efektywny.</span><span class="sxs-lookup"><span data-stu-id="62607-171">However, explicitly using the <xref:System.Web.HttpApplicationState.Lock%2A> and <xref:System.Web.HttpApplicationState.UnLock%2A> methods when you have a series of operations may be more efficient.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62607-172">W poniższym przykładzie użyto <xref:System.Web.HttpApplicationState.Lock%2A> — metoda i <xref:System.Web.HttpApplicationState.UnLock%2A> metodę, aby uniemożliwić zmianę wartości dwie zmienne aplikacji do sesji lokalnej zmianie ich innych sesji.</span><span class="sxs-lookup"><span data-stu-id="62607-172">The following example uses the <xref:System.Web.HttpApplicationState.Lock%2A> method and <xref:System.Web.HttpApplicationState.UnLock%2A> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</span></span>  
  
 [!code-csharp[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpApplicationState.Lock" />
      </Docs>
    </Member>
  </Members>
</Type>